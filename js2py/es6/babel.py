__all__ = ['babel']

# Don't look below, you will not understand this Python code :) I don't.

from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([])
@Js
def PyJs_anonymous_1_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['babel', 'require', 'babelPresetEs2015', 'exports', 'module'])
    Js('use strict')
    var.put('babel', var.get('require')(Js('babel-core')))
    var.put('babelPresetEs2015', var.get('require')(Js('babel-preset-es2015')))
    var.get('Object').put('babelPresetEs2015', var.get('babelPresetEs2015'))
    var.get('Object').put('babel', var.get('babel'))
PyJs_anonymous_1_._set_name('anonymous')
PyJs_Object_2_ = Js({'babel-core':Js(5.0),'babel-preset-es2015':Js(95.0)})
@Js
def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    @Js
    def PyJs_anonymous_4_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return JsRegExp('/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g')
    PyJs_anonymous_4_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_4_)
PyJs_anonymous_3_._set_name('anonymous')
PyJs_Object_5_ = Js({})
@Js
def PyJs_anonymous_6_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assembleStyles', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_assembleStyles_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['styles'])
        PyJs_Object_8_ = Js({'reset':Js([Js(0.0), Js(0.0)]),'bold':Js([Js(1.0), Js(22.0)]),'dim':Js([Js(2.0), Js(22.0)]),'italic':Js([Js(3.0), Js(23.0)]),'underline':Js([Js(4.0), Js(24.0)]),'inverse':Js([Js(7.0), Js(27.0)]),'hidden':Js([Js(8.0), Js(28.0)]),'strikethrough':Js([Js(9.0), Js(29.0)])})
        PyJs_Object_9_ = Js({'black':Js([Js(30.0), Js(39.0)]),'red':Js([Js(31.0), Js(39.0)]),'green':Js([Js(32.0), Js(39.0)]),'yellow':Js([Js(33.0), Js(39.0)]),'blue':Js([Js(34.0), Js(39.0)]),'magenta':Js([Js(35.0), Js(39.0)]),'cyan':Js([Js(36.0), Js(39.0)]),'white':Js([Js(37.0), Js(39.0)]),'gray':Js([Js(90.0), Js(39.0)])})
        PyJs_Object_10_ = Js({'bgBlack':Js([Js(40.0), Js(49.0)]),'bgRed':Js([Js(41.0), Js(49.0)]),'bgGreen':Js([Js(42.0), Js(49.0)]),'bgYellow':Js([Js(43.0), Js(49.0)]),'bgBlue':Js([Js(44.0), Js(49.0)]),'bgMagenta':Js([Js(45.0), Js(49.0)]),'bgCyan':Js([Js(46.0), Js(49.0)]),'bgWhite':Js([Js(47.0), Js(49.0)])})
        PyJs_Object_7_ = Js({'modifiers':PyJs_Object_8_,'colors':PyJs_Object_9_,'bgColors':PyJs_Object_10_})
        var.put('styles', PyJs_Object_7_)
        var.get('styles').get('colors').put('grey', var.get('styles').get('colors').get('gray'))
        @Js
        def PyJs_anonymous_11_(groupName, this, arguments, var=var):
            var = Scope({'this':this, 'groupName':groupName, 'arguments':arguments}, var)
            var.registers(['groupName', 'group'])
            var.put('group', var.get('styles').get(var.get('groupName')))
            @Js
            def PyJs_anonymous_12_(styleName, this, arguments, var=var):
                var = Scope({'this':this, 'styleName':styleName, 'arguments':arguments}, var)
                var.registers(['style', 'styleName'])
                var.put('style', var.get('group').get(var.get('styleName')))
                PyJs_Object_13_ = Js({'open':((Js('\x1b[')+var.get('style').get('0'))+Js('m')),'close':((Js('\x1b[')+var.get('style').get('1'))+Js('m'))})
                var.get('styles').put(var.get('styleName'), var.get('group').put(var.get('styleName'), PyJs_Object_13_))
            PyJs_anonymous_12_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('group')).callprop('forEach', PyJs_anonymous_12_)
            PyJs_Object_14_ = Js({'value':var.get('group'),'enumerable':Js(False)})
            var.get('Object').callprop('defineProperty', var.get('styles'), var.get('groupName'), PyJs_Object_14_)
        PyJs_anonymous_11_._set_name('anonymous')
        var.get('Object').callprop('keys', var.get('styles')).callprop('forEach', PyJs_anonymous_11_)
        return var.get('styles')
    PyJsHoisted_assembleStyles_.__name__ = 'assembleStyles'
    var.put('assembleStyles', PyJsHoisted_assembleStyles_)
    Js('use strict')
    pass
    PyJs_Object_15_ = Js({'enumerable':var.get('true'),'get':var.get('assembleStyles')})
    var.get('Object').callprop('defineProperty', var.get('module'), Js('exports'), PyJs_Object_15_)
PyJs_anonymous_6_._set_name('anonymous')
PyJs_Object_16_ = Js({})
@Js
def PyJs_anonymous_17_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['defs', '_esutils2', 'exports', '_jsTokens2', '_esutils', 'require', 'NEWLINE', 'module', 'BRACKET', 'JSX_TAG', '_chalk', 'getTokenType', '_interopRequireDefault', 'highlight', '_jsTokens', '_chalk2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_22_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_22_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_highlight_(text, this, arguments, var=var):
        var = Scope({'this':this, 'text':text, 'arguments':arguments}, var)
        var.registers(['text'])
        @Js
        def PyJs_anonymous_24_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_len', '_key', 'args', 'type', 'colorize'])
            #for JS loop
            var.put('_len', var.get('arguments').get('length'))
            var.put('args', var.get('Array')(var.get('_len')))
            var.put('_key', Js(0.0))
            while (var.get('_key')<var.get('_len')):
                try:
                    var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                finally:
                        (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
            var.put('type', var.get('getTokenType')(var.get('args')))
            var.put('colorize', var.get('defs').get(var.get('type')))
            if var.get('colorize'):
                @Js
                def PyJs_anonymous_25_(str, this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
                    var.registers(['str'])
                    return var.get('colorize')(var.get('str'))
                PyJs_anonymous_25_._set_name('anonymous')
                return var.get('args').get('0').callprop('split', var.get('NEWLINE')).callprop('map', PyJs_anonymous_25_).callprop('join', Js('\n'))
            else:
                return var.get('args').get('0')
        PyJs_anonymous_24_._set_name('anonymous')
        return var.get('text').callprop('replace', var.get('_jsTokens2').get('default'), PyJs_anonymous_24_)
    PyJsHoisted_highlight_.__name__ = 'highlight'
    var.put('highlight', PyJsHoisted_highlight_)
    @Js
    def PyJsHoisted_getTokenType_(match, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'match':match}, var)
        var.registers(['_match$slice', 'text', 'token', 'match', 'offset'])
        var.put('_match$slice', var.get('match').callprop('slice', (-Js(2.0))))
        var.put('offset', var.get('_match$slice').get('0'))
        var.put('text', var.get('_match$slice').get('1'))
        var.put('token', var.get('_jsTokens2').get('default').callprop('matchToToken', var.get('match')))
        if PyJsStrictEq(var.get('token').get('type'),Js('name')):
            if var.get('_esutils2').get('default').get('keyword').callprop('isReservedWordES6', var.get('token').get('value')):
                return Js('keyword')
            if (var.get('JSX_TAG').callprop('test', var.get('token').get('value')) and (PyJsStrictEq(var.get('text').get((var.get('offset')-Js(1.0))),Js('<')) or (var.get('text').callprop('substr', (var.get('offset')-Js(2.0)), Js(2.0))==Js('</')))):
                return Js('jsx_tag')
            if PyJsStrictNeq(var.get('token').get('value').get('0'),var.get('token').get('value').get('0').callprop('toLowerCase')):
                return Js('capitalized')
        if (PyJsStrictEq(var.get('token').get('type'),Js('punctuator')) and var.get('BRACKET').callprop('test', var.get('token').get('value'))):
            return Js('bracket')
        return var.get('token').get('type')
    PyJsHoisted_getTokenType_.__name__ = 'getTokenType'
    var.put('getTokenType', PyJsHoisted_getTokenType_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_18_(rawLines, lineNumber, colNumber, this, arguments, var=var):
        var = Scope({'this':this, 'lineNumber':lineNumber, 'colNumber':colNumber, 'arguments':arguments, 'rawLines':rawLines}, var)
        var.registers(['end', 'rawLines', 'linesBelow', 'lines', 'highlighted', 'start', 'colNumber', 'frame', 'lineNumber', 'maybeHighlight', 'numberMaxWidth', 'linesAbove', 'opts'])
        PyJs_Object_19_ = Js({})
        var.put('opts', (PyJs_Object_19_ if ((var.get('arguments').get('length')<=Js(3.0)) or PyJsStrictEq(var.get('arguments').get('3'),var.get('undefined'))) else var.get('arguments').get('3')))
        var.put('colNumber', var.get('Math').callprop('max', var.get('colNumber'), Js(0.0)))
        var.put('highlighted', (var.get('opts').get('highlightCode') and var.get('_chalk2').get('default').get('supportsColor')))
        @Js
        def PyJs_maybeHighlight_20_(chalkFn, string, this, arguments, var=var):
            var = Scope({'this':this, 'chalkFn':chalkFn, 'maybeHighlight':PyJs_maybeHighlight_20_, 'string':string, 'arguments':arguments}, var)
            var.registers(['chalkFn', 'string'])
            return (var.get('chalkFn')(var.get('string')) if var.get('highlighted') else var.get('string'))
        PyJs_maybeHighlight_20_._set_name('maybeHighlight')
        var.put('maybeHighlight', PyJs_maybeHighlight_20_)
        if var.get('highlighted'):
            var.put('rawLines', var.get('highlight')(var.get('rawLines')))
        var.put('linesAbove', (var.get('opts').get('linesAbove') or Js(2.0)))
        var.put('linesBelow', (var.get('opts').get('linesBelow') or Js(3.0)))
        var.put('lines', var.get('rawLines').callprop('split', var.get('NEWLINE')))
        var.put('start', var.get('Math').callprop('max', (var.get('lineNumber')-(var.get('linesAbove')+Js(1.0))), Js(0.0)))
        var.put('end', var.get('Math').callprop('min', var.get('lines').get('length'), (var.get('lineNumber')+var.get('linesBelow'))))
        if (var.get('lineNumber').neg() and var.get('colNumber').neg()):
            var.put('start', Js(0.0))
            var.put('end', var.get('lines').get('length'))
        var.put('numberMaxWidth', var.get('String')(var.get('end')).get('length'))
        @Js
        def PyJs_anonymous_21_(line, index, this, arguments, var=var):
            var = Scope({'this':this, 'index':index, 'line':line, 'arguments':arguments}, var)
            var.registers(['markerSpacing', 'index', 'markerLine', 'gutter', 'number', 'paddedNumber', 'line'])
            var.put('number', ((var.get('start')+Js(1.0))+var.get('index')))
            var.put('paddedNumber', (Js(' ')+var.get('number')).callprop('slice', (-var.get('numberMaxWidth'))))
            var.put('gutter', ((Js(' ')+var.get('paddedNumber'))+Js(' | ')))
            if PyJsStrictEq(var.get('number'),var.get('lineNumber')):
                var.put('markerLine', Js(''))
                if var.get('colNumber'):
                    var.put('markerSpacing', var.get('line').callprop('slice', Js(0.0), (var.get('colNumber')-Js(1.0))).callprop('replace', JsRegExp('/[^\\t]/g'), Js(' ')))
                    var.put('markerLine', Js([Js('\n '), var.get('maybeHighlight')(var.get('defs').get('gutter'), var.get('gutter').callprop('replace', JsRegExp('/\\d/g'), Js(' '))), var.get('markerSpacing'), var.get('maybeHighlight')(var.get('defs').get('marker'), Js('^'))]).callprop('join', Js('')))
                return Js([var.get('maybeHighlight')(var.get('defs').get('marker'), Js('>')), var.get('maybeHighlight')(var.get('defs').get('gutter'), var.get('gutter')), var.get('line'), var.get('markerLine')]).callprop('join', Js(''))
            else:
                return ((Js(' ')+var.get('maybeHighlight')(var.get('defs').get('gutter'), var.get('gutter')))+var.get('line'))
        PyJs_anonymous_21_._set_name('anonymous')
        var.put('frame', var.get('lines').callprop('slice', var.get('start'), var.get('end')).callprop('map', PyJs_anonymous_21_).callprop('join', Js('\n')))
        if var.get('highlighted'):
            return var.get('_chalk2').get('default').callprop('reset', var.get('frame'))
        else:
            return var.get('frame')
    PyJs_anonymous_18_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_18_)
    var.put('_jsTokens', var.get('require')(Js('js-tokens')))
    var.put('_jsTokens2', var.get('_interopRequireDefault')(var.get('_jsTokens')))
    var.put('_esutils', var.get('require')(Js('esutils')))
    var.put('_esutils2', var.get('_interopRequireDefault')(var.get('_esutils')))
    var.put('_chalk', var.get('require')(Js('chalk')))
    var.put('_chalk2', var.get('_interopRequireDefault')(var.get('_chalk')))
    pass
    PyJs_Object_23_ = Js({'keyword':var.get('_chalk2').get('default').get('cyan'),'capitalized':var.get('_chalk2').get('default').get('yellow'),'jsx_tag':var.get('_chalk2').get('default').get('yellow'),'punctuator':var.get('_chalk2').get('default').get('yellow'),'number':var.get('_chalk2').get('default').get('magenta'),'string':var.get('_chalk2').get('default').get('green'),'regex':var.get('_chalk2').get('default').get('magenta'),'comment':var.get('_chalk2').get('default').get('grey'),'invalid':var.get('_chalk2').get('default').get('white').get('bgRed').get('bold'),'gutter':var.get('_chalk2').get('default').get('grey'),'marker':var.get('_chalk2').get('default').get('red').get('bold')})
    var.put('defs', PyJs_Object_23_)
    var.put('NEWLINE', JsRegExp('/\\r\\n|[\\n\\r\\u2028\\u2029]/'))
    var.put('JSX_TAG', JsRegExp('/^[a-z][\\w-]*$/i'))
    var.put('BRACKET', JsRegExp('/^[()\\[\\]{}]$/'))
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_17_._set_name('anonymous')
PyJs_Object_26_ = Js({'chalk':Js(265.0),'esutils':Js(276.0),'js-tokens':Js(282.0)})
@Js
def PyJs_anonymous_27_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('require')(Js('./lib/api/node.js')))
PyJs_anonymous_27_._set_name('anonymous')
PyJs_Object_28_ = Js({'./lib/api/node.js':Js(6.0)})
@Js
def PyJs_anonymous_29_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_isFunction', '_fs', '_pipeline2', '_file', '_babelTemplate', '_buildExternalHelpers', 'transformFile', '_interopRequireDefault', '_babelTraverse', '_pipeline', 'transform', '_fs2', '_babelMessages', 'exports', '_babelTraverse2', '_interopRequireWildcard', 'Plugin', '_babelTypes', 'analyse', 'pipeline', '_util', 'util', 'module', '_optionManager2', '_isFunction2', '_config', 'transformFileSync', 'messages', '_optionManager', 'transformFromAst', 't', '_package', 'require'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_42_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_42_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_transformFileSync_(filename, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'filename':filename}, var)
        var.registers(['opts', 'filename'])
        PyJs_Object_45_ = Js({})
        var.put('opts', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_45_))
        var.get('opts').put('filename', var.get('filename'))
        return var.get('transform')(var.get('_fs2').get('default').callprop('readFileSync', var.get('filename'), Js('utf8')), var.get('opts'))
    PyJsHoisted_transformFileSync_.__name__ = 'transformFileSync'
    var.put('transformFileSync', PyJsHoisted_transformFileSync_)
    @Js
    def PyJsHoisted_transformFile_(filename, opts, callback, this, arguments, var=var):
        var = Scope({'this':this, 'callback':callback, 'arguments':arguments, 'opts':opts, 'filename':filename}, var)
        var.registers(['callback', 'opts', 'filename'])
        if PyJsComma(Js(0.0),var.get('_isFunction2').get('default'))(var.get('opts')):
            var.put('callback', var.get('opts'))
            PyJs_Object_43_ = Js({})
            var.put('opts', PyJs_Object_43_)
        var.get('opts').put('filename', var.get('filename'))
        @Js
        def PyJs_anonymous_44_(err, code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'err':err}, var)
            var.registers(['code', 'result', 'err'])
            var.put('result', PyJsComma(Js(0.0), Js(None)))
            if var.get('err').neg():
                try:
                    var.put('result', var.get('transform')(var.get('code'), var.get('opts')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_5f657272_67108312 = var.own.get('_err')
                    var.force_own_put('_err', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('err', var.get('_err'))
                    finally:
                        if PyJsHolder_5f657272_67108312 is not None:
                            var.own['_err'] = PyJsHolder_5f657272_67108312
                        else:
                            del var.own['_err']
                        del PyJsHolder_5f657272_67108312
            if var.get('err'):
                var.get('callback')(var.get('err'))
            else:
                var.get('callback')(var.get("null"), var.get('result'))
        PyJs_anonymous_44_._set_name('anonymous')
        var.get('_fs2').get('default').callprop('readFile', var.get('filename'), PyJs_anonymous_44_)
    PyJsHoisted_transformFile_.__name__ = 'transformFile'
    var.put('transformFile', PyJsHoisted_transformFile_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_41_ = Js({})
            var.put('newObj', PyJs_Object_41_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_Plugin_(alias, this, arguments, var=var):
        var = Scope({'this':this, 'alias':alias, 'arguments':arguments}, var)
        var.registers(['alias'])
        PyJsTempException = JsToPyException(var.get('Error').create(((Js('The (')+var.get('alias'))+Js(') Babel 5 plugin is being run with Babel 6.'))))
        raise PyJsTempException
    PyJsHoisted_Plugin_.__name__ = 'Plugin'
    var.put('Plugin', PyJsHoisted_Plugin_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    def PyJs_LONG_30_(var=var):
        return var.get('exports').put('OptionManager', var.get('exports').put('traverse', var.get('exports').put('types', var.get('exports').put('messages', var.get('exports').put('util', var.get('exports').put('version', var.get('exports').put('template', var.get('exports').put('buildExternalHelpers', var.get('exports').put('options', var.get('exports').put('File', var.get('undefined')))))))))))
    var.get('exports').put('transformFromAst', var.get('exports').put('transform', var.get('exports').put('analyse', var.get('exports').put('Pipeline', PyJs_LONG_30_()))))
    var.put('_file', var.get('require')(Js('../transformation/file')))
    @Js
    def PyJs_get_32_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_32_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_file')).get('default')
    PyJs_get_32_._set_name('get')
    PyJs_Object_31_ = Js({'enumerable':var.get('true'),'get':PyJs_get_32_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('File'), PyJs_Object_31_)
    var.put('_config', var.get('require')(Js('../transformation/file/options/config')))
    @Js
    def PyJs_get_34_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_34_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_config')).get('default')
    PyJs_get_34_._set_name('get')
    PyJs_Object_33_ = Js({'enumerable':var.get('true'),'get':PyJs_get_34_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('options'), PyJs_Object_33_)
    var.put('_buildExternalHelpers', var.get('require')(Js('../tools/build-external-helpers')))
    @Js
    def PyJs_get_36_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_36_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_buildExternalHelpers')).get('default')
    PyJs_get_36_._set_name('get')
    PyJs_Object_35_ = Js({'enumerable':var.get('true'),'get':PyJs_get_36_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('buildExternalHelpers'), PyJs_Object_35_)
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    @Js
    def PyJs_get_38_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_38_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_babelTemplate')).get('default')
    PyJs_get_38_._set_name('get')
    PyJs_Object_37_ = Js({'enumerable':var.get('true'),'get':PyJs_get_38_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('template'), PyJs_Object_37_)
    var.put('_package', var.get('require')(Js('../../package')))
    @Js
    def PyJs_get_40_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_40_}, var)
        var.registers([])
        return var.get('_package').get('version')
    PyJs_get_40_._set_name('get')
    PyJs_Object_39_ = Js({'enumerable':var.get('true'),'get':PyJs_get_40_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('version'), PyJs_Object_39_)
    var.get('exports').put('Plugin', var.get('Plugin'))
    var.get('exports').put('transformFile', var.get('transformFile'))
    var.get('exports').put('transformFileSync', var.get('transformFileSync'))
    var.put('_isFunction', var.get('require')(Js('lodash/isFunction')))
    var.put('_isFunction2', var.get('_interopRequireDefault')(var.get('_isFunction')))
    var.put('_fs', var.get('require')(Js('fs')))
    var.put('_fs2', var.get('_interopRequireDefault')(var.get('_fs')))
    var.put('_util', var.get('require')(Js('../util')))
    var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_babelTraverse2', var.get('_interopRequireDefault')(var.get('_babelTraverse')))
    var.put('_optionManager', var.get('require')(Js('../transformation/file/options/option-manager')))
    var.put('_optionManager2', var.get('_interopRequireDefault')(var.get('_optionManager')))
    var.put('_pipeline', var.get('require')(Js('../transformation/pipeline')))
    var.put('_pipeline2', var.get('_interopRequireDefault')(var.get('_pipeline')))
    pass
    pass
    var.get('exports').put('util', var.get('util'))
    var.get('exports').put('messages', var.get('messages'))
    var.get('exports').put('types', var.get('t'))
    var.get('exports').put('traverse', var.get('_babelTraverse2').get('default'))
    var.get('exports').put('OptionManager', var.get('_optionManager2').get('default'))
    pass
    var.get('exports').put('Pipeline', var.get('_pipeline2').get('default'))
    var.put('pipeline', var.get('_pipeline2').get('default').create())
    var.put('analyse', var.get('exports').put('analyse', var.get('pipeline').get('analyse').callprop('bind', var.get('pipeline'))))
    var.put('transform', var.get('exports').put('transform', var.get('pipeline').get('transform').callprop('bind', var.get('pipeline'))))
    var.put('transformFromAst', var.get('exports').put('transformFromAst', var.get('pipeline').get('transformFromAst').callprop('bind', var.get('pipeline'))))
    pass
    pass
PyJs_anonymous_29_._set_name('anonymous')
PyJs_Object_46_ = Js({'../../package':Js(28.0),'../tools/build-external-helpers':Js(11.0),'../transformation/file':Js(12.0),'../transformation/file/options/config':Js(16.0),'../transformation/file/options/option-manager':Js(18.0),'../transformation/pipeline':Js(23.0),'../util':Js(26.0),'babel-messages':Js(57.0),'babel-template':Js(221.0),'babel-traverse':Js(225.0),'babel-types':Js(258.0),'fs':Js(523.0),'lodash/isFunction':Js(463.0)})
@Js
def PyJs_anonymous_47_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_mergeWith', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_mergeWith2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_50_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_50_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_48_(dest, src, this, arguments, var=var):
        var = Scope({'dest':dest, 'src':src, 'this':this, 'arguments':arguments}, var)
        var.registers(['dest', 'src'])
        if (var.get('dest').neg() or var.get('src').neg()):
            return var.get('undefined')
        @Js
        def PyJs_anonymous_49_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
            var.registers(['a', '_isArray', 'b', '_iterator', 'item', 'newArray', '_i', '_ref'])
            if (var.get('b') and var.get('Array').callprop('isArray', var.get('a'))):
                var.put('newArray', var.get('b').callprop('slice', Js(0.0)))
                #for JS loop
                var.put('_iterator', var.get('a'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('item', var.get('_ref'))
                    if (var.get('newArray').callprop('indexOf', var.get('item'))<Js(0.0)):
                        var.get('newArray').callprop('push', var.get('item'))
                
                return var.get('newArray')
        PyJs_anonymous_49_._set_name('anonymous')
        return PyJsComma(Js(0.0),var.get('_mergeWith2').get('default'))(var.get('dest'), var.get('src'), PyJs_anonymous_49_)
    PyJs_anonymous_48_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_48_)
    var.put('_mergeWith', var.get('require')(Js('lodash/mergeWith')))
    var.put('_mergeWith2', var.get('_interopRequireDefault')(var.get('_mergeWith')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_47_._set_name('anonymous')
PyJs_Object_51_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'lodash/mergeWith':Js(478.0)})
@Js
def PyJs_anonymous_52_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_54_ = Js({})
            var.put('newObj', PyJs_Object_54_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_53_(ast, comments, tokens, this, arguments, var=var):
        var = Scope({'tokens':tokens, 'this':this, 'arguments':arguments, 'comments':comments, 'ast':ast}, var)
        var.registers(['tokens', 'comments', 'ast'])
        if var.get('ast'):
            if PyJsStrictEq(var.get('ast').get('type'),Js('Program')):
                return var.get('t').callprop('file', var.get('ast'), (var.get('comments') or Js([])), (var.get('tokens') or Js([])))
            else:
                if PyJsStrictEq(var.get('ast').get('type'),Js('File')):
                    return var.get('ast')
        PyJsTempException = JsToPyException(var.get('Error').create(Js('Not a valid ast?')))
        raise PyJsTempException
    PyJs_anonymous_53_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_53_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_52_._set_name('anonymous')
PyJs_Object_55_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_56_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_57_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['_module', '_typeof2', '_typeof3', 'process', 'relativeModules', '_module2', '_interopRequireDefault', '_path2', '_path'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_59_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_59_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
        var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
        @Js
        def PyJs_anonymous_58_(loc, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, 'arguments':arguments}, var)
            var.registers(['relative', 'loc', 'filename', 'relativeMod'])
            var.put('relative', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('process').callprop('cwd')))
            if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('_module2').get('default').typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_module2').get('default'))),Js('object')):
                return var.get("null")
            var.put('relativeMod', var.get('relativeModules').get(var.get('relative')))
            if var.get('relativeMod').neg():
                var.put('relativeMod', var.get('_module2').get('default').create())
                var.put('filename', var.get('_path2').get('default').callprop('join', var.get('relative'), Js('.babelrc')))
                var.get('relativeMod').put('id', var.get('filename'))
                var.get('relativeMod').put('filename', var.get('filename'))
                var.get('relativeMod').put('paths', var.get('_module2').get('default').callprop('_nodeModulePaths', var.get('relative')))
                var.get('relativeModules').put(var.get('relative'), var.get('relativeMod'))
            try:
                return var.get('_module2').get('default').callprop('_resolveFilename', var.get('loc'), var.get('relativeMod'))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_57087007 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get("null")
                finally:
                    if PyJsHolder_657272_57087007 is not None:
                        var.own['err'] = PyJsHolder_657272_57087007
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_57087007
        PyJs_anonymous_58_._set_name('anonymous')
        var.get('exports').put('default', PyJs_anonymous_58_)
        var.put('_module', var.get('require')(Js('module')))
        var.put('_module2', var.get('_interopRequireDefault')(var.get('_module')))
        var.put('_path', var.get('require')(Js('path')))
        var.put('_path2', var.get('_interopRequireDefault')(var.get('_path')))
        pass
        PyJs_Object_60_ = Js({})
        var.put('relativeModules', PyJs_Object_60_)
        var.get('module').put('exports', var.get('exports').get('default'))
    PyJs_anonymous_57_._set_name('anonymous')
    PyJs_anonymous_57_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_56_._set_name('anonymous')
PyJs_Object_61_ = Js({'_process':Js(531.0),'babel-runtime/helpers/typeof':Js(114.0),'module':Js(523.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_62_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_map', '_inherits3', '_inherits2', 'require', '_possibleConstructorReturn3', '_possibleConstructorReturn2', 'module', 'Store', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2', '_map2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_63_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_63_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_map', var.get('require')(Js('babel-runtime/core-js/map')))
    var.put('_map2', var.get('_interopRequireDefault')(var.get('_map')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
    var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
    var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
    var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
    pass
    @Js
    def PyJs_anonymous_64_(_Map, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, '_Map':_Map}, var)
        var.registers(['Store', '_Map'])
        @Js
        def PyJsHoisted_Store_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_this'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Store'))
            var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_Map').callprop('call', var.get("this"))))
            PyJs_Object_65_ = Js({})
            var.get('_this').put('dynamicData', PyJs_Object_65_)
            return var.get('_this')
        PyJsHoisted_Store_.__name__ = 'Store'
        var.put('Store', PyJsHoisted_Store_)
        PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('Store'), var.get('_Map'))
        pass
        @Js
        def PyJs_setDynamic_66_(key, fn, this, arguments, var=var):
            var = Scope({'this':this, 'setDynamic':PyJs_setDynamic_66_, 'fn':fn, 'key':key, 'arguments':arguments}, var)
            var.registers(['fn', 'key'])
            var.get("this").get('dynamicData').put(var.get('key'), var.get('fn'))
        PyJs_setDynamic_66_._set_name('setDynamic')
        var.get('Store').get('prototype').put('setDynamic', PyJs_setDynamic_66_)
        @Js
        def PyJs_get_67_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key, 'get':PyJs_get_67_}, var)
            var.registers(['key', 'val'])
            if var.get("this").callprop('has', var.get('key')):
                return var.get('_Map').get('prototype').get('get').callprop('call', var.get("this"), var.get('key'))
            else:
                if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get("this").get('dynamicData'), var.get('key')):
                    var.put('val', var.get("this").get('dynamicData').callprop(var.get('key')))
                    var.get("this").callprop('set', var.get('key'), var.get('val'))
                    return var.get('val')
        PyJs_get_67_._set_name('get')
        var.get('Store').get('prototype').put('get', PyJs_get_67_)
        return var.get('Store')
    PyJs_anonymous_64_._set_name('anonymous')
    var.put('Store', PyJs_anonymous_64_(var.get('_map2').get('default')))
    var.get('exports').put('default', var.get('Store'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_62_._set_name('anonymous')
PyJs_Object_68_ = Js({'babel-runtime/core-js/map':Js(98.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0)})
@Js
def PyJs_anonymous_69_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_each', '_babelTemplate', 'module', '_babelHelpers', 'buildGlobal', '_interopRequireDefault', 'buildVar', '_each2', '_babelTemplate2', '_babelMessages', 'exports', '_interopRequireWildcard', 'buildUmd', '_babelTypes', '_babelGenerator', 'buildHelpers', '_babelGenerator2', 'buildUmdWrapper', 'require', 'messages', 'helpers', 't'])
    @Js
    def PyJsHoisted_buildVar_(namespace, builder, this, arguments, var=var):
        var = Scope({'this':this, 'builder':builder, 'namespace':namespace, 'arguments':arguments}, var)
        var.registers(['body', 'builder', 'namespace'])
        var.put('body', Js([]))
        var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('namespace'), var.get('t').callprop('objectExpression', Js([])))])))
        var.get('builder')(var.get('body'))
        var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('namespace')))
        return var.get('t').callprop('program', var.get('body'))
    PyJsHoisted_buildVar_.__name__ = 'buildVar'
    var.put('buildVar', PyJsHoisted_buildVar_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_74_ = Js({})
            var.put('newObj', PyJs_Object_74_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_buildUmd_(namespace, builder, this, arguments, var=var):
        var = Scope({'this':this, 'builder':builder, 'namespace':namespace, 'arguments':arguments}, var)
        var.registers(['body', 'builder', 'namespace'])
        var.put('body', Js([]))
        var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('namespace'), var.get('t').callprop('identifier', Js('global')))])))
        var.get('builder')(var.get('body'))
        PyJs_Object_77_ = Js({'FACTORY_PARAMETERS':var.get('t').callprop('identifier', Js('global')),'BROWSER_ARGUMENTS':var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('root')), var.get('namespace')), var.get('t').callprop('objectExpression', Js([]))),'COMMON_ARGUMENTS':var.get('t').callprop('identifier', Js('exports')),'AMD_ARGUMENTS':var.get('t').callprop('arrayExpression', Js([var.get('t').callprop('stringLiteral', Js('exports'))])),'FACTORY_BODY':var.get('body'),'UMD_ROOT':var.get('t').callprop('identifier', Js('this'))})
        return var.get('t').callprop('program', Js([var.get('buildUmdWrapper')(PyJs_Object_77_)]))
    PyJsHoisted_buildUmd_.__name__ = 'buildUmd'
    var.put('buildUmd', PyJsHoisted_buildUmd_)
    @Js
    def PyJsHoisted_buildHelpers_(body, namespace, whitelist, this, arguments, var=var):
        var = Scope({'body':body, 'this':this, 'whitelist':whitelist, 'namespace':namespace, 'arguments':arguments}, var)
        var.registers(['body', 'whitelist', 'namespace'])
        @Js
        def PyJs_anonymous_78_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
            var.registers(['name', 'key'])
            if (var.get('whitelist') and (var.get('whitelist').callprop('indexOf', var.get('name'))<Js(0.0))):
                return var.get('undefined')
            var.put('key', var.get('t').callprop('identifier', var.get('name')))
            var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('memberExpression', var.get('namespace'), var.get('key')), var.get('helpers').callprop('get', var.get('name')))))
        PyJs_anonymous_78_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('helpers').get('list'), PyJs_anonymous_78_)
    PyJsHoisted_buildHelpers_.__name__ = 'buildHelpers'
    var.put('buildHelpers', PyJsHoisted_buildHelpers_)
    @Js
    def PyJsHoisted_buildGlobal_(namespace, builder, this, arguments, var=var):
        var = Scope({'this':this, 'builder':builder, 'namespace':namespace, 'arguments':arguments}, var)
        var.registers(['body', 'tree', 'builder', 'namespace', 'container'])
        var.put('body', Js([]))
        var.put('container', var.get('t').callprop('functionExpression', var.get("null"), Js([var.get('t').callprop('identifier', Js('global'))]), var.get('t').callprop('blockStatement', var.get('body'))))
        var.put('tree', var.get('t').callprop('program', Js([var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('container'), Js([var.get('helpers').callprop('get', Js('selfGlobal'))])))])))
        def PyJs_LONG_76_(var=var):
            return var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('namespace'), var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('global')), var.get('namespace')), var.get('t').callprop('objectExpression', Js([]))))])))
        PyJs_LONG_76_()
        var.get('builder')(var.get('body'))
        return var.get('tree')
    PyJsHoisted_buildGlobal_.__name__ = 'buildGlobal'
    var.put('buildGlobal', PyJsHoisted_buildGlobal_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_73_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_73_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_70_(whitelist, this, arguments, var=var):
        var = Scope({'this':this, 'whitelist':whitelist, 'arguments':arguments}, var)
        var.registers(['namespace', 'whitelist', 'tree', 'outputType', 'build', 'builder'])
        var.put('outputType', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js('global')))
        var.put('namespace', var.get('t').callprop('identifier', Js('babelHelpers')))
        @Js
        def PyJs_builder_71_(body, this, arguments, var=var):
            var = Scope({'body':body, 'this':this, 'builder':PyJs_builder_71_, 'arguments':arguments}, var)
            var.registers(['body'])
            return var.get('buildHelpers')(var.get('body'), var.get('namespace'), var.get('whitelist'))
        PyJs_builder_71_._set_name('builder')
        var.put('builder', PyJs_builder_71_)
        var.put('tree', PyJsComma(Js(0.0), Js(None)))
        PyJs_Object_72_ = Js({'global':var.get('buildGlobal'),'umd':var.get('buildUmd'),'var':var.get('buildVar')})
        var.put('build', PyJs_Object_72_.get(var.get('outputType')))
        if var.get('build'):
            var.put('tree', var.get('build')(var.get('namespace'), var.get('builder')))
        else:
            PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('unsupportedOutputType'), var.get('outputType'))))
            raise PyJsTempException
        return PyJsComma(Js(0.0),var.get('_babelGenerator2').get('default'))(var.get('tree')).get('code')
    PyJs_anonymous_70_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_70_)
    var.put('_babelHelpers', var.get('require')(Js('babel-helpers')))
    var.put('helpers', var.get('_interopRequireWildcard')(var.get('_babelHelpers')))
    var.put('_babelGenerator', var.get('require')(Js('babel-generator')))
    var.put('_babelGenerator2', var.get('_interopRequireDefault')(var.get('_babelGenerator')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_each', var.get('require')(Js('lodash/each')))
    var.put('_each2', var.get('_interopRequireDefault')(var.get('_each')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    def PyJs_LONG_75_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (root, factory) {\n    if (typeof define === "function" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === "object") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n'))
    var.put('buildUmdWrapper', PyJs_LONG_75_())
    pass
    pass
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_69_._set_name('anonymous')
PyJs_Object_79_ = Js({'babel-generator':Js(40.0),'babel-helpers':Js(56.0),'babel-messages':Js(57.0),'babel-template':Js(221.0),'babel-types':Js(258.0),'lodash/each':Js(443.0)})
@Js
def PyJs_anonymous_80_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_81_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['_resolve', '_store', '_sourceMap', '_shadowFunctions2', '_babelHelpers', '_logger2', '_interopRequireDefault', '_convertSourceMap', '_getIterator3', '_getIterator2', '_shadowFunctions', '_babelCodeFrame2', '_typeof2', '_typeof3', 'metadataVisitor', 'INTERNAL_PLUGINS', '_possibleConstructorReturn3', '_possibleConstructorReturn2', '_babylon', '_create2', 'errorVisitor', '_metadata', '_store2', '_assign2', 'shebangRegex', '_blockHoist', '_classCallCheck3', '_classCallCheck2', '_pluginPass2', '_sourceMap2', '_create', '_convertSourceMap2', 'process', '_babelTypes', '_babelTraverse2', '_interopRequireWildcard', '_inherits3', '_inherits2', '_pluginPass', '_assign', '_babelCodeFrame', '_babelGenerator', '_logger', '_util', '_defaults2', '_path2', '_optionManager2', '_babelTraverse', 'util', '_babelGenerator2', '_blockHoist2', '_babelHelpers2', '_defaults', '_optionManager', 't', 'File', '_resolve2', '_path'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_83_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_83_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        @Js
        def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj', 'key', 'newObj'])
            if (var.get('obj') and var.get('obj').get('__esModule')):
                return var.get('obj')
            else:
                PyJs_Object_82_ = Js({})
                var.put('newObj', PyJs_Object_82_)
                if (var.get('obj')!=var.get("null")):
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                            var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
                var.get('newObj').put('default', var.get('obj'))
                return var.get('newObj')
        PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
        var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.get('exports').put('File', var.get('undefined'))
        var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
        var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
        var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
        var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
        var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
        var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
        var.put('_assign', var.get('require')(Js('babel-runtime/core-js/object/assign')))
        var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
        var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
        var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
        var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
        var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
        var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
        var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
        var.put('_babelHelpers', var.get('require')(Js('babel-helpers')))
        var.put('_babelHelpers2', var.get('_interopRequireDefault')(var.get('_babelHelpers')))
        var.put('_metadata', var.get('require')(Js('./metadata')))
        var.put('metadataVisitor', var.get('_interopRequireWildcard')(var.get('_metadata')))
        var.put('_convertSourceMap', var.get('require')(Js('convert-source-map')))
        var.put('_convertSourceMap2', var.get('_interopRequireDefault')(var.get('_convertSourceMap')))
        var.put('_optionManager', var.get('require')(Js('./options/option-manager')))
        var.put('_optionManager2', var.get('_interopRequireDefault')(var.get('_optionManager')))
        var.put('_pluginPass', var.get('require')(Js('../plugin-pass')))
        var.put('_pluginPass2', var.get('_interopRequireDefault')(var.get('_pluginPass')))
        var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
        var.put('_babelTraverse2', var.get('_interopRequireDefault')(var.get('_babelTraverse')))
        var.put('_sourceMap', var.get('require')(Js('source-map')))
        var.put('_sourceMap2', var.get('_interopRequireDefault')(var.get('_sourceMap')))
        var.put('_babelGenerator', var.get('require')(Js('babel-generator')))
        var.put('_babelGenerator2', var.get('_interopRequireDefault')(var.get('_babelGenerator')))
        var.put('_babelCodeFrame', var.get('require')(Js('babel-code-frame')))
        var.put('_babelCodeFrame2', var.get('_interopRequireDefault')(var.get('_babelCodeFrame')))
        var.put('_defaults', var.get('require')(Js('lodash/defaults')))
        var.put('_defaults2', var.get('_interopRequireDefault')(var.get('_defaults')))
        var.put('_logger', var.get('require')(Js('./logger')))
        var.put('_logger2', var.get('_interopRequireDefault')(var.get('_logger')))
        var.put('_store', var.get('require')(Js('../../store')))
        var.put('_store2', var.get('_interopRequireDefault')(var.get('_store')))
        var.put('_babylon', var.get('require')(Js('babylon')))
        var.put('_util', var.get('require')(Js('../../util')))
        var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
        var.put('_path', var.get('require')(Js('path')))
        var.put('_path2', var.get('_interopRequireDefault')(var.get('_path')))
        var.put('_babelTypes', var.get('require')(Js('babel-types')))
        var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
        var.put('_resolve', var.get('require')(Js('../../helpers/resolve')))
        var.put('_resolve2', var.get('_interopRequireDefault')(var.get('_resolve')))
        var.put('_blockHoist', var.get('require')(Js('../internal-plugins/block-hoist')))
        var.put('_blockHoist2', var.get('_interopRequireDefault')(var.get('_blockHoist')))
        var.put('_shadowFunctions', var.get('require')(Js('../internal-plugins/shadow-functions')))
        var.put('_shadowFunctions2', var.get('_interopRequireDefault')(var.get('_shadowFunctions')))
        pass
        pass
        var.put('shebangRegex', JsRegExp('/^#!.*/'))
        var.put('INTERNAL_PLUGINS', Js([Js([var.get('_blockHoist2').get('default')]), Js([var.get('_shadowFunctions2').get('default')])]))
        @Js
        def PyJs_enter_85_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'enter':PyJs_enter_85_}, var)
            var.registers(['loc', 'state', 'path'])
            var.put('loc', var.get('path').get('node').get('loc'))
            if var.get('loc'):
                var.get('state').put('loc', var.get('loc'))
                var.get('path').callprop('stop')
        PyJs_enter_85_._set_name('enter')
        PyJs_Object_84_ = Js({'enter':PyJs_enter_85_})
        var.put('errorVisitor', PyJs_Object_84_)
        @Js
        def PyJs_anonymous_86_(_Store, this, arguments, var=var):
            var = Scope({'this':this, '_Store':_Store, 'arguments':arguments}, var)
            var.registers(['_Store', 'File'])
            @Js
            def PyJsHoisted_File_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['pipeline', '_this', 'opts'])
                PyJs_Object_87_ = Js({})
                var.put('opts', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else PyJs_Object_87_))
                var.put('pipeline', var.get('arguments').get('1'))
                PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('File'))
                var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_Store').callprop('call', var.get("this"))))
                var.get('_this').put('pipeline', var.get('pipeline'))
                var.get('_this').put('log', var.get('_logger2').get('default').create(var.get('_this'), (var.get('opts').get('filename') or Js('unknown'))))
                var.get('_this').put('opts', var.get('_this').callprop('initOptions', var.get('opts')))
                PyJs_Object_88_ = Js({'sourceType':var.get('_this').get('opts').get('sourceType'),'sourceFileName':var.get('_this').get('opts').get('filename'),'plugins':Js([])})
                var.get('_this').put('parserOpts', PyJs_Object_88_)
                var.get('_this').put('pluginVisitors', Js([]))
                var.get('_this').put('pluginPasses', Js([]))
                var.get('_this').callprop('buildPluginsForOptions', var.get('_this').get('opts'))
                if var.get('_this').get('opts').get('passPerPreset'):
                    var.get('_this').put('perPresetOpts', Js([]))
                    @Js
                    def PyJs_anonymous_89_(presetOpts, this, arguments, var=var):
                        var = Scope({'this':this, 'presetOpts':presetOpts, 'arguments':arguments}, var)
                        var.registers(['presetOpts', 'perPresetOpts'])
                        var.put('perPresetOpts', PyJsComma(Js(0.0),var.get('_assign2').get('default'))(PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get('_this').get('opts')), var.get('presetOpts')))
                        var.get('_this').get('perPresetOpts').callprop('push', var.get('perPresetOpts'))
                        var.get('_this').callprop('buildPluginsForOptions', var.get('perPresetOpts'))
                    PyJs_anonymous_89_._set_name('anonymous')
                    var.get('_this').get('opts').get('presets').callprop('forEach', PyJs_anonymous_89_)
                PyJs_Object_92_ = Js({'exported':Js([]),'specifiers':Js([])})
                PyJs_Object_91_ = Js({'imports':Js([]),'exports':PyJs_Object_92_})
                PyJs_Object_90_ = Js({'usedHelpers':Js([]),'marked':Js([]),'modules':PyJs_Object_91_})
                var.get('_this').put('metadata', PyJs_Object_90_)
                PyJs_Object_93_ = Js({})
                var.get('_this').put('dynamicImportTypes', PyJs_Object_93_)
                PyJs_Object_94_ = Js({})
                var.get('_this').put('dynamicImportIds', PyJs_Object_94_)
                var.get('_this').put('dynamicImports', Js([]))
                PyJs_Object_95_ = Js({})
                var.get('_this').put('declarations', PyJs_Object_95_)
                PyJs_Object_96_ = Js({})
                var.get('_this').put('usedHelpers', PyJs_Object_96_)
                var.get('_this').put('path', var.get("null"))
                PyJs_Object_97_ = Js({})
                var.get('_this').put('ast', PyJs_Object_97_)
                var.get('_this').put('code', Js(''))
                var.get('_this').put('shebang', Js(''))
                var.get('_this').put('hub', var.get('_babelTraverse').get('Hub').create(var.get('_this')))
                return var.get('_this')
            PyJsHoisted_File_.__name__ = 'File'
            var.put('File', PyJsHoisted_File_)
            PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('File'), var.get('_Store'))
            pass
            @Js
            def PyJs_getMetadata_98_(this, arguments, var=var):
                var = Scope({'this':this, 'getMetadata':PyJs_getMetadata_98_, 'arguments':arguments}, var)
                var.registers(['node', '_isArray', '_iterator', '_i', '_ref', 'has'])
                var.put('has', Js(False))
                #for JS loop
                var.put('_iterator', var.get("this").get('ast').get('program').get('body'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('node', var.get('_ref'))
                    if var.get('t').callprop('isModuleDeclaration', var.get('node')):
                        var.put('has', var.get('true'))
                        break
                
                if var.get('has'):
                    var.get("this").get('path').callprop('traverse', var.get('metadataVisitor'), var.get("this"))
            PyJs_getMetadata_98_._set_name('getMetadata')
            var.get('File').get('prototype').put('getMetadata', PyJs_getMetadata_98_)
            @Js
            def PyJs_initOptions_99_(opts, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'opts':opts, 'initOptions':PyJs_initOptions_99_}, var)
                var.registers(['basenameRelative', 'opts'])
                var.put('opts', var.get('_optionManager2').get('default').create(var.get("this").get('log'), var.get("this").get('pipeline')).callprop('init', var.get('opts')))
                if var.get('opts').get('inputSourceMap'):
                    var.get('opts').put('sourceMaps', var.get('true'))
                if var.get('opts').get('moduleId'):
                    var.get('opts').put('moduleIds', var.get('true'))
                var.get('opts').put('basename', var.get('_path2').get('default').callprop('basename', var.get('opts').get('filename'), var.get('_path2').get('default').callprop('extname', var.get('opts').get('filename'))))
                var.get('opts').put('ignore', var.get('util').callprop('arrayify', var.get('opts').get('ignore'), var.get('util').get('regexify')))
                if var.get('opts').get('only'):
                    var.get('opts').put('only', var.get('util').callprop('arrayify', var.get('opts').get('only'), var.get('util').get('regexify')))
                PyJs_Object_100_ = Js({'moduleRoot':var.get('opts').get('sourceRoot')})
                PyJsComma(Js(0.0),var.get('_defaults2').get('default'))(var.get('opts'), PyJs_Object_100_)
                PyJs_Object_101_ = Js({'sourceRoot':var.get('opts').get('moduleRoot')})
                PyJsComma(Js(0.0),var.get('_defaults2').get('default'))(var.get('opts'), PyJs_Object_101_)
                PyJs_Object_102_ = Js({'filenameRelative':var.get('opts').get('filename')})
                PyJsComma(Js(0.0),var.get('_defaults2').get('default'))(var.get('opts'), PyJs_Object_102_)
                var.put('basenameRelative', var.get('_path2').get('default').callprop('basename', var.get('opts').get('filenameRelative')))
                PyJs_Object_103_ = Js({'sourceFileName':var.get('basenameRelative'),'sourceMapTarget':var.get('basenameRelative')})
                PyJsComma(Js(0.0),var.get('_defaults2').get('default'))(var.get('opts'), PyJs_Object_103_)
                return var.get('opts')
            PyJs_initOptions_99_._set_name('initOptions')
            var.get('File').get('prototype').put('initOptions', PyJs_initOptions_99_)
            @Js
            def PyJs_buildPluginsForOptions_104_(opts, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'opts':opts, 'buildPluginsForOptions':PyJs_buildPluginsForOptions_104_}, var)
                var.registers(['pluginOpts', '_isArray2', 'plugin', '_i2', '_ref2', 'opts', 'plugins', 'currentPluginPasses', 'ref', 'currentPluginVisitors', '_iterator2'])
                if var.get('Array').callprop('isArray', var.get('opts').get('plugins')).neg():
                    return var.get('undefined')
                var.put('plugins', var.get('opts').get('plugins').callprop('concat', var.get('INTERNAL_PLUGINS')))
                var.put('currentPluginVisitors', Js([]))
                var.put('currentPluginPasses', Js([]))
                #for JS loop
                var.put('_iterator2', var.get('plugins'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('ref', var.get('_ref2'))
                    var.put('plugin', var.get('ref').get('0'))
                    var.put('pluginOpts', var.get('ref').get('1'))
                    var.get('currentPluginVisitors').callprop('push', var.get('plugin').get('visitor'))
                    var.get('currentPluginPasses').callprop('push', var.get('_pluginPass2').get('default').create(var.get("this"), var.get('plugin'), var.get('pluginOpts')))
                    if var.get('plugin').get('manipulateOptions'):
                        var.get('plugin').callprop('manipulateOptions', var.get('opts'), var.get("this").get('parserOpts'), var.get("this"))
                
                var.get("this").get('pluginVisitors').callprop('push', var.get('currentPluginVisitors'))
                var.get("this").get('pluginPasses').callprop('push', var.get('currentPluginPasses'))
            PyJs_buildPluginsForOptions_104_._set_name('buildPluginsForOptions')
            var.get('File').get('prototype').put('buildPluginsForOptions', PyJs_buildPluginsForOptions_104_)
            @Js
            def PyJs_getModuleName_105_(this, arguments, var=var):
                var = Scope({'this':this, 'getModuleName':PyJs_getModuleName_105_, 'arguments':arguments}, var)
                var.registers(['moduleName', 'sourceRootRegEx', 'opts', 'filenameRelative'])
                var.put('opts', var.get("this").get('opts'))
                if var.get('opts').get('moduleIds').neg():
                    return var.get("null")
                if ((var.get('opts').get('moduleId')!=var.get("null")) and var.get('opts').get('getModuleId').neg()):
                    return var.get('opts').get('moduleId')
                var.put('filenameRelative', var.get('opts').get('filenameRelative'))
                var.put('moduleName', Js(''))
                if (var.get('opts').get('moduleRoot')!=var.get("null")):
                    var.put('moduleName', (var.get('opts').get('moduleRoot')+Js('/')))
                if var.get('opts').get('filenameRelative').neg():
                    return (var.get('moduleName')+var.get('opts').get('filename').callprop('replace', JsRegExp('/^\\//'), Js('')))
                if (var.get('opts').get('sourceRoot')!=var.get("null")):
                    var.put('sourceRootRegEx', var.get('RegExp').create(((Js('^')+var.get('opts').get('sourceRoot'))+Js('/?'))))
                    var.put('filenameRelative', var.get('filenameRelative').callprop('replace', var.get('sourceRootRegEx'), Js('')))
                var.put('filenameRelative', var.get('filenameRelative').callprop('replace', JsRegExp('/\\.(\\w*?)$/'), Js('')))
                var.put('moduleName', var.get('filenameRelative'), '+')
                var.put('moduleName', var.get('moduleName').callprop('replace', JsRegExp('/\\\\/g'), Js('/')))
                if var.get('opts').get('getModuleId'):
                    return (var.get('opts').callprop('getModuleId', var.get('moduleName')) or var.get('moduleName'))
                else:
                    return var.get('moduleName')
            PyJs_getModuleName_105_._set_name('getModuleName')
            var.get('File').get('prototype').put('getModuleName', PyJs_getModuleName_105_)
            @Js
            def PyJs_resolveModuleSource_106_(source, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'resolveModuleSource':PyJs_resolveModuleSource_106_, 'arguments':arguments}, var)
                var.registers(['resolveModuleSource', 'source'])
                var.put('resolveModuleSource', var.get("this").get('opts').get('resolveModuleSource'))
                if var.get('resolveModuleSource'):
                    var.put('source', var.get('resolveModuleSource')(var.get('source'), var.get("this").get('opts').get('filename')))
                return var.get('source')
            PyJs_resolveModuleSource_106_._set_name('resolveModuleSource')
            var.get('File').get('prototype').put('resolveModuleSource', PyJs_resolveModuleSource_106_)
            @Js
            def PyJs_addImport_107_(source, imported, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'imported':imported, 'arguments':arguments, 'addImport':PyJs_addImport_107_}, var)
                var.registers(['specifiers', 'imported', 'name', 'alias', 'source', 'declar', 'id'])
                var.put('name', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else var.get('imported')))
                var.put('alias', ((var.get('source')+Js(':'))+var.get('imported')))
                var.put('id', var.get("this").get('dynamicImportIds').get(var.get('alias')))
                if var.get('id').neg():
                    var.put('source', var.get("this").callprop('resolveModuleSource', var.get('source')))
                    var.put('id', var.get("this").get('dynamicImportIds').put(var.get('alias'), var.get("this").get('scope').callprop('generateUidIdentifier', var.get('name'))))
                    var.put('specifiers', Js([]))
                    if PyJsStrictEq(var.get('imported'),Js('*')):
                        var.get('specifiers').callprop('push', var.get('t').callprop('importNamespaceSpecifier', var.get('id')))
                    else:
                        if PyJsStrictEq(var.get('imported'),Js('default')):
                            var.get('specifiers').callprop('push', var.get('t').callprop('importDefaultSpecifier', var.get('id')))
                        else:
                            var.get('specifiers').callprop('push', var.get('t').callprop('importSpecifier', var.get('id'), var.get('t').callprop('identifier', var.get('imported'))))
                    var.put('declar', var.get('t').callprop('importDeclaration', var.get('specifiers'), var.get('t').callprop('stringLiteral', var.get('source'))))
                    var.get('declar').put('_blockHoist', Js(3.0))
                    var.get("this").get('path').callprop('unshiftContainer', Js('body'), var.get('declar'))
                return var.get('id')
            PyJs_addImport_107_._set_name('addImport')
            var.get('File').get('prototype').put('addImport', PyJs_addImport_107_)
            @Js
            def PyJs_addHelper_108_(name, this, arguments, var=var):
                var = Scope({'this':this, 'addHelper':PyJs_addHelper_108_, 'name':name, 'arguments':arguments}, var)
                var.registers(['uid', 'generator', 'res', 'declar', 'runtime', 'ref', 'name'])
                var.put('declar', var.get("this").get('declarations').get(var.get('name')))
                if var.get('declar'):
                    return var.get('declar')
                if var.get("this").get('usedHelpers').get(var.get('name')).neg():
                    var.get("this").get('metadata').get('usedHelpers').callprop('push', var.get('name'))
                    var.get("this").get('usedHelpers').put(var.get('name'), var.get('true'))
                var.put('generator', var.get("this").callprop('get', Js('helperGenerator')))
                var.put('runtime', var.get("this").callprop('get', Js('helpersNamespace')))
                if var.get('generator'):
                    var.put('res', var.get('generator')(var.get('name')))
                    if var.get('res'):
                        return var.get('res')
                else:
                    if var.get('runtime'):
                        return var.get('t').callprop('memberExpression', var.get('runtime'), var.get('t').callprop('identifier', var.get('name')))
                var.put('ref', PyJsComma(Js(0.0),var.get('_babelHelpers2').get('default'))(var.get('name')))
                var.put('uid', var.get("this").get('declarations').put(var.get('name'), var.get("this").get('scope').callprop('generateUidIdentifier', var.get('name'))))
                if (var.get('t').callprop('isFunctionExpression', var.get('ref')) and var.get('ref').get('id').neg()):
                    var.get('ref').get('body').put('_compact', var.get('true'))
                    var.get('ref').put('_generated', var.get('true'))
                    var.get('ref').put('id', var.get('uid'))
                    var.get('ref').put('type', Js('FunctionDeclaration'))
                    var.get("this").get('path').callprop('unshiftContainer', Js('body'), var.get('ref'))
                else:
                    var.get('ref').put('_compact', var.get('true'))
                    PyJs_Object_109_ = Js({'id':var.get('uid'),'init':var.get('ref'),'unique':var.get('true')})
                    var.get("this").get('scope').callprop('push', PyJs_Object_109_)
                return var.get('uid')
            PyJs_addHelper_108_._set_name('addHelper')
            var.get('File').get('prototype').put('addHelper', PyJs_addHelper_108_)
            @Js
            def PyJs_addTemplateObject_110_(helperName, strings, raw, this, arguments, var=var):
                var = Scope({'this':this, 'helperName':helperName, 'raw':raw, 'arguments':arguments, 'addTemplateObject':PyJs_addTemplateObject_110_, 'strings':strings}, var)
                var.registers(['name', 'helperName', 'raw', 'init', 'declar', 'stringIds', 'helperId', 'strings', 'uid'])
                @Js
                def PyJs_anonymous_111_(string, this, arguments, var=var):
                    var = Scope({'this':this, 'string':string, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('string').get('value')
                PyJs_anonymous_111_._set_name('anonymous')
                var.put('stringIds', var.get('raw').get('elements').callprop('map', PyJs_anonymous_111_))
                var.put('name', ((((var.get('helperName')+Js('_'))+var.get('raw').get('elements').get('length'))+Js('_'))+var.get('stringIds').callprop('join', Js(','))))
                var.put('declar', var.get("this").get('declarations').get(var.get('name')))
                if var.get('declar'):
                    return var.get('declar')
                var.put('uid', var.get("this").get('declarations').put(var.get('name'), var.get("this").get('scope').callprop('generateUidIdentifier', Js('templateObject'))))
                var.put('helperId', var.get("this").callprop('addHelper', var.get('helperName')))
                var.put('init', var.get('t').callprop('callExpression', var.get('helperId'), Js([var.get('strings'), var.get('raw')])))
                var.get('init').put('_compact', var.get('true'))
                PyJs_Object_112_ = Js({'id':var.get('uid'),'init':var.get('init'),'_blockHoist':Js(1.9)})
                var.get("this").get('scope').callprop('push', PyJs_Object_112_)
                return var.get('uid')
            PyJs_addTemplateObject_110_._set_name('addTemplateObject')
            var.get('File').get('prototype').put('addTemplateObject', PyJs_addTemplateObject_110_)
            @Js
            def PyJs_buildCodeFrameError_113_(node, msg, this, arguments, var=var):
                var = Scope({'node':node, 'msg':msg, 'buildCodeFrameError':PyJs_buildCodeFrameError_113_, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'loc', 'msg', 'err', 'Error'])
                var.put('Error', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else var.get('SyntaxError')))
                var.put('loc', (var.get('node') and (var.get('node').get('loc') or var.get('node').get('_loc'))))
                var.put('err', var.get('Error').create(var.get('msg')))
                if var.get('loc'):
                    var.get('err').put('loc', var.get('loc').get('start'))
                else:
                    PyJsComma(Js(0.0),var.get('_babelTraverse2').get('default'))(var.get('node'), var.get('errorVisitor'), var.get("this").get('scope'), var.get('err'))
                    var.get('err').put('message', Js(' (This is an error on an internal node. Probably an internal error'), '+')
                    if var.get('err').get('loc'):
                        var.get('err').put('message', Js('. Location has been estimated.'), '+')
                    var.get('err').put('message', Js(')'), '+')
                return var.get('err')
            PyJs_buildCodeFrameError_113_._set_name('buildCodeFrameError')
            var.get('File').get('prototype').put('buildCodeFrameError', PyJs_buildCodeFrameError_113_)
            @Js
            def PyJs_mergeSourceMap_114_(map, this, arguments, var=var):
                var = Scope({'this':this, 'map':map, 'arguments':arguments, 'mergeSourceMap':PyJs_mergeSourceMap_114_}, var)
                var.registers(['_ret', 'map', 'inputMap'])
                var.put('inputMap', var.get("this").get('opts').get('inputSourceMap'))
                if var.get('inputMap'):
                    @Js
                    def PyJs_anonymous_115_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['mergedGenerator', 'source', 'mergedMap', 'outputMapConsumer', 'inputMapConsumer'])
                        var.put('inputMapConsumer', var.get('_sourceMap2').get('default').get('SourceMapConsumer').create(var.get('inputMap')))
                        var.put('outputMapConsumer', var.get('_sourceMap2').get('default').get('SourceMapConsumer').create(var.get('map')))
                        PyJs_Object_116_ = Js({'file':var.get('inputMapConsumer').get('file'),'sourceRoot':var.get('inputMapConsumer').get('sourceRoot')})
                        var.put('mergedGenerator', var.get('_sourceMap2').get('default').get('SourceMapGenerator').create(PyJs_Object_116_))
                        var.put('source', var.get('outputMapConsumer').get('sources').get('0'))
                        @Js
                        def PyJs_anonymous_117_(mapping, this, arguments, var=var):
                            var = Scope({'this':this, 'mapping':mapping, 'arguments':arguments}, var)
                            var.registers(['generatedPosition', 'mapping'])
                            PyJs_Object_118_ = Js({'line':var.get('mapping').get('generatedLine'),'column':var.get('mapping').get('generatedColumn'),'source':var.get('source')})
                            var.put('generatedPosition', var.get('outputMapConsumer').callprop('generatedPositionFor', PyJs_Object_118_))
                            if (var.get('generatedPosition').get('column')!=var.get("null")):
                                PyJs_Object_120_ = Js({'line':var.get('mapping').get('originalLine'),'column':var.get('mapping').get('originalColumn')})
                                PyJs_Object_119_ = Js({'source':var.get('mapping').get('source'),'original':(var.get("null") if (var.get('mapping').get('source')==var.get("null")) else PyJs_Object_120_),'generated':var.get('generatedPosition')})
                                var.get('mergedGenerator').callprop('addMapping', PyJs_Object_119_)
                        PyJs_anonymous_117_._set_name('anonymous')
                        var.get('inputMapConsumer').callprop('eachMapping', PyJs_anonymous_117_)
                        var.put('mergedMap', var.get('mergedGenerator').callprop('toJSON'))
                        var.get('inputMap').put('mappings', var.get('mergedMap').get('mappings'))
                        PyJs_Object_121_ = Js({'v':var.get('inputMap')})
                        return PyJs_Object_121_
                    PyJs_anonymous_115_._set_name('anonymous')
                    var.put('_ret', PyJs_anonymous_115_())
                    if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('_ret',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_ret'))),Js('object')):
                        return var.get('_ret').get('v')
                else:
                    return var.get('map')
            PyJs_mergeSourceMap_114_._set_name('mergeSourceMap')
            var.get('File').get('prototype').put('mergeSourceMap', PyJs_mergeSourceMap_114_)
            @Js
            def PyJs_parse_122_(code, this, arguments, var=var):
                var = Scope({'this':this, 'parse':PyJs_parse_122_, 'code':code, 'arguments':arguments}, var)
                var.registers(['code', 'ast', 'parser', 'parseCode', 'dirname', 'parserOpts'])
                var.put('parseCode', var.get('_babylon').get('parse'))
                var.put('parserOpts', var.get("this").get('opts').get('parserOpts'))
                if var.get('parserOpts'):
                    PyJs_Object_123_ = Js({})
                    var.put('parserOpts', PyJsComma(Js(0.0),var.get('_assign2').get('default'))(PyJs_Object_123_, var.get("this").get('parserOpts'), var.get('parserOpts')))
                    if var.get('parserOpts').get('parser'):
                        if PyJsStrictEq(var.get('parserOpts').get('parser').typeof(),Js('string')):
                            var.put('dirname', (var.get('_path2').get('default').callprop('dirname', var.get("this").get('opts').get('filename')) or var.get('process').callprop('cwd')))
                            var.put('parser', PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('parserOpts').get('parser'), var.get('dirname')))
                            if var.get('parser'):
                                var.put('parseCode', var.get('require')(var.get('parser')).get('parse'))
                            else:
                                PyJsTempException = JsToPyException(var.get('Error').create((((Js("Couldn't find parser ")+var.get('parserOpts').get('parser'))+Js(' with "parse" method relative to directory '))+var.get('dirname'))))
                                raise PyJsTempException
                        else:
                            var.put('parseCode', var.get('parserOpts').get('parser'))
                        @Js
                        def PyJs_parse_125_(source, this, arguments, var=var):
                            var = Scope({'this':this, 'source':source, 'parse':PyJs_parse_125_, 'arguments':arguments}, var)
                            var.registers(['source'])
                            return PyJsComma(Js(0.0),var.get('_babylon').get('parse'))(var.get('source'), var.get('parserOpts'))
                        PyJs_parse_125_._set_name('parse')
                        PyJs_Object_124_ = Js({'parse':PyJs_parse_125_})
                        var.get('parserOpts').put('parser', PyJs_Object_124_)
                var.get("this").get('log').callprop('debug', Js('Parse start'))
                var.put('ast', var.get('parseCode')(var.get('code'), (var.get('parserOpts') or var.get("this").get('parserOpts'))))
                var.get("this").get('log').callprop('debug', Js('Parse stop'))
                return var.get('ast')
            PyJs_parse_122_._set_name('parse')
            var.get('File').get('prototype').put('parse', PyJs_parse_122_)
            @Js
            def PyJs__addAst_126_(ast, this, arguments, var=var):
                var = Scope({'this':this, '_addAst':PyJs__addAst_126_, 'arguments':arguments, 'ast':ast}, var)
                var.registers(['ast'])
                PyJs_Object_127_ = Js({'hub':var.get("this").get('hub'),'parentPath':var.get("null"),'parent':var.get('ast'),'container':var.get('ast'),'key':Js('program')})
                var.get("this").put('path', var.get('_babelTraverse').get('NodePath').callprop('get', PyJs_Object_127_).callprop('setContext'))
                var.get("this").put('scope', var.get("this").get('path').get('scope'))
                var.get("this").put('ast', var.get('ast'))
                var.get("this").callprop('getMetadata')
            PyJs__addAst_126_._set_name('_addAst')
            var.get('File').get('prototype').put('_addAst', PyJs__addAst_126_)
            @Js
            def PyJs_addAst_128_(ast, this, arguments, var=var):
                var = Scope({'this':this, 'addAst':PyJs_addAst_128_, 'arguments':arguments, 'ast':ast}, var)
                var.registers(['ast'])
                var.get("this").get('log').callprop('debug', Js('Start set AST'))
                var.get("this").callprop('_addAst', var.get('ast'))
                var.get("this").get('log').callprop('debug', Js('End set AST'))
            PyJs_addAst_128_._set_name('addAst')
            var.get('File').get('prototype').put('addAst', PyJs_addAst_128_)
            @Js
            def PyJs_transform_129_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'transform':PyJs_transform_129_}, var)
                var.registers(['i', 'visitor', 'pluginPasses'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get("this").get('pluginPasses').get('length')):
                    try:
                        var.put('pluginPasses', var.get("this").get('pluginPasses').get(var.get('i')))
                        var.get("this").callprop('call', Js('pre'), var.get('pluginPasses'))
                        var.get("this").get('log').callprop('debug', Js('Start transform traverse'))
                        var.put('visitor', var.get('_babelTraverse2').get('default').get('visitors').callprop('merge', var.get("this").get('pluginVisitors').get(var.get('i')), var.get('pluginPasses'), var.get("this").get('opts').get('wrapPluginVisitorMethod')))
                        PyJsComma(Js(0.0),var.get('_babelTraverse2').get('default'))(var.get("this").get('ast'), var.get('visitor'), var.get("this").get('scope'))
                        var.get("this").get('log').callprop('debug', Js('End transform traverse'))
                        var.get("this").callprop('call', Js('post'), var.get('pluginPasses'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get("this").callprop('generate')
            PyJs_transform_129_._set_name('transform')
            var.get('File').get('prototype').put('transform', PyJs_transform_129_)
            @Js
            def PyJs_wrap_130_(code, callback, this, arguments, var=var):
                var = Scope({'this':this, 'callback':callback, 'code':code, 'arguments':arguments, 'wrap':PyJs_wrap_130_}, var)
                var.registers(['loc', 'message', 'code', 'newStack', 'callback'])
                var.put('code', (var.get('code')+Js('')))
                try:
                    if var.get("this").callprop('shouldIgnore'):
                        PyJs_Object_131_ = Js({'code':var.get('code'),'ignored':var.get('true')})
                        return var.get("this").callprop('makeResult', PyJs_Object_131_)
                    else:
                        return var.get('callback')()
                except PyJsException as PyJsTempException:
                    PyJsHolder_657272_50892639 = var.own.get('err')
                    var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                    try:
                        if var.get('err').get('_babel'):
                            PyJsTempException = JsToPyException(var.get('err'))
                            raise PyJsTempException
                        else:
                            var.get('err').put('_babel', var.get('true'))
                        var.put('message', var.get('err').put('message', ((var.get("this").get('opts').get('filename')+Js(': '))+var.get('err').get('message'))))
                        var.put('loc', var.get('err').get('loc'))
                        if var.get('loc'):
                            var.get('err').put('codeFrame', PyJsComma(Js(0.0),var.get('_babelCodeFrame2').get('default'))(var.get('code'), var.get('loc').get('line'), (var.get('loc').get('column')+Js(1.0)), var.get("this").get('opts')))
                            var.put('message', (Js('\n')+var.get('err').get('codeFrame')), '+')
                        if var.get('process').get('browser'):
                            var.get('err').put('message', var.get('message'))
                        if var.get('err').get('stack'):
                            var.put('newStack', var.get('err').get('stack').callprop('replace', var.get('err').get('message'), var.get('message')))
                            var.get('err').put('stack', var.get('newStack'))
                        PyJsTempException = JsToPyException(var.get('err'))
                        raise PyJsTempException
                    finally:
                        if PyJsHolder_657272_50892639 is not None:
                            var.own['err'] = PyJsHolder_657272_50892639
                        else:
                            del var.own['err']
                        del PyJsHolder_657272_50892639
            PyJs_wrap_130_._set_name('wrap')
            var.get('File').get('prototype').put('wrap', PyJs_wrap_130_)
            @Js
            def PyJs_addCode_132_(code, this, arguments, var=var):
                var = Scope({'this':this, 'addCode':PyJs_addCode_132_, 'code':code, 'arguments':arguments}, var)
                var.registers(['code'])
                var.put('code', ((var.get('code') or Js(''))+Js('')))
                var.put('code', var.get("this").callprop('parseInputSourceMap', var.get('code')))
                var.get("this").put('code', var.get('code'))
            PyJs_addCode_132_._set_name('addCode')
            var.get('File').get('prototype').put('addCode', PyJs_addCode_132_)
            @Js
            def PyJs_parseCode_133_(this, arguments, var=var):
                var = Scope({'this':this, 'parseCode':PyJs_parseCode_133_, 'arguments':arguments}, var)
                var.registers(['ast'])
                var.get("this").callprop('parseShebang')
                var.put('ast', var.get("this").callprop('parse', var.get("this").get('code')))
                var.get("this").callprop('addAst', var.get('ast'))
            PyJs_parseCode_133_._set_name('parseCode')
            var.get('File').get('prototype').put('parseCode', PyJs_parseCode_133_)
            @Js
            def PyJs_shouldIgnore_134_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'shouldIgnore':PyJs_shouldIgnore_134_}, var)
                var.registers(['opts'])
                var.put('opts', var.get("this").get('opts'))
                return var.get('util').callprop('shouldIgnore', var.get('opts').get('filename'), var.get('opts').get('ignore'), var.get('opts').get('only'))
            PyJs_shouldIgnore_134_._set_name('shouldIgnore')
            var.get('File').get('prototype').put('shouldIgnore', PyJs_shouldIgnore_134_)
            @Js
            def PyJs_call_135_(key, pluginPasses, this, arguments, var=var):
                var = Scope({'this':this, 'call':PyJs_call_135_, 'pluginPasses':pluginPasses, 'key':key, 'arguments':arguments}, var)
                var.registers(['_isArray3', 'pluginPasses', 'plugin', '_ref3', '_i3', 'fn', 'key', 'pass', '_iterator3'])
                #for JS loop
                var.put('_iterator3', var.get('pluginPasses'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref3', var.get('_i3').get('value'))
                    var.put('pass', var.get('_ref3'))
                    var.put('plugin', var.get('pass').get('plugin'))
                    var.put('fn', var.get('plugin').get(var.get('key')))
                    if var.get('fn'):
                        var.get('fn').callprop('call', var.get('pass'), var.get("this"))
                
            PyJs_call_135_._set_name('call')
            var.get('File').get('prototype').put('call', PyJs_call_135_)
            @Js
            def PyJs_parseInputSourceMap_136_(code, this, arguments, var=var):
                var = Scope({'this':this, 'parseInputSourceMap':PyJs_parseInputSourceMap_136_, 'code':code, 'arguments':arguments}, var)
                var.registers(['code', 'inputMap', 'opts'])
                var.put('opts', var.get("this").get('opts'))
                if PyJsStrictNeq(var.get('opts').get('inputSourceMap'),Js(False)):
                    var.put('inputMap', var.get('_convertSourceMap2').get('default').callprop('fromSource', var.get('code')))
                    if var.get('inputMap'):
                        var.get('opts').put('inputSourceMap', var.get('inputMap').callprop('toObject'))
                        var.put('code', var.get('_convertSourceMap2').get('default').callprop('removeComments', var.get('code')))
                return var.get('code')
            PyJs_parseInputSourceMap_136_._set_name('parseInputSourceMap')
            var.get('File').get('prototype').put('parseInputSourceMap', PyJs_parseInputSourceMap_136_)
            @Js
            def PyJs_parseShebang_137_(this, arguments, var=var):
                var = Scope({'this':this, 'parseShebang':PyJs_parseShebang_137_, 'arguments':arguments}, var)
                var.registers(['shebangMatch'])
                var.put('shebangMatch', var.get('shebangRegex').callprop('exec', var.get("this").get('code')))
                if var.get('shebangMatch'):
                    var.get("this").put('shebang', var.get('shebangMatch').get('0'))
                    var.get("this").put('code', var.get("this").get('code').callprop('replace', var.get('shebangRegex'), Js('')))
            PyJs_parseShebang_137_._set_name('parseShebang')
            var.get('File').get('prototype').put('parseShebang', PyJs_parseShebang_137_)
            @Js
            def PyJs_makeResult_138_(_ref4, this, arguments, var=var):
                var = Scope({'this':this, 'makeResult':PyJs_makeResult_138_, '_ref4':_ref4, 'arguments':arguments}, var)
                var.registers(['ignored', 'code', 'map', '_ref4', 'ast', 'result'])
                var.put('code', var.get('_ref4').get('code'))
                var.put('map', var.get('_ref4').get('map'))
                var.put('ast', var.get('_ref4').get('ast'))
                var.put('ignored', var.get('_ref4').get('ignored'))
                PyJs_Object_139_ = Js({'metadata':var.get("null"),'options':var.get("this").get('opts'),'ignored':var.get('ignored').neg().neg(),'code':var.get("null"),'ast':var.get("null"),'map':(var.get('map') or var.get("null"))})
                var.put('result', PyJs_Object_139_)
                if var.get("this").get('opts').get('code'):
                    var.get('result').put('code', var.get('code'))
                if var.get("this").get('opts').get('ast'):
                    var.get('result').put('ast', var.get('ast'))
                if var.get("this").get('opts').get('metadata'):
                    var.get('result').put('metadata', var.get("this").get('metadata'))
                return var.get('result')
            PyJs_makeResult_138_._set_name('makeResult')
            var.get('File').get('prototype').put('makeResult', PyJs_makeResult_138_)
            @Js
            def PyJs_generate_140_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'generate':PyJs_generate_140_}, var)
                var.registers(['_result', 'generator', 'ast', 'result', 'dirname', 'gen', 'opts'])
                var.put('opts', var.get("this").get('opts'))
                var.put('ast', var.get("this").get('ast'))
                PyJs_Object_141_ = Js({'ast':var.get('ast')})
                var.put('result', PyJs_Object_141_)
                if var.get('opts').get('code').neg():
                    return var.get("this").callprop('makeResult', var.get('result'))
                var.put('gen', var.get('_babelGenerator2').get('default'))
                if var.get('opts').get('generatorOpts').get('generator'):
                    var.put('gen', var.get('opts').get('generatorOpts').get('generator'))
                    if PyJsStrictEq(var.get('gen',throw=False).typeof(),Js('string')):
                        var.put('dirname', (var.get('_path2').get('default').callprop('dirname', var.get("this").get('opts').get('filename')) or var.get('process').callprop('cwd')))
                        var.put('generator', PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('gen'), var.get('dirname')))
                        if var.get('generator'):
                            var.put('gen', var.get('require')(var.get('generator')).get('print'))
                        else:
                            PyJsTempException = JsToPyException(var.get('Error').create((((Js("Couldn't find generator ")+var.get('gen'))+Js(' with "print" method relative to directory '))+var.get('dirname'))))
                            raise PyJsTempException
                var.get("this").get('log').callprop('debug', Js('Generation start'))
                var.put('_result', var.get('gen')(var.get('ast'), (PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('opts'), var.get('opts').get('generatorOpts')) if var.get('opts').get('generatorOpts') else var.get('opts')), var.get("this").get('code')))
                var.get('result').put('code', var.get('_result').get('code'))
                var.get('result').put('map', var.get('_result').get('map'))
                var.get("this").get('log').callprop('debug', Js('Generation end'))
                if var.get("this").get('shebang'):
                    var.get('result').put('code', ((var.get("this").get('shebang')+Js('\n'))+var.get('result').get('code')))
                if var.get('result').get('map'):
                    var.get('result').put('map', var.get("this").callprop('mergeSourceMap', var.get('result').get('map')))
                if (PyJsStrictEq(var.get('opts').get('sourceMaps'),Js('inline')) or PyJsStrictEq(var.get('opts').get('sourceMaps'),Js('both'))):
                    var.get('result').put('code', (Js('\n')+var.get('_convertSourceMap2').get('default').callprop('fromObject', var.get('result').get('map')).callprop('toComment')), '+')
                if PyJsStrictEq(var.get('opts').get('sourceMaps'),Js('inline')):
                    var.get('result').put('map', var.get("null"))
                return var.get("this").callprop('makeResult', var.get('result'))
            PyJs_generate_140_._set_name('generate')
            var.get('File').get('prototype').put('generate', PyJs_generate_140_)
            return var.get('File')
        PyJs_anonymous_86_._set_name('anonymous')
        var.put('File', PyJs_anonymous_86_(var.get('_store2').get('default')))
        var.get('exports').put('default', var.get('File'))
        var.get('exports').put('File', var.get('File'))
    PyJs_anonymous_81_._set_name('anonymous')
    PyJs_anonymous_81_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_80_._set_name('anonymous')
PyJs_Object_142_ = Js({'../../helpers/resolve':Js(9.0),'../../store':Js(10.0),'../../util':Js(26.0),'../internal-plugins/block-hoist':Js(21.0),'../internal-plugins/shadow-functions':Js(22.0),'../plugin-pass':Js(24.0),'./logger':Js(13.0),'./metadata':Js(14.0),'./options/option-manager':Js(18.0),'_process':Js(531.0),'babel-code-frame':Js(4.0),'babel-generator':Js(40.0),'babel-helpers':Js(56.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/assign':Js(100.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0),'babel-runtime/helpers/typeof':Js(114.0),'babel-traverse':Js(225.0),'babel-types':Js(258.0),'babylon':Js(262.0),'convert-source-map':Js(267.0),'lodash/defaults':Js(442.0),'path':Js(530.0),'source-map':Js(519.0)})
@Js
def PyJs_anonymous_143_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'seenDeprecatedMessages', 'require', 'module', '_node2', '_node', 'verboseDebug', '_interopRequireDefault', 'generalDebug', '_classCallCheck3', '_classCallCheck2', 'Logger'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_144_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_144_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_node', var.get('require')(Js('debug/node')))
    var.put('_node2', var.get('_interopRequireDefault')(var.get('_node')))
    pass
    var.put('verboseDebug', PyJsComma(Js(0.0),var.get('_node2').get('default'))(Js('babel:verbose')))
    var.put('generalDebug', PyJsComma(Js(0.0),var.get('_node2').get('default'))(Js('babel')))
    var.put('seenDeprecatedMessages', Js([]))
    @Js
    def PyJs_anonymous_145_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Logger'])
        @Js
        def PyJsHoisted_Logger_(file, filename, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'file':file, 'filename':filename}, var)
            var.registers(['file', 'filename'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Logger'))
            var.get("this").put('filename', var.get('filename'))
            var.get("this").put('file', var.get('file'))
        PyJsHoisted_Logger_.__name__ = 'Logger'
        var.put('Logger', PyJsHoisted_Logger_)
        pass
        @Js
        def PyJs__buildMessage_146_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, '_buildMessage':PyJs__buildMessage_146_, 'arguments':arguments}, var)
            var.registers(['msg', 'parts'])
            var.put('parts', (Js('[BABEL] ')+var.get("this").get('filename')))
            if var.get('msg'):
                var.put('parts', (Js(': ')+var.get('msg')), '+')
            return var.get('parts')
        PyJs__buildMessage_146_._set_name('_buildMessage')
        var.get('Logger').get('prototype').put('_buildMessage', PyJs__buildMessage_146_)
        @Js
        def PyJs_warn_147_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'warn':PyJs_warn_147_, 'arguments':arguments}, var)
            var.registers(['msg'])
            var.get('console').callprop('warn', var.get("this").callprop('_buildMessage', var.get('msg')))
        PyJs_warn_147_._set_name('warn')
        var.get('Logger').get('prototype').put('warn', PyJs_warn_147_)
        @Js
        def PyJs_error_148_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'error':PyJs_error_148_}, var)
            var.registers(['msg', 'Constructor'])
            var.put('Constructor', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('Error')))
            PyJsTempException = JsToPyException(var.get('Constructor').create(var.get("this").callprop('_buildMessage', var.get('msg'))))
            raise PyJsTempException
        PyJs_error_148_._set_name('error')
        var.get('Logger').get('prototype').put('error', PyJs_error_148_)
        @Js
        def PyJs_deprecate_149_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'deprecate':PyJs_deprecate_149_, 'arguments':arguments}, var)
            var.registers(['msg'])
            if (var.get("this").get('file').get('opts') and var.get("this").get('file').get('opts').get('suppressDeprecationMessages')):
                return var.get('undefined')
            var.put('msg', var.get("this").callprop('_buildMessage', var.get('msg')))
            if (var.get('seenDeprecatedMessages').callprop('indexOf', var.get('msg'))>=Js(0.0)):
                return var.get('undefined')
            var.get('seenDeprecatedMessages').callprop('push', var.get('msg'))
            var.get('console').callprop('error', var.get('msg'))
        PyJs_deprecate_149_._set_name('deprecate')
        var.get('Logger').get('prototype').put('deprecate', PyJs_deprecate_149_)
        @Js
        def PyJs_verbose_150_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'verbose':PyJs_verbose_150_}, var)
            var.registers(['msg'])
            if var.get('verboseDebug').get('enabled'):
                var.get('verboseDebug')(var.get("this").callprop('_buildMessage', var.get('msg')))
        PyJs_verbose_150_._set_name('verbose')
        var.get('Logger').get('prototype').put('verbose', PyJs_verbose_150_)
        @Js
        def PyJs_debug_151_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'debug':PyJs_debug_151_}, var)
            var.registers(['msg'])
            if var.get('generalDebug').get('enabled'):
                var.get('generalDebug')(var.get("this").callprop('_buildMessage', var.get('msg')))
        PyJs_debug_151_._set_name('debug')
        var.get('Logger').get('prototype').put('debug', PyJs_debug_151_)
        @Js
        def PyJs_deopt_152_(node, msg, this, arguments, var=var):
            var = Scope({'node':node, 'msg':msg, 'this':this, 'arguments':arguments, 'deopt':PyJs_deopt_152_}, var)
            var.registers(['node', 'msg'])
            var.get("this").callprop('debug', var.get('msg'))
        PyJs_deopt_152_._set_name('deopt')
        var.get('Logger').get('prototype').put('deopt', PyJs_deopt_152_)
        return var.get('Logger')
    PyJs_anonymous_145_._set_name('anonymous')
    var.put('Logger', PyJs_anonymous_145_())
    var.get('exports').put('default', var.get('Logger'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_143_._set_name('anonymous')
PyJs_Object_153_ = Js({'babel-runtime/helpers/classCallCheck':Js(110.0),'debug/node':Js(270.0)})
@Js
def PyJs_anonymous_154_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ExportDeclaration', 'ModuleDeclaration', '_interopRequireWildcard', 'ImportDeclaration', 'require', '_babelTypes', 'module', 't', '_interopRequireDefault', 'Scope', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_156_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_156_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_Scope_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJsHoisted_Scope_.__name__ = 'Scope'
    var.put('Scope', PyJsHoisted_Scope_)
    @Js
    def PyJsHoisted_ExportDeclaration_(path, file, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file}, var)
        var.registers(['node', 'specifier', 'exports', 'name', '_i2', '_ref2', 'source', 'declar', '_isArray2', 'exported', 'file', 'path', 'bindings', 'local', '_iterator2'])
        var.put('node', var.get('path').get('node'))
        var.put('source', (var.get('node').get('source').get('value') if var.get('node').get('source') else var.get("null")))
        var.put('exports', var.get('file').get('metadata').get('modules').get('exports'))
        var.put('declar', var.get('path').callprop('get', Js('declaration')))
        if var.get('declar').callprop('isStatement'):
            var.put('bindings', var.get('declar').callprop('getBindingIdentifiers'))
            for PyJsTemp in var.get('bindings'):
                var.put('name', PyJsTemp)
                var.get('exports').get('exported').callprop('push', var.get('name'))
                PyJs_Object_165_ = Js({'kind':Js('local'),'local':var.get('name'),'exported':(Js('default') if var.get('path').callprop('isExportDefaultDeclaration') else var.get('name'))})
                var.get('exports').get('specifiers').callprop('push', PyJs_Object_165_)
        if (var.get('path').callprop('isExportNamedDeclaration') and var.get('node').get('specifiers')):
            #for JS loop
            var.put('_iterator2', var.get('node').get('specifiers'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('specifier', var.get('_ref2'))
                var.put('exported', var.get('specifier').get('exported').get('name'))
                var.get('exports').get('exported').callprop('push', var.get('exported'))
                if var.get('t').callprop('isExportDefaultSpecifier', var.get('specifier')):
                    PyJs_Object_166_ = Js({'kind':Js('external'),'local':var.get('exported'),'exported':var.get('exported'),'source':var.get('source')})
                    var.get('exports').get('specifiers').callprop('push', PyJs_Object_166_)
                if var.get('t').callprop('isExportNamespaceSpecifier', var.get('specifier')):
                    PyJs_Object_167_ = Js({'kind':Js('external-namespace'),'exported':var.get('exported'),'source':var.get('source')})
                    var.get('exports').get('specifiers').callprop('push', PyJs_Object_167_)
                var.put('local', var.get('specifier').get('local'))
                if var.get('local').neg():
                    continue
                if var.get('source'):
                    PyJs_Object_168_ = Js({'kind':Js('external'),'local':var.get('local').get('name'),'exported':var.get('exported'),'source':var.get('source')})
                    var.get('exports').get('specifiers').callprop('push', PyJs_Object_168_)
                if var.get('source').neg():
                    PyJs_Object_169_ = Js({'kind':Js('local'),'local':var.get('local').get('name'),'exported':var.get('exported')})
                    var.get('exports').get('specifiers').callprop('push', PyJs_Object_169_)
            
        if var.get('path').callprop('isExportAllDeclaration'):
            PyJs_Object_170_ = Js({'kind':Js('external-all'),'source':var.get('source')})
            var.get('exports').get('specifiers').callprop('push', PyJs_Object_170_)
    PyJsHoisted_ExportDeclaration_.__name__ = 'ExportDeclaration'
    var.put('ExportDeclaration', PyJsHoisted_ExportDeclaration_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_155_ = Js({})
            var.put('newObj', PyJs_Object_155_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ImportDeclaration', var.get('exports').put('ModuleDeclaration', var.get('undefined')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('ExportDeclaration', var.get('ExportDeclaration'))
    var.get('exports').put('Scope', var.get('Scope'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_enter_158_(path, file, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'enter':PyJs_enter_158_}, var)
        var.registers(['node', 'path', 'file'])
        var.put('node', var.get('path').get('node'))
        if var.get('node').get('source'):
            var.get('node').get('source').put('value', var.get('file').callprop('resolveModuleSource', var.get('node').get('source').get('value')))
    PyJs_enter_158_._set_name('enter')
    PyJs_Object_157_ = Js({'enter':PyJs_enter_158_})
    var.put('ModuleDeclaration', var.get('exports').put('ModuleDeclaration', PyJs_Object_157_))
    @Js
    def PyJs_exit_160_(path, file, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_160_, 'arguments':arguments, 'file':file}, var)
        var.registers(['node', 'specifiers', '_isArray', 'imported', 'file', 'specifier', '_i', 'importedName', '_iterator', '_ref', 'path', 'local'])
        var.put('node', var.get('path').get('node'))
        var.put('specifiers', Js([]))
        var.put('imported', Js([]))
        PyJs_Object_161_ = Js({'source':var.get('node').get('source').get('value'),'imported':var.get('imported'),'specifiers':var.get('specifiers')})
        var.get('file').get('metadata').get('modules').get('imports').callprop('push', PyJs_Object_161_)
        #for JS loop
        var.put('_iterator', var.get('path').callprop('get', Js('specifiers')))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('specifier', var.get('_ref'))
            var.put('local', var.get('specifier').get('node').get('local').get('name'))
            if var.get('specifier').callprop('isImportDefaultSpecifier'):
                var.get('imported').callprop('push', Js('default'))
                PyJs_Object_162_ = Js({'kind':Js('named'),'imported':Js('default'),'local':var.get('local')})
                var.get('specifiers').callprop('push', PyJs_Object_162_)
            if var.get('specifier').callprop('isImportSpecifier'):
                var.put('importedName', var.get('specifier').get('node').get('imported').get('name'))
                var.get('imported').callprop('push', var.get('importedName'))
                PyJs_Object_163_ = Js({'kind':Js('named'),'imported':var.get('importedName'),'local':var.get('local')})
                var.get('specifiers').callprop('push', PyJs_Object_163_)
            if var.get('specifier').callprop('isImportNamespaceSpecifier'):
                var.get('imported').callprop('push', Js('*'))
                PyJs_Object_164_ = Js({'kind':Js('namespace'),'local':var.get('local')})
                var.get('specifiers').callprop('push', PyJs_Object_164_)
        
    PyJs_exit_160_._set_name('exit')
    PyJs_Object_159_ = Js({'exit':PyJs_exit_160_})
    var.put('ImportDeclaration', var.get('exports').put('ImportDeclaration', PyJs_Object_159_))
    pass
    pass
PyJs_anonymous_154_._set_name('anonymous')
PyJs_Object_171_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_172_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_173_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['_resolve', 'existsCache', 'exists', '_fs', 'process', 'buildConfigChain', '_json2', '_interopRequireDefault', '_fs2', 'BABELIGNORE_FILENAME', '_json', 'PACKAGE_FILENAME', 'jsonCache', '_classCallCheck3', '_classCallCheck2', '_assign', 'BABELRC_FILENAME', '_pathIsAbsolute2', '_path2', '_assign2', '_resolve2', '_pathIsAbsolute', 'ConfigChainBuilder', '_path'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_174_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_174_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        @Js
        def PyJsHoisted_buildConfigChain_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['builder', 'log', 'opts', 'filename'])
            PyJs_Object_177_ = Js({})
            var.put('opts', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else PyJs_Object_177_))
            var.put('log', var.get('arguments').get('1'))
            var.put('filename', var.get('opts').get('filename'))
            var.put('builder', var.get('ConfigChainBuilder').create(var.get('log')))
            if PyJsStrictNeq(var.get('opts').get('babelrc'),Js(False)):
                var.get('builder').callprop('findConfigs', var.get('filename'))
            PyJs_Object_178_ = Js({'options':var.get('opts'),'alias':Js('base'),'dirname':(var.get('filename') and var.get('_path2').get('default').callprop('dirname', var.get('filename')))})
            var.get('builder').callprop('mergeConfig', PyJs_Object_178_)
            return var.get('builder').get('configs')
        PyJsHoisted_buildConfigChain_.__name__ = 'buildConfigChain'
        var.put('buildConfigChain', PyJsHoisted_buildConfigChain_)
        @Js
        def PyJsHoisted_exists_(filename, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'filename':filename}, var)
            var.registers(['cached', 'filename'])
            var.put('cached', var.get('existsCache').get(var.get('filename')))
            if (var.get('cached')==var.get("null")):
                return var.get('existsCache').put(var.get('filename'), var.get('_fs2').get('default').callprop('existsSync', var.get('filename')))
            else:
                return var.get('cached')
        PyJsHoisted_exists_.__name__ = 'exists'
        var.put('exists', PyJsHoisted_exists_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.put('_assign', var.get('require')(Js('babel-runtime/core-js/object/assign')))
        var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
        var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
        var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
        var.get('exports').put('default', var.get('buildConfigChain'))
        var.put('_resolve', var.get('require')(Js('../../../helpers/resolve')))
        var.put('_resolve2', var.get('_interopRequireDefault')(var.get('_resolve')))
        var.put('_json', var.get('require')(Js('json5')))
        var.put('_json2', var.get('_interopRequireDefault')(var.get('_json')))
        var.put('_pathIsAbsolute', var.get('require')(Js('path-is-absolute')))
        var.put('_pathIsAbsolute2', var.get('_interopRequireDefault')(var.get('_pathIsAbsolute')))
        var.put('_path', var.get('require')(Js('path')))
        var.put('_path2', var.get('_interopRequireDefault')(var.get('_path')))
        var.put('_fs', var.get('require')(Js('fs')))
        var.put('_fs2', var.get('_interopRequireDefault')(var.get('_fs')))
        pass
        PyJs_Object_175_ = Js({})
        var.put('existsCache', PyJs_Object_175_)
        PyJs_Object_176_ = Js({})
        var.put('jsonCache', PyJs_Object_176_)
        var.put('BABELIGNORE_FILENAME', Js('.babelignore'))
        var.put('BABELRC_FILENAME', Js('.babelrc'))
        var.put('PACKAGE_FILENAME', Js('package.json'))
        pass
        pass
        @Js
        def PyJs_anonymous_179_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['ConfigChainBuilder'])
            @Js
            def PyJsHoisted_ConfigChainBuilder_(log, this, arguments, var=var):
                var = Scope({'this':this, 'log':log, 'arguments':arguments}, var)
                var.registers(['log'])
                PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('ConfigChainBuilder'))
                var.get("this").put('resolvedConfigs', Js([]))
                var.get("this").put('configs', Js([]))
                var.get("this").put('log', var.get('log'))
            PyJsHoisted_ConfigChainBuilder_.__name__ = 'ConfigChainBuilder'
            var.put('ConfigChainBuilder', PyJsHoisted_ConfigChainBuilder_)
            pass
            @Js
            def PyJs_findConfigs_180_(loc, this, arguments, var=var):
                var = Scope({'this':this, 'loc':loc, 'arguments':arguments, 'findConfigs':PyJs_findConfigs_180_}, var)
                var.registers(['loc', 'ignoreLoc', 'foundIgnore', 'pkgLoc', 'foundConfig', 'configLoc'])
                if var.get('loc').neg():
                    return var.get('undefined')
                if PyJsComma(Js(0.0),var.get('_pathIsAbsolute2').get('default'))(var.get('loc')).neg():
                    var.put('loc', var.get('_path2').get('default').callprop('join', var.get('process').callprop('cwd'), var.get('loc')))
                var.put('foundConfig', Js(False))
                var.put('foundIgnore', Js(False))
                while PyJsStrictNeq(var.get('loc'),var.put('loc', var.get('_path2').get('default').callprop('dirname', var.get('loc')))):
                    if var.get('foundConfig').neg():
                        var.put('configLoc', var.get('_path2').get('default').callprop('join', var.get('loc'), var.get('BABELRC_FILENAME')))
                        if var.get('exists')(var.get('configLoc')):
                            var.get("this").callprop('addConfig', var.get('configLoc'))
                            var.put('foundConfig', var.get('true'))
                        var.put('pkgLoc', var.get('_path2').get('default').callprop('join', var.get('loc'), var.get('PACKAGE_FILENAME')))
                        if (var.get('foundConfig').neg() and var.get('exists')(var.get('pkgLoc'))):
                            var.put('foundConfig', var.get("this").callprop('addConfig', var.get('pkgLoc'), Js('babel'), var.get('JSON')))
                    if var.get('foundIgnore').neg():
                        var.put('ignoreLoc', var.get('_path2').get('default').callprop('join', var.get('loc'), var.get('BABELIGNORE_FILENAME')))
                        if var.get('exists')(var.get('ignoreLoc')):
                            var.get("this").callprop('addIgnoreConfig', var.get('ignoreLoc'))
                            var.put('foundIgnore', var.get('true'))
                    if (var.get('foundIgnore') and var.get('foundConfig')):
                        return var.get('undefined')
            PyJs_findConfigs_180_._set_name('findConfigs')
            var.get('ConfigChainBuilder').get('prototype').put('findConfigs', PyJs_findConfigs_180_)
            @Js
            def PyJs_addIgnoreConfig_181_(loc, this, arguments, var=var):
                var = Scope({'this':this, 'loc':loc, 'arguments':arguments, 'addIgnoreConfig':PyJs_addIgnoreConfig_181_}, var)
                var.registers(['loc', 'lines', 'file'])
                var.put('file', var.get('_fs2').get('default').callprop('readFileSync', var.get('loc'), Js('utf8')))
                var.put('lines', var.get('file').callprop('split', Js('\n')))
                @Js
                def PyJs_anonymous_182_(line, this, arguments, var=var):
                    var = Scope({'this':this, 'line':line, 'arguments':arguments}, var)
                    var.registers(['line'])
                    return var.get('line').neg().neg()
                PyJs_anonymous_182_._set_name('anonymous')
                @Js
                def PyJs_anonymous_183_(line, this, arguments, var=var):
                    var = Scope({'this':this, 'line':line, 'arguments':arguments}, var)
                    var.registers(['line'])
                    return var.get('line').callprop('replace', JsRegExp('/#(.*?)$/'), Js('')).callprop('trim')
                PyJs_anonymous_183_._set_name('anonymous')
                var.put('lines', var.get('lines').callprop('map', PyJs_anonymous_183_).callprop('filter', PyJs_anonymous_182_))
                if var.get('lines').get('length'):
                    PyJs_Object_185_ = Js({'ignore':var.get('lines')})
                    PyJs_Object_184_ = Js({'options':PyJs_Object_185_,'alias':var.get('loc'),'dirname':var.get('_path2').get('default').callprop('dirname', var.get('loc'))})
                    var.get("this").callprop('mergeConfig', PyJs_Object_184_)
            PyJs_addIgnoreConfig_181_._set_name('addIgnoreConfig')
            var.get('ConfigChainBuilder').get('prototype').put('addIgnoreConfig', PyJs_addIgnoreConfig_181_)
            @Js
            def PyJs_addConfig_186_(loc, key, this, arguments, var=var):
                var = Scope({'this':this, 'loc':loc, 'addConfig':PyJs_addConfig_186_, 'arguments':arguments, 'key':key}, var)
                var.registers(['content', 'loc', 'json', 'options', 'key'])
                var.put('json', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else var.get('_json2').get('default')))
                if (var.get("this").get('resolvedConfigs').callprop('indexOf', var.get('loc'))>=Js(0.0)):
                    return Js(False)
                var.get("this").get('resolvedConfigs').callprop('push', var.get('loc'))
                var.put('content', var.get('_fs2').get('default').callprop('readFileSync', var.get('loc'), Js('utf8')))
                var.put('options', PyJsComma(Js(0.0), Js(None)))
                try:
                    var.put('options', var.get('jsonCache').put(var.get('content'), (var.get('jsonCache').get(var.get('content')) or var.get('json').callprop('parse', var.get('content')))))
                    if var.get('key'):
                        var.put('options', var.get('options').get(var.get('key')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_657272_93340872 = var.own.get('err')
                    var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('err').put('message', ((var.get('loc')+Js(': Error while parsing JSON - '))+var.get('err').get('message')))
                        PyJsTempException = JsToPyException(var.get('err'))
                        raise PyJsTempException
                    finally:
                        if PyJsHolder_657272_93340872 is not None:
                            var.own['err'] = PyJsHolder_657272_93340872
                        else:
                            del var.own['err']
                        del PyJsHolder_657272_93340872
                PyJs_Object_187_ = Js({'options':var.get('options'),'alias':var.get('loc'),'dirname':var.get('_path2').get('default').callprop('dirname', var.get('loc'))})
                var.get("this").callprop('mergeConfig', PyJs_Object_187_)
                return var.get('options').neg().neg()
            PyJs_addConfig_186_._set_name('addConfig')
            var.get('ConfigChainBuilder').get('prototype').put('addConfig', PyJs_addConfig_186_)
            @Js
            def PyJs_mergeConfig_188_(_ref, this, arguments, var=var):
                var = Scope({'this':this, '_ref':_ref, 'arguments':arguments, 'mergeConfig':PyJs_mergeConfig_188_}, var)
                var.registers(['loc', 'envOpts', 'alias', 'envKey', 'extendsLoc', '_ref', 'dirname', 'options'])
                var.put('options', var.get('_ref').get('options'))
                var.put('alias', var.get('_ref').get('alias'))
                var.put('loc', var.get('_ref').get('loc'))
                var.put('dirname', var.get('_ref').get('dirname'))
                if var.get('options').neg():
                    return Js(False)
                PyJs_Object_189_ = Js({})
                var.put('options', PyJsComma(Js(0.0),var.get('_assign2').get('default'))(PyJs_Object_189_, var.get('options')))
                var.put('dirname', (var.get('dirname') or var.get('process').callprop('cwd')))
                var.put('loc', (var.get('loc') or var.get('alias')))
                if var.get('options').get('extends'):
                    var.put('extendsLoc', PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('options').get('extends'), var.get('dirname')))
                    if var.get('extendsLoc'):
                        var.get("this").callprop('addConfig', var.get('extendsLoc'))
                    else:
                        if var.get("this").get('log'):
                            var.get("this").get('log').callprop('error', (((Js("Couldn't resolve extends clause of ")+var.get('options').get('extends'))+Js(' in '))+var.get('alias')))
                    var.get('options').delete('extends')
                PyJs_Object_190_ = Js({'options':var.get('options'),'alias':var.get('alias'),'loc':var.get('loc'),'dirname':var.get('dirname')})
                var.get("this").get('configs').callprop('push', PyJs_Object_190_)
                var.put('envOpts', PyJsComma(Js(0.0), Js(None)))
                var.put('envKey', ((var.get('process').get('env').get('BABEL_ENV') or var.get('process').get('env').get('NODE_ENV')) or Js('development')))
                if var.get('options').get('env'):
                    var.put('envOpts', var.get('options').get('env').get(var.get('envKey')))
                    var.get('options').delete('env')
                PyJs_Object_191_ = Js({'options':var.get('envOpts'),'alias':((var.get('alias')+Js('.env.'))+var.get('envKey')),'dirname':var.get('dirname')})
                var.get("this").callprop('mergeConfig', PyJs_Object_191_)
            PyJs_mergeConfig_188_._set_name('mergeConfig')
            var.get('ConfigChainBuilder').get('prototype').put('mergeConfig', PyJs_mergeConfig_188_)
            return var.get('ConfigChainBuilder')
        PyJs_anonymous_179_._set_name('anonymous')
        var.put('ConfigChainBuilder', PyJs_anonymous_179_())
        var.get('module').put('exports', var.get('exports').get('default'))
    PyJs_anonymous_173_._set_name('anonymous')
    PyJs_anonymous_173_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_172_._set_name('anonymous')
PyJs_Object_192_ = Js({'../../../helpers/resolve':Js(9.0),'_process':Js(531.0),'babel-runtime/core-js/object/assign':Js(100.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'fs':Js(523.0),'json5':Js(284.0),'path':Js(530.0),'path-is-absolute':Js(499.0)})
@Js
def PyJs_anonymous_193_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    PyJs_Object_195_ = Js({'type':Js('filename'),'description':Js('filename to use when reading from stdin - this will be used in source-maps, errors etc'),'default':Js('unknown'),'shorthand':Js('f')})
    PyJs_Object_196_ = Js({'hidden':var.get('true'),'type':Js('string')})
    PyJs_Object_197_ = Js({'hidden':var.get('true')})
    PyJs_Object_199_ = Js({})
    PyJs_Object_198_ = Js({'hidden':var.get('true'),'default':PyJs_Object_199_})
    PyJs_Object_200_ = Js({'description':Js(''),'hidden':var.get('true')})
    PyJs_Object_201_ = Js({'type':Js('boolean'),'default':Js(False),'description':Js('retain line numbers - will result in really ugly code')})
    PyJs_Object_202_ = Js({'description':Js('enable/disable ANSI syntax highlighting of code frames (on by default)'),'type':Js('boolean'),'default':var.get('true')})
    PyJs_Object_203_ = Js({'type':Js('boolean'),'default':Js(False),'hidden':var.get('true')})
    PyJs_Object_204_ = Js({'type':Js('list'),'description':Js(''),'default':Js([])})
    PyJs_Object_205_ = Js({'type':Js('list'),'default':Js([]),'description':Js('')})
    PyJs_Object_206_ = Js({'type':Js('list'),'description':Js('list of glob paths to **not** compile'),'default':Js([])})
    PyJs_Object_207_ = Js({'type':Js('list'),'description':Js('list of glob paths to **only** compile')})
    PyJs_Object_208_ = Js({'hidden':var.get('true'),'default':var.get('true'),'type':Js('boolean')})
    PyJs_Object_209_ = Js({'hidden':var.get('true'),'default':var.get('true'),'type':Js('boolean')})
    PyJs_Object_210_ = Js({'hidden':var.get('true'),'default':var.get('true'),'type':Js('boolean')})
    PyJs_Object_211_ = Js({'type':Js('string'),'hidden':var.get('true')})
    PyJs_Object_212_ = Js({'type':Js('boolean'),'default':var.get('true'),'description':Js('write comments to generated output (true by default)')})
    PyJs_Object_213_ = Js({'hidden':var.get('true'),'description':Js('optional callback to control whether a comment should be inserted, when this is used the comments option is ignored')})
    PyJs_Object_214_ = Js({'hidden':var.get('true'),'description':Js('optional callback to wrap all visitor methods')})
    PyJs_Object_215_ = Js({'type':Js('booleanString'),'default':Js('auto'),'description':Js('do not include superfluous whitespace characters and line terminators [true|false|auto]')})
    PyJs_Object_216_ = Js({'type':Js('boolean'),'default':Js(False),'description':Js('save as much bytes when printing [true|false]')})
    PyJs_Object_217_ = Js({'alias':Js('sourceMaps'),'hidden':var.get('true')})
    PyJs_Object_218_ = Js({'type':Js('booleanString'),'description':Js('[true|false|inline]'),'default':Js(False),'shorthand':Js('s')})
    PyJs_Object_219_ = Js({'type':Js('string'),'description':Js('set `file` on returned source map')})
    PyJs_Object_220_ = Js({'type':Js('string'),'description':Js('set `sources[0]` on returned source map')})
    PyJs_Object_221_ = Js({'type':Js('filename'),'description':Js('the root from which all sources are relative')})
    PyJs_Object_222_ = Js({'description':Js('Whether or not to look up .babelrc and .babelignore files'),'type':Js('boolean'),'default':var.get('true')})
    PyJs_Object_223_ = Js({'description':Js(''),'default':Js('module')})
    PyJs_Object_224_ = Js({'type':Js('string'),'description':Js('print a comment before any injected non-user code')})
    PyJs_Object_225_ = Js({'type':Js('string'),'description':Js('print a comment after any injected non-user code')})
    PyJs_Object_226_ = Js({'hidden':var.get('true')})
    PyJs_Object_227_ = Js({'hidden':var.get('true')})
    PyJs_Object_228_ = Js({'type':Js('filename'),'description':Js('optional prefix for the AMD module formatter that will be prepend to the filename on module definitions')})
    PyJs_Object_229_ = Js({'type':Js('boolean'),'default':Js(False),'shorthand':Js('M'),'description':Js('insert an explicit id for modules')})
    PyJs_Object_230_ = Js({'description':Js('specify a custom name for module ids'),'type':Js('string')})
    PyJs_Object_231_ = Js({'description':Js('Whether to spawn a traversal pass per a preset. By default all presets are merged.'),'type':Js('boolean'),'default':Js(False),'hidden':var.get('true')})
    PyJs_Object_232_ = Js({'description':Js('Options to pass into the parser, or to change parsers (parserOpts.parser)'),'default':Js(False)})
    PyJs_Object_233_ = Js({'description':Js('Options to pass into the generator, or to change generators (generatorOpts.generator)'),'default':Js(False)})
    PyJs_Object_194_ = Js({'filename':PyJs_Object_195_,'filenameRelative':PyJs_Object_196_,'inputSourceMap':PyJs_Object_197_,'env':PyJs_Object_198_,'mode':PyJs_Object_200_,'retainLines':PyJs_Object_201_,'highlightCode':PyJs_Object_202_,'suppressDeprecationMessages':PyJs_Object_203_,'presets':PyJs_Object_204_,'plugins':PyJs_Object_205_,'ignore':PyJs_Object_206_,'only':PyJs_Object_207_,'code':PyJs_Object_208_,'metadata':PyJs_Object_209_,'ast':PyJs_Object_210_,'extends':PyJs_Object_211_,'comments':PyJs_Object_212_,'shouldPrintComment':PyJs_Object_213_,'wrapPluginVisitorMethod':PyJs_Object_214_,'compact':PyJs_Object_215_,'minified':PyJs_Object_216_,'sourceMap':PyJs_Object_217_,'sourceMaps':PyJs_Object_218_,'sourceMapTarget':PyJs_Object_219_,'sourceFileName':PyJs_Object_220_,'sourceRoot':PyJs_Object_221_,'babelrc':PyJs_Object_222_,'sourceType':PyJs_Object_223_,'auxiliaryCommentBefore':PyJs_Object_224_,'auxiliaryCommentAfter':PyJs_Object_225_,'resolveModuleSource':PyJs_Object_226_,'getModuleId':PyJs_Object_227_,'moduleRoot':PyJs_Object_228_,'moduleIds':PyJs_Object_229_,'moduleId':PyJs_Object_230_,'passPerPreset':PyJs_Object_231_,'parserOpts':PyJs_Object_232_,'generatorOpts':PyJs_Object_233_})
    var.get('module').put('exports', PyJs_Object_194_)
PyJs_anonymous_193_._set_name('anonymous')
PyJs_Object_234_ = Js({})
@Js
def PyJs_anonymous_235_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_config', '_interopRequireWildcard', '_parsers', 'require', 'exports', 'module', 'normaliseOptions', 'parsers', '_config2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_236_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_236_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_normaliseOptions_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['opt', 'val', 'parser', 'options', 'key'])
        PyJs_Object_238_ = Js({})
        var.put('options', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else PyJs_Object_238_))
        for PyJsTemp in var.get('options'):
            var.put('key', PyJsTemp)
            var.put('val', var.get('options').get(var.get('key')))
            if (var.get('val')==var.get("null")):
                continue
            var.put('opt', var.get('_config2').get('default').get(var.get('key')))
            if (var.get('opt') and var.get('opt').get('alias')):
                var.put('opt', var.get('_config2').get('default').get(var.get('opt').get('alias')))
            if var.get('opt').neg():
                continue
            var.put('parser', var.get('parsers').get(var.get('opt').get('type')))
            if var.get('parser'):
                var.put('val', var.get('parser')(var.get('val')))
            var.get('options').put(var.get('key'), var.get('val'))
        return var.get('options')
    PyJsHoisted_normaliseOptions_.__name__ = 'normaliseOptions'
    var.put('normaliseOptions', PyJsHoisted_normaliseOptions_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_237_ = Js({})
            var.put('newObj', PyJs_Object_237_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('config', var.get('undefined'))
    var.get('exports').put('normaliseOptions', var.get('normaliseOptions'))
    var.put('_parsers', var.get('require')(Js('./parsers')))
    var.put('parsers', var.get('_interopRequireWildcard')(var.get('_parsers')))
    var.put('_config', var.get('require')(Js('./config')))
    var.put('_config2', var.get('_interopRequireDefault')(var.get('_config')))
    pass
    pass
    var.get('exports').put('config', var.get('_config2').get('default'))
    pass
PyJs_anonymous_235_._set_name('anonymous')
PyJs_Object_239_ = Js({'./config':Js(16.0),'./parsers':Js(19.0)})
@Js
def PyJs_anonymous_240_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_241_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['_resolve', '_plugin2', '_plugin3', '_interopRequireDefault', '_merge', '_clone', '_getIterator2', '_getIterator3', '_path2', '_typeof2', '_typeof3', 'process', '_node', '_removed', '_objectWithoutProperties2', '_classCallCheck3', '_classCallCheck2', '_babelMessages', '_stringify2', 'OptionManager', '_interopRequireWildcard', '_assign', '_config3', '_config2', '_buildConfigChain2', '_merge2', '_assign2', '_resolve2', '_index', 'messages', '_cloneDeepWith2', '_clone2', '_stringify', '_objectWithoutProperties3', 'context', '_removed2', '_path', '_cloneDeepWith', '_buildConfigChain'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_243_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_243_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        @Js
        def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj', 'key', 'newObj'])
            if (var.get('obj') and var.get('obj').get('__esModule')):
                return var.get('obj')
            else:
                PyJs_Object_242_ = Js({})
                var.put('newObj', PyJs_Object_242_)
                if (var.get('obj')!=var.get("null")):
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                            var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
                var.get('newObj').put('default', var.get('obj'))
                return var.get('newObj')
        PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
        var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.put('_objectWithoutProperties2', var.get('require')(Js('babel-runtime/helpers/objectWithoutProperties')))
        var.put('_objectWithoutProperties3', var.get('_interopRequireDefault')(var.get('_objectWithoutProperties2')))
        var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
        var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
        var.put('_assign', var.get('require')(Js('babel-runtime/core-js/object/assign')))
        var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
        var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
        var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
        var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
        var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
        var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
        var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
        var.put('_node', var.get('require')(Js('../../../api/node')))
        var.put('context', var.get('_interopRequireWildcard')(var.get('_node')))
        var.put('_plugin2', var.get('require')(Js('../../plugin')))
        var.put('_plugin3', var.get('_interopRequireDefault')(var.get('_plugin2')))
        var.put('_babelMessages', var.get('require')(Js('babel-messages')))
        var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
        var.put('_index', var.get('require')(Js('./index')))
        var.put('_resolve', var.get('require')(Js('../../../helpers/resolve')))
        var.put('_resolve2', var.get('_interopRequireDefault')(var.get('_resolve')))
        var.put('_cloneDeepWith', var.get('require')(Js('lodash/cloneDeepWith')))
        var.put('_cloneDeepWith2', var.get('_interopRequireDefault')(var.get('_cloneDeepWith')))
        var.put('_clone', var.get('require')(Js('lodash/clone')))
        var.put('_clone2', var.get('_interopRequireDefault')(var.get('_clone')))
        var.put('_merge', var.get('require')(Js('../../../helpers/merge')))
        var.put('_merge2', var.get('_interopRequireDefault')(var.get('_merge')))
        var.put('_config2', var.get('require')(Js('./config')))
        var.put('_config3', var.get('_interopRequireDefault')(var.get('_config2')))
        var.put('_removed', var.get('require')(Js('./removed')))
        var.put('_removed2', var.get('_interopRequireDefault')(var.get('_removed')))
        var.put('_buildConfigChain', var.get('require')(Js('./build-config-chain')))
        var.put('_buildConfigChain2', var.get('_interopRequireDefault')(var.get('_buildConfigChain')))
        var.put('_path', var.get('require')(Js('path')))
        var.put('_path2', var.get('_interopRequireDefault')(var.get('_path')))
        pass
        pass
        @Js
        def PyJs_anonymous_244_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['OptionManager'])
            @Js
            def PyJsHoisted_OptionManager_(log, this, arguments, var=var):
                var = Scope({'this':this, 'log':log, 'arguments':arguments}, var)
                var.registers(['log'])
                PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('OptionManager'))
                var.get("this").put('resolvedConfigs', Js([]))
                var.get("this").put('options', var.get('OptionManager').callprop('createBareOptions'))
                var.get("this").put('log', var.get('log'))
            PyJsHoisted_OptionManager_.__name__ = 'OptionManager'
            var.put('OptionManager', PyJsHoisted_OptionManager_)
            pass
            @Js
            def PyJs_memoisePluginContainer_245_(fn, loc, i, alias, this, arguments, var=var):
                var = Scope({'loc':loc, 'arguments':arguments, 'alias':alias, 'i':i, 'memoisePluginContainer':PyJs_memoisePluginContainer_245_, 'this':this, 'fn':fn}, var)
                var.registers(['_plugin', '_isArray', 'obj', 'loc', 'i', 'cache', 'alias', '_i', '_iterator', '_ref', 'fn'])
                #for JS loop
                var.put('_iterator', var.get('OptionManager').get('memoisedPlugins'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('cache', var.get('_ref'))
                    if PyJsStrictEq(var.get('cache').get('container'),var.get('fn')):
                        return var.get('cache').get('plugin')
                
                var.put('obj', PyJsComma(Js(0.0), Js(None)))
                if PyJsStrictEq(var.get('fn',throw=False).typeof(),Js('function')):
                    var.put('obj', var.get('fn')(var.get('context')))
                else:
                    var.put('obj', var.get('fn'))
                if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('obj'))),Js('object')):
                    var.put('_plugin', var.get('_plugin3').get('default').create(var.get('obj'), var.get('alias')))
                    PyJs_Object_246_ = Js({'container':var.get('fn'),'plugin':var.get('_plugin')})
                    var.get('OptionManager').get('memoisedPlugins').callprop('push', PyJs_Object_246_)
                    return var.get('_plugin')
                else:
                    PyJsTempException = JsToPyException(var.get('TypeError').create(((var.get('messages').callprop('get', Js('pluginNotObject'), var.get('loc'), var.get('i'), (Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('obj'))))+var.get('loc'))+var.get('i'))))
                    raise PyJsTempException
            PyJs_memoisePluginContainer_245_._set_name('memoisePluginContainer')
            var.get('OptionManager').put('memoisePluginContainer', PyJs_memoisePluginContainer_245_)
            @Js
            def PyJs_createBareOptions_247_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'createBareOptions':PyJs_createBareOptions_247_}, var)
                var.registers(['_key', 'opt', 'opts'])
                PyJs_Object_248_ = Js({})
                var.put('opts', PyJs_Object_248_)
                for PyJsTemp in var.get('_config3').get('default'):
                    var.put('_key', PyJsTemp)
                    var.put('opt', var.get('_config3').get('default').get(var.get('_key')))
                    var.get('opts').put(var.get('_key'), PyJsComma(Js(0.0),var.get('_clone2').get('default'))(var.get('opt').get('default')))
                return var.get('opts')
            PyJs_createBareOptions_247_._set_name('createBareOptions')
            var.get('OptionManager').put('createBareOptions', PyJs_createBareOptions_247_)
            @Js
            def PyJs_normalisePlugin_249_(plugin, loc, i, alias, this, arguments, var=var):
                var = Scope({'loc':loc, 'normalisePlugin':PyJs_normalisePlugin_249_, 'arguments':arguments, 'alias':alias, 'i':i, 'plugin':plugin, 'this':this}, var)
                var.registers(['i', 'loc', 'alias', 'plugin'])
                var.put('plugin', (var.get('plugin').get('default') if var.get('plugin').get('__esModule') else var.get('plugin')))
                if var.get('plugin').instanceof(var.get('_plugin3').get('default')).neg():
                    if (PyJsStrictEq(var.get('plugin',throw=False).typeof(),Js('function')) or PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('plugin',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('plugin'))),Js('object'))):
                        var.put('plugin', var.get('OptionManager').callprop('memoisePluginContainer', var.get('plugin'), var.get('loc'), var.get('i'), var.get('alias')))
                    else:
                        PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('messages').callprop('get', Js('pluginNotFunction'), var.get('loc'), var.get('i'), (Js('undefined') if PyJsStrictEq(var.get('plugin',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('plugin'))))))
                        raise PyJsTempException
                var.get('plugin').callprop('init', var.get('loc'), var.get('i'))
                return var.get('plugin')
            PyJs_normalisePlugin_249_._set_name('normalisePlugin')
            var.get('OptionManager').put('normalisePlugin', PyJs_normalisePlugin_249_)
            @Js
            def PyJs_normalisePlugins_250_(loc, dirname, plugins, this, arguments, var=var):
                var = Scope({'loc':loc, 'this':this, 'normalisePlugins':PyJs_normalisePlugins_250_, 'arguments':arguments, 'plugins':plugins, 'dirname':dirname}, var)
                var.registers(['loc', 'dirname', 'plugins'])
                @Js
                def PyJs_anonymous_251_(val, i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments, 'val':val}, var)
                    var.registers(['val', 'plugin', 'i', 'pluginLoc', 'alias', 'options'])
                    var.put('plugin', PyJsComma(Js(0.0), Js(None)))
                    var.put('options', PyJsComma(Js(0.0), Js(None)))
                    if var.get('val').neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Falsy value found in plugins')))
                        raise PyJsTempException
                    if var.get('Array').callprop('isArray', var.get('val')):
                        var.put('plugin', var.get('val').get('0'))
                        var.put('options', var.get('val').get('1'))
                    else:
                        var.put('plugin', var.get('val'))
                    var.put('alias', (var.get('plugin') if PyJsStrictEq(var.get('plugin',throw=False).typeof(),Js('string')) else ((var.get('loc')+Js('$'))+var.get('i'))))
                    if PyJsStrictEq(var.get('plugin',throw=False).typeof(),Js('string')):
                        var.put('pluginLoc', (PyJsComma(Js(0.0),var.get('_resolve2').get('default'))((Js('babel-plugin-')+var.get('plugin')), var.get('dirname')) or PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('plugin'), var.get('dirname'))))
                        if var.get('pluginLoc'):
                            var.put('plugin', var.get('require')(var.get('pluginLoc')))
                        else:
                            PyJsTempException = JsToPyException(var.get('ReferenceError').create(var.get('messages').callprop('get', Js('pluginUnknown'), var.get('plugin'), var.get('loc'), var.get('i'), var.get('dirname'))))
                            raise PyJsTempException
                    var.put('plugin', var.get('OptionManager').callprop('normalisePlugin', var.get('plugin'), var.get('loc'), var.get('i'), var.get('alias')))
                    return Js([var.get('plugin'), var.get('options')])
                PyJs_anonymous_251_._set_name('anonymous')
                return var.get('plugins').callprop('map', PyJs_anonymous_251_)
            PyJs_normalisePlugins_250_._set_name('normalisePlugins')
            var.get('OptionManager').put('normalisePlugins', PyJs_normalisePlugins_250_)
            @Js
            def PyJs_mergeOptions_252_(_ref2, this, arguments, var=var):
                var = Scope({'this':this, 'mergeOptions':PyJs_mergeOptions_252_, '_ref2':_ref2, 'arguments':arguments}, var)
                var.registers(['loc', 'presetConfigErr', 'dirname', 'option', '_this', 'unknownOptErr', '_ref2', 'extendingOpts', 'alias', '_key2', 'rawOpts', 'opts'])
                var.put('_this', var.get("this"))
                var.put('rawOpts', var.get('_ref2').get('options'))
                var.put('extendingOpts', var.get('_ref2').get('extending'))
                var.put('alias', var.get('_ref2').get('alias'))
                var.put('loc', var.get('_ref2').get('loc'))
                var.put('dirname', var.get('_ref2').get('dirname'))
                var.put('alias', (var.get('alias') or Js('foreign')))
                if var.get('rawOpts').neg():
                    return var.get('undefined')
                if (PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('rawOpts',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('rawOpts'))),Js('object')) or var.get('Array').callprop('isArray', var.get('rawOpts'))):
                    var.get("this").get('log').callprop('error', (Js('Invalid options type for ')+var.get('alias')), var.get('TypeError'))
                @Js
                def PyJs_anonymous_253_(val, this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
                    var.registers(['val'])
                    if var.get('val').instanceof(var.get('_plugin3').get('default')):
                        return var.get('val')
                PyJs_anonymous_253_._set_name('anonymous')
                var.put('opts', PyJsComma(Js(0.0),var.get('_cloneDeepWith2').get('default'))(var.get('rawOpts'), PyJs_anonymous_253_))
                var.put('dirname', (var.get('dirname') or var.get('process').callprop('cwd')))
                var.put('loc', (var.get('loc') or var.get('alias')))
                for PyJsTemp in var.get('opts'):
                    var.put('_key2', PyJsTemp)
                    var.put('option', var.get('_config3').get('default').get(var.get('_key2')))
                    if (var.get('option').neg() and var.get("this").get('log')):
                        if var.get('_removed2').get('default').get(var.get('_key2')):
                            var.get("this").get('log').callprop('error', (((((Js('Using removed Babel 5 option: ')+var.get('alias'))+Js('.'))+var.get('_key2'))+Js(' - '))+var.get('_removed2').get('default').get(var.get('_key2')).get('message')), var.get('ReferenceError'))
                        else:
                            var.put('unknownOptErr', ((((Js('Unknown option: ')+var.get('alias'))+Js('.'))+var.get('_key2'))+Js('. Check out http://babeljs.io/docs/usage/options/ for more information about options.')))
                            var.put('presetConfigErr', Js("A common cause of this error is the presence of a configuration options object without the corresponding preset name. Example:\n\nInvalid:\n  `{ presets: [{option: value}] }`\nValid:\n  `{ presets: [['presetName', {option: value}]] }`\n\nFor more detailed information on preset configuration, please see http://babeljs.io/docs/plugins/#pluginpresets-options."))
                            var.get("this").get('log').callprop('error', ((var.get('unknownOptErr')+Js('\n\n'))+var.get('presetConfigErr')), var.get('ReferenceError'))
                PyJsComma(Js(0.0),var.get('_index').get('normaliseOptions'))(var.get('opts'))
                if var.get('opts').get('plugins'):
                    var.get('opts').put('plugins', var.get('OptionManager').callprop('normalisePlugins', var.get('loc'), var.get('dirname'), var.get('opts').get('plugins')))
                if var.get('opts').get('presets'):
                    if var.get('opts').get('passPerPreset'):
                        @Js
                        def PyJs_anonymous_254_(preset, presetLoc, this, arguments, var=var):
                            var = Scope({'presetLoc':presetLoc, 'this':this, 'preset':preset, 'arguments':arguments}, var)
                            var.registers(['presetLoc', 'preset'])
                            PyJs_Object_255_ = Js({'options':var.get('preset'),'extending':var.get('preset'),'alias':var.get('presetLoc'),'loc':var.get('presetLoc'),'dirname':var.get('dirname')})
                            var.get('_this').callprop('mergeOptions', PyJs_Object_255_)
                        PyJs_anonymous_254_._set_name('anonymous')
                        var.get('opts').put('presets', var.get("this").callprop('resolvePresets', var.get('opts').get('presets'), var.get('dirname'), PyJs_anonymous_254_))
                    else:
                        var.get("this").callprop('mergePresets', var.get('opts').get('presets'), var.get('dirname'))
                        var.get('opts').delete('presets')
                if PyJsStrictEq(var.get('rawOpts'),var.get('extendingOpts')):
                    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('extendingOpts'), var.get('opts'))
                else:
                    PyJsComma(Js(0.0),var.get('_merge2').get('default'))((var.get('extendingOpts') or var.get("this").get('options')), var.get('opts'))
            PyJs_mergeOptions_252_._set_name('mergeOptions')
            var.get('OptionManager').get('prototype').put('mergeOptions', PyJs_mergeOptions_252_)
            @Js
            def PyJs_mergePresets_256_(presets, dirname, this, arguments, var=var):
                var = Scope({'this':this, 'mergePresets':PyJs_mergePresets_256_, 'presets':presets, 'dirname':dirname, 'arguments':arguments}, var)
                var.registers(['presets', 'dirname', '_this2'])
                var.put('_this2', var.get("this"))
                @Js
                def PyJs_anonymous_257_(presetOpts, presetLoc, this, arguments, var=var):
                    var = Scope({'presetLoc':presetLoc, 'this':this, 'presetOpts':presetOpts, 'arguments':arguments}, var)
                    var.registers(['presetLoc', 'presetOpts'])
                    PyJs_Object_258_ = Js({'options':var.get('presetOpts'),'alias':var.get('presetLoc'),'loc':var.get('presetLoc'),'dirname':var.get('_path2').get('default').callprop('dirname', (var.get('presetLoc') or Js('')))})
                    var.get('_this2').callprop('mergeOptions', PyJs_Object_258_)
                PyJs_anonymous_257_._set_name('anonymous')
                var.get("this").callprop('resolvePresets', var.get('presets'), var.get('dirname'), PyJs_anonymous_257_)
            PyJs_mergePresets_256_._set_name('mergePresets')
            var.get('OptionManager').get('prototype').put('mergePresets', PyJs_mergePresets_256_)
            @Js
            def PyJs_resolvePresets_259_(presets, dirname, onResolve, this, arguments, var=var):
                var = Scope({'this':this, 'presets':presets, 'onResolve':onResolve, 'arguments':arguments, 'dirname':dirname, 'resolvePresets':PyJs_resolvePresets_259_}, var)
                var.registers(['onResolve', 'presets', 'dirname'])
                @Js
                def PyJs_anonymous_260_(val, this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
                    var.registers(['val', '_val', 'matches', 'rest', 'presetLoc', 'presetPath', '_val2', '__esModule', 'options', 'orgName'])
                    var.put('options', PyJsComma(Js(0.0), Js(None)))
                    if var.get('Array').callprop('isArray', var.get('val')):
                        if (var.get('val').get('length')>Js(2.0)):
                            PyJsTempException = JsToPyException(var.get('Error').create(((Js('Unexpected extra options ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('val').callprop('slice', Js(2.0))))+Js(' passed to preset.'))))
                            raise PyJsTempException
                        var.put('_val', var.get('val'))
                        var.put('val', var.get('_val').get('0'))
                        var.put('options', var.get('_val').get('1'))
                    var.put('presetLoc', PyJsComma(Js(0.0), Js(None)))
                    try:
                        if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                            var.put('presetLoc', (PyJsComma(Js(0.0),var.get('_resolve2').get('default'))((Js('babel-preset-')+var.get('val')), var.get('dirname')) or PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('val'), var.get('dirname'))))
                            if var.get('presetLoc').neg():
                                var.put('matches', var.get('val').callprop('match', JsRegExp('/^(@[^/]+)\\/(.+)$/')))
                                if var.get('matches'):
                                    var.put('orgName', var.get('matches').get('1'))
                                    var.put('presetPath', var.get('matches').get('2'))
                                    var.put('val', ((var.get('orgName')+Js('/babel-preset-'))+var.get('presetPath')))
                                    var.put('presetLoc', PyJsComma(Js(0.0),var.get('_resolve2').get('default'))(var.get('val'), var.get('dirname')))
                            if var.get('presetLoc').neg():
                                PyJsTempException = JsToPyException(var.get('Error').create((((Js("Couldn't find preset ")+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('val')))+Js(' relative to directory '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('dirname')))))
                                raise PyJsTempException
                            var.put('val', var.get('require')(var.get('presetLoc')))
                        if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('val'))),Js('object')) and var.get('val').get('__esModule')):
                            if var.get('val').get('default'):
                                var.put('val', var.get('val').get('default'))
                            else:
                                var.put('_val2', var.get('val'))
                                var.put('__esModule', var.get('_val2').get('__esModule'))
                                var.put('rest', PyJsComma(Js(0.0),var.get('_objectWithoutProperties3').get('default'))(var.get('_val2'), Js([Js('__esModule')])))
                                var.put('val', var.get('rest'))
                        if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('val'))),Js('object')) and var.get('val').get('buildPreset')):
                            var.put('val', var.get('val').get('buildPreset'))
                        if (PyJsStrictNeq(var.get('val',throw=False).typeof(),Js('function')) and PyJsStrictNeq(var.get('options'),var.get('undefined'))):
                            PyJsTempException = JsToPyException(var.get('Error').create(((((Js('Options ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('options')))+Js(' passed to '))+(var.get('presetLoc') or Js('a preset')))+Js(' which does not accept options.'))))
                            raise PyJsTempException
                        if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('function')):
                            var.put('val', var.get('val')(var.get('context'), var.get('options')))
                        if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('val'))),Js('object')):
                            PyJsTempException = JsToPyException(var.get('Error').create(((Js('Unsupported preset format: ')+var.get('val'))+Js('.'))))
                            raise PyJsTempException
                        (var.get('onResolve') and var.get('onResolve')(var.get('val'), var.get('presetLoc')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_49729099 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('presetLoc'):
                                var.get('e').put('message', ((Js(' (While processing preset: ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('presetLoc')))+Js(')')), '+')
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_49729099 is not None:
                                var.own['e'] = PyJsHolder_65_49729099
                            else:
                                del var.own['e']
                            del PyJsHolder_65_49729099
                    return var.get('val')
                PyJs_anonymous_260_._set_name('anonymous')
                return var.get('presets').callprop('map', PyJs_anonymous_260_)
            PyJs_resolvePresets_259_._set_name('resolvePresets')
            var.get('OptionManager').get('prototype').put('resolvePresets', PyJs_resolvePresets_259_)
            @Js
            def PyJs_normaliseOptions_261_(this, arguments, var=var):
                var = Scope({'this':this, 'normaliseOptions':PyJs_normaliseOptions_261_, 'arguments':arguments}, var)
                var.registers(['_key3', 'val', 'option', 'opts'])
                var.put('opts', var.get("this").get('options'))
                for PyJsTemp in var.get('_config3').get('default'):
                    var.put('_key3', PyJsTemp)
                    var.put('option', var.get('_config3').get('default').get(var.get('_key3')))
                    var.put('val', var.get('opts').get(var.get('_key3')))
                    if (var.get('val').neg() and var.get('option').get('optional')):
                        continue
                    if var.get('option').get('alias'):
                        var.get('opts').put(var.get('option').get('alias'), (var.get('opts').get(var.get('option').get('alias')) or var.get('val')))
                    else:
                        var.get('opts').put(var.get('_key3'), var.get('val'))
            PyJs_normaliseOptions_261_._set_name('normaliseOptions')
            var.get('OptionManager').get('prototype').put('normaliseOptions', PyJs_normaliseOptions_261_)
            @Js
            def PyJs_init_262_(this, arguments, var=var):
                var = Scope({'this':this, 'init':PyJs_init_262_, 'arguments':arguments}, var)
                var.registers(['_config', '_isArray2', '_ref3', '_i2', 'opts', '_iterator2'])
                PyJs_Object_263_ = Js({})
                var.put('opts', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else PyJs_Object_263_))
                #for JS loop
                var.put('_iterator2', PyJsComma(Js(0.0),var.get('_buildConfigChain2').get('default'))(var.get('opts'), var.get("this").get('log')))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref3', var.get('_i2').get('value'))
                    var.put('_config', var.get('_ref3'))
                    var.get("this").callprop('mergeOptions', var.get('_config'))
                
                var.get("this").callprop('normaliseOptions', var.get('opts'))
                return var.get("this").get('options')
            PyJs_init_262_._set_name('init')
            var.get('OptionManager').get('prototype').put('init', PyJs_init_262_)
            return var.get('OptionManager')
        PyJs_anonymous_244_._set_name('anonymous')
        var.put('OptionManager', PyJs_anonymous_244_())
        var.get('exports').put('default', var.get('OptionManager'))
        var.get('OptionManager').put('memoisedPlugins', Js([]))
        var.get('module').put('exports', var.get('exports').get('default'))
    PyJs_anonymous_241_._set_name('anonymous')
    PyJs_anonymous_241_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_240_._set_name('anonymous')
PyJs_Object_264_ = Js({'../../../api/node':Js(6.0),'../../../helpers/merge':Js(7.0),'../../../helpers/resolve':Js(9.0),'../../plugin':Js(25.0),'./build-config-chain':Js(15.0),'./config':Js(16.0),'./index':Js(17.0),'./removed':Js(20.0),'_process':Js(531.0),'babel-messages':Js(57.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/core-js/object/assign':Js(100.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/objectWithoutProperties':Js(112.0),'babel-runtime/helpers/typeof':Js(114.0),'lodash/clone':Js(438.0),'lodash/cloneDeepWith':Js(440.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_265_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['util', 'exports', '_interopRequireWildcard', 'require', 'list', '_util', 'filename', '_slash', 'booleanString', 'boolean', 'module', '_slash2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_267_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_267_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_booleanString_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        return var.get('util').callprop('booleanify', var.get('val'))
    PyJsHoisted_booleanString_.__name__ = 'booleanString'
    var.put('booleanString', PyJsHoisted_booleanString_)
    @Js
    def PyJsHoisted_boolean_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        return var.get('val').neg().neg()
    PyJsHoisted_boolean_.__name__ = 'boolean'
    var.put('boolean', PyJsHoisted_boolean_)
    @Js
    def PyJsHoisted_list_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        return var.get('util').callprop('list', var.get('val'))
    PyJsHoisted_list_.__name__ = 'list'
    var.put('list', PyJsHoisted_list_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_266_ = Js({})
            var.put('newObj', PyJs_Object_266_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('filename', var.get('undefined'))
    var.get('exports').put('boolean', var.get('boolean'))
    var.get('exports').put('booleanString', var.get('booleanString'))
    var.get('exports').put('list', var.get('list'))
    var.put('_slash', var.get('require')(Js('slash')))
    var.put('_slash2', var.get('_interopRequireDefault')(var.get('_slash')))
    var.put('_util', var.get('require')(Js('../../../util')))
    var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
    pass
    pass
    var.put('filename', var.get('exports').put('filename', var.get('_slash2').get('default')))
    pass
    pass
    pass
PyJs_anonymous_265_._set_name('anonymous')
PyJs_Object_268_ = Js({'../../../util':Js(26.0),'slash':Js(508.0)})
@Js
def PyJs_anonymous_269_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    PyJs_Object_271_ = Js({'message':Js('Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`')})
    PyJs_Object_272_ = Js({'message':Js('Put the specific transforms you want in the `plugins` option')})
    PyJs_Object_273_ = Js({'message':Js('This is not a necessary option in Babel 6')})
    PyJs_Object_274_ = Js({'message':Js('Put the specific transforms you want in the `plugins` option')})
    PyJs_Object_275_ = Js({'message':Js('Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/')})
    PyJs_Object_276_ = Js({'message':Js('')})
    PyJs_Object_277_ = Js({'message':Js('use the `pragma` option in the `react-jsx` plugin . Check out http://babeljs.io/docs/plugins/transform-react-jsx/')})
    PyJs_Object_278_ = Js({'message':Js('Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option.')})
    PyJs_Object_279_ = Js({'message':Js('Not required anymore as this is enabled by default')})
    PyJs_Object_280_ = Js({'message':Js('Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules')})
    PyJs_Object_281_ = Js({'message':Js('Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/')})
    PyJs_Object_282_ = Js({'message':Js('Put the specific transforms you want in the `plugins` option')})
    PyJs_Object_283_ = Js({'message':Js('Use the `sourceMapTarget` option')})
    PyJs_Object_284_ = Js({'message':Js('Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets')})
    PyJs_Object_285_ = Js({'message':Js('Put the specific transforms you want in the `plugins` option')})
    PyJs_Object_270_ = Js({'auxiliaryComment':PyJs_Object_271_,'blacklist':PyJs_Object_272_,'breakConfig':PyJs_Object_273_,'experimental':PyJs_Object_274_,'externalHelpers':PyJs_Object_275_,'extra':PyJs_Object_276_,'jsxPragma':PyJs_Object_277_,'loose':PyJs_Object_278_,'metadataUsedHelpers':PyJs_Object_279_,'modules':PyJs_Object_280_,'nonStandard':PyJs_Object_281_,'optional':PyJs_Object_282_,'sourceMapName':PyJs_Object_283_,'stage':PyJs_Object_284_,'whitelist':PyJs_Object_285_})
    var.get('module').put('exports', PyJs_Object_270_)
PyJs_anonymous_269_._set_name('anonymous')
PyJs_Object_286_ = Js({})
@Js
def PyJs_anonymous_287_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_plugin', 'exports', '_plugin2', 'require', 'module', '_sortBy2', '_interopRequireDefault', '_sortBy'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_288_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_288_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_plugin', var.get('require')(Js('../plugin')))
    var.put('_plugin2', var.get('_interopRequireDefault')(var.get('_plugin')))
    var.put('_sortBy', var.get('require')(Js('lodash/sortBy')))
    var.put('_sortBy2', var.get('_interopRequireDefault')(var.get('_sortBy')))
    pass
    @Js
    def PyJs_exit_292_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'exit':PyJs_exit_292_, 'arguments':arguments}, var)
        var.registers(['node', 'hasChange', '_ref', 'bodyNode', 'i'])
        var.put('node', var.get('_ref').get('node'))
        var.put('hasChange', Js(False))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('node').get('body').get('length')):
            try:
                var.put('bodyNode', var.get('node').get('body').get(var.get('i')))
                if (var.get('bodyNode') and (var.get('bodyNode').get('_blockHoist')!=var.get("null"))):
                    var.put('hasChange', var.get('true'))
                    break
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if var.get('hasChange').neg():
            return var.get('undefined')
        @Js
        def PyJs_anonymous_293_(bodyNode, this, arguments, var=var):
            var = Scope({'bodyNode':bodyNode, 'this':this, 'arguments':arguments}, var)
            var.registers(['priority', 'bodyNode'])
            var.put('priority', (var.get('bodyNode') and var.get('bodyNode').get('_blockHoist')))
            if (var.get('priority')==var.get("null")):
                var.put('priority', Js(1.0))
            if PyJsStrictEq(var.get('priority'),var.get('true')):
                var.put('priority', Js(2.0))
            return ((-Js(1.0))*var.get('priority'))
        PyJs_anonymous_293_._set_name('anonymous')
        var.get('node').put('body', PyJsComma(Js(0.0),var.get('_sortBy2').get('default'))(var.get('node').get('body'), PyJs_anonymous_293_))
    PyJs_exit_292_._set_name('exit')
    PyJs_Object_291_ = Js({'exit':PyJs_exit_292_})
    PyJs_Object_290_ = Js({'Block':PyJs_Object_291_})
    PyJs_Object_289_ = Js({'name':Js('internal.blockHoist'),'visitor':PyJs_Object_290_})
    var.get('exports').put('default', var.get('_plugin2').get('default').create(PyJs_Object_289_))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_287_._set_name('anonymous')
PyJs_Object_294_ = Js({'../plugin':Js(25.0),'lodash/sortBy':Js(485.0)})
@Js
def PyJs_anonymous_295_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_plugin', 'remap', '_symbol2', 'superVisitor', '_interopRequireWildcard', '_plugin2', 'SUPER_THIS_BOUND', 'require', '_babelTypes', 'exports', 'module', '_symbol', 't', '_interopRequireDefault', 'shouldShadow'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_297_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_297_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_remap_(path, key, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'key':key}, var)
        var.registers(['passedShadowFunction', 'cached', 'shadowFunction', 'classPath', 'hasSuperClass', 'init', 'key', 'fnPath', 'path', 'shadowPath', 'currentFunction', 'id'])
        var.put('shadowPath', var.get('path').callprop('inShadow', var.get('key')))
        if var.get('shouldShadow')(var.get('path'), var.get('shadowPath')).neg():
            return var.get('undefined')
        var.put('shadowFunction', var.get('path').get('node').get('_shadowedFunctionLiteral'))
        var.put('currentFunction', PyJsComma(Js(0.0), Js(None)))
        var.put('passedShadowFunction', Js(False))
        @Js
        def PyJs_anonymous_304_(innerPath, this, arguments, var=var):
            var = Scope({'this':this, 'innerPath':innerPath, 'arguments':arguments}, var)
            var.registers(['innerPath'])
            if ((var.get('innerPath').get('parentPath') and var.get('innerPath').get('parentPath').callprop('isClassProperty')) and PyJsStrictEq(var.get('innerPath').get('key'),Js('value'))):
                return var.get('true')
            if PyJsStrictEq(var.get('path'),var.get('innerPath')):
                return Js(False)
            if (var.get('innerPath').callprop('isProgram') or var.get('innerPath').callprop('isFunction')):
                var.put('currentFunction', (var.get('currentFunction') or var.get('innerPath')))
            if var.get('innerPath').callprop('isProgram'):
                var.put('passedShadowFunction', var.get('true'))
                return var.get('true')
            else:
                if (var.get('innerPath').callprop('isFunction') and var.get('innerPath').callprop('isArrowFunctionExpression').neg()):
                    if var.get('shadowFunction'):
                        if (PyJsStrictEq(var.get('innerPath'),var.get('shadowFunction')) or PyJsStrictEq(var.get('innerPath').get('node'),var.get('shadowFunction').get('node'))):
                            return var.get('true')
                    else:
                        if var.get('innerPath').callprop('is', Js('shadow')).neg():
                            return var.get('true')
                    var.put('passedShadowFunction', var.get('true'))
                    return Js(False)
            return Js(False)
        PyJs_anonymous_304_._set_name('anonymous')
        var.put('fnPath', var.get('path').callprop('find', PyJs_anonymous_304_))
        if ((var.get('shadowFunction') and var.get('fnPath').callprop('isProgram')) and var.get('shadowFunction').callprop('isProgram').neg()):
            @Js
            def PyJs_anonymous_305_(p, this, arguments, var=var):
                var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
                var.registers(['p'])
                return (var.get('p').callprop('isProgram') or var.get('p').callprop('isFunction'))
            PyJs_anonymous_305_._set_name('anonymous')
            var.put('fnPath', var.get('path').callprop('findParent', PyJs_anonymous_305_))
        if PyJsStrictEq(var.get('fnPath'),var.get('currentFunction')):
            return var.get('undefined')
        if var.get('passedShadowFunction').neg():
            return var.get('undefined')
        var.put('cached', var.get('fnPath').callprop('getData', var.get('key')))
        if var.get('cached'):
            return var.get('path').callprop('replaceWith', var.get('cached'))
        var.put('id', var.get('path').get('scope').callprop('generateUidIdentifier', var.get('key')))
        var.get('fnPath').callprop('setData', var.get('key'), var.get('id'))
        @Js
        def PyJs_anonymous_306_(p, this, arguments, var=var):
            var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
            var.registers(['p'])
            return var.get('p').callprop('isClass')
        PyJs_anonymous_306_._set_name('anonymous')
        var.put('classPath', var.get('fnPath').callprop('findParent', PyJs_anonymous_306_))
        var.put('hasSuperClass', ((var.get('classPath') and var.get('classPath').get('node')) and var.get('classPath').get('node').get('superClass')).neg().neg())
        PyJs_Object_307_ = Js({'kind':Js('constructor')})
        if ((PyJsStrictEq(var.get('key'),Js('this')) and var.get('fnPath').callprop('isMethod', PyJs_Object_307_)) and var.get('hasSuperClass')):
            PyJs_Object_308_ = Js({'id':var.get('id')})
            var.get('fnPath').get('scope').callprop('push', PyJs_Object_308_)
            PyJs_Object_309_ = Js({'id':var.get('id')})
            var.get('fnPath').callprop('traverse', var.get('superVisitor'), PyJs_Object_309_)
        else:
            var.put('init', (var.get('t').callprop('thisExpression') if PyJsStrictEq(var.get('key'),Js('this')) else var.get('t').callprop('identifier', var.get('key'))))
            if var.get('shadowFunction'):
                var.get('init').put('_shadowedFunctionLiteral', var.get('shadowFunction'))
            PyJs_Object_310_ = Js({'id':var.get('id'),'init':var.get('init')})
            var.get('fnPath').get('scope').callprop('push', PyJs_Object_310_)
        return var.get('path').callprop('replaceWith', var.get('id'))
    PyJsHoisted_remap_.__name__ = 'remap'
    var.put('remap', PyJsHoisted_remap_)
    @Js
    def PyJsHoisted_shouldShadow_(path, shadowPath, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'shadowPath':shadowPath, 'arguments':arguments}, var)
        var.registers(['path', 'shadowPath'])
        if var.get('path').callprop('is', Js('_forceShadow')):
            return var.get('true')
        else:
            return var.get('shadowPath')
    PyJsHoisted_shouldShadow_.__name__ = 'shouldShadow'
    var.put('shouldShadow', PyJsHoisted_shouldShadow_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_296_ = Js({})
            var.put('newObj', PyJs_Object_296_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    var.put('_plugin', var.get('require')(Js('../plugin')))
    var.put('_plugin2', var.get('_interopRequireDefault')(var.get('_plugin')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('SUPER_THIS_BOUND', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))(Js('super this bound')))
    @Js
    def PyJs_CallExpression_299_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'CallExpression':PyJs_CallExpression_299_}, var)
        var.registers(['node', 'path'])
        if var.get('path').callprop('get', Js('callee')).callprop('isSuper').neg():
            return var.get('undefined')
        var.put('node', var.get('path').get('node'))
        if var.get('node').get(var.get('SUPER_THIS_BOUND')):
            return var.get('undefined')
        var.get('node').put(var.get('SUPER_THIS_BOUND'), var.get('true'))
        var.get('path').callprop('replaceWith', var.get('t').callprop('assignmentExpression', Js('='), var.get("this").get('id'), var.get('node')))
    PyJs_CallExpression_299_._set_name('CallExpression')
    PyJs_Object_298_ = Js({'CallExpression':PyJs_CallExpression_299_})
    var.put('superVisitor', PyJs_Object_298_)
    @Js
    def PyJs_ThisExpression_302_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ThisExpression':PyJs_ThisExpression_302_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('remap')(var.get('path'), Js('this'))
    PyJs_ThisExpression_302_._set_name('ThisExpression')
    @Js
    def PyJs_ReferencedIdentifier_303_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_303_, 'arguments':arguments}, var)
        var.registers(['path'])
        if PyJsStrictEq(var.get('path').get('node').get('name'),Js('arguments')):
            var.get('remap')(var.get('path'), Js('arguments'))
    PyJs_ReferencedIdentifier_303_._set_name('ReferencedIdentifier')
    PyJs_Object_301_ = Js({'ThisExpression':PyJs_ThisExpression_302_,'ReferencedIdentifier':PyJs_ReferencedIdentifier_303_})
    PyJs_Object_300_ = Js({'name':Js('internal.shadowFunctions'),'visitor':PyJs_Object_301_})
    var.get('exports').put('default', var.get('_plugin2').get('default').create(PyJs_Object_300_))
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_295_._set_name('anonymous')
PyJs_Object_311_ = Js({'../plugin':Js(25.0),'babel-runtime/core-js/symbol':Js(105.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_312_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_plugin', 'Pipeline', '_plugin2', '_file', 'require', '_normalizeAst2', 'exports', 'module', '_file2', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2', '_normalizeAst'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_313_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_313_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_normalizeAst', var.get('require')(Js('../helpers/normalize-ast')))
    var.put('_normalizeAst2', var.get('_interopRequireDefault')(var.get('_normalizeAst')))
    var.put('_plugin', var.get('require')(Js('./plugin')))
    var.put('_plugin2', var.get('_interopRequireDefault')(var.get('_plugin')))
    var.put('_file', var.get('require')(Js('./file')))
    var.put('_file2', var.get('_interopRequireDefault')(var.get('_file')))
    pass
    @Js
    def PyJs_anonymous_314_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Pipeline'])
        @Js
        def PyJsHoisted_Pipeline_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Pipeline'))
        PyJsHoisted_Pipeline_.__name__ = 'Pipeline'
        var.put('Pipeline', PyJsHoisted_Pipeline_)
        pass
        @Js
        def PyJs_lint_315_(code, this, arguments, var=var):
            var = Scope({'this':this, 'lint':PyJs_lint_315_, 'code':code, 'arguments':arguments}, var)
            var.registers(['code', 'opts'])
            PyJs_Object_316_ = Js({})
            var.put('opts', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_316_))
            var.get('opts').put('code', Js(False))
            var.get('opts').put('mode', Js('lint'))
            return var.get("this").callprop('transform', var.get('code'), var.get('opts'))
        PyJs_lint_315_._set_name('lint')
        var.get('Pipeline').get('prototype').put('lint', PyJs_lint_315_)
        @Js
        def PyJs_pretransform_317_(code, opts, this, arguments, var=var):
            var = Scope({'this':this, 'pretransform':PyJs_pretransform_317_, 'code':code, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['code', 'opts', 'file'])
            var.put('file', var.get('_file2').get('default').create(var.get('opts'), var.get("this")))
            @Js
            def PyJs_anonymous_318_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('file').callprop('addCode', var.get('code'))
                var.get('file').callprop('parseCode', var.get('code'))
                return var.get('file')
            PyJs_anonymous_318_._set_name('anonymous')
            return var.get('file').callprop('wrap', var.get('code'), PyJs_anonymous_318_)
        PyJs_pretransform_317_._set_name('pretransform')
        var.get('Pipeline').get('prototype').put('pretransform', PyJs_pretransform_317_)
        @Js
        def PyJs_transform_319_(code, opts, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts, 'transform':PyJs_transform_319_}, var)
            var.registers(['code', 'opts', 'file'])
            var.put('file', var.get('_file2').get('default').create(var.get('opts'), var.get("this")))
            @Js
            def PyJs_anonymous_320_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('file').callprop('addCode', var.get('code'))
                var.get('file').callprop('parseCode', var.get('code'))
                return var.get('file').callprop('transform')
            PyJs_anonymous_320_._set_name('anonymous')
            return var.get('file').callprop('wrap', var.get('code'), PyJs_anonymous_320_)
        PyJs_transform_319_._set_name('transform')
        var.get('Pipeline').get('prototype').put('transform', PyJs_transform_319_)
        @Js
        def PyJs_analyse_321_(code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'analyse':PyJs_analyse_321_, 'arguments':arguments}, var)
            var.registers(['visitor', 'code', 'opts'])
            PyJs_Object_322_ = Js({})
            var.put('opts', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_322_))
            var.put('visitor', var.get('arguments').get('2'))
            var.get('opts').put('code', Js(False))
            if var.get('visitor'):
                var.get('opts').put('plugins', (var.get('opts').get('plugins') or Js([])))
                PyJs_Object_323_ = Js({'visitor':var.get('visitor')})
                var.get('opts').get('plugins').callprop('push', var.get('_plugin2').get('default').create(PyJs_Object_323_))
            return var.get("this").callprop('transform', var.get('code'), var.get('opts')).get('metadata')
        PyJs_analyse_321_._set_name('analyse')
        var.get('Pipeline').get('prototype').put('analyse', PyJs_analyse_321_)
        @Js
        def PyJs_transformFromAst_324_(ast, code, opts, this, arguments, var=var):
            var = Scope({'code':code, 'ast':ast, 'this':this, 'transformFromAst':PyJs_transformFromAst_324_, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['code', 'opts', 'file', 'ast'])
            var.put('ast', PyJsComma(Js(0.0),var.get('_normalizeAst2').get('default'))(var.get('ast')))
            var.put('file', var.get('_file2').get('default').create(var.get('opts'), var.get("this")))
            @Js
            def PyJs_anonymous_325_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('file').callprop('addCode', var.get('code'))
                var.get('file').callprop('addAst', var.get('ast'))
                return var.get('file').callprop('transform')
            PyJs_anonymous_325_._set_name('anonymous')
            return var.get('file').callprop('wrap', var.get('code'), PyJs_anonymous_325_)
        PyJs_transformFromAst_324_._set_name('transformFromAst')
        var.get('Pipeline').get('prototype').put('transformFromAst', PyJs_transformFromAst_324_)
        return var.get('Pipeline')
    PyJs_anonymous_314_._set_name('anonymous')
    var.put('Pipeline', PyJs_anonymous_314_())
    var.get('exports').put('default', var.get('Pipeline'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_312_._set_name('anonymous')
PyJs_Object_326_ = Js({'../helpers/normalize-ast':Js(8.0),'./file':Js(12.0),'./plugin':Js(25.0),'babel-runtime/helpers/classCallCheck':Js(110.0)})
@Js
def PyJs_anonymous_327_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_store', '_inherits3', '_inherits2', 'require', '_file6', '_possibleConstructorReturn3', '_possibleConstructorReturn2', 'module', '_file5', '_store2', 'PluginPass', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_328_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_328_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
    var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
    var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
    var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
    var.put('_store', var.get('require')(Js('../store')))
    var.put('_store2', var.get('_interopRequireDefault')(var.get('_store')))
    var.put('_file5', var.get('require')(Js('./file')))
    var.put('_file6', var.get('_interopRequireDefault')(var.get('_file5')))
    pass
    @Js
    def PyJs_anonymous_329_(_Store, this, arguments, var=var):
        var = Scope({'this':this, '_Store':_Store, 'arguments':arguments}, var)
        var.registers(['PluginPass', '_Store'])
        @Js
        def PyJsHoisted_PluginPass_(file, plugin, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'file':file, 'plugin':plugin}, var)
            var.registers(['file', 'options', '_this', 'plugin'])
            PyJs_Object_330_ = Js({})
            var.put('options', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else PyJs_Object_330_))
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('PluginPass'))
            var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_Store').callprop('call', var.get("this"))))
            var.get('_this').put('plugin', var.get('plugin'))
            var.get('_this').put('key', var.get('plugin').get('key'))
            var.get('_this').put('file', var.get('file'))
            var.get('_this').put('opts', var.get('options'))
            return var.get('_this')
        PyJsHoisted_PluginPass_.__name__ = 'PluginPass'
        var.put('PluginPass', PyJsHoisted_PluginPass_)
        PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('PluginPass'), var.get('_Store'))
        pass
        @Js
        def PyJs_addHelper_331_(this, arguments, var=var):
            var = Scope({'this':this, 'addHelper':PyJs_addHelper_331_, 'arguments':arguments}, var)
            var.registers(['_file'])
            pass
            return var.put('_file', var.get("this").get('file')).get('addHelper').callprop('apply', var.get('_file'), var.get('arguments'))
        PyJs_addHelper_331_._set_name('addHelper')
        var.get('PluginPass').get('prototype').put('addHelper', PyJs_addHelper_331_)
        @Js
        def PyJs_addImport_332_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'addImport':PyJs_addImport_332_}, var)
            var.registers(['_file2'])
            pass
            return var.put('_file2', var.get("this").get('file')).get('addImport').callprop('apply', var.get('_file2'), var.get('arguments'))
        PyJs_addImport_332_._set_name('addImport')
        var.get('PluginPass').get('prototype').put('addImport', PyJs_addImport_332_)
        @Js
        def PyJs_getModuleName_333_(this, arguments, var=var):
            var = Scope({'this':this, 'getModuleName':PyJs_getModuleName_333_, 'arguments':arguments}, var)
            var.registers(['_file3'])
            pass
            return var.put('_file3', var.get("this").get('file')).get('getModuleName').callprop('apply', var.get('_file3'), var.get('arguments'))
        PyJs_getModuleName_333_._set_name('getModuleName')
        var.get('PluginPass').get('prototype').put('getModuleName', PyJs_getModuleName_333_)
        @Js
        def PyJs_buildCodeFrameError_334_(this, arguments, var=var):
            var = Scope({'this':this, 'buildCodeFrameError':PyJs_buildCodeFrameError_334_, 'arguments':arguments}, var)
            var.registers(['_file4'])
            pass
            return var.put('_file4', var.get("this").get('file')).get('buildCodeFrameError').callprop('apply', var.get('_file4'), var.get('arguments'))
        PyJs_buildCodeFrameError_334_._set_name('buildCodeFrameError')
        var.get('PluginPass').get('prototype').put('buildCodeFrameError', PyJs_buildCodeFrameError_334_)
        return var.get('PluginPass')
    PyJs_anonymous_329_._set_name('anonymous')
    var.put('PluginPass', PyJs_anonymous_329_(var.get('_store2').get('default')))
    var.get('exports').put('default', var.get('PluginPass'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_327_._set_name('anonymous')
PyJs_Object_335_ = Js({'../store':Js(10.0),'./file':Js(12.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0)})
@Js
def PyJs_anonymous_336_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_store', 'module', '_clone', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_babelTraverse', '_possibleConstructorReturn3', '_possibleConstructorReturn2', '_store2', '_optionManager2', '_classCallCheck3', '_classCallCheck2', '_optionManager', 'exports', '_babelTraverse2', '_interopRequireWildcard', 'Plugin', '_inherits3', '_inherits2', '_assign', '_assign2', 'require', 'messages', 'GLOBAL_VISITOR_PROPS', '_clone2', '_babelMessages'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_338_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_338_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_337_ = Js({})
            var.put('newObj', PyJs_Object_337_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
    var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
    var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
    var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
    var.put('_optionManager', var.get('require')(Js('./file/options/option-manager')))
    var.put('_optionManager2', var.get('_interopRequireDefault')(var.get('_optionManager')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_store', var.get('require')(Js('../store')))
    var.put('_store2', var.get('_interopRequireDefault')(var.get('_store')))
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_babelTraverse2', var.get('_interopRequireDefault')(var.get('_babelTraverse')))
    var.put('_assign', var.get('require')(Js('lodash/assign')))
    var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
    var.put('_clone', var.get('require')(Js('lodash/clone')))
    var.put('_clone2', var.get('_interopRequireDefault')(var.get('_clone')))
    pass
    pass
    var.put('GLOBAL_VISITOR_PROPS', Js([Js('enter'), Js('exit')]))
    @Js
    def PyJs_anonymous_339_(_Store, this, arguments, var=var):
        var = Scope({'this':this, '_Store':_Store, 'arguments':arguments}, var)
        var.registers(['_Store', 'Plugin'])
        @Js
        def PyJsHoisted_Plugin_(plugin, key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key, 'plugin':plugin}, var)
            var.registers(['key', '_this', 'plugin'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Plugin'))
            var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_Store').callprop('call', var.get("this"))))
            var.get('_this').put('initialized', Js(False))
            PyJs_Object_340_ = Js({})
            var.get('_this').put('raw', PyJsComma(Js(0.0),var.get('_assign2').get('default'))(PyJs_Object_340_, var.get('plugin')))
            var.get('_this').put('key', (var.get('_this').callprop('take', Js('name')) or var.get('key')))
            var.get('_this').put('manipulateOptions', var.get('_this').callprop('take', Js('manipulateOptions')))
            var.get('_this').put('post', var.get('_this').callprop('take', Js('post')))
            var.get('_this').put('pre', var.get('_this').callprop('take', Js('pre')))
            PyJs_Object_341_ = Js({})
            var.get('_this').put('visitor', var.get('_this').callprop('normaliseVisitor', (PyJsComma(Js(0.0),var.get('_clone2').get('default'))(var.get('_this').callprop('take', Js('visitor'))) or PyJs_Object_341_)))
            return var.get('_this')
        PyJsHoisted_Plugin_.__name__ = 'Plugin'
        var.put('Plugin', PyJsHoisted_Plugin_)
        PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('Plugin'), var.get('_Store'))
        pass
        @Js
        def PyJs_take_342_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key, 'take':PyJs_take_342_}, var)
            var.registers(['key', 'val'])
            var.put('val', var.get("this").get('raw').get(var.get('key')))
            var.get("this").get('raw').delete(var.get('key'))
            return var.get('val')
        PyJs_take_342_._set_name('take')
        var.get('Plugin').get('prototype').put('take', PyJs_take_342_)
        @Js
        def PyJs_chain_343_(target, key, this, arguments, var=var):
            var = Scope({'this':this, 'chain':PyJs_chain_343_, 'target':target, 'key':key, 'arguments':arguments}, var)
            var.registers(['fns', 'target', 'key'])
            if var.get('target').get(var.get('key')).neg():
                return var.get("this").get(var.get('key'))
            if var.get("this").get(var.get('key')).neg():
                return var.get('target').get(var.get('key'))
            var.put('fns', Js([var.get('target').get(var.get('key')), var.get("this").get(var.get('key'))]))
            @Js
            def PyJs_anonymous_344_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_isArray', '_iterator', 'val', '_len', 'args', 'ret', '_key', '_i', '_ref', 'fn'])
                var.put('val', PyJsComma(Js(0.0), Js(None)))
                #for JS loop
                var.put('_len', var.get('arguments').get('length'))
                var.put('args', var.get('Array')(var.get('_len')))
                var.put('_key', Js(0.0))
                while (var.get('_key')<var.get('_len')):
                    try:
                        var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                    finally:
                            (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put('_iterator', var.get('fns'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('fn', var.get('_ref'))
                    if var.get('fn'):
                        var.put('ret', var.get('fn').callprop('apply', var.get("this"), var.get('args')))
                        if (var.get('ret')!=var.get("null")):
                            var.put('val', var.get('ret'))
                
                return var.get('val')
            PyJs_anonymous_344_._set_name('anonymous')
            return PyJs_anonymous_344_
        PyJs_chain_343_._set_name('chain')
        var.get('Plugin').get('prototype').put('chain', PyJs_chain_343_)
        @Js
        def PyJs_maybeInherit_345_(loc, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, 'arguments':arguments, 'maybeInherit':PyJs_maybeInherit_345_}, var)
            var.registers(['inherits', 'loc'])
            var.put('inherits', var.get("this").callprop('take', Js('inherits')))
            if var.get('inherits').neg():
                return var.get('undefined')
            var.put('inherits', var.get('_optionManager2').get('default').callprop('normalisePlugin', var.get('inherits'), var.get('loc'), Js('inherits')))
            var.get("this").put('manipulateOptions', var.get("this").callprop('chain', var.get('inherits'), Js('manipulateOptions')))
            var.get("this").put('post', var.get("this").callprop('chain', var.get('inherits'), Js('post')))
            var.get("this").put('pre', var.get("this").callprop('chain', var.get('inherits'), Js('pre')))
            var.get("this").put('visitor', var.get('_babelTraverse2').get('default').get('visitors').callprop('merge', Js([var.get('inherits').get('visitor'), var.get("this").get('visitor')])))
        PyJs_maybeInherit_345_._set_name('maybeInherit')
        var.get('Plugin').get('prototype').put('maybeInherit', PyJs_maybeInherit_345_)
        @Js
        def PyJs_init_346_(loc, i, this, arguments, var=var):
            var = Scope({'i':i, 'loc':loc, 'init':PyJs_init_346_, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'loc', 'key'])
            if var.get("this").get('initialized'):
                return var.get('undefined')
            var.get("this").put('initialized', var.get('true'))
            var.get("this").callprop('maybeInherit', var.get('loc'))
            for PyJsTemp in var.get("this").get('raw'):
                var.put('key', PyJsTemp)
                PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('pluginInvalidProperty'), var.get('loc'), var.get('i'), var.get('key'))))
                raise PyJsTempException
        PyJs_init_346_._set_name('init')
        var.get('Plugin').get('prototype').put('init', PyJs_init_346_)
        @Js
        def PyJs_normaliseVisitor_347_(visitor, this, arguments, var=var):
            var = Scope({'this':this, 'visitor':visitor, 'normaliseVisitor':PyJs_normaliseVisitor_347_, 'arguments':arguments}, var)
            var.registers(['_isArray2', 'visitor', '_i2', '_ref2', 'key', '_iterator2'])
            #for JS loop
            var.put('_iterator2', var.get('GLOBAL_VISITOR_PROPS'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('key', var.get('_ref2'))
                if var.get('visitor').get(var.get('key')):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.")))
                    raise PyJsTempException
            
            var.get('_babelTraverse2').get('default').callprop('explode', var.get('visitor'))
            return var.get('visitor')
        PyJs_normaliseVisitor_347_._set_name('normaliseVisitor')
        var.get('Plugin').get('prototype').put('normaliseVisitor', PyJs_normaliseVisitor_347_)
        return var.get('Plugin')
    PyJs_anonymous_339_._set_name('anonymous')
    var.put('Plugin', PyJs_anonymous_339_(var.get('_store2').get('default')))
    var.get('exports').put('default', var.get('Plugin'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_336_._set_name('anonymous')
PyJs_Object_348_ = Js({'../store':Js(10.0),'./file/options/option-manager':Js(18.0),'babel-messages':Js(57.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0),'babel-traverse':Js(225.0),'lodash/assign':Js(435.0),'lodash/clone':Js(438.0)})
@Js
def PyJs_anonymous_349_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_shouldIgnore', '_startsWith', 'module', '_isString2', '_slash2', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_isBoolean', '_isRegExp2', 'shouldIgnore', '_slash', 'booleanify', '_isRegExp', '_minimatch2', 'exports', '_escapeRegExp2', '_minimatch', '_includes2', '_util', 'canCompile', '_path2', 'arrayify', '_escapeRegExp', '_isString', '_startsWith2', 'list', 'regexify', '_includes', 'require', '_isBoolean2', '_path'])
    @Js
    def PyJsHoisted__shouldIgnore_(pattern, filename, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'arguments':arguments, 'filename':filename}, var)
        var.registers(['pattern', 'filename'])
        if PyJsStrictEq(var.get('pattern',throw=False).typeof(),Js('function')):
            return var.get('pattern')(var.get('filename'))
        else:
            return var.get('pattern').callprop('test', var.get('filename'))
    PyJsHoisted__shouldIgnore_.__name__ = '_shouldIgnore'
    var.put('_shouldIgnore', PyJsHoisted__shouldIgnore_)
    @Js
    def PyJsHoisted_shouldIgnore_(filename, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'filename':filename}, var)
        var.registers(['_isArray', '_pattern', '_iterator', '_isArray2', 'pattern', '_i2', '_ref2', 'ignore', 'only', '_i', '_ref', 'filename', '_iterator2'])
        var.put('ignore', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js([])))
        var.put('only', var.get('arguments').get('2'))
        var.put('filename', var.get('filename').callprop('replace', JsRegExp('/\\\\/g'), Js('/')))
        if var.get('only'):
            #for JS loop
            var.put('_iterator', var.get('only'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('pattern', var.get('_ref'))
                if var.get('_shouldIgnore')(var.get('pattern'), var.get('filename')):
                    return Js(False)
            
            return var.get('true')
        else:
            if var.get('ignore').get('length'):
                #for JS loop
                var.put('_iterator2', var.get('ignore'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('_pattern', var.get('_ref2'))
                    if var.get('_shouldIgnore')(var.get('_pattern'), var.get('filename')):
                        return var.get('true')
                
        return Js(False)
    PyJsHoisted_shouldIgnore_.__name__ = 'shouldIgnore'
    var.put('shouldIgnore', PyJsHoisted_shouldIgnore_)
    @Js
    def PyJsHoisted_list_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        if var.get('val').neg():
            return Js([])
        else:
            if var.get('Array').callprop('isArray', var.get('val')):
                return var.get('val')
            else:
                if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                    return var.get('val').callprop('split', Js(','))
                else:
                    return Js([var.get('val')])
    PyJsHoisted_list_.__name__ = 'list'
    var.put('list', PyJsHoisted_list_)
    @Js
    def PyJsHoisted_regexify_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['regex', 'val'])
        if var.get('val').neg():
            return var.get('RegExp').create(JsRegExp('/.^/'))
        if var.get('Array').callprop('isArray', var.get('val')):
            var.put('val', var.get('RegExp').create(var.get('val').callprop('map', var.get('_escapeRegExp2').get('default')).callprop('join', Js('|')), Js('i')))
        if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
            var.put('val', PyJsComma(Js(0.0),var.get('_slash2').get('default'))(var.get('val')))
            if (PyJsComma(Js(0.0),var.get('_startsWith2').get('default'))(var.get('val'), Js('./')) or PyJsComma(Js(0.0),var.get('_startsWith2').get('default'))(var.get('val'), Js('*/'))):
                var.put('val', var.get('val').callprop('slice', Js(2.0)))
            if PyJsComma(Js(0.0),var.get('_startsWith2').get('default'))(var.get('val'), Js('**/')):
                var.put('val', var.get('val').callprop('slice', Js(3.0)))
            PyJs_Object_355_ = Js({'nocase':var.get('true')})
            var.put('regex', var.get('_minimatch2').get('default').callprop('makeRe', var.get('val'), PyJs_Object_355_))
            return var.get('RegExp').create(var.get('regex').get('source').callprop('slice', Js(1.0), (-Js(1.0))), Js('i'))
        if PyJsComma(Js(0.0),var.get('_isRegExp2').get('default'))(var.get('val')):
            return var.get('val')
        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('illegal type for regexify')))
        raise PyJsTempException
    PyJsHoisted_regexify_.__name__ = 'regexify'
    var.put('regexify', PyJsHoisted_regexify_)
    @Js
    def PyJsHoisted_booleanify_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        if (PyJsStrictEq(var.get('val'),Js('true')) or (var.get('val')==Js(1.0))):
            return var.get('true')
        if ((PyJsStrictEq(var.get('val'),Js('false')) or (var.get('val')==Js(0.0))) or var.get('val').neg()):
            return Js(False)
        return var.get('val')
    PyJsHoisted_booleanify_.__name__ = 'booleanify'
    var.put('booleanify', PyJsHoisted_booleanify_)
    @Js
    def PyJsHoisted_canCompile_(filename, altExts, this, arguments, var=var):
        var = Scope({'this':this, 'altExts':altExts, 'arguments':arguments, 'filename':filename}, var)
        var.registers(['ext', 'exts', 'altExts', 'filename'])
        var.put('exts', (var.get('altExts') or var.get('canCompile').get('EXTENSIONS')))
        var.put('ext', var.get('_path2').get('default').callprop('extname', var.get('filename')))
        return PyJsComma(Js(0.0),var.get('_includes2').get('default'))(var.get('exts'), var.get('ext'))
    PyJsHoisted_canCompile_.__name__ = 'canCompile'
    var.put('canCompile', PyJsHoisted_canCompile_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_354_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_354_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_arrayify_(val, mapFn, this, arguments, var=var):
        var = Scope({'this':this, 'mapFn':mapFn, 'arguments':arguments, 'val':val}, var)
        var.registers(['mapFn', 'val'])
        if var.get('val').neg():
            return Js([])
        if PyJsComma(Js(0.0),var.get('_isBoolean2').get('default'))(var.get('val')):
            return var.get('arrayify')(Js([var.get('val')]), var.get('mapFn'))
        if PyJsComma(Js(0.0),var.get('_isString2').get('default'))(var.get('val')):
            return var.get('arrayify')(var.get('list')(var.get('val')), var.get('mapFn'))
        if var.get('Array').callprop('isArray', var.get('val')):
            if var.get('mapFn'):
                var.put('val', var.get('val').callprop('map', var.get('mapFn')))
            return var.get('val')
        return Js([var.get('val')])
    PyJsHoisted_arrayify_.__name__ = 'arrayify'
    var.put('arrayify', PyJsHoisted_arrayify_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('inspect', var.get('exports').put('inherits', var.get('undefined')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_util', var.get('require')(Js('util')))
    @Js
    def PyJs_get_351_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_351_}, var)
        var.registers([])
        return var.get('_util').get('inherits')
    PyJs_get_351_._set_name('get')
    PyJs_Object_350_ = Js({'enumerable':var.get('true'),'get':PyJs_get_351_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('inherits'), PyJs_Object_350_)
    @Js
    def PyJs_get_353_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_353_}, var)
        var.registers([])
        return var.get('_util').get('inspect')
    PyJs_get_353_._set_name('get')
    PyJs_Object_352_ = Js({'enumerable':var.get('true'),'get':PyJs_get_353_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('inspect'), PyJs_Object_352_)
    var.get('exports').put('canCompile', var.get('canCompile'))
    var.get('exports').put('list', var.get('list'))
    var.get('exports').put('regexify', var.get('regexify'))
    var.get('exports').put('arrayify', var.get('arrayify'))
    var.get('exports').put('booleanify', var.get('booleanify'))
    var.get('exports').put('shouldIgnore', var.get('shouldIgnore'))
    var.put('_escapeRegExp', var.get('require')(Js('lodash/escapeRegExp')))
    var.put('_escapeRegExp2', var.get('_interopRequireDefault')(var.get('_escapeRegExp')))
    var.put('_startsWith', var.get('require')(Js('lodash/startsWith')))
    var.put('_startsWith2', var.get('_interopRequireDefault')(var.get('_startsWith')))
    var.put('_isBoolean', var.get('require')(Js('lodash/isBoolean')))
    var.put('_isBoolean2', var.get('_interopRequireDefault')(var.get('_isBoolean')))
    var.put('_minimatch', var.get('require')(Js('minimatch')))
    var.put('_minimatch2', var.get('_interopRequireDefault')(var.get('_minimatch')))
    var.put('_includes', var.get('require')(Js('lodash/includes')))
    var.put('_includes2', var.get('_interopRequireDefault')(var.get('_includes')))
    var.put('_isString', var.get('require')(Js('lodash/isString')))
    var.put('_isString2', var.get('_interopRequireDefault')(var.get('_isString')))
    var.put('_isRegExp', var.get('require')(Js('lodash/isRegExp')))
    var.put('_isRegExp2', var.get('_interopRequireDefault')(var.get('_isRegExp')))
    var.put('_path', var.get('require')(Js('path')))
    var.put('_path2', var.get('_interopRequireDefault')(var.get('_path')))
    var.put('_slash', var.get('require')(Js('slash')))
    var.put('_slash2', var.get('_interopRequireDefault')(var.get('_slash')))
    pass
    pass
    var.get('canCompile').put('EXTENSIONS', Js([Js('.js'), Js('.jsx'), Js('.es6'), Js('.es')]))
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_349_._set_name('anonymous')
PyJs_Object_356_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'lodash/escapeRegExp':Js(445.0),'lodash/includes':Js(456.0),'lodash/isBoolean':Js(461.0),'lodash/isRegExp':Js(470.0),'lodash/isString':Js(471.0),'lodash/startsWith':Js(486.0),'minimatch':Js(27.0),'path':Js(530.0),'slash':Js(508.0),'util':Js(534.0)})
@Js
def PyJs_anonymous_357_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['Minimatch', 'qmark', 'module', 'parse', 'regExpEscape', 'path', 'minimatch', 'reSpecials', 'make', 'twoStarNoDot', 'match', 'exports', 'star', 'plTypes', 'charSet', 'parseNegate', 'twoStarDot', 'expand', 'SUBPARSE', 'globUnescape', 'braceExpand', 'makeRe', 'GLOBSTAR', 'slashSplit', 'filter', 'ext', 'require'])
    @Js
    def PyJsHoisted_minimatch_(p, pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'p':p, 'options':options, 'arguments':arguments, 'pattern':pattern}, var)
        var.registers(['p', 'options', 'pattern'])
        if PyJsStrictNeq(var.get('pattern',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('glob pattern string required')))
            raise PyJsTempException
        if var.get('options').neg():
            PyJs_Object_379_ = Js({})
            var.put('options', PyJs_Object_379_)
        if (var.get('options').get('nocomment').neg() and PyJsStrictEq(var.get('pattern').callprop('charAt', Js(0.0)),Js('#'))):
            return Js(False)
        if PyJsStrictEq(var.get('pattern').callprop('trim'),Js('')):
            return PyJsStrictEq(var.get('p'),Js(''))
        return var.get('Minimatch').create(var.get('pattern'), var.get('options')).callprop('match', var.get('p'))
    PyJsHoisted_minimatch_.__name__ = 'minimatch'
    var.put('minimatch', PyJsHoisted_minimatch_)
    @Js
    def PyJsHoisted_globUnescape_(s, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
        var.registers(['s'])
        return var.get('s').callprop('replace', JsRegExp('/\\\\(.)/g'), Js('$1'))
    PyJsHoisted_globUnescape_.__name__ = 'globUnescape'
    var.put('globUnescape', PyJsHoisted_globUnescape_)
    @Js
    def PyJsHoisted_makeRe_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['twoStar', 'set', 'flags', 'options', 're'])
        if (var.get("this").get('regexp') or PyJsStrictEq(var.get("this").get('regexp'),Js(False))):
            return var.get("this").get('regexp')
        var.put('set', var.get("this").get('set'))
        if var.get('set').get('length').neg():
            var.get("this").put('regexp', Js(False))
            return var.get("this").get('regexp')
        var.put('options', var.get("this").get('options'))
        var.put('twoStar', (var.get('star') if var.get('options').get('noglobstar') else (var.get('twoStarDot') if var.get('options').get('dot') else var.get('twoStarNoDot'))))
        var.put('flags', (Js('i') if var.get('options').get('nocase') else Js('')))
        @Js
        def PyJs_anonymous_392_(pattern, this, arguments, var=var):
            var = Scope({'this':this, 'pattern':pattern, 'arguments':arguments}, var)
            var.registers(['pattern'])
            @Js
            def PyJs_anonymous_393_(p, this, arguments, var=var):
                var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
                var.registers(['p'])
                return (var.get('twoStar') if PyJsStrictEq(var.get('p'),var.get('GLOBSTAR')) else (var.get('regExpEscape')(var.get('p')) if PyJsStrictEq(var.get('p',throw=False).typeof(),Js('string')) else var.get('p').get('_src')))
            PyJs_anonymous_393_._set_name('anonymous')
            return var.get('pattern').callprop('map', PyJs_anonymous_393_).callprop('join', Js('\\/'))
        PyJs_anonymous_392_._set_name('anonymous')
        var.put('re', var.get('set').callprop('map', PyJs_anonymous_392_).callprop('join', Js('|')))
        var.put('re', ((Js('^(?:')+var.get('re'))+Js(')$')))
        if var.get("this").get('negate'):
            var.put('re', ((Js('^(?!')+var.get('re'))+Js(').*$')))
        try:
            var.get("this").put('regexp', var.get('RegExp').create(var.get('re'), var.get('flags')))
        except PyJsException as PyJsTempException:
            PyJsHolder_6578_58961032 = var.own.get('ex')
            var.force_own_put('ex', PyExceptionToJs(PyJsTempException))
            try:
                var.get("this").put('regexp', Js(False))
            finally:
                if PyJsHolder_6578_58961032 is not None:
                    var.own['ex'] = PyJsHolder_6578_58961032
                else:
                    del var.own['ex']
                del PyJsHolder_6578_58961032
        return var.get("this").get('regexp')
    PyJsHoisted_makeRe_.__name__ = 'makeRe'
    var.put('makeRe', PyJsHoisted_makeRe_)
    @Js
    def PyJsHoisted_regExpEscape_(s, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
        var.registers(['s'])
        return var.get('s').callprop('replace', JsRegExp('/[-[\\]{}()*+?.,\\\\^$|#\\s]/g'), Js('\\$&'))
    PyJsHoisted_regExpEscape_.__name__ = 'regExpEscape'
    var.put('regExpEscape', PyJsHoisted_regExpEscape_)
    @Js
    def PyJsHoisted_Minimatch_(pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'options':options, 'arguments':arguments}, var)
        var.registers(['pattern', 'options'])
        if var.get("this").instanceof(var.get('Minimatch')).neg():
            return var.get('Minimatch').create(var.get('pattern'), var.get('options'))
        if PyJsStrictNeq(var.get('pattern',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('glob pattern string required')))
            raise PyJsTempException
        if var.get('options').neg():
            PyJs_Object_380_ = Js({})
            var.put('options', PyJs_Object_380_)
        var.put('pattern', var.get('pattern').callprop('trim'))
        if PyJsStrictNeq(var.get('path').get('sep'),Js('/')):
            var.put('pattern', var.get('pattern').callprop('split', var.get('path').get('sep')).callprop('join', Js('/')))
        var.get("this").put('options', var.get('options'))
        var.get("this").put('set', Js([]))
        var.get("this").put('pattern', var.get('pattern'))
        var.get("this").put('regexp', var.get("null"))
        var.get("this").put('negate', Js(False))
        var.get("this").put('comment', Js(False))
        var.get("this").put('empty', Js(False))
        var.get("this").callprop('make')
    PyJsHoisted_Minimatch_.__name__ = 'Minimatch'
    var.put('Minimatch', PyJsHoisted_Minimatch_)
    @Js
    def PyJsHoisted_make_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['pattern', 'set', 'options'])
        if var.get("this").get('_made'):
            return var.get('undefined')
        var.put('pattern', var.get("this").get('pattern'))
        var.put('options', var.get("this").get('options'))
        if (var.get('options').get('nocomment').neg() and PyJsStrictEq(var.get('pattern').callprop('charAt', Js(0.0)),Js('#'))):
            var.get("this").put('comment', var.get('true'))
            return var.get('undefined')
        if var.get('pattern').neg():
            var.get("this").put('empty', var.get('true'))
            return var.get('undefined')
        var.get("this").callprop('parseNegate')
        var.put('set', var.get("this").put('globSet', var.get("this").callprop('braceExpand')))
        if var.get('options').get('debug'):
            var.get("this").put('debug', var.get('console').get('error'))
        var.get("this").callprop('debug', var.get("this").get('pattern'), var.get('set'))
        @Js
        def PyJs_anonymous_382_(s, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
            var.registers(['s'])
            return var.get('s').callprop('split', var.get('slashSplit'))
        PyJs_anonymous_382_._set_name('anonymous')
        var.put('set', var.get("this").put('globParts', var.get('set').callprop('map', PyJs_anonymous_382_)))
        var.get("this").callprop('debug', var.get("this").get('pattern'), var.get('set'))
        @Js
        def PyJs_anonymous_383_(s, si, set, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'set':set, 'si':si, 'arguments':arguments}, var)
            var.registers(['s', 'set', 'si'])
            return var.get('s').callprop('map', var.get("this").get('parse'), var.get("this"))
        PyJs_anonymous_383_._set_name('anonymous')
        var.put('set', var.get('set').callprop('map', PyJs_anonymous_383_, var.get("this")))
        var.get("this").callprop('debug', var.get("this").get('pattern'), var.get('set'))
        @Js
        def PyJs_anonymous_384_(s, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
            var.registers(['s'])
            return PyJsStrictEq(var.get('s').callprop('indexOf', Js(False)),(-Js(1.0)))
        PyJs_anonymous_384_._set_name('anonymous')
        var.put('set', var.get('set').callprop('filter', PyJs_anonymous_384_))
        var.get("this").callprop('debug', var.get("this").get('pattern'), var.get('set'))
        var.get("this").put('set', var.get('set'))
    PyJsHoisted_make_.__name__ = 'make'
    var.put('make', PyJsHoisted_make_)
    @Js
    def PyJsHoisted_charSet_(s, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
        var.registers(['s'])
        @Js
        def PyJs_anonymous_366_(set, c, this, arguments, var=var):
            var = Scope({'this':this, 'c':c, 'set':set, 'arguments':arguments}, var)
            var.registers(['c', 'set'])
            var.get('set').put(var.get('c'), var.get('true'))
            return var.get('set')
        PyJs_anonymous_366_._set_name('anonymous')
        PyJs_Object_367_ = Js({})
        return var.get('s').callprop('split', Js('')).callprop('reduce', PyJs_anonymous_366_, PyJs_Object_367_)
    PyJsHoisted_charSet_.__name__ = 'charSet'
    var.put('charSet', PyJsHoisted_charSet_)
    @Js
    def PyJsHoisted_filter_(pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'options':options, 'arguments':arguments}, var)
        var.registers(['pattern', 'options'])
        PyJs_Object_368_ = Js({})
        var.put('options', (var.get('options') or PyJs_Object_368_))
        @Js
        def PyJs_anonymous_369_(p, i, list, this, arguments, var=var):
            var = Scope({'i':i, 'p':p, 'this':this, 'list':list, 'arguments':arguments}, var)
            var.registers(['i', 'p', 'list'])
            return var.get('minimatch')(var.get('p'), var.get('pattern'), var.get('options'))
        PyJs_anonymous_369_._set_name('anonymous')
        return PyJs_anonymous_369_
    PyJsHoisted_filter_.__name__ = 'filter'
    var.put('filter', PyJsHoisted_filter_)
    @Js
    def PyJsHoisted_ext_(a, b, this, arguments, var=var):
        var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
        var.registers(['a', 'b', 't'])
        PyJs_Object_370_ = Js({})
        var.put('a', (var.get('a') or PyJs_Object_370_))
        PyJs_Object_371_ = Js({})
        var.put('b', (var.get('b') or PyJs_Object_371_))
        PyJs_Object_372_ = Js({})
        var.put('t', PyJs_Object_372_)
        @Js
        def PyJs_anonymous_373_(k, this, arguments, var=var):
            var = Scope({'this':this, 'k':k, 'arguments':arguments}, var)
            var.registers(['k'])
            var.get('t').put(var.get('k'), var.get('b').get(var.get('k')))
        PyJs_anonymous_373_._set_name('anonymous')
        var.get('Object').callprop('keys', var.get('b')).callprop('forEach', PyJs_anonymous_373_)
        @Js
        def PyJs_anonymous_374_(k, this, arguments, var=var):
            var = Scope({'this':this, 'k':k, 'arguments':arguments}, var)
            var.registers(['k'])
            var.get('t').put(var.get('k'), var.get('a').get(var.get('k')))
        PyJs_anonymous_374_._set_name('anonymous')
        var.get('Object').callprop('keys', var.get('a')).callprop('forEach', PyJs_anonymous_374_)
        return var.get('t')
    PyJsHoisted_ext_.__name__ = 'ext'
    var.put('ext', PyJsHoisted_ext_)
    @Js
    def PyJsHoisted_parseNegate_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'pattern', 'l', 'negateOffset', 'negate', 'options'])
        var.put('pattern', var.get("this").get('pattern'))
        var.put('negate', Js(False))
        var.put('options', var.get("this").get('options'))
        var.put('negateOffset', Js(0.0))
        if var.get('options').get('nonegate'):
            return var.get('undefined')
        #for JS loop
        var.put('i', Js(0.0))
        var.put('l', var.get('pattern').get('length'))
        while ((var.get('i')<var.get('l')) and PyJsStrictEq(var.get('pattern').callprop('charAt', var.get('i')),Js('!'))):
            try:
                var.put('negate', var.get('negate').neg())
                (var.put('negateOffset',Js(var.get('negateOffset').to_number())+Js(1))-Js(1))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if var.get('negateOffset'):
            var.get("this").put('pattern', var.get('pattern').callprop('substr', var.get('negateOffset')))
        var.get("this").put('negate', var.get('negate'))
    PyJsHoisted_parseNegate_.__name__ = 'parseNegate'
    var.put('parseNegate', PyJsHoisted_parseNegate_)
    @Js
    def PyJsHoisted_parse_(pattern, isSub, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'isSub':isSub, 'arguments':arguments}, var)
        var.registers(['hasMagic', 'newRe', 'patternStart', 'dollar', 'nlLast', 'cs', 'isSub', 'nl', 'cleanAfter', 'reClassStart', 'pattern', 'self', 'addPatternStart', 'nlFirst', 're', 'tail', 'classStart', 'clearStateChar', 'regExp', 'pl', 'patternListStack', 'escaping', 'stateChar', 'len', 'nlAfter', 'nlBefore', 'c', 'i', 'sp', 'inClass', 'n', 'openParensBefore', 'flags', 't', 'negativeLists', 'options'])
        @Js
        def PyJsHoisted_clearStateChar_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get('stateChar'):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('stateChar'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('*')):
                        SWITCHED = True
                        var.put('re', var.get('star'), '+')
                        var.put('hasMagic', var.get('true'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('?')):
                        SWITCHED = True
                        var.put('re', var.get('qmark'), '+')
                        var.put('hasMagic', var.get('true'))
                        break
                    if True:
                        SWITCHED = True
                        var.put('re', (Js('\\')+var.get('stateChar')), '+')
                        break
                    SWITCHED = True
                    break
                var.get('self').callprop('debug', Js('clearStateChar %j %j'), var.get('stateChar'), var.get('re'))
                var.put('stateChar', Js(False))
        PyJsHoisted_clearStateChar_.__name__ = 'clearStateChar'
        var.put('clearStateChar', PyJsHoisted_clearStateChar_)
        if (var.get('pattern').get('length')>(Js(1024.0)*Js(64.0))):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('pattern is too long')))
            raise PyJsTempException
        var.put('options', var.get("this").get('options'))
        if (var.get('options').get('noglobstar').neg() and PyJsStrictEq(var.get('pattern'),Js('**'))):
            return var.get('GLOBSTAR')
        if PyJsStrictEq(var.get('pattern'),Js('')):
            return Js('')
        var.put('re', Js(''))
        var.put('hasMagic', var.get('options').get('nocase').neg().neg())
        var.put('escaping', Js(False))
        var.put('patternListStack', Js([]))
        var.put('negativeLists', Js([]))
        pass
        var.put('inClass', Js(False))
        var.put('reClassStart', (-Js(1.0)))
        var.put('classStart', (-Js(1.0)))
        var.put('patternStart', (Js('') if PyJsStrictEq(var.get('pattern').callprop('charAt', Js(0.0)),Js('.')) else (Js('(?!(?:^|\\/)\\.{1,2}(?:$|\\/))') if var.get('options').get('dot') else Js('(?!\\.)'))))
        var.put('self', var.get("this"))
        pass
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('pattern').get('length'))
        while ((var.get('i')<var.get('len')) and var.put('c', var.get('pattern').callprop('charAt', var.get('i')))):
            try:
                var.get("this").callprop('debug', Js('%s\t%s %s %j'), var.get('pattern'), var.get('i'), var.get('re'), var.get('c'))
                if (var.get('escaping') and var.get('reSpecials').get(var.get('c'))):
                    var.put('re', (Js('\\')+var.get('c')), '+')
                    var.put('escaping', Js(False))
                    continue
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('c'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('/')):
                        SWITCHED = True
                        return Js(False)
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('\\')):
                        SWITCHED = True
                        var.get('clearStateChar')()
                        var.put('escaping', var.get('true'))
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('?')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('*')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('+')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('@')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('!')):
                        SWITCHED = True
                        var.get("this").callprop('debug', Js('%s\t%s %s %j <-- stateChar'), var.get('pattern'), var.get('i'), var.get('re'), var.get('c'))
                        if var.get('inClass'):
                            var.get("this").callprop('debug', Js('  in class'))
                            if (PyJsStrictEq(var.get('c'),Js('!')) and PyJsStrictEq(var.get('i'),(var.get('classStart')+Js(1.0)))):
                                var.put('c', Js('^'))
                            var.put('re', var.get('c'), '+')
                            continue
                        var.get('self').callprop('debug', Js('call clearStateChar %j'), var.get('stateChar'))
                        var.get('clearStateChar')()
                        var.put('stateChar', var.get('c'))
                        if var.get('options').get('noext'):
                            var.get('clearStateChar')()
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('(')):
                        SWITCHED = True
                        if var.get('inClass'):
                            var.put('re', Js('('), '+')
                            continue
                        if var.get('stateChar').neg():
                            var.put('re', Js('\\('), '+')
                            continue
                        PyJs_Object_388_ = Js({'type':var.get('stateChar'),'start':(var.get('i')-Js(1.0)),'reStart':var.get('re').get('length'),'open':var.get('plTypes').get(var.get('stateChar')).get('open'),'close':var.get('plTypes').get(var.get('stateChar')).get('close')})
                        var.get('patternListStack').callprop('push', PyJs_Object_388_)
                        var.put('re', (Js('(?:(?!(?:') if PyJsStrictEq(var.get('stateChar'),Js('!')) else Js('(?:')), '+')
                        var.get("this").callprop('debug', Js('plType %j %j'), var.get('stateChar'), var.get('re'))
                        var.put('stateChar', Js(False))
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(')')):
                        SWITCHED = True
                        if (var.get('inClass') or var.get('patternListStack').get('length').neg()):
                            var.put('re', Js('\\)'), '+')
                            continue
                        var.get('clearStateChar')()
                        var.put('hasMagic', var.get('true'))
                        var.put('pl', var.get('patternListStack').callprop('pop'))
                        var.put('re', var.get('pl').get('close'), '+')
                        if PyJsStrictEq(var.get('pl').get('type'),Js('!')):
                            var.get('negativeLists').callprop('push', var.get('pl'))
                        var.get('pl').put('reEnd', var.get('re').get('length'))
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('|')):
                        SWITCHED = True
                        if ((var.get('inClass') or var.get('patternListStack').get('length').neg()) or var.get('escaping')):
                            var.put('re', Js('\\|'), '+')
                            var.put('escaping', Js(False))
                            continue
                        var.get('clearStateChar')()
                        var.put('re', Js('|'), '+')
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[')):
                        SWITCHED = True
                        var.get('clearStateChar')()
                        if var.get('inClass'):
                            var.put('re', (Js('\\')+var.get('c')), '+')
                            continue
                        var.put('inClass', var.get('true'))
                        var.put('classStart', var.get('i'))
                        var.put('reClassStart', var.get('re').get('length'))
                        var.put('re', var.get('c'), '+')
                        continue
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(']')):
                        SWITCHED = True
                        if (PyJsStrictEq(var.get('i'),(var.get('classStart')+Js(1.0))) or var.get('inClass').neg()):
                            var.put('re', (Js('\\')+var.get('c')), '+')
                            var.put('escaping', Js(False))
                            continue
                        if var.get('inClass'):
                            var.put('cs', var.get('pattern').callprop('substring', (var.get('classStart')+Js(1.0)), var.get('i')))
                            try:
                                var.get('RegExp')(((Js('[')+var.get('cs'))+Js(']')))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_6572_91644122 = var.own.get('er')
                                var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.put('sp', var.get("this").callprop('parse', var.get('cs'), var.get('SUBPARSE')))
                                    var.put('re', (((var.get('re').callprop('substr', Js(0.0), var.get('reClassStart'))+Js('\\['))+var.get('sp').get('0'))+Js('\\]')))
                                    var.put('hasMagic', (var.get('hasMagic') or var.get('sp').get('1')))
                                    var.put('inClass', Js(False))
                                    continue
                                finally:
                                    if PyJsHolder_6572_91644122 is not None:
                                        var.own['er'] = PyJsHolder_6572_91644122
                                    else:
                                        del var.own['er']
                                    del PyJsHolder_6572_91644122
                        var.put('hasMagic', var.get('true'))
                        var.put('inClass', Js(False))
                        var.put('re', var.get('c'), '+')
                        continue
                    if True:
                        SWITCHED = True
                        var.get('clearStateChar')()
                        if var.get('escaping'):
                            var.put('escaping', Js(False))
                        else:
                            if (var.get('reSpecials').get(var.get('c')) and (PyJsStrictEq(var.get('c'),Js('^')) and var.get('inClass')).neg()):
                                var.put('re', Js('\\'), '+')
                        var.put('re', var.get('c'), '+')
                    SWITCHED = True
                    break
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if var.get('inClass'):
            var.put('cs', var.get('pattern').callprop('substr', (var.get('classStart')+Js(1.0))))
            var.put('sp', var.get("this").callprop('parse', var.get('cs'), var.get('SUBPARSE')))
            var.put('re', ((var.get('re').callprop('substr', Js(0.0), var.get('reClassStart'))+Js('\\['))+var.get('sp').get('0')))
            var.put('hasMagic', (var.get('hasMagic') or var.get('sp').get('1')))
        #for JS loop
        var.put('pl', var.get('patternListStack').callprop('pop'))
        while var.get('pl'):
            try:
                var.put('tail', var.get('re').callprop('slice', (var.get('pl').get('reStart')+var.get('pl').get('open').get('length'))))
                var.get("this").callprop('debug', Js('setting tail'), var.get('re'), var.get('pl'))
                @Js
                def PyJs_anonymous_389_(_, PyJsArg_2431_, PyJsArg_2432_, this, arguments, var=var):
                    var = Scope({'this':this, '$2':PyJsArg_2432_, 'arguments':arguments, '_':_, '$1':PyJsArg_2431_}, var)
                    var.registers(['$2', '_', '$1'])
                    if var.get('$2').neg():
                        var.put('$2', Js('\\'))
                    return (((var.get('$1')+var.get('$1'))+var.get('$2'))+Js('|'))
                PyJs_anonymous_389_._set_name('anonymous')
                var.put('tail', var.get('tail').callprop('replace', JsRegExp('/((?:\\\\{2}){0,64})(\\\\?)\\|/g'), PyJs_anonymous_389_))
                var.get("this").callprop('debug', Js('tail=%j\n   %s'), var.get('tail'), var.get('tail'), var.get('pl'), var.get('re'))
                var.put('t', (var.get('star') if PyJsStrictEq(var.get('pl').get('type'),Js('*')) else (var.get('qmark') if PyJsStrictEq(var.get('pl').get('type'),Js('?')) else (Js('\\')+var.get('pl').get('type')))))
                var.put('hasMagic', var.get('true'))
                var.put('re', (((var.get('re').callprop('slice', Js(0.0), var.get('pl').get('reStart'))+var.get('t'))+Js('\\('))+var.get('tail')))
            finally:
                    var.put('pl', var.get('patternListStack').callprop('pop'))
        var.get('clearStateChar')()
        if var.get('escaping'):
            var.put('re', Js('\\\\'), '+')
        var.put('addPatternStart', Js(False))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('re').callprop('charAt', Js(0.0)))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('.')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('[')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('(')):
                SWITCHED = True
                var.put('addPatternStart', var.get('true'))
            SWITCHED = True
            break
        #for JS loop
        var.put('n', (var.get('negativeLists').get('length')-Js(1.0)))
        while (var.get('n')>(-Js(1.0))):
            try:
                var.put('nl', var.get('negativeLists').get(var.get('n')))
                var.put('nlBefore', var.get('re').callprop('slice', Js(0.0), var.get('nl').get('reStart')))
                var.put('nlFirst', var.get('re').callprop('slice', var.get('nl').get('reStart'), (var.get('nl').get('reEnd')-Js(8.0))))
                var.put('nlLast', var.get('re').callprop('slice', (var.get('nl').get('reEnd')-Js(8.0)), var.get('nl').get('reEnd')))
                var.put('nlAfter', var.get('re').callprop('slice', var.get('nl').get('reEnd')))
                var.put('nlLast', var.get('nlAfter'), '+')
                var.put('openParensBefore', (var.get('nlBefore').callprop('split', Js('(')).get('length')-Js(1.0)))
                var.put('cleanAfter', var.get('nlAfter'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('openParensBefore')):
                    try:
                        var.put('cleanAfter', var.get('cleanAfter').callprop('replace', JsRegExp('/\\)[+*?]?/'), Js('')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('nlAfter', var.get('cleanAfter'))
                var.put('dollar', Js(''))
                if (PyJsStrictEq(var.get('nlAfter'),Js('')) and PyJsStrictNeq(var.get('isSub'),var.get('SUBPARSE'))):
                    var.put('dollar', Js('$'))
                var.put('newRe', ((((var.get('nlBefore')+var.get('nlFirst'))+var.get('nlAfter'))+var.get('dollar'))+var.get('nlLast')))
                var.put('re', var.get('newRe'))
            finally:
                    (var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))
        if (PyJsStrictNeq(var.get('re'),Js('')) and var.get('hasMagic')):
            var.put('re', (Js('(?=.)')+var.get('re')))
        if var.get('addPatternStart'):
            var.put('re', (var.get('patternStart')+var.get('re')))
        if PyJsStrictEq(var.get('isSub'),var.get('SUBPARSE')):
            return Js([var.get('re'), var.get('hasMagic')])
        if var.get('hasMagic').neg():
            return var.get('globUnescape')(var.get('pattern'))
        var.put('flags', (Js('i') if var.get('options').get('nocase') else Js('')))
        try:
            var.put('regExp', var.get('RegExp').create(((Js('^')+var.get('re'))+Js('$')), var.get('flags')))
        except PyJsException as PyJsTempException:
            PyJsHolder_6572_96421937 = var.own.get('er')
            var.force_own_put('er', PyExceptionToJs(PyJsTempException))
            try:
                return var.get('RegExp').create(Js('$.'))
            finally:
                if PyJsHolder_6572_96421937 is not None:
                    var.own['er'] = PyJsHolder_6572_96421937
                else:
                    del var.own['er']
                del PyJsHolder_6572_96421937
        var.get('regExp').put('_glob', var.get('pattern'))
        var.get('regExp').put('_src', var.get('re'))
        return var.get('regExp')
    PyJsHoisted_parse_.__name__ = 'parse'
    var.put('parse', PyJsHoisted_parse_)
    @Js
    def PyJsHoisted_braceExpand_(pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'options':options, 'arguments':arguments}, var)
        var.registers(['pattern', 'options'])
        if var.get('options').neg():
            if var.get("this").instanceof(var.get('Minimatch')):
                var.put('options', var.get("this").get('options'))
            else:
                PyJs_Object_386_ = Js({})
                var.put('options', PyJs_Object_386_)
        var.put('pattern', (var.get("this").get('pattern') if PyJsStrictEq(var.get('pattern',throw=False).typeof(),Js('undefined')) else var.get('pattern')))
        if PyJsStrictEq(var.get('pattern',throw=False).typeof(),Js('undefined')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('undefined pattern')))
            raise PyJsTempException
        if (var.get('options').get('nobrace') or var.get('pattern').callprop('match', JsRegExp('/\\{.*\\}/')).neg()):
            return Js([var.get('pattern')])
        return var.get('expand')(var.get('pattern'))
    PyJsHoisted_braceExpand_.__name__ = 'braceExpand'
    var.put('braceExpand', PyJsHoisted_braceExpand_)
    @Js
    def PyJsHoisted_match_(f, partial, this, arguments, var=var):
        var = Scope({'this':this, 'partial':partial, 'arguments':arguments, 'f':f}, var)
        var.registers(['set', 'hit', 'f', 'i', 'pattern', 'filename', 'file', 'partial', 'options'])
        var.get("this").callprop('debug', Js('match'), var.get('f'), var.get("this").get('pattern'))
        if var.get("this").get('comment'):
            return Js(False)
        if var.get("this").get('empty'):
            return PyJsStrictEq(var.get('f'),Js(''))
        if (PyJsStrictEq(var.get('f'),Js('/')) and var.get('partial')):
            return var.get('true')
        var.put('options', var.get("this").get('options'))
        if PyJsStrictNeq(var.get('path').get('sep'),Js('/')):
            var.put('f', var.get('f').callprop('split', var.get('path').get('sep')).callprop('join', Js('/')))
        var.put('f', var.get('f').callprop('split', var.get('slashSplit')))
        var.get("this").callprop('debug', var.get("this").get('pattern'), Js('split'), var.get('f'))
        var.put('set', var.get("this").get('set'))
        var.get("this").callprop('debug', var.get("this").get('pattern'), Js('set'), var.get('set'))
        pass
        pass
        #for JS loop
        var.put('i', (var.get('f').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                var.put('filename', var.get('f').get(var.get('i')))
                if var.get('filename'):
                    break
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('set').get('length')):
            try:
                var.put('pattern', var.get('set').get(var.get('i')))
                var.put('file', var.get('f'))
                if (var.get('options').get('matchBase') and PyJsStrictEq(var.get('pattern').get('length'),Js(1.0))):
                    var.put('file', Js([var.get('filename')]))
                var.put('hit', var.get("this").callprop('matchOne', var.get('file'), var.get('pattern'), var.get('partial')))
                if var.get('hit'):
                    if var.get('options').get('flipNegate'):
                        return var.get('true')
                    return var.get("this").get('negate').neg()
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if var.get('options').get('flipNegate'):
            return Js(False)
        return var.get("this").get('negate')
    PyJsHoisted_match_.__name__ = 'match'
    var.put('match', PyJsHoisted_match_)
    var.get('module').put('exports', var.get('minimatch'))
    var.get('minimatch').put('Minimatch', var.get('Minimatch'))
    PyJs_Object_358_ = Js({'sep':Js('/')})
    var.put('path', PyJs_Object_358_)
    try:
        var.put('path', var.get('require')(Js('path')))
    except PyJsException as PyJsTempException:
        PyJsHolder_6572_32117432 = var.own.get('er')
        var.force_own_put('er', PyExceptionToJs(PyJsTempException))
        try:
            pass
        finally:
            if PyJsHolder_6572_32117432 is not None:
                var.own['er'] = PyJsHolder_6572_32117432
            else:
                del var.own['er']
            del PyJsHolder_6572_32117432
    PyJs_Object_359_ = Js({})
    var.put('GLOBSTAR', var.get('minimatch').put('GLOBSTAR', var.get('Minimatch').put('GLOBSTAR', PyJs_Object_359_)))
    var.put('expand', var.get('require')(Js('brace-expansion')))
    PyJs_Object_361_ = Js({'open':Js('(?:(?!(?:'),'close':Js('))[^/]*?)')})
    PyJs_Object_362_ = Js({'open':Js('(?:'),'close':Js(')?')})
    PyJs_Object_363_ = Js({'open':Js('(?:'),'close':Js(')+')})
    PyJs_Object_364_ = Js({'open':Js('(?:'),'close':Js(')*')})
    PyJs_Object_365_ = Js({'open':Js('(?:'),'close':Js(')')})
    PyJs_Object_360_ = Js({'!':PyJs_Object_361_,'?':PyJs_Object_362_,'+':PyJs_Object_363_,'*':PyJs_Object_364_,'@':PyJs_Object_365_})
    var.put('plTypes', PyJs_Object_360_)
    var.put('qmark', Js('[^/]'))
    var.put('star', (var.get('qmark')+Js('*?')))
    var.put('twoStarDot', Js('(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'))
    var.put('twoStarNoDot', Js('(?:(?!(?:\\/|^)\\.).)*?'))
    var.put('reSpecials', var.get('charSet')(Js('().*{}+?[]^$\\!')))
    pass
    var.put('slashSplit', JsRegExp('/\\/+/'))
    var.get('minimatch').put('filter', var.get('filter'))
    pass
    pass
    @Js
    def PyJs_anonymous_375_(PyJsArg_646566_, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'def':PyJsArg_646566_}, var)
        var.registers(['m', 'def', 'orig'])
        if (var.get('def').neg() or var.get('Object').callprop('keys', var.get('def')).get('length').neg()):
            return var.get('minimatch')
        var.put('orig', var.get('minimatch'))
        @Js
        def PyJs_minimatch_376_(p, pattern, options, this, arguments, var=var):
            var = Scope({'minimatch':PyJs_minimatch_376_, 'this':this, 'pattern':pattern, 'p':p, 'arguments':arguments, 'options':options}, var)
            var.registers(['p', 'options', 'pattern'])
            return var.get('orig').callprop('minimatch', var.get('p'), var.get('pattern'), var.get('ext')(var.get('def'), var.get('options')))
        PyJs_minimatch_376_._set_name('minimatch')
        var.put('m', PyJs_minimatch_376_)
        @Js
        def PyJs_Minimatch_377_(pattern, options, this, arguments, var=var):
            var = Scope({'this':this, 'pattern':pattern, 'Minimatch':PyJs_Minimatch_377_, 'options':options, 'arguments':arguments}, var)
            var.registers(['pattern', 'options'])
            return var.get('orig').get('Minimatch').create(var.get('pattern'), var.get('ext')(var.get('def'), var.get('options')))
        PyJs_Minimatch_377_._set_name('Minimatch')
        var.get('m').put('Minimatch', PyJs_Minimatch_377_)
        return var.get('m')
    PyJs_anonymous_375_._set_name('anonymous')
    var.get('minimatch').put('defaults', PyJs_anonymous_375_)
    @Js
    def PyJs_anonymous_378_(PyJsArg_646566_, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'def':PyJsArg_646566_}, var)
        var.registers(['def'])
        if (var.get('def').neg() or var.get('Object').callprop('keys', var.get('def')).get('length').neg()):
            return var.get('Minimatch')
        return var.get('minimatch').callprop('defaults', var.get('def')).get('Minimatch')
    PyJs_anonymous_378_._set_name('anonymous')
    var.get('Minimatch').put('defaults', PyJs_anonymous_378_)
    pass
    pass
    @Js
    def PyJs_anonymous_381_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJs_anonymous_381_._set_name('anonymous')
    var.get('Minimatch').get('prototype').put('debug', PyJs_anonymous_381_)
    var.get('Minimatch').get('prototype').put('make', var.get('make'))
    pass
    var.get('Minimatch').get('prototype').put('parseNegate', var.get('parseNegate'))
    pass
    @Js
    def PyJs_anonymous_385_(pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'options':options, 'arguments':arguments}, var)
        var.registers(['pattern', 'options'])
        return var.get('braceExpand')(var.get('pattern'), var.get('options'))
    PyJs_anonymous_385_._set_name('anonymous')
    var.get('minimatch').put('braceExpand', PyJs_anonymous_385_)
    var.get('Minimatch').get('prototype').put('braceExpand', var.get('braceExpand'))
    pass
    var.get('Minimatch').get('prototype').put('parse', var.get('parse'))
    PyJs_Object_387_ = Js({})
    var.put('SUBPARSE', PyJs_Object_387_)
    pass
    @Js
    def PyJs_anonymous_390_(pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'options':options, 'arguments':arguments}, var)
        var.registers(['pattern', 'options'])
        PyJs_Object_391_ = Js({})
        return var.get('Minimatch').create(var.get('pattern'), (var.get('options') or PyJs_Object_391_)).callprop('makeRe')
    PyJs_anonymous_390_._set_name('anonymous')
    var.get('minimatch').put('makeRe', PyJs_anonymous_390_)
    var.get('Minimatch').get('prototype').put('makeRe', var.get('makeRe'))
    pass
    @Js
    def PyJs_anonymous_394_(list, pattern, options, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'list':list, 'options':options, 'arguments':arguments}, var)
        var.registers(['mm', 'pattern', 'list', 'options'])
        PyJs_Object_395_ = Js({})
        var.put('options', (var.get('options') or PyJs_Object_395_))
        var.put('mm', var.get('Minimatch').create(var.get('pattern'), var.get('options')))
        @Js
        def PyJs_anonymous_396_(f, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'f':f}, var)
            var.registers(['f'])
            return var.get('mm').callprop('match', var.get('f'))
        PyJs_anonymous_396_._set_name('anonymous')
        var.put('list', var.get('list').callprop('filter', PyJs_anonymous_396_))
        if (var.get('mm').get('options').get('nonull') and var.get('list').get('length').neg()):
            var.get('list').callprop('push', var.get('pattern'))
        return var.get('list')
    PyJs_anonymous_394_._set_name('anonymous')
    var.get('minimatch').put('match', PyJs_anonymous_394_)
    var.get('Minimatch').get('prototype').put('match', var.get('match'))
    pass
    @Js
    def PyJs_anonymous_397_(file, pattern, partial, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'partial':partial, 'arguments':arguments, 'file':file}, var)
        var.registers(['pr', 'emptyFileEnd', 'fr', 'hit', 'f', 'pattern', 'p', 'partial', 'file', 'fi', 'swallowee', 'pi', 'fl', 'options', 'pl'])
        var.put('options', var.get("this").get('options'))
        PyJs_Object_398_ = Js({'this':var.get("this"),'file':var.get('file'),'pattern':var.get('pattern')})
        var.get("this").callprop('debug', Js('matchOne'), PyJs_Object_398_)
        var.get("this").callprop('debug', Js('matchOne'), var.get('file').get('length'), var.get('pattern').get('length'))
        #for JS loop
        var.put('fi', Js(0.0))
        var.put('pi', Js(0.0))
        var.put('fl', var.get('file').get('length'))
        var.put('pl', var.get('pattern').get('length'))
        while ((var.get('fi')<var.get('fl')) and (var.get('pi')<var.get('pl'))):
            try:
                var.get("this").callprop('debug', Js('matchOne loop'))
                var.put('p', var.get('pattern').get(var.get('pi')))
                var.put('f', var.get('file').get(var.get('fi')))
                var.get("this").callprop('debug', var.get('pattern'), var.get('p'), var.get('f'))
                if PyJsStrictEq(var.get('p'),Js(False)):
                    return Js(False)
                if PyJsStrictEq(var.get('p'),var.get('GLOBSTAR')):
                    var.get("this").callprop('debug', Js('GLOBSTAR'), Js([var.get('pattern'), var.get('p'), var.get('f')]))
                    var.put('fr', var.get('fi'))
                    var.put('pr', (var.get('pi')+Js(1.0)))
                    if PyJsStrictEq(var.get('pr'),var.get('pl')):
                        var.get("this").callprop('debug', Js('** at the end'))
                        #for JS loop
                        
                        while (var.get('fi')<var.get('fl')):
                            try:
                                if ((PyJsStrictEq(var.get('file').get(var.get('fi')),Js('.')) or PyJsStrictEq(var.get('file').get(var.get('fi')),Js('..'))) or (var.get('options').get('dot').neg() and PyJsStrictEq(var.get('file').get(var.get('fi')).callprop('charAt', Js(0.0)),Js('.')))):
                                    return Js(False)
                            finally:
                                    (var.put('fi',Js(var.get('fi').to_number())+Js(1))-Js(1))
                        return var.get('true')
                    while (var.get('fr')<var.get('fl')):
                        var.put('swallowee', var.get('file').get(var.get('fr')))
                        var.get("this").callprop('debug', Js('\nglobstar while'), var.get('file'), var.get('fr'), var.get('pattern'), var.get('pr'), var.get('swallowee'))
                        if var.get("this").callprop('matchOne', var.get('file').callprop('slice', var.get('fr')), var.get('pattern').callprop('slice', var.get('pr')), var.get('partial')):
                            var.get("this").callprop('debug', Js('globstar found match!'), var.get('fr'), var.get('fl'), var.get('swallowee'))
                            return var.get('true')
                        else:
                            if ((PyJsStrictEq(var.get('swallowee'),Js('.')) or PyJsStrictEq(var.get('swallowee'),Js('..'))) or (var.get('options').get('dot').neg() and PyJsStrictEq(var.get('swallowee').callprop('charAt', Js(0.0)),Js('.')))):
                                var.get("this").callprop('debug', Js('dot detected!'), var.get('file'), var.get('fr'), var.get('pattern'), var.get('pr'))
                                break
                            var.get("this").callprop('debug', Js('globstar swallow a segment, and continue'))
                            (var.put('fr',Js(var.get('fr').to_number())+Js(1))-Js(1))
                    if var.get('partial'):
                        var.get("this").callprop('debug', Js('\n>>> no match, partial?'), var.get('file'), var.get('fr'), var.get('pattern'), var.get('pr'))
                        if PyJsStrictEq(var.get('fr'),var.get('fl')):
                            return var.get('true')
                    return Js(False)
                pass
                if PyJsStrictEq(var.get('p',throw=False).typeof(),Js('string')):
                    if var.get('options').get('nocase'):
                        var.put('hit', PyJsStrictEq(var.get('f').callprop('toLowerCase'),var.get('p').callprop('toLowerCase')))
                    else:
                        var.put('hit', PyJsStrictEq(var.get('f'),var.get('p')))
                    var.get("this").callprop('debug', Js('string match'), var.get('p'), var.get('f'), var.get('hit'))
                else:
                    var.put('hit', var.get('f').callprop('match', var.get('p')))
                    var.get("this").callprop('debug', Js('pattern match'), var.get('p'), var.get('f'), var.get('hit'))
                if var.get('hit').neg():
                    return Js(False)
            finally:
                    PyJsComma((var.put('fi',Js(var.get('fi').to_number())+Js(1))-Js(1)),(var.put('pi',Js(var.get('pi').to_number())+Js(1))-Js(1)))
        if (PyJsStrictEq(var.get('fi'),var.get('fl')) and PyJsStrictEq(var.get('pi'),var.get('pl'))):
            return var.get('true')
        else:
            if PyJsStrictEq(var.get('fi'),var.get('fl')):
                return var.get('partial')
            else:
                if PyJsStrictEq(var.get('pi'),var.get('pl')):
                    var.put('emptyFileEnd', (PyJsStrictEq(var.get('fi'),(var.get('fl')-Js(1.0))) and PyJsStrictEq(var.get('file').get(var.get('fi')),Js(''))))
                    return var.get('emptyFileEnd')
        PyJsTempException = JsToPyException(var.get('Error').create(Js('wtf?')))
        raise PyJsTempException
    PyJs_anonymous_397_._set_name('anonymous')
    var.get('Minimatch').get('prototype').put('matchOne', PyJs_anonymous_397_)
    pass
    pass
PyJs_anonymous_357_._set_name('anonymous')
PyJs_Object_399_ = Js({'brace-expansion':Js(264.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_400_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_402_ = Js({'raw':Js('babel-core'),'scope':var.get("null"),'escapedName':Js('babel-core'),'name':Js('babel-core'),'rawSpec':Js(''),'spec':Js('latest'),'type':Js('tag')})
    PyJs_Object_403_ = Js({'host':Js('packages-18-east.internal.npmjs.com'),'tmp':Js('tmp/babel-core-6.18.2.tgz_1478035855416_0.08754534856416285')})
    PyJs_Object_404_ = Js({'name':Js('hzoo'),'email':Js('hi@henryzoo.com')})
    PyJs_Object_405_ = Js({'brace-expansion':Js('1.1.5')})
    PyJs_Object_406_ = Js({'raw':Js('babel-core'),'scope':var.get("null"),'escapedName':Js('babel-core'),'name':Js('babel-core'),'rawSpec':Js(''),'spec':Js('latest'),'type':Js('tag')})
    PyJs_Object_407_ = Js({'name':Js('Sebastian McKenzie'),'email':Js('sebmck@gmail.com')})
    PyJs_Object_408_ = Js({'babel-code-frame':Js('^6.16.0'),'babel-generator':Js('^6.18.0'),'babel-helpers':Js('^6.16.0'),'babel-messages':Js('^6.8.0'),'babel-register':Js('^6.18.0'),'babel-runtime':Js('^6.9.1'),'babel-template':Js('^6.16.0'),'babel-traverse':Js('^6.18.0'),'babel-types':Js('^6.18.0'),'babylon':Js('^6.11.0'),'convert-source-map':Js('^1.1.0'),'debug':Js('^2.1.1'),'json5':Js('^0.5.0'),'lodash':Js('^4.2.0'),'minimatch':Js('^3.0.2'),'path-is-absolute':Js('^1.0.0'),'private':Js('^0.1.6'),'slash':Js('^1.0.0'),'source-map':Js('^0.5.0')})
    PyJs_Object_409_ = Js({'babel-helper-fixtures':Js('^6.18.2'),'babel-helper-transform-fixture-test-runner':Js('^6.18.2'),'babel-polyfill':Js('^6.16.0')})
    PyJs_Object_410_ = Js({})
    PyJs_Object_411_ = Js({'shasum':Js('d8bb14dd6986fa4f3566a26ceda3964fa0e04e5b'),'tarball':Js('https://registry.npmjs.org/babel-core/-/babel-core-6.18.2.tgz')})
    PyJs_Object_412_ = Js({'name':Js('amasad'),'email':Js('amjad.masad@gmail.com')})
    PyJs_Object_413_ = Js({'name':Js('hzoo'),'email':Js('hi@henryzoo.com')})
    PyJs_Object_414_ = Js({'name':Js('jmm'),'email':Js('npm-public@jessemccarthy.net')})
    PyJs_Object_415_ = Js({'name':Js('loganfsmyth'),'email':Js('loganfsmyth@gmail.com')})
    PyJs_Object_416_ = Js({'name':Js('sebmck'),'email':Js('sebmck@gmail.com')})
    PyJs_Object_417_ = Js({'name':Js('thejameskyle'),'email':Js('me@thejameskyle.com')})
    PyJs_Object_418_ = Js({})
    PyJs_Object_419_ = Js({'type':Js('git'),'url':Js('https://github.com/babel/babel/tree/master/packages/babel-core')})
    PyJs_Object_420_ = Js({'bench':Js('make bench'),'test':Js('make test')})
    PyJs_Object_401_ = Js({'_args':Js([Js([PyJs_Object_402_, Js('/Users/PiotrDabkowski/PycharmProjects/Js2Py/js2py/es6')])]),'_from':Js('babel-core@latest'),'_id':Js('babel-core@6.18.2'),'_inCache':var.get('true'),'_location':Js('/babel-core'),'_nodeVersion':Js('6.8.1'),'_npmOperationalInternal':PyJs_Object_403_,'_npmUser':PyJs_Object_404_,'_npmVersion':Js('3.10.9'),'_phantomChildren':PyJs_Object_405_,'_requested':PyJs_Object_406_,'_requiredBy':Js([Js('#USER'), Js('/babel-cli'), Js('/babel-register'), Js('/babelify')]),'_resolved':Js('https://registry.npmjs.org/babel-core/-/babel-core-6.18.2.tgz'),'_shasum':Js('d8bb14dd6986fa4f3566a26ceda3964fa0e04e5b'),'_shrinkwrap':var.get("null"),'_spec':Js('babel-core'),'_where':Js('/Users/PiotrDabkowski/PycharmProjects/Js2Py/js2py/es6'),'author':PyJs_Object_407_,'dependencies':PyJs_Object_408_,'description':Js('Babel compiler core.'),'devDependencies':PyJs_Object_409_,'directories':PyJs_Object_410_,'dist':PyJs_Object_411_,'homepage':Js('https://babeljs.io/'),'keywords':Js([Js('6to5'), Js('babel'), Js('classes'), Js('const'), Js('es6'), Js('harmony'), Js('let'), Js('modules'), Js('transpile'), Js('transpiler'), Js('var')]),'license':Js('MIT'),'maintainers':Js([PyJs_Object_412_, PyJs_Object_413_, PyJs_Object_414_, PyJs_Object_415_, PyJs_Object_416_, PyJs_Object_417_]),'name':Js('babel-core'),'optionalDependencies':PyJs_Object_418_,'readme':Js('ERROR: No README data found!'),'repository':PyJs_Object_419_,'scripts':PyJs_Object_420_,'version':Js('6.18.2')})
    var.get('module').put('exports', PyJs_Object_401_)
PyJs_anonymous_400_._set_name('anonymous')
PyJs_Object_421_ = Js({})
@Js
def PyJs_anonymous_422_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Buffer', 'require', '_trimEnd2', 'module', '_trimEnd', '_interopRequireDefault', 'SPACES_RE', '_classCallCheck2', '_classCallCheck3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_423_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_423_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_trimEnd', var.get('require')(Js('lodash/trimEnd')))
    var.put('_trimEnd2', var.get('_interopRequireDefault')(var.get('_trimEnd')))
    pass
    var.put('SPACES_RE', JsRegExp('/^[ \\t]+$/'))
    @Js
    def PyJs_anonymous_424_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Buffer'])
        @Js
        def PyJsHoisted_Buffer_(map, this, arguments, var=var):
            var = Scope({'this':this, 'map':map, 'arguments':arguments}, var)
            var.registers(['map'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Buffer'))
            var.get("this").put('_map', var.get("null"))
            var.get("this").put('_buf', Js([]))
            var.get("this").put('_last', Js(''))
            var.get("this").put('_queue', Js([]))
            PyJs_Object_425_ = Js({'line':Js(1.0),'column':Js(0.0)})
            var.get("this").put('_position', PyJs_Object_425_)
            PyJs_Object_426_ = Js({'identifierName':var.get("null"),'line':var.get("null"),'column':var.get("null"),'filename':var.get("null")})
            var.get("this").put('_sourcePosition', PyJs_Object_426_)
            var.get("this").put('_map', var.get('map'))
        PyJsHoisted_Buffer_.__name__ = 'Buffer'
        var.put('Buffer', PyJsHoisted_Buffer_)
        pass
        @Js
        def PyJs_get_427_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_427_}, var)
            var.registers([])
            var.get("this").callprop('_flush')
            PyJs_Object_428_ = Js({'code':PyJsComma(Js(0.0),var.get('_trimEnd2').get('default'))(var.get("this").get('_buf').callprop('join', Js(''))),'map':(var.get("this").get('_map').callprop('get') if var.get("this").get('_map') else var.get("null"))})
            return PyJs_Object_428_
        PyJs_get_427_._set_name('get')
        var.get('Buffer').get('prototype').put('get', PyJs_get_427_)
        @Js
        def PyJs_append_429_(str, this, arguments, var=var):
            var = Scope({'this':this, 'append':PyJs_append_429_, 'arguments':arguments, 'str':str}, var)
            var.registers(['identifierName', 'column', 'filename', 'str', 'line', '_sourcePosition'])
            var.get("this").callprop('_flush')
            var.put('_sourcePosition', var.get("this").get('_sourcePosition'))
            var.put('line', var.get('_sourcePosition').get('line'))
            var.put('column', var.get('_sourcePosition').get('column'))
            var.put('filename', var.get('_sourcePosition').get('filename'))
            var.put('identifierName', var.get('_sourcePosition').get('identifierName'))
            var.get("this").callprop('_append', var.get('str'), var.get('line'), var.get('column'), var.get('identifierName'), var.get('filename'))
        PyJs_append_429_._set_name('append')
        var.get('Buffer').get('prototype').put('append', PyJs_append_429_)
        @Js
        def PyJs_queue_430_(str, this, arguments, var=var):
            var = Scope({'this':this, 'queue':PyJs_queue_430_, 'arguments':arguments, 'str':str}, var)
            var.registers(['identifierName', 'column', 'filename', '_sourcePosition2', 'str', 'line'])
            if PyJsStrictEq(var.get('str'),Js('\n')):
                while ((var.get("this").get('_queue').get('length')>Js(0.0)) and var.get('SPACES_RE').callprop('test', var.get("this").get('_queue').get('0').get('0'))):
                    var.get("this").get('_queue').callprop('shift')
            var.put('_sourcePosition2', var.get("this").get('_sourcePosition'))
            var.put('line', var.get('_sourcePosition2').get('line'))
            var.put('column', var.get('_sourcePosition2').get('column'))
            var.put('filename', var.get('_sourcePosition2').get('filename'))
            var.put('identifierName', var.get('_sourcePosition2').get('identifierName'))
            var.get("this").get('_queue').callprop('unshift', Js([var.get('str'), var.get('line'), var.get('column'), var.get('identifierName'), var.get('filename')]))
        PyJs_queue_430_._set_name('queue')
        var.get('Buffer').get('prototype').put('queue', PyJs_queue_430_)
        @Js
        def PyJs__flush_431_(this, arguments, var=var):
            var = Scope({'this':this, '_flush':PyJs__flush_431_, 'arguments':arguments}, var)
            var.registers(['item'])
            var.put('item', PyJsComma(Js(0.0), Js(None)))
            while var.put('item', var.get("this").get('_queue').callprop('pop')):
                var.get("this").get('_append').callprop('apply', var.get("this"), var.get('item'))
        PyJs__flush_431_._set_name('_flush')
        var.get('Buffer').get('prototype').put('_flush', PyJs__flush_431_)
        @Js
        def PyJs__append_432_(str, line, column, identifierName, filename, this, arguments, var=var):
            var = Scope({'this':this, '_append':PyJs__append_432_, 'str':str, 'identifierName':identifierName, 'column':column, 'arguments':arguments, 'line':line, 'filename':filename}, var)
            var.registers(['identifierName', 'i', 'filename', 'column', 'str', 'line'])
            if (var.get("this").get('_map') and PyJsStrictNeq(var.get('str').get('0'),Js('\n'))):
                var.get("this").get('_map').callprop('mark', var.get("this").get('_position').get('line'), var.get("this").get('_position').get('column'), var.get('line'), var.get('column'), var.get('identifierName'), var.get('filename'))
            var.get("this").get('_buf').callprop('push', var.get('str'))
            var.get("this").put('_last', var.get('str').get((var.get('str').get('length')-Js(1.0))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('str').get('length')):
                try:
                    if PyJsStrictEq(var.get('str').get(var.get('i')),Js('\n')):
                        (var.get("this").get('_position').put('line',Js(var.get("this").get('_position').get('line').to_number())+Js(1))-Js(1))
                        var.get("this").get('_position').put('column', Js(0.0))
                    else:
                        (var.get("this").get('_position').put('column',Js(var.get("this").get('_position').get('column').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs__append_432_._set_name('_append')
        var.get('Buffer').get('prototype').put('_append', PyJs__append_432_)
        @Js
        def PyJs_removeTrailingNewline_433_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'removeTrailingNewline':PyJs_removeTrailingNewline_433_}, var)
            var.registers([])
            if ((var.get("this").get('_queue').get('length')>Js(0.0)) and PyJsStrictEq(var.get("this").get('_queue').get('0').get('0'),Js('\n'))):
                var.get("this").get('_queue').callprop('shift')
        PyJs_removeTrailingNewline_433_._set_name('removeTrailingNewline')
        var.get('Buffer').get('prototype').put('removeTrailingNewline', PyJs_removeTrailingNewline_433_)
        @Js
        def PyJs_removeLastSemicolon_434_(this, arguments, var=var):
            var = Scope({'this':this, 'removeLastSemicolon':PyJs_removeLastSemicolon_434_, 'arguments':arguments}, var)
            var.registers([])
            if ((var.get("this").get('_queue').get('length')>Js(0.0)) and PyJsStrictEq(var.get("this").get('_queue').get('0').get('0'),Js(';'))):
                var.get("this").get('_queue').callprop('shift')
        PyJs_removeLastSemicolon_434_._set_name('removeLastSemicolon')
        var.get('Buffer').get('prototype').put('removeLastSemicolon', PyJs_removeLastSemicolon_434_)
        @Js
        def PyJs_endsWith_435_(suffix, this, arguments, var=var):
            var = Scope({'this':this, 'endsWith':PyJs_endsWith_435_, 'suffix':suffix, 'arguments':arguments}, var)
            var.registers(['end', 'last', 'suffix', 'str'])
            if PyJsStrictEq(var.get('suffix').get('length'),Js(1.0)):
                var.put('last', PyJsComma(Js(0.0), Js(None)))
                if (var.get("this").get('_queue').get('length')>Js(0.0)):
                    var.put('str', var.get("this").get('_queue').get('0').get('0'))
                    var.put('last', var.get('str').get((var.get('str').get('length')-Js(1.0))))
                else:
                    var.put('last', var.get("this").get('_last'))
                return PyJsStrictEq(var.get('last'),var.get('suffix'))
            @Js
            def PyJs_anonymous_436_(acc, item, this, arguments, var=var):
                var = Scope({'acc':acc, 'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['acc', 'item'])
                return (var.get('item').get('0')+var.get('acc'))
            PyJs_anonymous_436_._set_name('anonymous')
            var.put('end', (var.get("this").get('_last')+var.get("this").get('_queue').callprop('reduce', PyJs_anonymous_436_, Js(''))))
            if (var.get('suffix').get('length')<=var.get('end').get('length')):
                return PyJsStrictEq(var.get('end').callprop('slice', (-var.get('suffix').get('length'))),var.get('suffix'))
            return Js(False)
        PyJs_endsWith_435_._set_name('endsWith')
        var.get('Buffer').get('prototype').put('endsWith', PyJs_endsWith_435_)
        @Js
        def PyJs_hasContent_437_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'hasContent':PyJs_hasContent_437_}, var)
            var.registers([])
            return ((var.get("this").get('_queue').get('length')>Js(0.0)) or var.get("this").get('_last').neg().neg())
        PyJs_hasContent_437_._set_name('hasContent')
        var.get('Buffer').get('prototype').put('hasContent', PyJs_hasContent_437_)
        @Js
        def PyJs_source_438_(prop, loc, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, 'source':PyJs_source_438_, 'arguments':arguments, 'prop':prop}, var)
            var.registers(['loc', 'pos', 'prop'])
            if (var.get('prop') and var.get('loc').neg()):
                return var.get('undefined')
            var.put('pos', (var.get('loc').get(var.get('prop')) if var.get('loc') else var.get("null")))
            var.get("this").get('_sourcePosition').put('identifierName', ((var.get('loc') and var.get('loc').get('identifierName')) or var.get("null")))
            var.get("this").get('_sourcePosition').put('line', (var.get('pos').get('line') if var.get('pos') else var.get("null")))
            var.get("this").get('_sourcePosition').put('column', (var.get('pos').get('column') if var.get('pos') else var.get("null")))
            var.get("this").get('_sourcePosition').put('filename', ((var.get('loc') and var.get('loc').get('filename')) or var.get("null")))
        PyJs_source_438_._set_name('source')
        var.get('Buffer').get('prototype').put('source', PyJs_source_438_)
        @Js
        def PyJs_withSource_439_(prop, loc, cb, this, arguments, var=var):
            var = Scope({'loc':loc, 'this':this, 'cb':cb, 'prop':prop, 'withSource':PyJs_withSource_439_, 'arguments':arguments}, var)
            var.registers(['originalColumn', 'originalIdentifierName', 'loc', 'cb', 'prop', 'originalLine', 'originalFilename'])
            if var.get("this").get('_map').neg():
                return var.get('cb')()
            var.put('originalLine', var.get("this").get('_sourcePosition').get('line'))
            var.put('originalColumn', var.get("this").get('_sourcePosition').get('column'))
            var.put('originalFilename', var.get("this").get('_sourcePosition').get('filename'))
            var.put('originalIdentifierName', var.get("this").get('_sourcePosition').get('identifierName'))
            var.get("this").callprop('source', var.get('prop'), var.get('loc'))
            var.get('cb')()
            var.get("this").get('_sourcePosition').put('line', var.get('originalLine'))
            var.get("this").get('_sourcePosition').put('column', var.get('originalColumn'))
            var.get("this").get('_sourcePosition').put('filename', var.get('originalFilename'))
            var.get("this").get('_sourcePosition').put('identifierName', var.get('originalIdentifierName'))
        PyJs_withSource_439_._set_name('withSource')
        var.get('Buffer').get('prototype').put('withSource', PyJs_withSource_439_)
        @Js
        def PyJs_getCurrentColumn_440_(this, arguments, var=var):
            var = Scope({'this':this, 'getCurrentColumn':PyJs_getCurrentColumn_440_, 'arguments':arguments}, var)
            var.registers(['lastIndex', 'extra'])
            @Js
            def PyJs_anonymous_441_(acc, item, this, arguments, var=var):
                var = Scope({'acc':acc, 'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['acc', 'item'])
                return (var.get('item').get('0')+var.get('acc'))
            PyJs_anonymous_441_._set_name('anonymous')
            var.put('extra', var.get("this").get('_queue').callprop('reduce', PyJs_anonymous_441_, Js('')))
            var.put('lastIndex', var.get('extra').callprop('lastIndexOf', Js('\n')))
            return ((var.get("this").get('_position').get('column')+var.get('extra').get('length')) if PyJsStrictEq(var.get('lastIndex'),(-Js(1.0))) else ((var.get('extra').get('length')-Js(1.0))-var.get('lastIndex')))
        PyJs_getCurrentColumn_440_._set_name('getCurrentColumn')
        var.get('Buffer').get('prototype').put('getCurrentColumn', PyJs_getCurrentColumn_440_)
        @Js
        def PyJs_getCurrentLine_442_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getCurrentLine':PyJs_getCurrentLine_442_}, var)
            var.registers(['count', 'i', 'extra'])
            @Js
            def PyJs_anonymous_443_(acc, item, this, arguments, var=var):
                var = Scope({'acc':acc, 'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['acc', 'item'])
                return (var.get('item').get('0')+var.get('acc'))
            PyJs_anonymous_443_._set_name('anonymous')
            var.put('extra', var.get("this").get('_queue').callprop('reduce', PyJs_anonymous_443_, Js('')))
            var.put('count', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('extra').get('length')):
                try:
                    if PyJsStrictEq(var.get('extra').get(var.get('i')),Js('\n')):
                        (var.put('count',Js(var.get('count').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return (var.get("this").get('_position').get('line')+var.get('count'))
        PyJs_getCurrentLine_442_._set_name('getCurrentLine')
        var.get('Buffer').get('prototype').put('getCurrentLine', PyJs_getCurrentLine_442_)
        return var.get('Buffer')
    PyJs_anonymous_424_._set_name('anonymous')
    var.put('Buffer', PyJs_anonymous_424_())
    var.get('exports').put('default', var.get('Buffer'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_422_._set_name('anonymous')
PyJs_Object_444_ = Js({'babel-runtime/helpers/classCallCheck':Js(110.0),'lodash/trimEnd':Js(494.0)})
@Js
def PyJs_anonymous_445_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_types', 'exports', 'Directive', 'require', 'module', 'Program', 'Noop', 'File', 'BlockStatement'])
    @Js
    def PyJsHoisted_BlockStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('{'))
        var.get("this").callprop('printInnerComments', var.get('node'))
        if var.get('node').get('body').get('length'):
            var.get("this").callprop('newline')
            PyJs_Object_448_ = Js({'indent':var.get('true')})
            var.get("this").callprop('printSequence', var.get('node').get('directives'), var.get('node'), PyJs_Object_448_)
            if (var.get('node').get('directives') and var.get('node').get('directives').get('length')):
                var.get("this").callprop('newline')
            PyJs_Object_449_ = Js({'indent':var.get('true')})
            var.get("this").callprop('printSequence', var.get('node').get('body'), var.get('node'), PyJs_Object_449_)
            var.get("this").callprop('removeTrailingNewline')
            var.get("this").callprop('source', Js('end'), var.get('node').get('loc'))
            if var.get("this").callprop('endsWith', Js('\n')).neg():
                var.get("this").callprop('newline')
            var.get("this").callprop('rightBrace')
        else:
            var.get("this").callprop('source', Js('end'), var.get('node').get('loc'))
            var.get("this").callprop('token', Js('}'))
    PyJsHoisted_BlockStatement_.__name__ = 'BlockStatement'
    var.put('BlockStatement', PyJsHoisted_BlockStatement_)
    @Js
    def PyJsHoisted_Program_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printInnerComments', var.get('node'), Js(False))
        var.get("this").callprop('printSequence', var.get('node').get('directives'), var.get('node'))
        if (var.get('node').get('directives') and var.get('node').get('directives').get('length')):
            var.get("this").callprop('newline')
        var.get("this").callprop('printSequence', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_Program_.__name__ = 'Program'
    var.put('Program', PyJsHoisted_Program_)
    @Js
    def PyJsHoisted_Noop_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJsHoisted_Noop_.__name__ = 'Noop'
    var.put('Noop', PyJsHoisted_Noop_)
    @Js
    def PyJsHoisted_Directive_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_Directive_.__name__ = 'Directive'
    var.put('Directive', PyJsHoisted_Directive_)
    @Js
    def PyJsHoisted_File_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('program'), var.get('node'))
    PyJsHoisted_File_.__name__ = 'File'
    var.put('File', PyJsHoisted_File_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('File', var.get('File'))
    var.get('exports').put('Program', var.get('Program'))
    var.get('exports').put('BlockStatement', var.get('BlockStatement'))
    var.get('exports').put('Noop', var.get('Noop'))
    var.get('exports').put('Directive', var.get('Directive'))
    var.put('_types', var.get('require')(Js('./types')))
    @Js
    def PyJs_get_447_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_447_}, var)
        var.registers([])
        return var.get('_types').get('StringLiteral')
    PyJs_get_447_._set_name('get')
    PyJs_Object_446_ = Js({'enumerable':var.get('true'),'get':PyJs_get_447_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('DirectiveLiteral'), PyJs_Object_446_)
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_445_._set_name('anonymous')
PyJs_Object_450_ = Js({'./types':Js(39.0)})
@Js
def PyJs_anonymous_451_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ClassProperty', 'ClassMethod', 'require', 'module', 'ClassDeclaration', 'ClassBody'])
    @Js
    def PyJsHoisted_ClassMethod_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printJoin', var.get('node').get('decorators'), var.get('node'))
        if var.get('node').get('static'):
            var.get("this").callprop('word', Js('static'))
            var.get("this").callprop('space')
        if PyJsStrictEq(var.get('node').get('kind'),Js('constructorCall')):
            var.get("this").callprop('word', Js('call'))
            var.get("this").callprop('space')
        var.get("this").callprop('_method', var.get('node'))
    PyJsHoisted_ClassMethod_.__name__ = 'ClassMethod'
    var.put('ClassMethod', PyJsHoisted_ClassMethod_)
    @Js
    def PyJsHoisted_ClassDeclaration_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printJoin', var.get('node').get('decorators'), var.get('node'))
        var.get("this").callprop('word', Js('class'))
        if var.get('node').get('id'):
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
        if var.get('node').get('superClass'):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('extends'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('superClass'), var.get('node'))
            var.get("this").callprop('print', var.get('node').get('superTypeParameters'), var.get('node'))
        if var.get('node').get('implements'):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('implements'))
            var.get("this").callprop('space')
            var.get("this").callprop('printList', var.get('node').get('implements'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_ClassDeclaration_.__name__ = 'ClassDeclaration'
    var.put('ClassDeclaration', PyJsHoisted_ClassDeclaration_)
    @Js
    def PyJsHoisted_ClassBody_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('{'))
        var.get("this").callprop('printInnerComments', var.get('node'))
        if PyJsStrictEq(var.get('node').get('body').get('length'),Js(0.0)):
            var.get("this").callprop('token', Js('}'))
        else:
            var.get("this").callprop('newline')
            var.get("this").callprop('indent')
            var.get("this").callprop('printSequence', var.get('node').get('body'), var.get('node'))
            var.get("this").callprop('dedent')
            if var.get("this").callprop('endsWith', Js('\n')).neg():
                var.get("this").callprop('newline')
            var.get("this").callprop('rightBrace')
    PyJsHoisted_ClassBody_.__name__ = 'ClassBody'
    var.put('ClassBody', PyJsHoisted_ClassBody_)
    @Js
    def PyJsHoisted_ClassProperty_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printJoin', var.get('node').get('decorators'), var.get('node'))
        if var.get('node').get('static'):
            var.get("this").callprop('word', Js('static'))
            var.get("this").callprop('space')
        if var.get('node').get('computed'):
            var.get("this").callprop('token', Js('['))
            var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
            var.get("this").callprop('token', Js(']'))
        else:
            var.get("this").callprop('_variance', var.get('node'))
            var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
        if var.get('node').get('value'):
            var.get("this").callprop('space')
            var.get("this").callprop('token', Js('='))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_ClassProperty_.__name__ = 'ClassProperty'
    var.put('ClassProperty', PyJsHoisted_ClassProperty_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ClassDeclaration', var.get('ClassDeclaration'))
    var.get('exports').put('ClassBody', var.get('ClassBody'))
    var.get('exports').put('ClassProperty', var.get('ClassProperty'))
    var.get('exports').put('ClassMethod', var.get('ClassMethod'))
    pass
    var.get('exports').put('ClassExpression', var.get('ClassDeclaration'))
    pass
    pass
    pass
PyJs_anonymous_451_._set_name('anonymous')
PyJs_Object_452_ = Js({})
@Js
def PyJs_anonymous_453_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['ParenthesizedExpression', 'MetaProperty', 'CallExpression', 'ExpressionStatement', 'UpdateExpression', 'module', '_interopRequireDefault', '_isNumber', '_node', 'Super', 'Decorator', '_isNumber2', 'AssignmentExpression', 'exports', 'commaSeparatorNewline', 'buildYieldAwait', '_interopRequireWildcard', '_babelTypes', 'ConditionalExpression', 'DoExpression', 'MemberExpression', 'SequenceExpression', 'UnaryExpression', 'AwaitExpression', 'NewExpression', 'require', 'BindExpression', 'n', 'ThisExpression', 'YieldExpression', 't', 'AssignmentPattern', 'EmptyStatement'])
    @Js
    def PyJsHoisted_ParenthesizedExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('expression'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
    PyJsHoisted_ParenthesizedExpression_.__name__ = 'ParenthesizedExpression'
    var.put('ParenthesizedExpression', PyJsHoisted_ParenthesizedExpression_)
    @Js
    def PyJsHoisted_MetaProperty_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('meta'), var.get('node'))
        var.get("this").callprop('token', Js('.'))
        var.get("this").callprop('print', var.get('node').get('property'), var.get('node'))
    PyJsHoisted_MetaProperty_.__name__ = 'MetaProperty'
    var.put('MetaProperty', PyJsHoisted_MetaProperty_)
    @Js
    def PyJsHoisted_CallExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'separator', 'isPrettyCall'])
        var.get("this").callprop('print', var.get('node').get('callee'), var.get('node'))
        var.get("this").callprop('token', Js('('))
        var.put('isPrettyCall', var.get('node').get('_prettyCall'))
        var.put('separator', PyJsComma(Js(0.0), Js(None)))
        if var.get('isPrettyCall'):
            var.put('separator', var.get('commaSeparatorNewline'))
            var.get("this").callprop('newline')
            var.get("this").callprop('indent')
        PyJs_Object_457_ = Js({'separator':var.get('separator')})
        var.get("this").callprop('printList', var.get('node').get('arguments'), var.get('node'), PyJs_Object_457_)
        if var.get('isPrettyCall'):
            var.get("this").callprop('newline')
            var.get("this").callprop('dedent')
        var.get("this").callprop('token', Js(')'))
    PyJsHoisted_CallExpression_.__name__ = 'CallExpression'
    var.put('CallExpression', PyJsHoisted_CallExpression_)
    @Js
    def PyJsHoisted_ExpressionStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('expression'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_ExpressionStatement_.__name__ = 'ExpressionStatement'
    var.put('ExpressionStatement', PyJsHoisted_ExpressionStatement_)
    @Js
    def PyJsHoisted_UpdateExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('prefix'):
            var.get("this").callprop('token', var.get('node').get('operator'))
            var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
        else:
            var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
            var.get("this").callprop('token', var.get('node').get('operator'))
    PyJsHoisted_UpdateExpression_.__name__ = 'UpdateExpression'
    var.put('UpdateExpression', PyJsHoisted_UpdateExpression_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_455_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_455_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_Super_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('super'))
    PyJsHoisted_Super_.__name__ = 'Super'
    var.put('Super', PyJsHoisted_Super_)
    @Js
    def PyJsHoisted_Decorator_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('@'))
        var.get("this").callprop('print', var.get('node').get('expression'), var.get('node'))
        var.get("this").callprop('newline')
    PyJsHoisted_Decorator_.__name__ = 'Decorator'
    var.put('Decorator', PyJsHoisted_Decorator_)
    @Js
    def PyJsHoisted_AssignmentExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parens', 'parent'])
        var.put('parens', ((var.get("this").get('inForStatementInitCounter') and PyJsStrictEq(var.get('node').get('operator'),Js('in'))) and var.get('n').callprop('needsParens', var.get('node'), var.get('parent')).neg()))
        if var.get('parens'):
            var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('left'), var.get('node'))
        var.get("this").callprop('space')
        if (PyJsStrictEq(var.get('node').get('operator'),Js('in')) or PyJsStrictEq(var.get('node').get('operator'),Js('instanceof'))):
            var.get("this").callprop('word', var.get('node').get('operator'))
        else:
            var.get("this").callprop('token', var.get('node').get('operator'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('right'), var.get('node'))
        if var.get('parens'):
            var.get("this").callprop('token', Js(')'))
    PyJsHoisted_AssignmentExpression_.__name__ = 'AssignmentExpression'
    var.put('AssignmentExpression', PyJsHoisted_AssignmentExpression_)
    @Js
    def PyJsHoisted_commaSeparatorNewline_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('token', Js(','))
        var.get("this").callprop('newline')
        if var.get("this").callprop('endsWith', Js('\n')).neg():
            var.get("this").callprop('space')
    PyJsHoisted_commaSeparatorNewline_.__name__ = 'commaSeparatorNewline'
    var.put('commaSeparatorNewline', PyJsHoisted_commaSeparatorNewline_)
    @Js
    def PyJsHoisted_buildYieldAwait_(keyword, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'keyword':keyword}, var)
        var.registers(['keyword'])
        @Js
        def PyJs_anonymous_458_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', 'terminatorState'])
            var.get("this").callprop('word', var.get('keyword'))
            if var.get('node').get('delegate'):
                var.get("this").callprop('token', Js('*'))
            if var.get('node').get('argument'):
                var.get("this").callprop('space')
                var.put('terminatorState', var.get("this").callprop('startTerminatorless'))
                var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
                var.get("this").callprop('endTerminatorless', var.get('terminatorState'))
        PyJs_anonymous_458_._set_name('anonymous')
        return PyJs_anonymous_458_
    PyJsHoisted_buildYieldAwait_.__name__ = 'buildYieldAwait'
    var.put('buildYieldAwait', PyJsHoisted_buildYieldAwait_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_454_ = Js({})
            var.put('newObj', PyJs_Object_454_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ThisExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('this'))
    PyJsHoisted_ThisExpression_.__name__ = 'ThisExpression'
    var.put('ThisExpression', PyJsHoisted_ThisExpression_)
    @Js
    def PyJsHoisted_ConditionalExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('?'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('consequent'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('alternate'), var.get('node'))
    PyJsHoisted_ConditionalExpression_.__name__ = 'ConditionalExpression'
    var.put('ConditionalExpression', PyJsHoisted_ConditionalExpression_)
    @Js
    def PyJsHoisted_DoExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('do'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_DoExpression_.__name__ = 'DoExpression'
    var.put('DoExpression', PyJsHoisted_DoExpression_)
    @Js
    def PyJsHoisted_MemberExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'computed'])
        var.get("this").callprop('print', var.get('node').get('object'), var.get('node'))
        if (var.get('node').get('computed').neg() and var.get('t').callprop('isMemberExpression', var.get('node').get('property'))):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Got a MemberExpression for MemberExpression property')))
            raise PyJsTempException
        var.put('computed', var.get('node').get('computed'))
        if (var.get('t').callprop('isLiteral', var.get('node').get('property')) and PyJsComma(Js(0.0),var.get('_isNumber2').get('default'))(var.get('node').get('property').get('value'))):
            var.put('computed', var.get('true'))
        if var.get('computed'):
            var.get("this").callprop('token', Js('['))
            var.get("this").callprop('print', var.get('node').get('property'), var.get('node'))
            var.get("this").callprop('token', Js(']'))
        else:
            var.get("this").callprop('token', Js('.'))
            var.get("this").callprop('print', var.get('node').get('property'), var.get('node'))
    PyJsHoisted_MemberExpression_.__name__ = 'MemberExpression'
    var.put('MemberExpression', PyJsHoisted_MemberExpression_)
    @Js
    def PyJsHoisted_SequenceExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printList', var.get('node').get('expressions'), var.get('node'))
    PyJsHoisted_SequenceExpression_.__name__ = 'SequenceExpression'
    var.put('SequenceExpression', PyJsHoisted_SequenceExpression_)
    @Js
    def PyJsHoisted_UnaryExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if ((PyJsStrictEq(var.get('node').get('operator'),Js('void')) or PyJsStrictEq(var.get('node').get('operator'),Js('delete'))) or PyJsStrictEq(var.get('node').get('operator'),Js('typeof'))):
            var.get("this").callprop('word', var.get('node').get('operator'))
            var.get("this").callprop('space')
        else:
            var.get("this").callprop('token', var.get('node').get('operator'))
        var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
    PyJsHoisted_UnaryExpression_.__name__ = 'UnaryExpression'
    var.put('UnaryExpression', PyJsHoisted_UnaryExpression_)
    @Js
    def PyJsHoisted_NewExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        var.get("this").callprop('word', Js('new'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('callee'), var.get('node'))
        PyJs_Object_456_ = Js({'callee':var.get('node')})
        if ((((PyJsStrictEq(var.get('node').get('arguments').get('length'),Js(0.0)) and var.get("this").get('format').get('minified')) and var.get('t').callprop('isCallExpression', var.get('parent'), PyJs_Object_456_).neg()) and var.get('t').callprop('isMemberExpression', var.get('parent')).neg()) and var.get('t').callprop('isNewExpression', var.get('parent')).neg()):
            return var.get('undefined')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('printList', var.get('node').get('arguments'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
    PyJsHoisted_NewExpression_.__name__ = 'NewExpression'
    var.put('NewExpression', PyJsHoisted_NewExpression_)
    @Js
    def PyJsHoisted_BindExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('object'), var.get('node'))
        var.get("this").callprop('token', Js('::'))
        var.get("this").callprop('print', var.get('node').get('callee'), var.get('node'))
    PyJsHoisted_BindExpression_.__name__ = 'BindExpression'
    var.put('BindExpression', PyJsHoisted_BindExpression_)
    @Js
    def PyJsHoisted_AssignmentPattern_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('left'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('='))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('right'), var.get('node'))
    PyJsHoisted_AssignmentPattern_.__name__ = 'AssignmentPattern'
    var.put('AssignmentPattern', PyJsHoisted_AssignmentPattern_)
    @Js
    def PyJsHoisted_EmptyStatement_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('semicolon', var.get('true'))
    PyJsHoisted_EmptyStatement_.__name__ = 'EmptyStatement'
    var.put('EmptyStatement', PyJsHoisted_EmptyStatement_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('LogicalExpression', var.get('exports').put('BinaryExpression', var.get('exports').put('AwaitExpression', var.get('exports').put('YieldExpression', var.get('undefined')))))
    var.get('exports').put('UnaryExpression', var.get('UnaryExpression'))
    var.get('exports').put('DoExpression', var.get('DoExpression'))
    var.get('exports').put('ParenthesizedExpression', var.get('ParenthesizedExpression'))
    var.get('exports').put('UpdateExpression', var.get('UpdateExpression'))
    var.get('exports').put('ConditionalExpression', var.get('ConditionalExpression'))
    var.get('exports').put('NewExpression', var.get('NewExpression'))
    var.get('exports').put('SequenceExpression', var.get('SequenceExpression'))
    var.get('exports').put('ThisExpression', var.get('ThisExpression'))
    var.get('exports').put('Super', var.get('Super'))
    var.get('exports').put('Decorator', var.get('Decorator'))
    var.get('exports').put('CallExpression', var.get('CallExpression'))
    var.get('exports').put('EmptyStatement', var.get('EmptyStatement'))
    var.get('exports').put('ExpressionStatement', var.get('ExpressionStatement'))
    var.get('exports').put('AssignmentPattern', var.get('AssignmentPattern'))
    var.get('exports').put('AssignmentExpression', var.get('AssignmentExpression'))
    var.get('exports').put('BindExpression', var.get('BindExpression'))
    var.get('exports').put('MemberExpression', var.get('MemberExpression'))
    var.get('exports').put('MetaProperty', var.get('MetaProperty'))
    var.put('_isNumber', var.get('require')(Js('lodash/isNumber')))
    var.put('_isNumber2', var.get('_interopRequireDefault')(var.get('_isNumber')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_node', var.get('require')(Js('../node')))
    var.put('n', var.get('_interopRequireWildcard')(var.get('_node')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put('YieldExpression', var.get('exports').put('YieldExpression', var.get('buildYieldAwait')(Js('yield'))))
    var.put('AwaitExpression', var.get('exports').put('AwaitExpression', var.get('buildYieldAwait')(Js('await'))))
    pass
    pass
    pass
    pass
    pass
    var.get('exports').put('BinaryExpression', var.get('AssignmentExpression'))
    var.get('exports').put('LogicalExpression', var.get('AssignmentExpression'))
    pass
    pass
PyJs_anonymous_453_._set_name('anonymous')
PyJs_Object_459_ = Js({'../node':Js(41.0),'babel-types':Js(258.0),'lodash/isNumber':Js(466.0)})
@Js
def PyJs_anonymous_460_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_interfaceish', 'QualifiedTypeIdentifier', 'DeclareFunction', 'exports', 'module', 'StringTypeAnnotation', 'InterfaceDeclaration', 'InterfaceExtends', 'EmptyTypeAnnotation', 'AnyTypeAnnotation', 'ThisTypeAnnotation', 'ObjectTypeIndexer', 'ObjectTypeAnnotation', 'DeclareClass', 'NumberTypeAnnotation', 'ArrayTypeAnnotation', 'MixedTypeAnnotation', 'DeclareInterface', 'DeclareTypeAlias', 'TypeAlias', 'TypeofTypeAnnotation', 'DeclareVariable', 'NullLiteralTypeAnnotation', 'TypeParameterInstantiation', 'TypeParameter', 'ExistentialTypeParam', 'FunctionTypeParam', 'orSeparator', 'UnionTypeAnnotation', 'DeclareModuleExports', 'TypeCastExpression', 'BooleanLiteralTypeAnnotation', 'VoidTypeAnnotation', 'ObjectTypeProperty', 'IntersectionTypeAnnotation', 'ObjectTypeCallProperty', 'TupleTypeAnnotation', '_types', 'TypeAnnotation', 'require', '_variance', 'FunctionTypeAnnotation', 'DeclareModule', 'NullableTypeAnnotation', 'andSeparator', 'BooleanTypeAnnotation'])
    @Js
    def PyJsHoisted__interfaceish_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
        if var.get('node').get('extends').get('length'):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('extends'))
            var.get("this").callprop('space')
            var.get("this").callprop('printList', var.get('node').get('extends'), var.get('node'))
        if (var.get('node').get('mixins') and var.get('node').get('mixins').get('length')):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('mixins'))
            var.get("this").callprop('space')
            var.get("this").callprop('printList', var.get('node').get('mixins'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted__interfaceish_.__name__ = '_interfaceish'
    var.put('_interfaceish', PyJsHoisted__interfaceish_)
    @Js
    def PyJsHoisted_QualifiedTypeIdentifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('qualification'), var.get('node'))
        var.get("this").callprop('token', Js('.'))
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
    PyJsHoisted_QualifiedTypeIdentifier_.__name__ = 'QualifiedTypeIdentifier'
    var.put('QualifiedTypeIdentifier', PyJsHoisted_QualifiedTypeIdentifier_)
    @Js
    def PyJsHoisted_DeclareFunction_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('function'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('id').get('typeAnnotation').get('typeAnnotation'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_DeclareFunction_.__name__ = 'DeclareFunction'
    var.put('DeclareFunction', PyJsHoisted_DeclareFunction_)
    @Js
    def PyJsHoisted_StringTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('string'))
    PyJsHoisted_StringTypeAnnotation_.__name__ = 'StringTypeAnnotation'
    var.put('StringTypeAnnotation', PyJsHoisted_StringTypeAnnotation_)
    @Js
    def PyJsHoisted_InterfaceDeclaration_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('interface'))
        var.get("this").callprop('space')
        var.get("this").callprop('_interfaceish', var.get('node'))
    PyJsHoisted_InterfaceDeclaration_.__name__ = 'InterfaceDeclaration'
    var.put('InterfaceDeclaration', PyJsHoisted_InterfaceDeclaration_)
    @Js
    def PyJsHoisted_InterfaceExtends_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
    PyJsHoisted_InterfaceExtends_.__name__ = 'InterfaceExtends'
    var.put('InterfaceExtends', PyJsHoisted_InterfaceExtends_)
    @Js
    def PyJsHoisted_EmptyTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('empty'))
    PyJsHoisted_EmptyTypeAnnotation_.__name__ = 'EmptyTypeAnnotation'
    var.put('EmptyTypeAnnotation', PyJsHoisted_EmptyTypeAnnotation_)
    @Js
    def PyJsHoisted_AnyTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('any'))
    PyJsHoisted_AnyTypeAnnotation_.__name__ = 'AnyTypeAnnotation'
    var.put('AnyTypeAnnotation', PyJsHoisted_AnyTypeAnnotation_)
    @Js
    def PyJsHoisted_ThisTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('this'))
    PyJsHoisted_ThisTypeAnnotation_.__name__ = 'ThisTypeAnnotation'
    var.put('ThisTypeAnnotation', PyJsHoisted_ThisTypeAnnotation_)
    @Js
    def PyJsHoisted_ObjectTypeIndexer_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('static'):
            var.get("this").callprop('word', Js('static'))
            var.get("this").callprop('space')
        var.get("this").callprop('_variance', var.get('node'))
        var.get("this").callprop('token', Js('['))
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
        var.get("this").callprop('token', Js(']'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
    PyJsHoisted_ObjectTypeIndexer_.__name__ = 'ObjectTypeIndexer'
    var.put('ObjectTypeIndexer', PyJsHoisted_ObjectTypeIndexer_)
    @Js
    def PyJsHoisted_ObjectTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_this', 'props'])
        var.put('_this', var.get("this"))
        if var.get('node').get('exact'):
            var.get("this").callprop('token', Js('{|'))
        else:
            var.get("this").callprop('token', Js('{'))
        var.put('props', var.get('node').get('properties').callprop('concat', var.get('node').get('callProperties'), var.get('node').get('indexers')))
        if var.get('props').get('length'):
            var.get("this").callprop('space')
            @Js
            def PyJs_iterator_468_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'iterator':PyJs_iterator_468_}, var)
                var.registers([])
                if PyJsStrictNeq(var.get('props').get('length'),Js(1.0)):
                    var.get('_this').callprop('semicolon')
                    var.get('_this').callprop('space')
            PyJs_iterator_468_._set_name('iterator')
            PyJs_Object_467_ = Js({'indent':var.get('true'),'statement':var.get('true'),'iterator':PyJs_iterator_468_})
            var.get("this").callprop('printJoin', var.get('props'), var.get('node'), PyJs_Object_467_)
            var.get("this").callprop('space')
        if var.get('node').get('exact'):
            var.get("this").callprop('token', Js('|}'))
        else:
            var.get("this").callprop('token', Js('}'))
    PyJsHoisted_ObjectTypeAnnotation_.__name__ = 'ObjectTypeAnnotation'
    var.put('ObjectTypeAnnotation', PyJsHoisted_ObjectTypeAnnotation_)
    @Js
    def PyJsHoisted_DeclareClass_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('class'))
        var.get("this").callprop('space')
        var.get("this").callprop('_interfaceish', var.get('node'))
    PyJsHoisted_DeclareClass_.__name__ = 'DeclareClass'
    var.put('DeclareClass', PyJsHoisted_DeclareClass_)
    @Js
    def PyJsHoisted_NumberTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('number'))
    PyJsHoisted_NumberTypeAnnotation_.__name__ = 'NumberTypeAnnotation'
    var.put('NumberTypeAnnotation', PyJsHoisted_NumberTypeAnnotation_)
    @Js
    def PyJsHoisted_ArrayTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('elementType'), var.get('node'))
        var.get("this").callprop('token', Js('['))
        var.get("this").callprop('token', Js(']'))
    PyJsHoisted_ArrayTypeAnnotation_.__name__ = 'ArrayTypeAnnotation'
    var.put('ArrayTypeAnnotation', PyJsHoisted_ArrayTypeAnnotation_)
    @Js
    def PyJsHoisted_MixedTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('mixed'))
    PyJsHoisted_MixedTypeAnnotation_.__name__ = 'MixedTypeAnnotation'
    var.put('MixedTypeAnnotation', PyJsHoisted_MixedTypeAnnotation_)
    @Js
    def PyJsHoisted_DeclareInterface_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('InterfaceDeclaration', var.get('node'))
    PyJsHoisted_DeclareInterface_.__name__ = 'DeclareInterface'
    var.put('DeclareInterface', PyJsHoisted_DeclareInterface_)
    @Js
    def PyJsHoisted_DeclareTypeAlias_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('TypeAlias', var.get('node'))
    PyJsHoisted_DeclareTypeAlias_.__name__ = 'DeclareTypeAlias'
    var.put('DeclareTypeAlias', PyJsHoisted_DeclareTypeAlias_)
    @Js
    def PyJsHoisted_TypeAlias_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('type'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('='))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('right'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_TypeAlias_.__name__ = 'TypeAlias'
    var.put('TypeAlias', PyJsHoisted_TypeAlias_)
    @Js
    def PyJsHoisted_TypeofTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('typeof'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
    PyJsHoisted_TypeofTypeAnnotation_.__name__ = 'TypeofTypeAnnotation'
    var.put('TypeofTypeAnnotation', PyJsHoisted_TypeofTypeAnnotation_)
    @Js
    def PyJsHoisted_DeclareVariable_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('var'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('id').get('typeAnnotation'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_DeclareVariable_.__name__ = 'DeclareVariable'
    var.put('DeclareVariable', PyJsHoisted_DeclareVariable_)
    @Js
    def PyJsHoisted_NullLiteralTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('null'))
    PyJsHoisted_NullLiteralTypeAnnotation_.__name__ = 'NullLiteralTypeAnnotation'
    var.put('NullLiteralTypeAnnotation', PyJsHoisted_NullLiteralTypeAnnotation_)
    @Js
    def PyJsHoisted_TypeParameterInstantiation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('<'))
        PyJs_Object_466_ = Js({})
        var.get("this").callprop('printList', var.get('node').get('params'), var.get('node'), PyJs_Object_466_)
        var.get("this").callprop('token', Js('>'))
    PyJsHoisted_TypeParameterInstantiation_.__name__ = 'TypeParameterInstantiation'
    var.put('TypeParameterInstantiation', PyJsHoisted_TypeParameterInstantiation_)
    @Js
    def PyJsHoisted_TypeParameter_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('_variance', var.get('node'))
        var.get("this").callprop('word', var.get('node').get('name'))
        if var.get('node').get('bound'):
            var.get("this").callprop('print', var.get('node').get('bound'), var.get('node'))
        if var.get('node').get('default'):
            var.get("this").callprop('space')
            var.get("this").callprop('token', Js('='))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('default'), var.get('node'))
    PyJsHoisted_TypeParameter_.__name__ = 'TypeParameter'
    var.put('TypeParameter', PyJsHoisted_TypeParameter_)
    @Js
    def PyJsHoisted_ExistentialTypeParam_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('token', Js('*'))
    PyJsHoisted_ExistentialTypeParam_.__name__ = 'ExistentialTypeParam'
    var.put('ExistentialTypeParam', PyJsHoisted_ExistentialTypeParam_)
    @Js
    def PyJsHoisted_FunctionTypeParam_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('name'), var.get('node'))
        if var.get('node').get('optional'):
            var.get("this").callprop('token', Js('?'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
    PyJsHoisted_FunctionTypeParam_.__name__ = 'FunctionTypeParam'
    var.put('FunctionTypeParam', PyJsHoisted_FunctionTypeParam_)
    @Js
    def PyJsHoisted_orSeparator_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('|'))
        var.get("this").callprop('space')
    PyJsHoisted_orSeparator_.__name__ = 'orSeparator'
    var.put('orSeparator', PyJsHoisted_orSeparator_)
    @Js
    def PyJsHoisted_UnionTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        PyJs_Object_469_ = Js({'separator':var.get('orSeparator')})
        var.get("this").callprop('printJoin', var.get('node').get('types'), var.get('node'), PyJs_Object_469_)
    PyJsHoisted_UnionTypeAnnotation_.__name__ = 'UnionTypeAnnotation'
    var.put('UnionTypeAnnotation', PyJsHoisted_UnionTypeAnnotation_)
    @Js
    def PyJsHoisted_DeclareModuleExports_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('module'))
        var.get("this").callprop('token', Js('.'))
        var.get("this").callprop('word', Js('exports'))
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
    PyJsHoisted_DeclareModuleExports_.__name__ = 'DeclareModuleExports'
    var.put('DeclareModuleExports', PyJsHoisted_DeclareModuleExports_)
    @Js
    def PyJsHoisted_TypeCastExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('expression'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
    PyJsHoisted_TypeCastExpression_.__name__ = 'TypeCastExpression'
    var.put('TypeCastExpression', PyJsHoisted_TypeCastExpression_)
    @Js
    def PyJsHoisted_BooleanLiteralTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', (Js('true') if var.get('node').get('value') else Js('false')))
    PyJsHoisted_BooleanLiteralTypeAnnotation_.__name__ = 'BooleanLiteralTypeAnnotation'
    var.put('BooleanLiteralTypeAnnotation', PyJsHoisted_BooleanLiteralTypeAnnotation_)
    @Js
    def PyJsHoisted_VoidTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('void'))
    PyJsHoisted_VoidTypeAnnotation_.__name__ = 'VoidTypeAnnotation'
    var.put('VoidTypeAnnotation', PyJsHoisted_VoidTypeAnnotation_)
    @Js
    def PyJsHoisted_ObjectTypeProperty_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('static'):
            var.get("this").callprop('word', Js('static'))
            var.get("this").callprop('space')
        var.get("this").callprop('_variance', var.get('node'))
        var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
        if var.get('node').get('optional'):
            var.get("this").callprop('token', Js('?'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
    PyJsHoisted_ObjectTypeProperty_.__name__ = 'ObjectTypeProperty'
    var.put('ObjectTypeProperty', PyJsHoisted_ObjectTypeProperty_)
    @Js
    def PyJsHoisted_IntersectionTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        PyJs_Object_465_ = Js({'separator':var.get('andSeparator')})
        var.get("this").callprop('printJoin', var.get('node').get('types'), var.get('node'), PyJs_Object_465_)
    PyJsHoisted_IntersectionTypeAnnotation_.__name__ = 'IntersectionTypeAnnotation'
    var.put('IntersectionTypeAnnotation', PyJsHoisted_IntersectionTypeAnnotation_)
    @Js
    def PyJsHoisted_ObjectTypeCallProperty_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('static'):
            var.get("this").callprop('word', Js('static'))
            var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
    PyJsHoisted_ObjectTypeCallProperty_.__name__ = 'ObjectTypeCallProperty'
    var.put('ObjectTypeCallProperty', PyJsHoisted_ObjectTypeCallProperty_)
    @Js
    def PyJsHoisted_TupleTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('['))
        var.get("this").callprop('printList', var.get('node').get('types'), var.get('node'))
        var.get("this").callprop('token', Js(']'))
    PyJsHoisted_TupleTypeAnnotation_.__name__ = 'TupleTypeAnnotation'
    var.put('TupleTypeAnnotation', PyJsHoisted_TupleTypeAnnotation_)
    @Js
    def PyJsHoisted_TypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        if var.get('node').get('optional'):
            var.get("this").callprop('token', Js('?'))
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
    PyJsHoisted_TypeAnnotation_.__name__ = 'TypeAnnotation'
    var.put('TypeAnnotation', PyJsHoisted_TypeAnnotation_)
    @Js
    def PyJsHoisted__variance_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if PyJsStrictEq(var.get('node').get('variance'),Js('plus')):
            var.get("this").callprop('token', Js('+'))
        else:
            if PyJsStrictEq(var.get('node').get('variance'),Js('minus')):
                var.get("this").callprop('token', Js('-'))
    PyJsHoisted__variance_.__name__ = '_variance'
    var.put('_variance', PyJsHoisted__variance_)
    @Js
    def PyJsHoisted_FunctionTypeAnnotation_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('printList', var.get('node').get('params'), var.get('node'))
        if var.get('node').get('rest'):
            if var.get('node').get('params').get('length'):
                var.get("this").callprop('token', Js(','))
                var.get("this").callprop('space')
            var.get("this").callprop('token', Js('...'))
            var.get("this").callprop('print', var.get('node').get('rest'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        if (PyJsStrictEq(var.get('parent').get('type'),Js('ObjectTypeCallProperty')) or PyJsStrictEq(var.get('parent').get('type'),Js('DeclareFunction'))):
            var.get("this").callprop('token', Js(':'))
        else:
            var.get("this").callprop('space')
            var.get("this").callprop('token', Js('=>'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('returnType'), var.get('node'))
    PyJsHoisted_FunctionTypeAnnotation_.__name__ = 'FunctionTypeAnnotation'
    var.put('FunctionTypeAnnotation', PyJsHoisted_FunctionTypeAnnotation_)
    @Js
    def PyJsHoisted_DeclareModule_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('declare'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('module'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_DeclareModule_.__name__ = 'DeclareModule'
    var.put('DeclareModule', PyJsHoisted_DeclareModule_)
    @Js
    def PyJsHoisted_NullableTypeAnnotation_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('?'))
        var.get("this").callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
    PyJsHoisted_NullableTypeAnnotation_.__name__ = 'NullableTypeAnnotation'
    var.put('NullableTypeAnnotation', PyJsHoisted_NullableTypeAnnotation_)
    @Js
    def PyJsHoisted_andSeparator_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('&'))
        var.get("this").callprop('space')
    PyJsHoisted_andSeparator_.__name__ = 'andSeparator'
    var.put('andSeparator', PyJsHoisted_andSeparator_)
    @Js
    def PyJsHoisted_BooleanTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('boolean'))
    PyJsHoisted_BooleanTypeAnnotation_.__name__ = 'BooleanTypeAnnotation'
    var.put('BooleanTypeAnnotation', PyJsHoisted_BooleanTypeAnnotation_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('AnyTypeAnnotation', var.get('AnyTypeAnnotation'))
    var.get('exports').put('ArrayTypeAnnotation', var.get('ArrayTypeAnnotation'))
    var.get('exports').put('BooleanTypeAnnotation', var.get('BooleanTypeAnnotation'))
    var.get('exports').put('BooleanLiteralTypeAnnotation', var.get('BooleanLiteralTypeAnnotation'))
    var.get('exports').put('NullLiteralTypeAnnotation', var.get('NullLiteralTypeAnnotation'))
    var.get('exports').put('DeclareClass', var.get('DeclareClass'))
    var.get('exports').put('DeclareFunction', var.get('DeclareFunction'))
    var.get('exports').put('DeclareInterface', var.get('DeclareInterface'))
    var.get('exports').put('DeclareModule', var.get('DeclareModule'))
    var.get('exports').put('DeclareModuleExports', var.get('DeclareModuleExports'))
    var.get('exports').put('DeclareTypeAlias', var.get('DeclareTypeAlias'))
    var.get('exports').put('DeclareVariable', var.get('DeclareVariable'))
    var.get('exports').put('ExistentialTypeParam', var.get('ExistentialTypeParam'))
    var.get('exports').put('FunctionTypeAnnotation', var.get('FunctionTypeAnnotation'))
    var.get('exports').put('FunctionTypeParam', var.get('FunctionTypeParam'))
    var.get('exports').put('InterfaceExtends', var.get('InterfaceExtends'))
    var.get('exports').put('_interfaceish', var.get('_interfaceish'))
    var.get('exports').put('_variance', var.get('_variance'))
    var.get('exports').put('InterfaceDeclaration', var.get('InterfaceDeclaration'))
    var.get('exports').put('IntersectionTypeAnnotation', var.get('IntersectionTypeAnnotation'))
    var.get('exports').put('MixedTypeAnnotation', var.get('MixedTypeAnnotation'))
    var.get('exports').put('EmptyTypeAnnotation', var.get('EmptyTypeAnnotation'))
    var.get('exports').put('NullableTypeAnnotation', var.get('NullableTypeAnnotation'))
    var.put('_types', var.get('require')(Js('./types')))
    @Js
    def PyJs_get_462_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_462_}, var)
        var.registers([])
        return var.get('_types').get('NumericLiteral')
    PyJs_get_462_._set_name('get')
    PyJs_Object_461_ = Js({'enumerable':var.get('true'),'get':PyJs_get_462_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('NumericLiteralTypeAnnotation'), PyJs_Object_461_)
    @Js
    def PyJs_get_464_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_464_}, var)
        var.registers([])
        return var.get('_types').get('StringLiteral')
    PyJs_get_464_._set_name('get')
    PyJs_Object_463_ = Js({'enumerable':var.get('true'),'get':PyJs_get_464_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('StringLiteralTypeAnnotation'), PyJs_Object_463_)
    var.get('exports').put('NumberTypeAnnotation', var.get('NumberTypeAnnotation'))
    var.get('exports').put('StringTypeAnnotation', var.get('StringTypeAnnotation'))
    var.get('exports').put('ThisTypeAnnotation', var.get('ThisTypeAnnotation'))
    var.get('exports').put('TupleTypeAnnotation', var.get('TupleTypeAnnotation'))
    var.get('exports').put('TypeofTypeAnnotation', var.get('TypeofTypeAnnotation'))
    var.get('exports').put('TypeAlias', var.get('TypeAlias'))
    var.get('exports').put('TypeAnnotation', var.get('TypeAnnotation'))
    var.get('exports').put('TypeParameter', var.get('TypeParameter'))
    var.get('exports').put('TypeParameterInstantiation', var.get('TypeParameterInstantiation'))
    var.get('exports').put('ObjectTypeAnnotation', var.get('ObjectTypeAnnotation'))
    var.get('exports').put('ObjectTypeCallProperty', var.get('ObjectTypeCallProperty'))
    var.get('exports').put('ObjectTypeIndexer', var.get('ObjectTypeIndexer'))
    var.get('exports').put('ObjectTypeProperty', var.get('ObjectTypeProperty'))
    var.get('exports').put('QualifiedTypeIdentifier', var.get('QualifiedTypeIdentifier'))
    var.get('exports').put('UnionTypeAnnotation', var.get('UnionTypeAnnotation'))
    var.get('exports').put('TypeCastExpression', var.get('TypeCastExpression'))
    var.get('exports').put('VoidTypeAnnotation', var.get('VoidTypeAnnotation'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.get('exports').put('ClassImplements', var.get('InterfaceExtends'))
    var.get('exports').put('GenericTypeAnnotation', var.get('InterfaceExtends'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.get('exports').put('TypeParameterDeclaration', var.get('TypeParameterInstantiation'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_460_._set_name('anonymous')
PyJs_Object_470_ = Js({'./types':Js(39.0)})
@Js
def PyJs_anonymous_471_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'JSXSpreadAttribute', 'exports', 'JSXOpeningElement', 'JSXMemberExpression', 'JSXClosingElement', 'module', 'JSXElement', 'JSXAttribute', 'JSXNamespacedName', 'JSXText', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'JSXExpressionContainer', 'spaceSeparator', 'JSXEmptyExpression', 'JSXIdentifier'])
    @Js
    def PyJsHoisted_JSXSpreadAttribute_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('{'))
        var.get("this").callprop('token', Js('...'))
        var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
        var.get("this").callprop('token', Js('}'))
    PyJsHoisted_JSXSpreadAttribute_.__name__ = 'JSXSpreadAttribute'
    var.put('JSXSpreadAttribute', PyJsHoisted_JSXSpreadAttribute_)
    @Js
    def PyJsHoisted_JSXOpeningElement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('<'))
        var.get("this").callprop('print', var.get('node').get('name'), var.get('node'))
        if (var.get('node').get('attributes').get('length')>Js(0.0)):
            var.get("this").callprop('space')
            PyJs_Object_473_ = Js({'separator':var.get('spaceSeparator')})
            var.get("this").callprop('printJoin', var.get('node').get('attributes'), var.get('node'), PyJs_Object_473_)
        if var.get('node').get('selfClosing'):
            var.get("this").callprop('space')
            var.get("this").callprop('token', Js('/>'))
        else:
            var.get("this").callprop('token', Js('>'))
    PyJsHoisted_JSXOpeningElement_.__name__ = 'JSXOpeningElement'
    var.put('JSXOpeningElement', PyJsHoisted_JSXOpeningElement_)
    @Js
    def PyJsHoisted_JSXMemberExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('object'), var.get('node'))
        var.get("this").callprop('token', Js('.'))
        var.get("this").callprop('print', var.get('node').get('property'), var.get('node'))
    PyJsHoisted_JSXMemberExpression_.__name__ = 'JSXMemberExpression'
    var.put('JSXMemberExpression', PyJsHoisted_JSXMemberExpression_)
    @Js
    def PyJsHoisted_JSXClosingElement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('</'))
        var.get("this").callprop('print', var.get('node').get('name'), var.get('node'))
        var.get("this").callprop('token', Js('>'))
    PyJsHoisted_JSXClosingElement_.__name__ = 'JSXClosingElement'
    var.put('JSXClosingElement', PyJsHoisted_JSXClosingElement_)
    @Js
    def PyJsHoisted_JSXElement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_isArray', '_iterator', '_i', 'child', '_ref', 'open'])
        var.put('open', var.get('node').get('openingElement'))
        var.get("this").callprop('print', var.get('open'), var.get('node'))
        if var.get('open').get('selfClosing'):
            return var.get('undefined')
        var.get("this").callprop('indent')
        #for JS loop
        var.put('_iterator', var.get('node').get('children'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('child', var.get('_ref'))
            var.get("this").callprop('print', var.get('child'), var.get('node'))
        
        var.get("this").callprop('dedent')
        var.get("this").callprop('print', var.get('node').get('closingElement'), var.get('node'))
    PyJsHoisted_JSXElement_.__name__ = 'JSXElement'
    var.put('JSXElement', PyJsHoisted_JSXElement_)
    @Js
    def PyJsHoisted_JSXAttribute_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('name'), var.get('node'))
        if var.get('node').get('value'):
            var.get("this").callprop('token', Js('='))
            var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
    PyJsHoisted_JSXAttribute_.__name__ = 'JSXAttribute'
    var.put('JSXAttribute', PyJsHoisted_JSXAttribute_)
    @Js
    def PyJsHoisted_JSXNamespacedName_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('namespace'), var.get('node'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('print', var.get('node').get('name'), var.get('node'))
    PyJsHoisted_JSXNamespacedName_.__name__ = 'JSXNamespacedName'
    var.put('JSXNamespacedName', PyJsHoisted_JSXNamespacedName_)
    @Js
    def PyJsHoisted_JSXText_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', var.get('node').get('value'))
    PyJsHoisted_JSXText_.__name__ = 'JSXText'
    var.put('JSXText', PyJsHoisted_JSXText_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_472_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_472_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_JSXExpressionContainer_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('{'))
        var.get("this").callprop('print', var.get('node').get('expression'), var.get('node'))
        var.get("this").callprop('token', Js('}'))
    PyJsHoisted_JSXExpressionContainer_.__name__ = 'JSXExpressionContainer'
    var.put('JSXExpressionContainer', PyJsHoisted_JSXExpressionContainer_)
    @Js
    def PyJsHoisted_spaceSeparator_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('space')
    PyJsHoisted_spaceSeparator_.__name__ = 'spaceSeparator'
    var.put('spaceSeparator', PyJsHoisted_spaceSeparator_)
    @Js
    def PyJsHoisted_JSXEmptyExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJsHoisted_JSXEmptyExpression_.__name__ = 'JSXEmptyExpression'
    var.put('JSXEmptyExpression', PyJsHoisted_JSXEmptyExpression_)
    @Js
    def PyJsHoisted_JSXIdentifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', var.get('node').get('name'))
    PyJsHoisted_JSXIdentifier_.__name__ = 'JSXIdentifier'
    var.put('JSXIdentifier', PyJsHoisted_JSXIdentifier_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('JSXAttribute', var.get('JSXAttribute'))
    var.get('exports').put('JSXIdentifier', var.get('JSXIdentifier'))
    var.get('exports').put('JSXNamespacedName', var.get('JSXNamespacedName'))
    var.get('exports').put('JSXMemberExpression', var.get('JSXMemberExpression'))
    var.get('exports').put('JSXSpreadAttribute', var.get('JSXSpreadAttribute'))
    var.get('exports').put('JSXExpressionContainer', var.get('JSXExpressionContainer'))
    var.get('exports').put('JSXText', var.get('JSXText'))
    var.get('exports').put('JSXElement', var.get('JSXElement'))
    var.get('exports').put('JSXOpeningElement', var.get('JSXOpeningElement'))
    var.get('exports').put('JSXClosingElement', var.get('JSXClosingElement'))
    var.get('exports').put('JSXEmptyExpression', var.get('JSXEmptyExpression'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_471_._set_name('anonymous')
PyJs_Object_474_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_475_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ArrowFunctionExpression', '_interopRequireWildcard', 'require', '_babelTypes', 'FunctionExpression', 'module', 't', 'hasTypes', '_params', '_method'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_476_ = Js({})
            var.put('newObj', PyJs_Object_476_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ArrowFunctionExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'firstParam'])
        if var.get('node').get('async'):
            var.get("this").callprop('word', Js('async'))
            var.get("this").callprop('space')
        var.put('firstParam', var.get('node').get('params').get('0'))
        if ((PyJsStrictEq(var.get('node').get('params').get('length'),Js(1.0)) and var.get('t').callprop('isIdentifier', var.get('firstParam'))) and var.get('hasTypes')(var.get('node'), var.get('firstParam')).neg()):
            var.get("this").callprop('print', var.get('firstParam'), var.get('node'))
        else:
            var.get("this").callprop('_params', var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('=>'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_ArrowFunctionExpression_.__name__ = 'ArrowFunctionExpression'
    var.put('ArrowFunctionExpression', PyJsHoisted_ArrowFunctionExpression_)
    @Js
    def PyJsHoisted_FunctionExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('async'):
            var.get("this").callprop('word', Js('async'))
            var.get("this").callprop('space')
        var.get("this").callprop('word', Js('function'))
        if var.get('node').get('generator'):
            var.get("this").callprop('token', Js('*'))
        if var.get('node').get('id'):
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        else:
            var.get("this").callprop('space')
        var.get("this").callprop('_params', var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_FunctionExpression_.__name__ = 'FunctionExpression'
    var.put('FunctionExpression', PyJsHoisted_FunctionExpression_)
    @Js
    def PyJsHoisted_hasTypes_(node, param, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'param':param}, var)
        var.registers(['node', 'param'])
        return ((((var.get('node').get('typeParameters') or var.get('node').get('returnType')) or var.get('param').get('typeAnnotation')) or var.get('param').get('optional')) or var.get('param').get('trailingComments'))
    PyJsHoisted_hasTypes_.__name__ = 'hasTypes'
    var.put('hasTypes', PyJsHoisted_hasTypes_)
    @Js
    def PyJsHoisted__params_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_this'])
        var.put('_this', var.get("this"))
        var.get("this").callprop('print', var.get('node').get('typeParameters'), var.get('node'))
        var.get("this").callprop('token', Js('('))
        @Js
        def PyJs_iterator_478_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'iterator':PyJs_iterator_478_}, var)
            var.registers(['node'])
            if var.get('node').get('optional'):
                var.get('_this').callprop('token', Js('?'))
            var.get('_this').callprop('print', var.get('node').get('typeAnnotation'), var.get('node'))
        PyJs_iterator_478_._set_name('iterator')
        PyJs_Object_477_ = Js({'iterator':PyJs_iterator_478_})
        var.get("this").callprop('printList', var.get('node').get('params'), var.get('node'), PyJs_Object_477_)
        var.get("this").callprop('token', Js(')'))
        if var.get('node').get('returnType'):
            var.get("this").callprop('print', var.get('node').get('returnType'), var.get('node'))
    PyJsHoisted__params_.__name__ = '_params'
    var.put('_params', PyJsHoisted__params_)
    @Js
    def PyJsHoisted__method_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'kind', 'key'])
        var.put('kind', var.get('node').get('kind'))
        var.put('key', var.get('node').get('key'))
        if (PyJsStrictEq(var.get('kind'),Js('method')) or PyJsStrictEq(var.get('kind'),Js('init'))):
            if var.get('node').get('generator'):
                var.get("this").callprop('token', Js('*'))
        if (PyJsStrictEq(var.get('kind'),Js('get')) or PyJsStrictEq(var.get('kind'),Js('set'))):
            var.get("this").callprop('word', var.get('kind'))
            var.get("this").callprop('space')
        if var.get('node').get('async'):
            var.get("this").callprop('word', Js('async'))
            var.get("this").callprop('space')
        if var.get('node').get('computed'):
            var.get("this").callprop('token', Js('['))
            var.get("this").callprop('print', var.get('key'), var.get('node'))
            var.get("this").callprop('token', Js(']'))
        else:
            var.get("this").callprop('print', var.get('key'), var.get('node'))
        var.get("this").callprop('_params', var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted__method_.__name__ = '_method'
    var.put('_method', PyJsHoisted__method_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('FunctionDeclaration', var.get('undefined'))
    var.get('exports').put('_params', var.get('_params'))
    var.get('exports').put('_method', var.get('_method'))
    var.get('exports').put('FunctionExpression', var.get('FunctionExpression'))
    var.get('exports').put('ArrowFunctionExpression', var.get('ArrowFunctionExpression'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    var.get('exports').put('FunctionDeclaration', var.get('FunctionExpression'))
    pass
    pass
PyJs_anonymous_475_._set_name('anonymous')
PyJs_Object_479_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_480_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ExportDeclaration', 'ExportNamespaceSpecifier', '_interopRequireWildcard', 'ExportDefaultDeclaration', 'ImportDeclaration', 'ExportSpecifier', 'ImportSpecifier', '_babelTypes', 'require', 'module', 'ImportDefaultSpecifier', 'ExportNamedDeclaration', 't', 'ImportNamespaceSpecifier', 'ExportDefaultSpecifier', 'ExportAllDeclaration'])
    @Js
    def PyJsHoisted_ExportNamespaceSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('*'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('as'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('exported'), var.get('node'))
    PyJsHoisted_ExportNamespaceSpecifier_.__name__ = 'ExportNamespaceSpecifier'
    var.put('ExportNamespaceSpecifier', PyJsHoisted_ExportNamespaceSpecifier_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_481_ = Js({})
            var.put('newObj', PyJs_Object_481_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ExportDefaultDeclaration_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('export'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('default'))
        var.get("this").callprop('space')
        var.get('ExportDeclaration').callprop('apply', var.get("this"), var.get('arguments'))
    PyJsHoisted_ExportDefaultDeclaration_.__name__ = 'ExportDefaultDeclaration'
    var.put('ExportDefaultDeclaration', PyJsHoisted_ExportDefaultDeclaration_)
    @Js
    def PyJsHoisted_ImportDeclaration_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'specifiers', 'first'])
        var.get("this").callprop('word', Js('import'))
        var.get("this").callprop('space')
        if (PyJsStrictEq(var.get('node').get('importKind'),Js('type')) or PyJsStrictEq(var.get('node').get('importKind'),Js('typeof'))):
            var.get("this").callprop('word', var.get('node').get('importKind'))
            var.get("this").callprop('space')
        var.put('specifiers', var.get('node').get('specifiers').callprop('slice', Js(0.0)))
        if (var.get('specifiers') and var.get('specifiers').get('length')):
            while var.get('true'):
                var.put('first', var.get('specifiers').get('0'))
                if (var.get('t').callprop('isImportDefaultSpecifier', var.get('first')) or var.get('t').callprop('isImportNamespaceSpecifier', var.get('first'))):
                    var.get("this").callprop('print', var.get('specifiers').callprop('shift'), var.get('node'))
                    if var.get('specifiers').get('length'):
                        var.get("this").callprop('token', Js(','))
                        var.get("this").callprop('space')
                else:
                    break
            if var.get('specifiers').get('length'):
                var.get("this").callprop('token', Js('{'))
                var.get("this").callprop('space')
                var.get("this").callprop('printList', var.get('specifiers'), var.get('node'))
                var.get("this").callprop('space')
                var.get("this").callprop('token', Js('}'))
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('from'))
            var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('source'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_ImportDeclaration_.__name__ = 'ImportDeclaration'
    var.put('ImportDeclaration', PyJsHoisted_ImportDeclaration_)
    @Js
    def PyJsHoisted_ExportSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('local'), var.get('node'))
        if (var.get('node').get('exported') and PyJsStrictNeq(var.get('node').get('local').get('name'),var.get('node').get('exported').get('name'))):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('as'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('exported'), var.get('node'))
    PyJsHoisted_ExportSpecifier_.__name__ = 'ExportSpecifier'
    var.put('ExportSpecifier', PyJsHoisted_ExportSpecifier_)
    @Js
    def PyJsHoisted_ImportSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('imported'), var.get('node'))
        if (var.get('node').get('local') and PyJsStrictNeq(var.get('node').get('local').get('name'),var.get('node').get('imported').get('name'))):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('as'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('local'), var.get('node'))
    PyJsHoisted_ImportSpecifier_.__name__ = 'ImportSpecifier'
    var.put('ImportSpecifier', PyJsHoisted_ImportSpecifier_)
    @Js
    def PyJsHoisted_ExportDeclaration_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'specifiers', 'declar', 'first', 'hasSpecial'])
        if var.get('node').get('declaration'):
            var.put('declar', var.get('node').get('declaration'))
            var.get("this").callprop('print', var.get('declar'), var.get('node'))
            if var.get('t').callprop('isStatement', var.get('declar')).neg():
                var.get("this").callprop('semicolon')
        else:
            if PyJsStrictEq(var.get('node').get('exportKind'),Js('type')):
                var.get("this").callprop('word', Js('type'))
                var.get("this").callprop('space')
            var.put('specifiers', var.get('node').get('specifiers').callprop('slice', Js(0.0)))
            var.put('hasSpecial', Js(False))
            while var.get('true'):
                var.put('first', var.get('specifiers').get('0'))
                if (var.get('t').callprop('isExportDefaultSpecifier', var.get('first')) or var.get('t').callprop('isExportNamespaceSpecifier', var.get('first'))):
                    var.put('hasSpecial', var.get('true'))
                    var.get("this").callprop('print', var.get('specifiers').callprop('shift'), var.get('node'))
                    if var.get('specifiers').get('length'):
                        var.get("this").callprop('token', Js(','))
                        var.get("this").callprop('space')
                else:
                    break
            if (var.get('specifiers').get('length') or (var.get('specifiers').get('length').neg() and var.get('hasSpecial').neg())):
                var.get("this").callprop('token', Js('{'))
                if var.get('specifiers').get('length'):
                    var.get("this").callprop('space')
                    var.get("this").callprop('printList', var.get('specifiers'), var.get('node'))
                    var.get("this").callprop('space')
                var.get("this").callprop('token', Js('}'))
            if var.get('node').get('source'):
                var.get("this").callprop('space')
                var.get("this").callprop('word', Js('from'))
                var.get("this").callprop('space')
                var.get("this").callprop('print', var.get('node').get('source'), var.get('node'))
            var.get("this").callprop('semicolon')
    PyJsHoisted_ExportDeclaration_.__name__ = 'ExportDeclaration'
    var.put('ExportDeclaration', PyJsHoisted_ExportDeclaration_)
    @Js
    def PyJsHoisted_ImportDefaultSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('local'), var.get('node'))
    PyJsHoisted_ImportDefaultSpecifier_.__name__ = 'ImportDefaultSpecifier'
    var.put('ImportDefaultSpecifier', PyJsHoisted_ImportDefaultSpecifier_)
    @Js
    def PyJsHoisted_ExportNamedDeclaration_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('export'))
        var.get("this").callprop('space')
        var.get('ExportDeclaration').callprop('apply', var.get("this"), var.get('arguments'))
    PyJsHoisted_ExportNamedDeclaration_.__name__ = 'ExportNamedDeclaration'
    var.put('ExportNamedDeclaration', PyJsHoisted_ExportNamedDeclaration_)
    @Js
    def PyJsHoisted_ExportAllDeclaration_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('export'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('*'))
        if var.get('node').get('exported'):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('as'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('exported'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('from'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('source'), var.get('node'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_ExportAllDeclaration_.__name__ = 'ExportAllDeclaration'
    var.put('ExportAllDeclaration', PyJsHoisted_ExportAllDeclaration_)
    @Js
    def PyJsHoisted_ImportNamespaceSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('*'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('as'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('local'), var.get('node'))
    PyJsHoisted_ImportNamespaceSpecifier_.__name__ = 'ImportNamespaceSpecifier'
    var.put('ImportNamespaceSpecifier', PyJsHoisted_ImportNamespaceSpecifier_)
    @Js
    def PyJsHoisted_ExportDefaultSpecifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('exported'), var.get('node'))
    PyJsHoisted_ExportDefaultSpecifier_.__name__ = 'ExportDefaultSpecifier'
    var.put('ExportDefaultSpecifier', PyJsHoisted_ExportDefaultSpecifier_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ImportSpecifier', var.get('ImportSpecifier'))
    var.get('exports').put('ImportDefaultSpecifier', var.get('ImportDefaultSpecifier'))
    var.get('exports').put('ExportDefaultSpecifier', var.get('ExportDefaultSpecifier'))
    var.get('exports').put('ExportSpecifier', var.get('ExportSpecifier'))
    var.get('exports').put('ExportNamespaceSpecifier', var.get('ExportNamespaceSpecifier'))
    var.get('exports').put('ExportAllDeclaration', var.get('ExportAllDeclaration'))
    var.get('exports').put('ExportNamedDeclaration', var.get('ExportNamedDeclaration'))
    var.get('exports').put('ExportDefaultDeclaration', var.get('ExportDefaultDeclaration'))
    var.get('exports').put('ImportDeclaration', var.get('ImportDeclaration'))
    var.get('exports').put('ImportNamespaceSpecifier', var.get('ImportNamespaceSpecifier'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_480_._set_name('anonymous')
PyJs_Object_482_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_483_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['ForOfStatement', 'LabeledStatement', 'ForAwaitStatement', 'module', 'DebuggerStatement', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'VariableDeclaration', 'ForStatement', 'getLastStatement', 'ContinueStatement', 'DoWhileStatement', 'SwitchStatement', 'CatchClause', 'buildLabelStatement', 'BreakStatement', 'buildForXStatement', 'exports', '_interopRequireWildcard', '_babelTypes', 'TryStatement', 'ForInStatement', 'SwitchCase', 'constDeclarationIdent', 'ThrowStatement', 'WithStatement', 'WhileStatement', 'variableDeclarationIdent', 't', 'ReturnStatement', 'VariableDeclarator', 'require', 'IfStatement'])
    @Js
    def PyJsHoisted_ForStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('for'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        (var.get("this").put('inForStatementInitCounter',Js(var.get("this").get('inForStatementInitCounter').to_number())+Js(1))-Js(1))
        var.get("this").callprop('print', var.get('node').get('init'), var.get('node'))
        (var.get("this").put('inForStatementInitCounter',Js(var.get("this").get('inForStatementInitCounter').to_number())-Js(1))+Js(1))
        var.get("this").callprop('token', Js(';'))
        if var.get('node').get('test'):
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
        var.get("this").callprop('token', Js(';'))
        if var.get('node').get('update'):
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('update'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('printBlock', var.get('node'))
    PyJsHoisted_ForStatement_.__name__ = 'ForStatement'
    var.put('ForStatement', PyJsHoisted_ForStatement_)
    @Js
    def PyJsHoisted_constDeclarationIdent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i'])
        var.get("this").callprop('token', Js(','))
        var.get("this").callprop('newline')
        if var.get("this").callprop('endsWith', Js('\n')):
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(6.0)):
                try:
                    var.get("this").callprop('space', var.get('true'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJsHoisted_constDeclarationIdent_.__name__ = 'constDeclarationIdent'
    var.put('constDeclarationIdent', PyJsHoisted_constDeclarationIdent_)
    @Js
    def PyJsHoisted_getLastStatement_(statement, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'statement':statement}, var)
        var.registers(['statement'])
        if var.get('t').callprop('isStatement', var.get('statement').get('body')).neg():
            return var.get('statement')
        return var.get('getLastStatement')(var.get('statement').get('body'))
    PyJsHoisted_getLastStatement_.__name__ = 'getLastStatement'
    var.put('getLastStatement', PyJsHoisted_getLastStatement_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_484_ = Js({})
            var.put('newObj', PyJs_Object_484_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_DoWhileStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('do'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
        var.get("this").callprop('space')
        var.get("this").callprop('word', Js('while'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_DoWhileStatement_.__name__ = 'DoWhileStatement'
    var.put('DoWhileStatement', PyJsHoisted_DoWhileStatement_)
    @Js
    def PyJsHoisted_WithStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('with'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('object'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('printBlock', var.get('node'))
    PyJsHoisted_WithStatement_.__name__ = 'WithStatement'
    var.put('WithStatement', PyJsHoisted_WithStatement_)
    @Js
    def PyJsHoisted_WhileStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('while'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('printBlock', var.get('node'))
    PyJsHoisted_WhileStatement_.__name__ = 'WhileStatement'
    var.put('WhileStatement', PyJsHoisted_WhileStatement_)
    @Js
    def PyJsHoisted_CatchClause_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('catch'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('param'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_CatchClause_.__name__ = 'CatchClause'
    var.put('CatchClause', PyJsHoisted_CatchClause_)
    @Js
    def PyJsHoisted_buildLabelStatement_(prefix, this, arguments, var=var):
        var = Scope({'this':this, 'prefix':prefix, 'arguments':arguments}, var)
        var.registers(['prefix', 'key'])
        var.put('key', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js('label')))
        @Js
        def PyJs_anonymous_488_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', 'terminatorState', 'label'])
            var.get("this").callprop('word', var.get('prefix'))
            var.put('label', var.get('node').get(var.get('key')))
            if var.get('label'):
                var.get("this").callprop('space')
                var.put('terminatorState', var.get("this").callprop('startTerminatorless'))
                var.get("this").callprop('print', var.get('label'), var.get('node'))
                var.get("this").callprop('endTerminatorless', var.get('terminatorState'))
            var.get("this").callprop('semicolon')
        PyJs_anonymous_488_._set_name('anonymous')
        return PyJs_anonymous_488_
    PyJsHoisted_buildLabelStatement_.__name__ = 'buildLabelStatement'
    var.put('buildLabelStatement', PyJsHoisted_buildLabelStatement_)
    @Js
    def PyJsHoisted_TryStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('try'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('block'), var.get('node'))
        var.get("this").callprop('space')
        if var.get('node').get('handlers'):
            var.get("this").callprop('print', var.get('node').get('handlers').get('0'), var.get('node'))
        else:
            var.get("this").callprop('print', var.get('node').get('handler'), var.get('node'))
        if var.get('node').get('finalizer'):
            var.get("this").callprop('space')
            var.get("this").callprop('word', Js('finally'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('finalizer'), var.get('node'))
    PyJsHoisted_TryStatement_.__name__ = 'TryStatement'
    var.put('TryStatement', PyJsHoisted_TryStatement_)
    @Js
    def PyJsHoisted_DebuggerStatement_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('debugger'))
        var.get("this").callprop('semicolon')
    PyJsHoisted_DebuggerStatement_.__name__ = 'DebuggerStatement'
    var.put('DebuggerStatement', PyJsHoisted_DebuggerStatement_)
    @Js
    def PyJsHoisted_SwitchStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', Js('switch'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('discriminant'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('{'))
        @Js
        def PyJs_addNewlines_490_(leading, cas, this, arguments, var=var):
            var = Scope({'cas':cas, 'leading':leading, 'this':this, 'arguments':arguments, 'addNewlines':PyJs_addNewlines_490_}, var)
            var.registers(['cas', 'leading'])
            if (var.get('leading').neg() and PyJsStrictEq(var.get('node').get('cases').get((var.get('node').get('cases').get('length')-Js(1.0))),var.get('cas'))):
                return (-Js(1.0))
        PyJs_addNewlines_490_._set_name('addNewlines')
        PyJs_Object_489_ = Js({'indent':var.get('true'),'addNewlines':PyJs_addNewlines_490_})
        var.get("this").callprop('printSequence', var.get('node').get('cases'), var.get('node'), PyJs_Object_489_)
        var.get("this").callprop('token', Js('}'))
    PyJsHoisted_SwitchStatement_.__name__ = 'SwitchStatement'
    var.put('SwitchStatement', PyJsHoisted_SwitchStatement_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_485_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_485_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_variableDeclarationIdent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i'])
        var.get("this").callprop('token', Js(','))
        var.get("this").callprop('newline')
        if var.get("this").callprop('endsWith', Js('\n')):
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    var.get("this").callprop('space', var.get('true'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJsHoisted_variableDeclarationIdent_.__name__ = 'variableDeclarationIdent'
    var.put('variableDeclarationIdent', PyJsHoisted_variableDeclarationIdent_)
    @Js
    def PyJsHoisted_LabeledStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('label'), var.get('node'))
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('body'), var.get('node'))
    PyJsHoisted_LabeledStatement_.__name__ = 'LabeledStatement'
    var.put('LabeledStatement', PyJsHoisted_LabeledStatement_)
    @Js
    def PyJsHoisted_VariableDeclaration_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'hasInits', '_isArray', '_iterator', 'parent', 'declar', 'separator', '_i', '_ref'])
        var.get("this").callprop('word', var.get('node').get('kind'))
        var.get("this").callprop('space')
        var.put('hasInits', Js(False))
        if var.get('t').callprop('isFor', var.get('parent')).neg():
            #for JS loop
            var.put('_iterator', var.get('node').get('declarations'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('declar', var.get('_ref'))
                if var.get('declar').get('init'):
                    var.put('hasInits', var.get('true'))
            
        var.put('separator', PyJsComma(Js(0.0), Js(None)))
        if var.get('hasInits'):
            var.put('separator', (var.get('constDeclarationIdent') if PyJsStrictEq(var.get('node').get('kind'),Js('const')) else var.get('variableDeclarationIdent')))
        PyJs_Object_492_ = Js({'separator':var.get('separator')})
        var.get("this").callprop('printList', var.get('node').get('declarations'), var.get('node'), PyJs_Object_492_)
        if var.get('t').callprop('isFor', var.get('parent')):
            if (PyJsStrictEq(var.get('parent').get('left'),var.get('node')) or PyJsStrictEq(var.get('parent').get('init'),var.get('node'))):
                return var.get('undefined')
        var.get("this").callprop('semicolon')
    PyJsHoisted_VariableDeclaration_.__name__ = 'VariableDeclaration'
    var.put('VariableDeclaration', PyJsHoisted_VariableDeclaration_)
    @Js
    def PyJsHoisted_SwitchCase_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('test'):
            var.get("this").callprop('word', Js('case'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
            var.get("this").callprop('token', Js(':'))
        else:
            var.get("this").callprop('word', Js('default'))
            var.get("this").callprop('token', Js(':'))
        if var.get('node').get('consequent').get('length'):
            var.get("this").callprop('newline')
            PyJs_Object_491_ = Js({'indent':var.get('true')})
            var.get("this").callprop('printSequence', var.get('node').get('consequent'), var.get('node'), PyJs_Object_491_)
    PyJsHoisted_SwitchCase_.__name__ = 'SwitchCase'
    var.put('SwitchCase', PyJsHoisted_SwitchCase_)
    @Js
    def PyJsHoisted_VariableDeclarator_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('id'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('id').get('typeAnnotation'), var.get('node'))
        if var.get('node').get('init'):
            var.get("this").callprop('space')
            var.get("this").callprop('token', Js('='))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('init'), var.get('node'))
    PyJsHoisted_VariableDeclarator_.__name__ = 'VariableDeclarator'
    var.put('VariableDeclarator', PyJsHoisted_VariableDeclarator_)
    @Js
    def PyJsHoisted_IfStatement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'needsBlock'])
        var.get("this").callprop('word', Js('if'))
        var.get("this").callprop('space')
        var.get("this").callprop('token', Js('('))
        var.get("this").callprop('print', var.get('node').get('test'), var.get('node'))
        var.get("this").callprop('token', Js(')'))
        var.get("this").callprop('space')
        var.put('needsBlock', (var.get('node').get('alternate') and var.get('t').callprop('isIfStatement', var.get('getLastStatement')(var.get('node').get('consequent')))))
        if var.get('needsBlock'):
            var.get("this").callprop('token', Js('{'))
            var.get("this").callprop('newline')
            var.get("this").callprop('indent')
        var.get("this").callprop('printAndIndentOnComments', var.get('node').get('consequent'), var.get('node'))
        if var.get('needsBlock'):
            var.get("this").callprop('dedent')
            var.get("this").callprop('newline')
            var.get("this").callprop('token', Js('}'))
        if var.get('node').get('alternate'):
            if var.get("this").callprop('endsWith', Js('}')):
                var.get("this").callprop('space')
            var.get("this").callprop('word', Js('else'))
            var.get("this").callprop('space')
            var.get("this").callprop('printAndIndentOnComments', var.get('node').get('alternate'), var.get('node'))
    PyJsHoisted_IfStatement_.__name__ = 'IfStatement'
    var.put('IfStatement', PyJsHoisted_IfStatement_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ThrowStatement', var.get('exports').put('BreakStatement', var.get('exports').put('ReturnStatement', var.get('exports').put('ContinueStatement', var.get('exports').put('ForAwaitStatement', var.get('exports').put('ForOfStatement', var.get('exports').put('ForInStatement', var.get('undefined'))))))))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('WithStatement', var.get('WithStatement'))
    var.get('exports').put('IfStatement', var.get('IfStatement'))
    var.get('exports').put('ForStatement', var.get('ForStatement'))
    var.get('exports').put('WhileStatement', var.get('WhileStatement'))
    var.get('exports').put('DoWhileStatement', var.get('DoWhileStatement'))
    var.get('exports').put('LabeledStatement', var.get('LabeledStatement'))
    var.get('exports').put('TryStatement', var.get('TryStatement'))
    var.get('exports').put('CatchClause', var.get('CatchClause'))
    var.get('exports').put('SwitchStatement', var.get('SwitchStatement'))
    var.get('exports').put('SwitchCase', var.get('SwitchCase'))
    var.get('exports').put('DebuggerStatement', var.get('DebuggerStatement'))
    var.get('exports').put('VariableDeclaration', var.get('VariableDeclaration'))
    var.get('exports').put('VariableDeclarator', var.get('VariableDeclarator'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_buildForXStatement_486_(op, this, arguments, var=var):
        var = Scope({'this':this, 'buildForXStatement':PyJs_buildForXStatement_486_, 'arguments':arguments, 'op':op}, var)
        var.registers(['op'])
        @Js
        def PyJs_anonymous_487_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            var.get("this").callprop('word', Js('for'))
            var.get("this").callprop('space')
            if PyJsStrictEq(var.get('op'),Js('await')):
                var.get("this").callprop('word', Js('await'))
                var.get("this").callprop('space')
                var.put('op', Js('of'))
            var.get("this").callprop('token', Js('('))
            var.get("this").callprop('print', var.get('node').get('left'), var.get('node'))
            var.get("this").callprop('space')
            var.get("this").callprop('word', var.get('op'))
            var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node').get('right'), var.get('node'))
            var.get("this").callprop('token', Js(')'))
            var.get("this").callprop('printBlock', var.get('node'))
        PyJs_anonymous_487_._set_name('anonymous')
        return PyJs_anonymous_487_
    PyJs_buildForXStatement_486_._set_name('buildForXStatement')
    var.put('buildForXStatement', PyJs_buildForXStatement_486_)
    var.put('ForInStatement', var.get('exports').put('ForInStatement', var.get('buildForXStatement')(Js('in'))))
    var.put('ForOfStatement', var.get('exports').put('ForOfStatement', var.get('buildForXStatement')(Js('of'))))
    var.put('ForAwaitStatement', var.get('exports').put('ForAwaitStatement', var.get('buildForXStatement')(Js('await'))))
    pass
    pass
    var.put('ContinueStatement', var.get('exports').put('ContinueStatement', var.get('buildLabelStatement')(Js('continue'))))
    var.put('ReturnStatement', var.get('exports').put('ReturnStatement', var.get('buildLabelStatement')(Js('return'), Js('argument'))))
    var.put('BreakStatement', var.get('exports').put('BreakStatement', var.get('buildLabelStatement')(Js('break'))))
    var.put('ThrowStatement', var.get('exports').put('ThrowStatement', var.get('buildLabelStatement')(Js('throw'), Js('argument'))))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_483_._set_name('anonymous')
PyJs_Object_493_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_494_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'TaggedTemplateExpression', 'TemplateElement', 'TemplateLiteral'])
    @Js
    def PyJsHoisted_TemplateElement_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'value', 'parent', 'isFirst', 'isLast'])
        var.put('isFirst', PyJsStrictEq(var.get('parent').get('quasis').get('0'),var.get('node')))
        var.put('isLast', PyJsStrictEq(var.get('parent').get('quasis').get((var.get('parent').get('quasis').get('length')-Js(1.0))),var.get('node')))
        var.put('value', (((Js('`') if var.get('isFirst') else Js('}'))+var.get('node').get('value').get('raw'))+(Js('`') if var.get('isLast') else Js('${'))))
        if var.get('isFirst').neg():
            var.get("this").callprop('space')
        var.get("this").callprop('token', var.get('value'))
        if var.get('isLast').neg():
            var.get("this").callprop('space')
    PyJsHoisted_TemplateElement_.__name__ = 'TemplateElement'
    var.put('TemplateElement', PyJsHoisted_TemplateElement_)
    @Js
    def PyJsHoisted_TaggedTemplateExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('print', var.get('node').get('tag'), var.get('node'))
        var.get("this").callprop('print', var.get('node').get('quasi'), var.get('node'))
    PyJsHoisted_TaggedTemplateExpression_.__name__ = 'TaggedTemplateExpression'
    var.put('TaggedTemplateExpression', PyJsHoisted_TaggedTemplateExpression_)
    @Js
    def PyJsHoisted_TemplateLiteral_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['quasis', 'i', 'node'])
        var.put('quasis', var.get('node').get('quasis'))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('quasis').get('length')):
            try:
                var.get("this").callprop('print', var.get('quasis').get(var.get('i')), var.get('node'))
                if ((var.get('i')+Js(1.0))<var.get('quasis').get('length')):
                    var.get("this").callprop('print', var.get('node').get('expressions').get(var.get('i')), var.get('node'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJsHoisted_TemplateLiteral_.__name__ = 'TemplateLiteral'
    var.put('TemplateLiteral', PyJsHoisted_TemplateLiteral_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('TaggedTemplateExpression', var.get('TaggedTemplateExpression'))
    var.get('exports').put('TemplateElement', var.get('TemplateElement'))
    var.get('exports').put('TemplateLiteral', var.get('TemplateLiteral'))
    pass
    pass
    pass
PyJs_anonymous_494_._set_name('anonymous')
PyJs_Object_495_ = Js({})
@Js
def PyJs_anonymous_496_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['NumericLiteral', 'exports', 'ObjectMethod', 'module', '_jsesc2', '_interopRequireWildcard', 'RestElement', 'require', '_babelTypes', 'ObjectProperty', 'StringLiteral', 'ArrayExpression', 'BooleanLiteral', 'RegExpLiteral', 'ObjectExpression', 't', '_jsesc', '_interopRequireDefault', 'Identifier', 'NullLiteral'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_498_ = Js({})
            var.put('newObj', PyJs_Object_498_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ObjectMethod_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printJoin', var.get('node').get('decorators'), var.get('node'))
        var.get("this").callprop('_method', var.get('node'))
    PyJsHoisted_ObjectMethod_.__name__ = 'ObjectMethod'
    var.put('ObjectMethod', PyJsHoisted_ObjectMethod_)
    @Js
    def PyJsHoisted_RestElement_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('token', Js('...'))
        var.get("this").callprop('print', var.get('node').get('argument'), var.get('node'))
    PyJsHoisted_RestElement_.__name__ = 'RestElement'
    var.put('RestElement', PyJsHoisted_RestElement_)
    @Js
    def PyJsHoisted_ObjectProperty_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('printJoin', var.get('node').get('decorators'), var.get('node'))
        if var.get('node').get('computed'):
            var.get("this").callprop('token', Js('['))
            var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
            var.get("this").callprop('token', Js(']'))
        else:
            if ((var.get('t').callprop('isAssignmentPattern', var.get('node').get('value')) and var.get('t').callprop('isIdentifier', var.get('node').get('key'))) and PyJsStrictEq(var.get('node').get('key').get('name'),var.get('node').get('value').get('left').get('name'))):
                var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
                return var.get('undefined')
            var.get("this").callprop('print', var.get('node').get('key'), var.get('node'))
            if (((var.get('node').get('shorthand') and var.get('t').callprop('isIdentifier', var.get('node').get('key'))) and var.get('t').callprop('isIdentifier', var.get('node').get('value'))) and PyJsStrictEq(var.get('node').get('key').get('name'),var.get('node').get('value').get('name'))):
                return var.get('undefined')
        var.get("this").callprop('token', Js(':'))
        var.get("this").callprop('space')
        var.get("this").callprop('print', var.get('node').get('value'), var.get('node'))
    PyJsHoisted_ObjectProperty_.__name__ = 'ObjectProperty'
    var.put('ObjectProperty', PyJsHoisted_ObjectProperty_)
    @Js
    def PyJsHoisted_StringLiteral_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'raw', 'parent', 'val'])
        var.put('raw', var.get("this").callprop('getPossibleRaw', var.get('node')))
        if (var.get('raw')!=var.get("null")):
            var.get("this").callprop('token', var.get('raw'))
            return var.get('undefined')
        PyJs_Object_500_ = Js({'quotes':(Js('double') if var.get('t').callprop('isJSX', var.get('parent')) else var.get("this").get('format').get('quotes')),'wrap':var.get('true')})
        var.put('val', PyJsComma(Js(0.0),var.get('_jsesc2').get('default'))(var.get('node').get('value'), PyJs_Object_500_))
        return var.get("this").callprop('token', var.get('val'))
    PyJsHoisted_StringLiteral_.__name__ = 'StringLiteral'
    var.put('StringLiteral', PyJsHoisted_StringLiteral_)
    @Js
    def PyJsHoisted_ArrayExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'node', 'elems', 'len', 'elem'])
        var.put('elems', var.get('node').get('elements'))
        var.put('len', var.get('elems').get('length'))
        var.get("this").callprop('token', Js('['))
        var.get("this").callprop('printInnerComments', var.get('node'))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('elems').get('length')):
            try:
                var.put('elem', var.get('elems').get(var.get('i')))
                if var.get('elem'):
                    if (var.get('i')>Js(0.0)):
                        var.get("this").callprop('space')
                    var.get("this").callprop('print', var.get('elem'), var.get('node'))
                    if (var.get('i')<(var.get('len')-Js(1.0))):
                        var.get("this").callprop('token', Js(','))
                else:
                    var.get("this").callprop('token', Js(','))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.get("this").callprop('token', Js(']'))
    PyJsHoisted_ArrayExpression_.__name__ = 'ArrayExpression'
    var.put('ArrayExpression', PyJsHoisted_ArrayExpression_)
    @Js
    def PyJsHoisted_BooleanLiteral_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', (Js('true') if var.get('node').get('value') else Js('false')))
    PyJsHoisted_BooleanLiteral_.__name__ = 'BooleanLiteral'
    var.put('BooleanLiteral', PyJsHoisted_BooleanLiteral_)
    @Js
    def PyJsHoisted_NumericLiteral_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'raw'])
        var.put('raw', var.get("this").callprop('getPossibleRaw', var.get('node')))
        var.get("this").callprop('number', ((var.get('node').get('value')+Js('')) if (var.get('raw')==var.get("null")) else var.get('raw')))
    PyJsHoisted_NumericLiteral_.__name__ = 'NumericLiteral'
    var.put('NumericLiteral', PyJsHoisted_NumericLiteral_)
    @Js
    def PyJsHoisted_ObjectExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'props'])
        var.put('props', var.get('node').get('properties'))
        var.get("this").callprop('token', Js('{'))
        var.get("this").callprop('printInnerComments', var.get('node'))
        if var.get('props').get('length'):
            var.get("this").callprop('space')
            PyJs_Object_499_ = Js({'indent':var.get('true'),'statement':var.get('true')})
            var.get("this").callprop('printList', var.get('props'), var.get('node'), PyJs_Object_499_)
            var.get("this").callprop('space')
        var.get("this").callprop('token', Js('}'))
    PyJsHoisted_ObjectExpression_.__name__ = 'ObjectExpression'
    var.put('ObjectExpression', PyJsHoisted_ObjectExpression_)
    @Js
    def PyJsHoisted_RegExpLiteral_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('word', (((Js('/')+var.get('node').get('pattern'))+Js('/'))+var.get('node').get('flags')))
    PyJsHoisted_RegExpLiteral_.__name__ = 'RegExpLiteral'
    var.put('RegExpLiteral', PyJsHoisted_RegExpLiteral_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_497_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_497_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_Identifier_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('node').get('variance'):
            if PyJsStrictEq(var.get('node').get('variance'),Js('plus')):
                var.get("this").callprop('token', Js('+'))
            else:
                if PyJsStrictEq(var.get('node').get('variance'),Js('minus')):
                    var.get("this").callprop('token', Js('-'))
        var.get("this").callprop('word', var.get('node').get('name'))
    PyJsHoisted_Identifier_.__name__ = 'Identifier'
    var.put('Identifier', PyJsHoisted_Identifier_)
    @Js
    def PyJsHoisted_NullLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('word', Js('null'))
    PyJsHoisted_NullLiteral_.__name__ = 'NullLiteral'
    var.put('NullLiteral', PyJsHoisted_NullLiteral_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ArrayPattern', var.get('exports').put('ObjectPattern', var.get('exports').put('RestProperty', var.get('exports').put('SpreadProperty', var.get('exports').put('SpreadElement', var.get('undefined'))))))
    var.get('exports').put('Identifier', var.get('Identifier'))
    var.get('exports').put('RestElement', var.get('RestElement'))
    var.get('exports').put('ObjectExpression', var.get('ObjectExpression'))
    var.get('exports').put('ObjectMethod', var.get('ObjectMethod'))
    var.get('exports').put('ObjectProperty', var.get('ObjectProperty'))
    var.get('exports').put('ArrayExpression', var.get('ArrayExpression'))
    var.get('exports').put('RegExpLiteral', var.get('RegExpLiteral'))
    var.get('exports').put('BooleanLiteral', var.get('BooleanLiteral'))
    var.get('exports').put('NullLiteral', var.get('NullLiteral'))
    var.get('exports').put('NumericLiteral', var.get('NumericLiteral'))
    var.get('exports').put('StringLiteral', var.get('StringLiteral'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_jsesc', var.get('require')(Js('jsesc')))
    var.put('_jsesc2', var.get('_interopRequireDefault')(var.get('_jsesc')))
    pass
    pass
    pass
    pass
    var.get('exports').put('SpreadElement', var.get('RestElement'))
    var.get('exports').put('SpreadProperty', var.get('RestElement'))
    var.get('exports').put('RestProperty', var.get('RestElement'))
    pass
    var.get('exports').put('ObjectPattern', var.get('ObjectExpression'))
    pass
    pass
    pass
    var.get('exports').put('ArrayPattern', var.get('ArrayExpression'))
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_496_._set_name('anonymous')
PyJs_Object_501_ = Js({'babel-types':Js(258.0),'jsesc':Js(283.0)})
@Js
def PyJs_anonymous_502_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['Generator', '_sourceMap', '_detectIndent2', 'module', '_interopRequireDefault', '_printer2', 'normalizeOptions', 'findCommonStringDelimiter', '_possibleConstructorReturn3', '_possibleConstructorReturn2', '_classCallCheck3', '_classCallCheck2', '_detectIndent', '_babelMessages', 'exports', '_printer', '_interopRequireWildcard', '_inherits3', '_inherits2', 'require', 'CodeGenerator', 'messages', '_sourceMap2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_505_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_505_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_findCommonStringDelimiter_(code, tokens, this, arguments, var=var):
        var = Scope({'tokens':tokens, 'this':this, 'code':code, 'arguments':arguments}, var)
        var.registers(['code', 'checked', 'i', 'tokens', 'raw', 'token', 'DEFAULT_STRING_DELIMITER', 'occurences'])
        var.put('DEFAULT_STRING_DELIMITER', Js('double'))
        if var.get('code').neg():
            return var.get('DEFAULT_STRING_DELIMITER')
        PyJs_Object_513_ = Js({'single':Js(0.0),'double':Js(0.0)})
        var.put('occurences', PyJs_Object_513_)
        var.put('checked', Js(0.0))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('tokens').get('length')):
            try:
                var.put('token', var.get('tokens').get(var.get('i')))
                if PyJsStrictNeq(var.get('token').get('type').get('label'),Js('string')):
                    continue
                var.put('raw', var.get('code').callprop('slice', var.get('token').get('start'), var.get('token').get('end')))
                if PyJsStrictEq(var.get('raw').get('0'),Js("'")):
                    (var.get('occurences').put('single',Js(var.get('occurences').get('single').to_number())+Js(1))-Js(1))
                else:
                    (var.get('occurences').put('double',Js(var.get('occurences').get('double').to_number())+Js(1))-Js(1))
                (var.put('checked',Js(var.get('checked').to_number())+Js(1))-Js(1))
                if (var.get('checked')>=Js(3.0)):
                    break
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if (var.get('occurences').get('single')>var.get('occurences').get('double')):
            return Js('single')
        else:
            return Js('double')
    PyJsHoisted_findCommonStringDelimiter_.__name__ = 'findCommonStringDelimiter'
    var.put('findCommonStringDelimiter', PyJsHoisted_findCommonStringDelimiter_)
    @Js
    def PyJsHoisted_normalizeOptions_(code, opts, tokens, this, arguments, var=var):
        var = Scope({'tokens':tokens, 'this':this, 'code':code, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['style', 'code', 'indent', 'format', 'tokens', 'opts'])
        var.put('style', Js('  '))
        if (var.get('code') and PyJsStrictEq(var.get('code',throw=False).typeof(),Js('string'))):
            var.put('indent', PyJsComma(Js(0.0),var.get('_detectIndent2').get('default'))(var.get('code')).get('indent'))
            if (var.get('indent') and PyJsStrictNeq(var.get('indent'),Js(' '))):
                var.put('style', var.get('indent'))
        PyJs_Object_510_ = Js({'adjustMultilineComment':var.get('true'),'style':var.get('style'),'base':Js(0.0)})
        PyJs_Object_509_ = Js({'auxiliaryCommentBefore':var.get('opts').get('auxiliaryCommentBefore'),'auxiliaryCommentAfter':var.get('opts').get('auxiliaryCommentAfter'),'shouldPrintComment':var.get('opts').get('shouldPrintComment'),'retainLines':var.get('opts').get('retainLines'),'retainFunctionParens':var.get('opts').get('retainFunctionParens'),'comments':((var.get('opts').get('comments')==var.get("null")) or var.get('opts').get('comments')),'compact':var.get('opts').get('compact'),'minified':var.get('opts').get('minified'),'concise':var.get('opts').get('concise'),'quotes':(var.get('opts').get('quotes') or var.get('findCommonStringDelimiter')(var.get('code'), var.get('tokens'))),'indent':PyJs_Object_510_})
        var.put('format', PyJs_Object_509_)
        if var.get('format').get('minified'):
            var.get('format').put('compact', var.get('true'))
            @Js
            def PyJs_anonymous_511_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('format').get('comments')
            PyJs_anonymous_511_._set_name('anonymous')
            var.get('format').put('shouldPrintComment', (var.get('format').get('shouldPrintComment') or PyJs_anonymous_511_))
        else:
            @Js
            def PyJs_anonymous_512_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((var.get('format').get('comments') or (var.get('value').callprop('indexOf', Js('@license'))>=Js(0.0))) or (var.get('value').callprop('indexOf', Js('@preserve'))>=Js(0.0)))
            PyJs_anonymous_512_._set_name('anonymous')
            var.get('format').put('shouldPrintComment', (var.get('format').get('shouldPrintComment') or PyJs_anonymous_512_))
        if PyJsStrictEq(var.get('format').get('compact'),Js('auto')):
            var.get('format').put('compact', (var.get('code').get('length')>Js(100000.0)))
            if var.get('format').get('compact'):
                var.get('console').callprop('error', (Js('[BABEL] ')+var.get('messages').callprop('get', Js('codeGeneratorDeopt'), var.get('opts').get('filename'), Js('100KB'))))
        if var.get('format').get('compact'):
            var.get('format').get('indent').put('adjustMultilineComment', Js(False))
        return var.get('format')
    PyJsHoisted_normalizeOptions_.__name__ = 'normalizeOptions'
    var.put('normalizeOptions', PyJsHoisted_normalizeOptions_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_504_ = Js({})
            var.put('newObj', PyJs_Object_504_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('CodeGenerator', var.get('undefined'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
    var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
    var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
    var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
    @Js
    def PyJs_anonymous_503_(ast, opts, code, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts, 'ast':ast}, var)
        var.registers(['code', 'gen', 'opts', 'ast'])
        var.put('gen', var.get('Generator').create(var.get('ast'), var.get('opts'), var.get('code')))
        return var.get('gen').callprop('generate')
    PyJs_anonymous_503_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_503_)
    var.put('_detectIndent', var.get('require')(Js('detect-indent')))
    var.put('_detectIndent2', var.get('_interopRequireDefault')(var.get('_detectIndent')))
    var.put('_sourceMap', var.get('require')(Js('./source-map')))
    var.put('_sourceMap2', var.get('_interopRequireDefault')(var.get('_sourceMap')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_printer', var.get('require')(Js('./printer')))
    var.put('_printer2', var.get('_interopRequireDefault')(var.get('_printer')))
    pass
    pass
    @Js
    def PyJs_anonymous_506_(_Printer, this, arguments, var=var):
        var = Scope({'this':this, '_Printer':_Printer, 'arguments':arguments}, var)
        var.registers(['_Printer', 'Generator'])
        @Js
        def PyJsHoisted_Generator_(ast, opts, code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts, 'ast':ast}, var)
            var.registers(['map', 'code', '_this', 'ast', 'format', 'tokens', 'opts'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Generator'))
            PyJs_Object_507_ = Js({})
            var.put('opts', (var.get('opts') or PyJs_Object_507_))
            var.put('tokens', (var.get('ast').get('tokens') or Js([])))
            var.put('format', var.get('normalizeOptions')(var.get('code'), var.get('opts'), var.get('tokens')))
            var.put('map', (var.get('_sourceMap2').get('default').create(var.get('opts'), var.get('code')) if var.get('opts').get('sourceMaps') else var.get("null")))
            var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_Printer').callprop('call', var.get("this"), var.get('format'), var.get('map'), var.get('tokens'))))
            var.get('_this').put('ast', var.get('ast'))
            return var.get('_this')
        PyJsHoisted_Generator_.__name__ = 'Generator'
        var.put('Generator', PyJsHoisted_Generator_)
        PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('Generator'), var.get('_Printer'))
        pass
        @Js
        def PyJs_generate_508_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'generate':PyJs_generate_508_}, var)
            var.registers([])
            return var.get('_Printer').get('prototype').get('generate').callprop('call', var.get("this"), var.get("this").get('ast'))
        PyJs_generate_508_._set_name('generate')
        var.get('Generator').get('prototype').put('generate', PyJs_generate_508_)
        return var.get('Generator')
    PyJs_anonymous_506_._set_name('anonymous')
    var.put('Generator', PyJs_anonymous_506_(var.get('_printer2').get('default')))
    pass
    pass
    @Js
    def PyJs_anonymous_514_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['CodeGenerator'])
        @Js
        def PyJsHoisted_CodeGenerator_(ast, opts, code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts, 'ast':ast}, var)
            var.registers(['code', 'opts', 'ast'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('CodeGenerator'))
            var.get("this").put('_generator', var.get('Generator').create(var.get('ast'), var.get('opts'), var.get('code')))
        PyJsHoisted_CodeGenerator_.__name__ = 'CodeGenerator'
        var.put('CodeGenerator', PyJsHoisted_CodeGenerator_)
        pass
        @Js
        def PyJs_generate_515_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'generate':PyJs_generate_515_}, var)
            var.registers([])
            return var.get("this").get('_generator').callprop('generate')
        PyJs_generate_515_._set_name('generate')
        var.get('CodeGenerator').get('prototype').put('generate', PyJs_generate_515_)
        return var.get('CodeGenerator')
    PyJs_anonymous_514_._set_name('anonymous')
    var.put('CodeGenerator', var.get('exports').put('CodeGenerator', PyJs_anonymous_514_()))
PyJs_anonymous_502_._set_name('anonymous')
PyJs_Object_516_ = Js({'./printer':Js(44.0),'./source-map':Js(45.0),'babel-messages':Js(57.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0),'detect-indent':Js(271.0)})
@Js
def PyJs_anonymous_517_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['needsParens', 'module', '_parentheses', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'find', 'needsWhitespaceBefore', '_keys', 'parens', 'exports', 'expandedWhitespaceNodes', '_interopRequireWildcard', '_babelTypes', 'expandAliases', 'needsWhitespace', '_keys2', '_whitespace2', 'expandedParens', 'expandedWhitespaceList', 'require', 'isOrHasCallExpression', '_whitespace', 't', 'needsWhitespaceAfter'])
    @Js
    def PyJsHoisted_needsParens_(node, parent, printStack, this, arguments, var=var):
        var = Scope({'node':node, 'printStack':printStack, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'printStack', 'parent'])
        if var.get('parent').neg():
            return Js(False)
        if (var.get('t').callprop('isNewExpression', var.get('parent')) and PyJsStrictEq(var.get('parent').get('callee'),var.get('node'))):
            if var.get('isOrHasCallExpression')(var.get('node')):
                return var.get('true')
        return var.get('find')(var.get('expandedParens'), var.get('node'), var.get('parent'), var.get('printStack'))
    PyJsHoisted_needsParens_.__name__ = 'needsParens'
    var.put('needsParens', PyJsHoisted_needsParens_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_518_ = Js({})
            var.put('newObj', PyJs_Object_518_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_needsWhitespaceBefore_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        return var.get('needsWhitespace')(var.get('node'), var.get('parent'), Js('before'))
    PyJsHoisted_needsWhitespaceBefore_.__name__ = 'needsWhitespaceBefore'
    var.put('needsWhitespaceBefore', PyJsHoisted_needsWhitespaceBefore_)
    @Js
    def PyJsHoisted_expandAliases_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['_isArray', '_iterator', '_isArray2', '_ref2', '_i2', 'newObj', 'alias', 'add', '_i', 'obj', '_ref', '_iterator2', 'type', 'aliases'])
        @Js
        def PyJsHoisted_add_(type, func, this, arguments, var=var):
            var = Scope({'this':this, 'type':type, 'arguments':arguments, 'func':func}, var)
            var.registers(['type', 'func', 'fn'])
            var.put('fn', var.get('newObj').get(var.get('type')))
            @Js
            def PyJs_anonymous_521_(node, parent, stack, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'stack':stack, 'parent':parent, 'arguments':arguments}, var)
                var.registers(['node', 'result', 'parent', 'stack'])
                var.put('result', var.get('fn')(var.get('node'), var.get('parent'), var.get('stack')))
                return (var.get('func')(var.get('node'), var.get('parent'), var.get('stack')) if (var.get('result')==var.get("null")) else var.get('result'))
            PyJs_anonymous_521_._set_name('anonymous')
            var.get('newObj').put(var.get('type'), (PyJs_anonymous_521_ if var.get('fn') else var.get('func')))
        PyJsHoisted_add_.__name__ = 'add'
        var.put('add', PyJsHoisted_add_)
        PyJs_Object_520_ = Js({})
        var.put('newObj', PyJs_Object_520_)
        pass
        #for JS loop
        var.put('_iterator', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('obj')))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('type', var.get('_ref'))
            var.put('aliases', var.get('t').get('FLIPPED_ALIAS_KEYS').get(var.get('type')))
            if var.get('aliases'):
                #for JS loop
                var.put('_iterator2', var.get('aliases'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('alias', var.get('_ref2'))
                    var.get('add')(var.get('alias'), var.get('obj').get(var.get('type')))
                
            else:
                var.get('add')(var.get('type'), var.get('obj').get(var.get('type')))
        
        return var.get('newObj')
    PyJsHoisted_expandAliases_.__name__ = 'expandAliases'
    var.put('expandAliases', PyJsHoisted_expandAliases_)
    @Js
    def PyJsHoisted_needsWhitespace_(node, parent, type, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'type':type, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent', 'i', 'items', 'linesInfo', 'type'])
        if var.get('node').neg():
            return Js(0.0)
        if var.get('t').callprop('isExpressionStatement', var.get('node')):
            var.put('node', var.get('node').get('expression'))
        var.put('linesInfo', var.get('find')(var.get('expandedWhitespaceNodes'), var.get('node'), var.get('parent')))
        if var.get('linesInfo').neg():
            var.put('items', var.get('find')(var.get('expandedWhitespaceList'), var.get('node'), var.get('parent')))
            if var.get('items'):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('items').get('length')):
                    try:
                        var.put('linesInfo', var.get('needsWhitespace')(var.get('items').get(var.get('i')), var.get('node'), var.get('type')))
                        if var.get('linesInfo'):
                            break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return ((var.get('linesInfo') and var.get('linesInfo').get(var.get('type'))) or Js(0.0))
    PyJsHoisted_needsWhitespace_.__name__ = 'needsWhitespace'
    var.put('needsWhitespace', PyJsHoisted_needsWhitespace_)
    @Js
    def PyJsHoisted_isOrHasCallExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isCallExpression', var.get('node')):
            return var.get('true')
        if var.get('t').callprop('isMemberExpression', var.get('node')):
            return (var.get('isOrHasCallExpression')(var.get('node').get('object')) or (var.get('node').get('computed').neg() and var.get('isOrHasCallExpression')(var.get('node').get('property'))))
        else:
            return Js(False)
    PyJsHoisted_isOrHasCallExpression_.__name__ = 'isOrHasCallExpression'
    var.put('isOrHasCallExpression', PyJsHoisted_isOrHasCallExpression_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_519_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_519_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_needsWhitespaceAfter_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        return var.get('needsWhitespace')(var.get('node'), var.get('parent'), Js('after'))
    PyJsHoisted_needsWhitespaceAfter_.__name__ = 'needsWhitespaceAfter'
    var.put('needsWhitespaceAfter', PyJsHoisted_needsWhitespaceAfter_)
    @Js
    def PyJsHoisted_find_(obj, node, parent, printStack, this, arguments, var=var):
        var = Scope({'node':node, 'obj':obj, 'arguments':arguments, 'parent':parent, 'this':this, 'printStack':printStack}, var)
        var.registers(['node', 'printStack', 'obj', 'parent', 'fn'])
        var.put('fn', var.get('obj').get(var.get('node').get('type')))
        return (var.get('fn')(var.get('node'), var.get('parent'), var.get('printStack')) if var.get('fn') else var.get("null"))
    PyJsHoisted_find_.__name__ = 'find'
    var.put('find', PyJsHoisted_find_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.get('exports').put('needsWhitespace', var.get('needsWhitespace'))
    var.get('exports').put('needsWhitespaceBefore', var.get('needsWhitespaceBefore'))
    var.get('exports').put('needsWhitespaceAfter', var.get('needsWhitespaceAfter'))
    var.get('exports').put('needsParens', var.get('needsParens'))
    var.put('_whitespace', var.get('require')(Js('./whitespace')))
    var.put('_whitespace2', var.get('_interopRequireDefault')(var.get('_whitespace')))
    var.put('_parentheses', var.get('require')(Js('./parentheses')))
    var.put('parens', var.get('_interopRequireWildcard')(var.get('_parentheses')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    var.put('expandedParens', var.get('expandAliases')(var.get('parens')))
    var.put('expandedWhitespaceNodes', var.get('expandAliases')(var.get('_whitespace2').get('default').get('nodes')))
    var.put('expandedWhitespaceList', var.get('expandAliases')(var.get('_whitespace2').get('default').get('list')))
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_517_._set_name('anonymous')
PyJs_Object_522_ = Js({'./parentheses':Js(42.0),'./whitespace':Js(43.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/keys':Js(103.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_523_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['ArrowFunctionExpression', 'Binary', 'exports', 'SequenceExpression', 'ConditionalExpression', '_interopRequireWildcard', 'PRECEDENCE', 'ClassExpression', 'require', '_babelTypes', 'FunctionExpression', 'UpdateExpression', 'module', 'YieldExpression', 'ObjectExpression', 't', 'BinaryExpression', 'AssignmentExpression', 'isFirstInStatement', 'UnaryLike', 'NullableTypeAnnotation'])
    @Js
    def PyJsHoisted_Binary_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'nodePos', 'parent', 'parentPos', 'parentOp', 'nodeOp'])
        if ((var.get('t').callprop('isCallExpression', var.get('parent')) or var.get('t').callprop('isNewExpression', var.get('parent'))) and PyJsStrictEq(var.get('parent').get('callee'),var.get('node'))):
            return var.get('true')
        if var.get('t').callprop('isUnaryLike', var.get('parent')):
            return var.get('true')
        if (var.get('t').callprop('isMemberExpression', var.get('parent')) and PyJsStrictEq(var.get('parent').get('object'),var.get('node'))):
            return var.get('true')
        if var.get('t').callprop('isBinary', var.get('parent')):
            var.put('parentOp', var.get('parent').get('operator'))
            var.put('parentPos', var.get('PRECEDENCE').get(var.get('parentOp')))
            var.put('nodeOp', var.get('node').get('operator'))
            var.put('nodePos', var.get('PRECEDENCE').get(var.get('nodeOp')))
            if (var.get('parentPos')>var.get('nodePos')):
                return var.get('true')
            if ((PyJsStrictEq(var.get('parentPos'),var.get('nodePos')) and PyJsStrictEq(var.get('parent').get('right'),var.get('node'))) and var.get('t').callprop('isLogicalExpression', var.get('parent')).neg()):
                return var.get('true')
        return Js(False)
    PyJsHoisted_Binary_.__name__ = 'Binary'
    var.put('Binary', PyJsHoisted_Binary_)
    @Js
    def PyJsHoisted_SequenceExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if var.get('t').callprop('isForStatement', var.get('parent')):
            return Js(False)
        if (var.get('t').callprop('isExpressionStatement', var.get('parent')) and PyJsStrictEq(var.get('parent').get('expression'),var.get('node'))):
            return Js(False)
        if var.get('t').callprop('isReturnStatement', var.get('parent')):
            return Js(False)
        if var.get('t').callprop('isThrowStatement', var.get('parent')):
            return Js(False)
        if (var.get('t').callprop('isSwitchStatement', var.get('parent')) and PyJsStrictEq(var.get('parent').get('discriminant'),var.get('node'))):
            return Js(False)
        if (var.get('t').callprop('isWhileStatement', var.get('parent')) and PyJsStrictEq(var.get('parent').get('test'),var.get('node'))):
            return Js(False)
        if (var.get('t').callprop('isIfStatement', var.get('parent')) and PyJsStrictEq(var.get('parent').get('test'),var.get('node'))):
            return Js(False)
        if (var.get('t').callprop('isForInStatement', var.get('parent')) and PyJsStrictEq(var.get('parent').get('right'),var.get('node'))):
            return Js(False)
        return var.get('true')
    PyJsHoisted_SequenceExpression_.__name__ = 'SequenceExpression'
    var.put('SequenceExpression', PyJsHoisted_SequenceExpression_)
    @Js
    def PyJsHoisted_ArrowFunctionExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if var.get('t').callprop('isExportDeclaration', var.get('parent')):
            return var.get('true')
        if (var.get('t').callprop('isBinaryExpression', var.get('parent')) or var.get('t').callprop('isLogicalExpression', var.get('parent'))):
            return var.get('true')
        if var.get('t').callprop('isUnaryExpression', var.get('parent')):
            return var.get('true')
        return var.get('UnaryLike')(var.get('node'), var.get('parent'))
    PyJsHoisted_ArrowFunctionExpression_.__name__ = 'ArrowFunctionExpression'
    var.put('ArrowFunctionExpression', PyJsHoisted_ArrowFunctionExpression_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_524_ = Js({})
            var.put('newObj', PyJs_Object_524_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ClassExpression_(node, parent, printStack, this, arguments, var=var):
        var = Scope({'node':node, 'printStack':printStack, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'printStack', 'parent'])
        PyJs_Object_528_ = Js({'considerDefaultExports':var.get('true')})
        return var.get('isFirstInStatement')(var.get('printStack'), PyJs_Object_528_)
    PyJsHoisted_ClassExpression_.__name__ = 'ClassExpression'
    var.put('ClassExpression', PyJsHoisted_ClassExpression_)
    @Js
    def PyJsHoisted_ConditionalExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if var.get('t').callprop('isUnaryLike', var.get('parent')):
            return var.get('true')
        if var.get('t').callprop('isBinary', var.get('parent')):
            return var.get('true')
        PyJs_Object_533_ = Js({'test':var.get('node')})
        if var.get('t').callprop('isConditionalExpression', var.get('parent'), PyJs_Object_533_):
            return var.get('true')
        return var.get('UnaryLike')(var.get('node'), var.get('parent'))
    PyJsHoisted_ConditionalExpression_.__name__ = 'ConditionalExpression'
    var.put('ConditionalExpression', PyJsHoisted_ConditionalExpression_)
    @Js
    def PyJsHoisted_FunctionExpression_(node, parent, printStack, this, arguments, var=var):
        var = Scope({'node':node, 'printStack':printStack, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'printStack', 'parent'])
        PyJs_Object_532_ = Js({'considerDefaultExports':var.get('true')})
        return var.get('isFirstInStatement')(var.get('printStack'), PyJs_Object_532_)
    PyJsHoisted_FunctionExpression_.__name__ = 'FunctionExpression'
    var.put('FunctionExpression', PyJsHoisted_FunctionExpression_)
    @Js
    def PyJsHoisted_UpdateExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if (var.get('t').callprop('isMemberExpression', var.get('parent')) and PyJsStrictEq(var.get('parent').get('object'),var.get('node'))):
            return var.get('true')
        return Js(False)
    PyJsHoisted_UpdateExpression_.__name__ = 'UpdateExpression'
    var.put('UpdateExpression', PyJsHoisted_UpdateExpression_)
    @Js
    def PyJsHoisted_YieldExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        def PyJs_LONG_527_(var=var):
            return (((((var.get('t').callprop('isBinary', var.get('parent')) or var.get('t').callprop('isUnaryLike', var.get('parent'))) or var.get('t').callprop('isCallExpression', var.get('parent'))) or var.get('t').callprop('isMemberExpression', var.get('parent'))) or var.get('t').callprop('isNewExpression', var.get('parent'))) or (var.get('t').callprop('isConditionalExpression', var.get('parent')) and PyJsStrictEq(var.get('node'),var.get('parent').get('test'))))
        return PyJs_LONG_527_()
    PyJsHoisted_YieldExpression_.__name__ = 'YieldExpression'
    var.put('YieldExpression', PyJsHoisted_YieldExpression_)
    @Js
    def PyJsHoisted_ObjectExpression_(node, parent, printStack, this, arguments, var=var):
        var = Scope({'node':node, 'printStack':printStack, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'printStack', 'parent'])
        PyJs_Object_526_ = Js({'considerArrow':var.get('true')})
        return var.get('isFirstInStatement')(var.get('printStack'), PyJs_Object_526_)
    PyJsHoisted_ObjectExpression_.__name__ = 'ObjectExpression'
    var.put('ObjectExpression', PyJsHoisted_ObjectExpression_)
    @Js
    def PyJsHoisted_BinaryExpression_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if PyJsStrictEq(var.get('node').get('operator'),Js('in')):
            if var.get('t').callprop('isVariableDeclarator', var.get('parent')):
                return var.get('true')
            if var.get('t').callprop('isFor', var.get('parent')):
                return var.get('true')
        return Js(False)
    PyJsHoisted_BinaryExpression_.__name__ = 'BinaryExpression'
    var.put('BinaryExpression', PyJsHoisted_BinaryExpression_)
    @Js
    def PyJsHoisted_AssignmentExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isObjectPattern', var.get('node').get('left')):
            return var.get('true')
        else:
            return var.get('ConditionalExpression').callprop('apply', var.get('undefined'), var.get('arguments'))
    PyJsHoisted_AssignmentExpression_.__name__ = 'AssignmentExpression'
    var.put('AssignmentExpression', PyJsHoisted_AssignmentExpression_)
    @Js
    def PyJsHoisted_isFirstInStatement_(printStack, this, arguments, var=var):
        var = Scope({'this':this, 'printStack':printStack, 'arguments':arguments}, var)
        var.registers(['_ref$considerArrow', 'node', 'considerDefaultExports', 'parent', 'i', 'printStack', '_ref$considerDefaultE', 'considerArrow', '_ref'])
        PyJs_Object_534_ = Js({})
        var.put('_ref', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_534_))
        var.put('_ref$considerArrow', var.get('_ref').get('considerArrow'))
        var.put('considerArrow', (Js(False) if PyJsStrictEq(var.get('_ref$considerArrow'),var.get('undefined')) else var.get('_ref$considerArrow')))
        var.put('_ref$considerDefaultE', var.get('_ref').get('considerDefaultExports'))
        var.put('considerDefaultExports', (Js(False) if PyJsStrictEq(var.get('_ref$considerDefaultE'),var.get('undefined')) else var.get('_ref$considerDefaultE')))
        var.put('i', (var.get('printStack').get('length')-Js(1.0)))
        var.put('node', var.get('printStack').get(var.get('i')))
        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        var.put('parent', var.get('printStack').get(var.get('i')))
        while (var.get('i')>Js(0.0)):
            PyJs_Object_535_ = Js({'expression':var.get('node')})
            if var.get('t').callprop('isExpressionStatement', var.get('parent'), PyJs_Object_535_):
                return var.get('true')
            PyJs_Object_536_ = Js({'declaration':var.get('node')})
            if (var.get('considerDefaultExports') and var.get('t').callprop('isExportDefaultDeclaration', var.get('parent'), PyJs_Object_536_)):
                return var.get('true')
            PyJs_Object_537_ = Js({'body':var.get('node')})
            if (var.get('considerArrow') and var.get('t').callprop('isArrowFunctionExpression', var.get('parent'), PyJs_Object_537_)):
                return var.get('true')
            def PyJs_LONG_541_(var=var):
                PyJs_Object_538_ = Js({'callee':var.get('node')})
                PyJs_Object_539_ = Js({'object':var.get('node')})
                PyJs_Object_540_ = Js({'test':var.get('node')})
                return (((var.get('t').callprop('isCallExpression', var.get('parent'), PyJs_Object_538_) or (var.get('t').callprop('isSequenceExpression', var.get('parent')) and PyJsStrictEq(var.get('parent').get('expressions').get('0'),var.get('node')))) or var.get('t').callprop('isMemberExpression', var.get('parent'), PyJs_Object_539_)) or var.get('t').callprop('isConditional', var.get('parent'), PyJs_Object_540_))
            PyJs_Object_542_ = Js({'left':var.get('node')})
            PyJs_Object_543_ = Js({'left':var.get('node')})
            if ((PyJs_LONG_541_() or var.get('t').callprop('isBinary', var.get('parent'), PyJs_Object_542_)) or var.get('t').callprop('isAssignmentExpression', var.get('parent'), PyJs_Object_543_)):
                var.put('node', var.get('parent'))
                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                var.put('parent', var.get('printStack').get(var.get('i')))
            else:
                return Js(False)
        return Js(False)
    PyJsHoisted_isFirstInStatement_.__name__ = 'isFirstInStatement'
    var.put('isFirstInStatement', PyJsHoisted_isFirstInStatement_)
    @Js
    def PyJsHoisted_UnaryLike_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        PyJs_Object_529_ = Js({'object':var.get('node')})
        if var.get('t').callprop('isMemberExpression', var.get('parent'), PyJs_Object_529_):
            return var.get('true')
        PyJs_Object_530_ = Js({'callee':var.get('node')})
        PyJs_Object_531_ = Js({'callee':var.get('node')})
        if (var.get('t').callprop('isCallExpression', var.get('parent'), PyJs_Object_530_) or var.get('t').callprop('isNewExpression', var.get('parent'), PyJs_Object_531_)):
            return var.get('true')
        return Js(False)
    PyJsHoisted_UnaryLike_.__name__ = 'UnaryLike'
    var.put('UnaryLike', PyJsHoisted_UnaryLike_)
    @Js
    def PyJsHoisted_NullableTypeAnnotation_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        return var.get('t').callprop('isArrayTypeAnnotation', var.get('parent'))
    PyJsHoisted_NullableTypeAnnotation_.__name__ = 'NullableTypeAnnotation'
    var.put('NullableTypeAnnotation', PyJsHoisted_NullableTypeAnnotation_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('AwaitExpression', var.get('exports').put('FunctionTypeAnnotation', var.get('undefined')))
    var.get('exports').put('NullableTypeAnnotation', var.get('NullableTypeAnnotation'))
    var.get('exports').put('UpdateExpression', var.get('UpdateExpression'))
    var.get('exports').put('ObjectExpression', var.get('ObjectExpression'))
    var.get('exports').put('Binary', var.get('Binary'))
    var.get('exports').put('BinaryExpression', var.get('BinaryExpression'))
    var.get('exports').put('SequenceExpression', var.get('SequenceExpression'))
    var.get('exports').put('YieldExpression', var.get('YieldExpression'))
    var.get('exports').put('ClassExpression', var.get('ClassExpression'))
    var.get('exports').put('UnaryLike', var.get('UnaryLike'))
    var.get('exports').put('FunctionExpression', var.get('FunctionExpression'))
    var.get('exports').put('ArrowFunctionExpression', var.get('ArrowFunctionExpression'))
    var.get('exports').put('ConditionalExpression', var.get('ConditionalExpression'))
    var.get('exports').put('AssignmentExpression', var.get('AssignmentExpression'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    PyJs_Object_525_ = Js({'||':Js(0.0),'&&':Js(1.0),'|':Js(2.0),'^':Js(3.0),'&':Js(4.0),'==':Js(5.0),'===':Js(5.0),'!=':Js(5.0),'!==':Js(5.0),'<':Js(6.0),'>':Js(6.0),'<=':Js(6.0),'>=':Js(6.0),'in':Js(6.0),'instanceof':Js(6.0),'>>':Js(7.0),'<<':Js(7.0),'>>>':Js(7.0),'+':Js(8.0),'-':Js(8.0),'*':Js(9.0),'/':Js(9.0),'%':Js(9.0),'**':Js(10.0)})
    var.put('PRECEDENCE', PyJs_Object_525_)
    pass
    var.get('exports').put('FunctionTypeAnnotation', var.get('NullableTypeAnnotation'))
    pass
    pass
    pass
    pass
    pass
    pass
    var.get('exports').put('AwaitExpression', var.get('YieldExpression'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_523_._set_name('anonymous')
PyJs_Object_544_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_545_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isHelper', 'exports', '_babelTypes', '_each', '_interopRequireWildcard', '_map', 'require', '_isBoolean', 'module', '_each2', '_isBoolean2', 'isType', '_interopRequireDefault', 'crawl', '_map2', 't'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_547_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_547_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isHelper_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isMemberExpression', var.get('node')):
            return (var.get('isHelper')(var.get('node').get('object')) or var.get('isHelper')(var.get('node').get('property')))
        else:
            if var.get('t').callprop('isIdentifier', var.get('node')):
                return (PyJsStrictEq(var.get('node').get('name'),Js('require')) or PyJsStrictEq(var.get('node').get('name').get('0'),Js('_')))
            else:
                if var.get('t').callprop('isCallExpression', var.get('node')):
                    return var.get('isHelper')(var.get('node').get('callee'))
                else:
                    if (var.get('t').callprop('isBinary', var.get('node')) or var.get('t').callprop('isAssignmentExpression', var.get('node'))):
                        return ((var.get('t').callprop('isIdentifier', var.get('node').get('left')) and var.get('isHelper')(var.get('node').get('left'))) or var.get('isHelper')(var.get('node').get('right')))
                    else:
                        return Js(False)
    PyJsHoisted_isHelper_.__name__ = 'isHelper'
    var.put('isHelper', PyJsHoisted_isHelper_)
    @Js
    def PyJsHoisted_crawl_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'state'])
        PyJs_Object_548_ = Js({})
        var.put('state', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_548_))
        if var.get('t').callprop('isMemberExpression', var.get('node')):
            var.get('crawl')(var.get('node').get('object'), var.get('state'))
            if var.get('node').get('computed'):
                var.get('crawl')(var.get('node').get('property'), var.get('state'))
        else:
            if (var.get('t').callprop('isBinary', var.get('node')) or var.get('t').callprop('isAssignmentExpression', var.get('node'))):
                var.get('crawl')(var.get('node').get('left'), var.get('state'))
                var.get('crawl')(var.get('node').get('right'), var.get('state'))
            else:
                if var.get('t').callprop('isCallExpression', var.get('node')):
                    var.get('state').put('hasCall', var.get('true'))
                    var.get('crawl')(var.get('node').get('callee'), var.get('state'))
                else:
                    if var.get('t').callprop('isFunction', var.get('node')):
                        var.get('state').put('hasFunction', var.get('true'))
                    else:
                        if var.get('t').callprop('isIdentifier', var.get('node')):
                            var.get('state').put('hasHelper', (var.get('state').get('hasHelper') or var.get('isHelper')(var.get('node').get('callee'))))
        return var.get('state')
    PyJsHoisted_crawl_.__name__ = 'crawl'
    var.put('crawl', PyJsHoisted_crawl_)
    @Js
    def PyJsHoisted_isType_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return ((((var.get('t').callprop('isLiteral', var.get('node')) or var.get('t').callprop('isObjectExpression', var.get('node'))) or var.get('t').callprop('isArrayExpression', var.get('node'))) or var.get('t').callprop('isIdentifier', var.get('node'))) or var.get('t').callprop('isMemberExpression', var.get('node')))
    PyJsHoisted_isType_.__name__ = 'isType'
    var.put('isType', PyJsHoisted_isType_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_546_ = Js({})
            var.put('newObj', PyJs_Object_546_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.put('_isBoolean', var.get('require')(Js('lodash/isBoolean')))
    var.put('_isBoolean2', var.get('_interopRequireDefault')(var.get('_isBoolean')))
    var.put('_each', var.get('require')(Js('lodash/each')))
    var.put('_each2', var.get('_interopRequireDefault')(var.get('_each')))
    var.put('_map', var.get('require')(Js('lodash/map')))
    var.put('_map2', var.get('_interopRequireDefault')(var.get('_map')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_AssignmentExpression_550_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'AssignmentExpression':PyJs_AssignmentExpression_550_}, var)
        var.registers(['node', 'state'])
        var.put('state', var.get('crawl')(var.get('node').get('right')))
        if ((var.get('state').get('hasCall') and var.get('state').get('hasHelper')) or var.get('state').get('hasFunction')):
            PyJs_Object_551_ = Js({'before':var.get('state').get('hasFunction'),'after':var.get('true')})
            return PyJs_Object_551_
    PyJs_AssignmentExpression_550_._set_name('AssignmentExpression')
    @Js
    def PyJs_SwitchCase_552_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'SwitchCase':PyJs_SwitchCase_552_, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        PyJs_Object_553_ = Js({'before':(var.get('node').get('consequent').get('length') or PyJsStrictEq(var.get('parent').get('cases').get('0'),var.get('node')))})
        return PyJs_Object_553_
    PyJs_SwitchCase_552_._set_name('SwitchCase')
    @Js
    def PyJs_LogicalExpression_554_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'LogicalExpression':PyJs_LogicalExpression_554_}, var)
        var.registers(['node'])
        if (var.get('t').callprop('isFunction', var.get('node').get('left')) or var.get('t').callprop('isFunction', var.get('node').get('right'))):
            PyJs_Object_555_ = Js({'after':var.get('true')})
            return PyJs_Object_555_
    PyJs_LogicalExpression_554_._set_name('LogicalExpression')
    @Js
    def PyJs_Literal_556_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'Literal':PyJs_Literal_556_, 'arguments':arguments}, var)
        var.registers(['node'])
        if PyJsStrictEq(var.get('node').get('value'),Js('use strict')):
            PyJs_Object_557_ = Js({'after':var.get('true')})
            return PyJs_Object_557_
    PyJs_Literal_556_._set_name('Literal')
    @Js
    def PyJs_CallExpression_558_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'CallExpression':PyJs_CallExpression_558_}, var)
        var.registers(['node'])
        if (var.get('t').callprop('isFunction', var.get('node').get('callee')) or var.get('isHelper')(var.get('node'))):
            PyJs_Object_559_ = Js({'before':var.get('true'),'after':var.get('true')})
            return PyJs_Object_559_
    PyJs_CallExpression_558_._set_name('CallExpression')
    @Js
    def PyJs_VariableDeclaration_560_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'VariableDeclaration':PyJs_VariableDeclaration_560_}, var)
        var.registers(['i', 'node', 'state', 'declar', 'enabled'])
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('node').get('declarations').get('length')):
            try:
                var.put('declar', var.get('node').get('declarations').get(var.get('i')))
                var.put('enabled', (var.get('isHelper')(var.get('declar').get('id')) and var.get('isType')(var.get('declar').get('init')).neg()))
                if var.get('enabled').neg():
                    var.put('state', var.get('crawl')(var.get('declar').get('init')))
                    var.put('enabled', ((var.get('isHelper')(var.get('declar').get('init')) and var.get('state').get('hasCall')) or var.get('state').get('hasFunction')))
                if var.get('enabled'):
                    PyJs_Object_561_ = Js({'before':var.get('true'),'after':var.get('true')})
                    return PyJs_Object_561_
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_VariableDeclaration_560_._set_name('VariableDeclaration')
    @Js
    def PyJs_IfStatement_562_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'IfStatement':PyJs_IfStatement_562_}, var)
        var.registers(['node'])
        if var.get('t').callprop('isBlockStatement', var.get('node').get('consequent')):
            PyJs_Object_563_ = Js({'before':var.get('true'),'after':var.get('true')})
            return PyJs_Object_563_
    PyJs_IfStatement_562_._set_name('IfStatement')
    PyJs_Object_549_ = Js({'AssignmentExpression':PyJs_AssignmentExpression_550_,'SwitchCase':PyJs_SwitchCase_552_,'LogicalExpression':PyJs_LogicalExpression_554_,'Literal':PyJs_Literal_556_,'CallExpression':PyJs_CallExpression_558_,'VariableDeclaration':PyJs_VariableDeclaration_560_,'IfStatement':PyJs_IfStatement_562_})
    var.get('exports').put('nodes', PyJs_Object_549_)
    @Js
    def PyJs_anonymous_564_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if PyJsStrictEq(var.get('parent').get('properties').get('0'),var.get('node')):
            PyJs_Object_565_ = Js({'before':var.get('true')})
            return PyJs_Object_565_
    PyJs_anonymous_564_._set_name('anonymous')
    var.get('exports').get('nodes').put('ObjectProperty', var.get('exports').get('nodes').put('ObjectTypeProperty', var.get('exports').get('nodes').put('ObjectMethod', var.get('exports').get('nodes').put('SpreadProperty', PyJs_anonymous_564_))))
    @Js
    def PyJs_VariableDeclaration_567_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'VariableDeclaration':PyJs_VariableDeclaration_567_}, var)
        var.registers(['node'])
        return PyJsComma(Js(0.0),var.get('_map2').get('default'))(var.get('node').get('declarations'), Js('init'))
    PyJs_VariableDeclaration_567_._set_name('VariableDeclaration')
    @Js
    def PyJs_ArrayExpression_568_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'ArrayExpression':PyJs_ArrayExpression_568_}, var)
        var.registers(['node'])
        return var.get('node').get('elements')
    PyJs_ArrayExpression_568_._set_name('ArrayExpression')
    @Js
    def PyJs_ObjectExpression_569_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'ObjectExpression':PyJs_ObjectExpression_569_, 'arguments':arguments}, var)
        var.registers(['node'])
        return var.get('node').get('properties')
    PyJs_ObjectExpression_569_._set_name('ObjectExpression')
    PyJs_Object_566_ = Js({'VariableDeclaration':PyJs_VariableDeclaration_567_,'ArrayExpression':PyJs_ArrayExpression_568_,'ObjectExpression':PyJs_ObjectExpression_569_})
    var.get('exports').put('list', PyJs_Object_566_)
    PyJs_Object_570_ = Js({'Function':var.get('true'),'Class':var.get('true'),'Loop':var.get('true'),'LabeledStatement':var.get('true'),'SwitchStatement':var.get('true'),'TryStatement':var.get('true')})
    @Js
    def PyJs_anonymous_571_(amounts, type, this, arguments, var=var):
        var = Scope({'amounts':amounts, 'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['amounts', 'type'])
        if PyJsComma(Js(0.0),var.get('_isBoolean2').get('default'))(var.get('amounts')):
            PyJs_Object_572_ = Js({'after':var.get('amounts'),'before':var.get('amounts')})
            var.put('amounts', PyJs_Object_572_)
        @Js
        def PyJs_anonymous_573_(type, this, arguments, var=var):
            var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
            var.registers(['type'])
            @Js
            def PyJs_anonymous_574_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('amounts')
            PyJs_anonymous_574_._set_name('anonymous')
            var.get('exports').get('nodes').put(var.get('type'), PyJs_anonymous_574_)
        PyJs_anonymous_573_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_each2').get('default'))(Js([var.get('type')]).callprop('concat', (var.get('t').get('FLIPPED_ALIAS_KEYS').get(var.get('type')) or Js([]))), PyJs_anonymous_573_)
    PyJs_anonymous_571_._set_name('anonymous')
    PyJsComma(Js(0.0),var.get('_each2').get('default'))(PyJs_Object_570_, PyJs_anonymous_571_)
PyJs_anonymous_545_._set_name('anonymous')
PyJs_Object_575_ = Js({'babel-types':Js(258.0),'lodash/each':Js(443.0),'lodash/isBoolean':Js(461.0),'lodash/map':Js(476.0)})
@Js
def PyJs_anonymous_576_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_findLast', 'exports', 'module', '_find', '_isInteger2', '_interopRequireDefault', '_buffer2', '_getIterator2', '_getIterator3', 'Printer', '_arr', '_buffer', '_i2', '_node', '_weakSet', 'SCIENTIFIC_NOTATION', '_classCallCheck3', '_classCallCheck2', '_findLast2', '_babelTypes', '_stringify2', '_isInteger', '_interopRequireWildcard', '_assign', '_weakSet2', '_whitespace2', '_repeat2', '_assign2', 'commaSeparator', 'generator', 'require', 'n', '_repeat', '_whitespace', '_stringify', 't', '_find2', 'NON_DECIMAL_LITERAL', 'ZERO_DECIMAL_INTEGER'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_578_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_578_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_commaSeparator_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('token', Js(','))
        var.get("this").callprop('space')
    PyJsHoisted_commaSeparator_.__name__ = 'commaSeparator'
    var.put('commaSeparator', PyJsHoisted_commaSeparator_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_577_ = Js({})
            var.put('newObj', PyJs_Object_577_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_assign', var.get('require')(Js('babel-runtime/core-js/object/assign')))
    var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.put('_weakSet', var.get('require')(Js('babel-runtime/core-js/weak-set')))
    var.put('_weakSet2', var.get('_interopRequireDefault')(var.get('_weakSet')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_find', var.get('require')(Js('lodash/find')))
    var.put('_find2', var.get('_interopRequireDefault')(var.get('_find')))
    var.put('_findLast', var.get('require')(Js('lodash/findLast')))
    var.put('_findLast2', var.get('_interopRequireDefault')(var.get('_findLast')))
    var.put('_isInteger', var.get('require')(Js('lodash/isInteger')))
    var.put('_isInteger2', var.get('_interopRequireDefault')(var.get('_isInteger')))
    var.put('_repeat', var.get('require')(Js('lodash/repeat')))
    var.put('_repeat2', var.get('_interopRequireDefault')(var.get('_repeat')))
    var.put('_buffer', var.get('require')(Js('./buffer')))
    var.put('_buffer2', var.get('_interopRequireDefault')(var.get('_buffer')))
    var.put('_node', var.get('require')(Js('./node')))
    var.put('n', var.get('_interopRequireWildcard')(var.get('_node')))
    var.put('_whitespace', var.get('require')(Js('./whitespace')))
    var.put('_whitespace2', var.get('_interopRequireDefault')(var.get('_whitespace')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('SCIENTIFIC_NOTATION', JsRegExp('/e/i'))
    var.put('ZERO_DECIMAL_INTEGER', JsRegExp('/\\.0+$/'))
    var.put('NON_DECIMAL_LITERAL', JsRegExp('/^0[box]/'))
    @Js
    def PyJs_anonymous_579_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Printer'])
        @Js
        def PyJsHoisted_Printer_(format, map, tokens, this, arguments, var=var):
            var = Scope({'tokens':tokens, 'map':map, 'this':this, 'arguments':arguments, 'format':format}, var)
            var.registers(['tokens', 'map', 'format'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Printer'))
            var.get("this").put('inForStatementInitCounter', Js(0.0))
            var.get("this").put('_printStack', Js([]))
            var.get("this").put('_indent', Js(0.0))
            var.get("this").put('_insideAux', Js(False))
            PyJs_Object_580_ = Js({})
            var.get("this").put('_printedCommentStarts', PyJs_Object_580_)
            var.get("this").put('_parenPushNewlineState', var.get("null"))
            var.get("this").put('_printAuxAfterOnNextUserNode', Js(False))
            var.get("this").put('_printedComments', var.get('_weakSet2').get('default').create())
            var.get("this").put('_endsWithInteger', Js(False))
            var.get("this").put('_endsWithWord', Js(False))
            PyJs_Object_581_ = Js({})
            var.get("this").put('format', (var.get('format') or PyJs_Object_581_))
            var.get("this").put('_buf', var.get('_buffer2').get('default').create(var.get('map')))
            var.get("this").put('_whitespace', (var.get('_whitespace2').get('default').create(var.get('tokens')) if (var.get('tokens').get('length')>Js(0.0)) else var.get("null")))
        PyJsHoisted_Printer_.__name__ = 'Printer'
        var.put('Printer', PyJsHoisted_Printer_)
        pass
        @Js
        def PyJs_generate_582_(ast, this, arguments, var=var):
            var = Scope({'this':this, 'generate':PyJs_generate_582_, 'arguments':arguments, 'ast':ast}, var)
            var.registers(['ast'])
            var.get("this").callprop('print', var.get('ast'))
            var.get("this").callprop('_maybeAddAuxComment')
            return var.get("this").get('_buf').callprop('get')
        PyJs_generate_582_._set_name('generate')
        var.get('Printer').get('prototype').put('generate', PyJs_generate_582_)
        @Js
        def PyJs_indent_583_(this, arguments, var=var):
            var = Scope({'this':this, 'indent':PyJs_indent_583_, 'arguments':arguments}, var)
            var.registers([])
            if (var.get("this").get('format').get('compact') or var.get("this").get('format').get('concise')):
                return var.get('undefined')
            (var.get("this").put('_indent',Js(var.get("this").get('_indent').to_number())+Js(1))-Js(1))
        PyJs_indent_583_._set_name('indent')
        var.get('Printer').get('prototype').put('indent', PyJs_indent_583_)
        @Js
        def PyJs_dedent_584_(this, arguments, var=var):
            var = Scope({'this':this, 'dedent':PyJs_dedent_584_, 'arguments':arguments}, var)
            var.registers([])
            if (var.get("this").get('format').get('compact') or var.get("this").get('format').get('concise')):
                return var.get('undefined')
            (var.get("this").put('_indent',Js(var.get("this").get('_indent').to_number())-Js(1))+Js(1))
        PyJs_dedent_584_._set_name('dedent')
        var.get('Printer').get('prototype').put('dedent', PyJs_dedent_584_)
        @Js
        def PyJs_semicolon_585_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'semicolon':PyJs_semicolon_585_}, var)
            var.registers(['force'])
            var.put('force', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else Js(False)))
            var.get("this").callprop('_maybeAddAuxComment')
            var.get("this").callprop('_append', Js(';'), var.get('force').neg())
        PyJs_semicolon_585_._set_name('semicolon')
        var.get('Printer').get('prototype').put('semicolon', PyJs_semicolon_585_)
        @Js
        def PyJs_rightBrace_586_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'rightBrace':PyJs_rightBrace_586_}, var)
            var.registers([])
            if var.get("this").get('format').get('minified'):
                var.get("this").get('_buf').callprop('removeLastSemicolon')
            var.get("this").callprop('token', Js('}'))
        PyJs_rightBrace_586_._set_name('rightBrace')
        var.get('Printer').get('prototype').put('rightBrace', PyJs_rightBrace_586_)
        @Js
        def PyJs_space_587_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'space':PyJs_space_587_}, var)
            var.registers(['force'])
            var.put('force', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else Js(False)))
            if var.get("this").get('format').get('compact'):
                return var.get('undefined')
            if (((var.get("this").get('_buf').callprop('hasContent') and var.get("this").callprop('endsWith', Js(' ')).neg()) and var.get("this").callprop('endsWith', Js('\n')).neg()) or var.get('force')):
                var.get("this").callprop('_space')
        PyJs_space_587_._set_name('space')
        var.get('Printer').get('prototype').put('space', PyJs_space_587_)
        @Js
        def PyJs_word_588_(str, this, arguments, var=var):
            var = Scope({'this':this, 'word':PyJs_word_588_, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            if var.get("this").get('_endsWithWord'):
                var.get("this").callprop('_space')
            var.get("this").callprop('_maybeAddAuxComment')
            var.get("this").callprop('_append', var.get('str'))
            var.get("this").put('_endsWithWord', var.get('true'))
        PyJs_word_588_._set_name('word')
        var.get('Printer').get('prototype').put('word', PyJs_word_588_)
        @Js
        def PyJs_number_589_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str, 'number':PyJs_number_589_}, var)
            var.registers(['str'])
            var.get("this").callprop('word', var.get('str'))
            def PyJs_LONG_590_(var=var):
                return ((((PyJsComma(Js(0.0),var.get('_isInteger2').get('default'))((+var.get('str'))) and var.get('NON_DECIMAL_LITERAL').callprop('test', var.get('str')).neg()) and var.get('SCIENTIFIC_NOTATION').callprop('test', var.get('str')).neg()) and var.get('ZERO_DECIMAL_INTEGER').callprop('test', var.get('str')).neg()) and PyJsStrictNeq(var.get('str').get((var.get('str').get('length')-Js(1.0))),Js('.')))
            var.get("this").put('_endsWithInteger', PyJs_LONG_590_())
        PyJs_number_589_._set_name('number')
        var.get('Printer').get('prototype').put('number', PyJs_number_589_)
        @Js
        def PyJs_token_591_(str, this, arguments, var=var):
            var = Scope({'this':this, 'token':PyJs_token_591_, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            def PyJs_LONG_592_(var=var):
                return ((((PyJsStrictEq(var.get('str'),Js('--')) and var.get("this").callprop('endsWith', Js('!'))) or (PyJsStrictEq(var.get('str').get('0'),Js('+')) and var.get("this").callprop('endsWith', Js('+')))) or (PyJsStrictEq(var.get('str').get('0'),Js('-')) and var.get("this").callprop('endsWith', Js('-')))) or (PyJsStrictEq(var.get('str').get('0'),Js('.')) and var.get("this").get('_endsWithInteger')))
            if PyJs_LONG_592_():
                var.get("this").callprop('_space')
            var.get("this").callprop('_maybeAddAuxComment')
            var.get("this").callprop('_append', var.get('str'))
        PyJs_token_591_._set_name('token')
        var.get('Printer').get('prototype').put('token', PyJs_token_591_)
        @Js
        def PyJs_newline_593_(i, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, 'newline':PyJs_newline_593_, 'arguments':arguments}, var)
            var.registers(['i', 'j'])
            if (var.get("this").get('format').get('retainLines') or var.get("this").get('format').get('compact')):
                return var.get('undefined')
            if var.get("this").get('format').get('concise'):
                var.get("this").callprop('space')
                return var.get('undefined')
            if var.get("this").callprop('endsWith', Js('\n\n')):
                return var.get('undefined')
            if PyJsStrictNeq(var.get('i',throw=False).typeof(),Js('number')):
                var.put('i', Js(1.0))
            var.put('i', var.get('Math').callprop('min', Js(2.0), var.get('i')))
            if (var.get("this").callprop('endsWith', Js('{\n')) or var.get("this").callprop('endsWith', Js(':\n'))):
                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            if (var.get('i')<=Js(0.0)):
                return var.get('undefined')
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<var.get('i')):
                try:
                    var.get("this").callprop('_newline')
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
        PyJs_newline_593_._set_name('newline')
        var.get('Printer').get('prototype').put('newline', PyJs_newline_593_)
        @Js
        def PyJs_endsWith_594_(str, this, arguments, var=var):
            var = Scope({'this':this, 'endsWith':PyJs_endsWith_594_, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            return var.get("this").get('_buf').callprop('endsWith', var.get('str'))
        PyJs_endsWith_594_._set_name('endsWith')
        var.get('Printer').get('prototype').put('endsWith', PyJs_endsWith_594_)
        @Js
        def PyJs_removeTrailingNewline_595_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'removeTrailingNewline':PyJs_removeTrailingNewline_595_}, var)
            var.registers([])
            var.get("this").get('_buf').callprop('removeTrailingNewline')
        PyJs_removeTrailingNewline_595_._set_name('removeTrailingNewline')
        var.get('Printer').get('prototype').put('removeTrailingNewline', PyJs_removeTrailingNewline_595_)
        @Js
        def PyJs_source_596_(prop, loc, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, 'source':PyJs_source_596_, 'arguments':arguments, 'prop':prop}, var)
            var.registers(['loc', 'prop'])
            var.get("this").callprop('_catchUp', var.get('prop'), var.get('loc'))
            var.get("this").get('_buf').callprop('source', var.get('prop'), var.get('loc'))
        PyJs_source_596_._set_name('source')
        var.get('Printer').get('prototype').put('source', PyJs_source_596_)
        @Js
        def PyJs_withSource_597_(prop, loc, cb, this, arguments, var=var):
            var = Scope({'loc':loc, 'this':this, 'cb':cb, 'prop':prop, 'withSource':PyJs_withSource_597_, 'arguments':arguments}, var)
            var.registers(['loc', 'cb', 'prop'])
            var.get("this").callprop('_catchUp', var.get('prop'), var.get('loc'))
            var.get("this").get('_buf').callprop('withSource', var.get('prop'), var.get('loc'), var.get('cb'))
        PyJs_withSource_597_._set_name('withSource')
        var.get('Printer').get('prototype').put('withSource', PyJs_withSource_597_)
        @Js
        def PyJs__space_598_(this, arguments, var=var):
            var = Scope({'this':this, '_space':PyJs__space_598_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").callprop('_append', Js(' '), var.get('true'))
        PyJs__space_598_._set_name('_space')
        var.get('Printer').get('prototype').put('_space', PyJs__space_598_)
        @Js
        def PyJs__newline_599_(this, arguments, var=var):
            var = Scope({'this':this, '_newline':PyJs__newline_599_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").callprop('_append', Js('\n'), var.get('true'))
        PyJs__newline_599_._set_name('_newline')
        var.get('Printer').get('prototype').put('_newline', PyJs__newline_599_)
        @Js
        def PyJs__append_600_(str, this, arguments, var=var):
            var = Scope({'this':this, '_append':PyJs__append_600_, 'arguments':arguments, 'str':str}, var)
            var.registers(['queue', 'str'])
            var.put('queue', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js(False)))
            var.get("this").callprop('_maybeAddParen', var.get('str'))
            var.get("this").callprop('_maybeIndent', var.get('str'))
            if var.get('queue'):
                var.get("this").get('_buf').callprop('queue', var.get('str'))
            else:
                var.get("this").get('_buf').callprop('append', var.get('str'))
            var.get("this").put('_endsWithWord', Js(False))
            var.get("this").put('_endsWithInteger', Js(False))
        PyJs__append_600_._set_name('_append')
        var.get('Printer').get('prototype').put('_append', PyJs__append_600_)
        @Js
        def PyJs__maybeIndent_601_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str, '_maybeIndent':PyJs__maybeIndent_601_}, var)
            var.registers(['str'])
            if ((var.get("this").get('_indent') and var.get("this").callprop('endsWith', Js('\n'))) and PyJsStrictNeq(var.get('str').get('0'),Js('\n'))):
                var.get("this").get('_buf').callprop('queue', var.get("this").callprop('_getIndent'))
        PyJs__maybeIndent_601_._set_name('_maybeIndent')
        var.get('Printer').get('prototype').put('_maybeIndent', PyJs__maybeIndent_601_)
        @Js
        def PyJs__maybeAddParen_602_(str, this, arguments, var=var):
            var = Scope({'this':this, '_maybeAddParen':PyJs__maybeAddParen_602_, 'arguments':arguments, 'str':str}, var)
            var.registers(['i', 'cha', 'str', 'parenPushNewlineState'])
            var.put('parenPushNewlineState', var.get("this").get('_parenPushNewlineState'))
            if var.get('parenPushNewlineState').neg():
                return var.get('undefined')
            var.get("this").put('_parenPushNewlineState', var.get("null"))
            var.put('i', PyJsComma(Js(0.0), Js(None)))
            #for JS loop
            var.put('i', Js(0.0))
            while ((var.get('i')<var.get('str').get('length')) and PyJsStrictEq(var.get('str').get(var.get('i')),Js(' '))):
                try:
                    continue
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(var.get('i'),var.get('str').get('length')):
                return var.get('undefined')
            var.put('cha', var.get('str').get(var.get('i')))
            if (PyJsStrictEq(var.get('cha'),Js('\n')) or PyJsStrictEq(var.get('cha'),Js('/'))):
                var.get("this").callprop('token', Js('('))
                var.get("this").callprop('indent')
                var.get('parenPushNewlineState').put('printed', var.get('true'))
        PyJs__maybeAddParen_602_._set_name('_maybeAddParen')
        var.get('Printer').get('prototype').put('_maybeAddParen', PyJs__maybeAddParen_602_)
        @Js
        def PyJs__catchUp_603_(prop, loc, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, '_catchUp':PyJs__catchUp_603_, 'arguments':arguments, 'prop':prop}, var)
            var.registers(['count', 'i', 'loc', 'pos', 'prop'])
            if var.get("this").get('format').get('retainLines').neg():
                return var.get('undefined')
            var.put('pos', (var.get('loc').get(var.get('prop')) if var.get('loc') else var.get("null")))
            if (var.get('pos') and PyJsStrictNeq(var.get('pos').get('line'),var.get("null"))):
                var.put('count', (var.get('pos').get('line')-var.get("this").get('_buf').callprop('getCurrentLine')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('count')):
                    try:
                        var.get("this").callprop('_newline')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs__catchUp_603_._set_name('_catchUp')
        var.get('Printer').get('prototype').put('_catchUp', PyJs__catchUp_603_)
        @Js
        def PyJs__getIndent_604_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_getIndent':PyJs__getIndent_604_}, var)
            var.registers([])
            return PyJsComma(Js(0.0),var.get('_repeat2').get('default'))(var.get("this").get('format').get('indent').get('style'), var.get("this").get('_indent'))
        PyJs__getIndent_604_._set_name('_getIndent')
        var.get('Printer').get('prototype').put('_getIndent', PyJs__getIndent_604_)
        @Js
        def PyJs_startTerminatorless_605_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'startTerminatorless':PyJs_startTerminatorless_605_}, var)
            var.registers([])
            PyJs_Object_606_ = Js({'printed':Js(False)})
            return var.get("this").put('_parenPushNewlineState', PyJs_Object_606_)
        PyJs_startTerminatorless_605_._set_name('startTerminatorless')
        var.get('Printer').get('prototype').put('startTerminatorless', PyJs_startTerminatorless_605_)
        @Js
        def PyJs_endTerminatorless_607_(state, this, arguments, var=var):
            var = Scope({'this':this, 'state':state, 'endTerminatorless':PyJs_endTerminatorless_607_, 'arguments':arguments}, var)
            var.registers(['state'])
            if var.get('state').get('printed'):
                var.get("this").callprop('dedent')
                var.get("this").callprop('newline')
                var.get("this").callprop('token', Js(')'))
        PyJs_endTerminatorless_607_._set_name('endTerminatorless')
        var.get('Printer').get('prototype').put('endTerminatorless', PyJs_endTerminatorless_607_)
        @Js
        def PyJs_InlineNonPyName_608_(node, parent, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'print':PyJs_InlineNonPyName_608_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'loc', 'needsParens', 'parent', '_this', 'printMethod', 'oldInAux', 'oldConcise'])
            var.put('_this', var.get("this"))
            if var.get('node').neg():
                return var.get('undefined')
            var.put('oldConcise', var.get("this").get('format').get('concise'))
            if var.get('node').get('_compact'):
                var.get("this").get('format').put('concise', var.get('true'))
            var.put('printMethod', var.get("this").get(var.get('node').get('type')))
            if var.get('printMethod').neg():
                PyJsTempException = JsToPyException(var.get('ReferenceError').create((((Js('unknown node of type ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('node').get('type')))+Js(' with constructor '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))((var.get('node') and var.get('node').get('constructor').get('name'))))))
                raise PyJsTempException
            var.get("this").get('_printStack').callprop('push', var.get('node'))
            var.put('oldInAux', var.get("this").get('_insideAux'))
            var.get("this").put('_insideAux', var.get('node').get('loc').neg())
            var.get("this").callprop('_maybeAddAuxComment', (var.get("this").get('_insideAux') and var.get('oldInAux').neg()))
            var.put('needsParens', var.get('n').callprop('needsParens', var.get('node'), var.get('parent'), var.get("this").get('_printStack')))
            if (((var.get("this").get('format').get('retainFunctionParens') and PyJsStrictEq(var.get('node').get('type'),Js('FunctionExpression'))) and var.get('node').get('extra')) and var.get('node').get('extra').get('parenthesized')):
                var.put('needsParens', var.get('true'))
            if var.get('needsParens'):
                var.get("this").callprop('token', Js('('))
            var.get("this").callprop('_printLeadingComments', var.get('node'), var.get('parent'))
            var.put('loc', (var.get("null") if (var.get('t').callprop('isProgram', var.get('node')) or var.get('t').callprop('isFile', var.get('node'))) else var.get('node').get('loc')))
            @Js
            def PyJs_anonymous_609_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('_this').callprop(var.get('node').get('type'), var.get('node'), var.get('parent'))
            PyJs_anonymous_609_._set_name('anonymous')
            var.get("this").callprop('withSource', Js('start'), var.get('loc'), PyJs_anonymous_609_)
            var.get("this").callprop('_printTrailingComments', var.get('node'), var.get('parent'))
            if var.get('needsParens'):
                var.get("this").callprop('token', Js(')'))
            var.get("this").get('_printStack').callprop('pop')
            var.get("this").get('format').put('concise', var.get('oldConcise'))
            var.get("this").put('_insideAux', var.get('oldInAux'))
        PyJs_InlineNonPyName_608_._set_name('print')
        var.get('Printer').get('prototype').put('print', PyJs_InlineNonPyName_608_)
        @Js
        def PyJs__maybeAddAuxComment_610_(enteredPositionlessNode, this, arguments, var=var):
            var = Scope({'enteredPositionlessNode':enteredPositionlessNode, 'this':this, '_maybeAddAuxComment':PyJs__maybeAddAuxComment_610_, 'arguments':arguments}, var)
            var.registers(['enteredPositionlessNode'])
            if var.get('enteredPositionlessNode'):
                var.get("this").callprop('_printAuxBeforeComment')
            if var.get("this").get('_insideAux').neg():
                var.get("this").callprop('_printAuxAfterComment')
        PyJs__maybeAddAuxComment_610_._set_name('_maybeAddAuxComment')
        var.get('Printer').get('prototype').put('_maybeAddAuxComment', PyJs__maybeAddAuxComment_610_)
        @Js
        def PyJs__printAuxBeforeComment_611_(this, arguments, var=var):
            var = Scope({'this':this, '_printAuxBeforeComment':PyJs__printAuxBeforeComment_611_, 'arguments':arguments}, var)
            var.registers(['comment'])
            if var.get("this").get('_printAuxAfterOnNextUserNode'):
                return var.get('undefined')
            var.get("this").put('_printAuxAfterOnNextUserNode', var.get('true'))
            var.put('comment', var.get("this").get('format').get('auxiliaryCommentBefore'))
            if var.get('comment'):
                PyJs_Object_612_ = Js({'type':Js('CommentBlock'),'value':var.get('comment')})
                var.get("this").callprop('_printComment', PyJs_Object_612_)
        PyJs__printAuxBeforeComment_611_._set_name('_printAuxBeforeComment')
        var.get('Printer').get('prototype').put('_printAuxBeforeComment', PyJs__printAuxBeforeComment_611_)
        @Js
        def PyJs__printAuxAfterComment_613_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_printAuxAfterComment':PyJs__printAuxAfterComment_613_}, var)
            var.registers(['comment'])
            if var.get("this").get('_printAuxAfterOnNextUserNode').neg():
                return var.get('undefined')
            var.get("this").put('_printAuxAfterOnNextUserNode', Js(False))
            var.put('comment', var.get("this").get('format').get('auxiliaryCommentAfter'))
            if var.get('comment'):
                PyJs_Object_614_ = Js({'type':Js('CommentBlock'),'value':var.get('comment')})
                var.get("this").callprop('_printComment', PyJs_Object_614_)
        PyJs__printAuxAfterComment_613_._set_name('_printAuxAfterComment')
        var.get('Printer').get('prototype').put('_printAuxAfterComment', PyJs__printAuxAfterComment_613_)
        @Js
        def PyJs_getPossibleRaw_615_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'getPossibleRaw':PyJs_getPossibleRaw_615_}, var)
            var.registers(['node', 'extra'])
            if var.get("this").get('format').get('minified'):
                return var.get('undefined')
            var.put('extra', var.get('node').get('extra'))
            if (((var.get('extra') and (var.get('extra').get('raw')!=var.get("null"))) and (var.get('extra').get('rawValue')!=var.get("null"))) and PyJsStrictEq(var.get('node').get('value'),var.get('extra').get('rawValue'))):
                return var.get('extra').get('raw')
        PyJs_getPossibleRaw_615_._set_name('getPossibleRaw')
        var.get('Printer').get('prototype').put('getPossibleRaw', PyJs_getPossibleRaw_615_)
        @Js
        def PyJs_printJoin_616_(nodes, parent, this, arguments, var=var):
            var = Scope({'this':this, 'nodes':nodes, 'printJoin':PyJs_printJoin_616_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'parent', 'i', 'newlineOpts', 'nodes', 'opts'])
            PyJs_Object_617_ = Js({})
            var.put('opts', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else PyJs_Object_617_))
            if (var.get('nodes').neg() or var.get('nodes').get('length').neg()):
                return var.get('undefined')
            if var.get('opts').get('indent'):
                var.get("this").callprop('indent')
            PyJs_Object_618_ = Js({'addNewlines':var.get('opts').get('addNewlines')})
            var.put('newlineOpts', PyJs_Object_618_)
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodes').get('length')):
                try:
                    var.put('node', var.get('nodes').get(var.get('i')))
                    if var.get('node').neg():
                        continue
                    if var.get('opts').get('statement'):
                        var.get("this").callprop('_printNewline', var.get('true'), var.get('node'), var.get('parent'), var.get('newlineOpts'))
                    var.get("this").callprop('print', var.get('node'), var.get('parent'))
                    if var.get('opts').get('iterator'):
                        var.get('opts').callprop('iterator', var.get('node'), var.get('i'))
                    if (var.get('opts').get('separator') and (var.get('i')<(var.get('nodes').get('length')-Js(1.0)))):
                        var.get('opts').get('separator').callprop('call', var.get("this"))
                    if var.get('opts').get('statement'):
                        var.get("this").callprop('_printNewline', Js(False), var.get('node'), var.get('parent'), var.get('newlineOpts'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('opts').get('indent'):
                var.get("this").callprop('dedent')
        PyJs_printJoin_616_._set_name('printJoin')
        var.get('Printer').get('prototype').put('printJoin', PyJs_printJoin_616_)
        @Js
        def PyJs_printAndIndentOnComments_619_(node, parent, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'printAndIndentOnComments':PyJs_printAndIndentOnComments_619_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'indent', 'parent'])
            var.put('indent', var.get('node').get('leadingComments').neg().neg())
            if var.get('indent'):
                var.get("this").callprop('indent')
            var.get("this").callprop('print', var.get('node'), var.get('parent'))
            if var.get('indent'):
                var.get("this").callprop('dedent')
        PyJs_printAndIndentOnComments_619_._set_name('printAndIndentOnComments')
        var.get('Printer').get('prototype').put('printAndIndentOnComments', PyJs_printAndIndentOnComments_619_)
        @Js
        def PyJs_printBlock_620_(parent, this, arguments, var=var):
            var = Scope({'this':this, 'printBlock':PyJs_printBlock_620_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'parent'])
            var.put('node', var.get('parent').get('body'))
            if var.get('t').callprop('isEmptyStatement', var.get('node')).neg():
                var.get("this").callprop('space')
            var.get("this").callprop('print', var.get('node'), var.get('parent'))
        PyJs_printBlock_620_._set_name('printBlock')
        var.get('Printer').get('prototype').put('printBlock', PyJs_printBlock_620_)
        @Js
        def PyJs__printTrailingComments_621_(node, parent, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, '_printTrailingComments':PyJs__printTrailingComments_621_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'parent'])
            var.get("this").callprop('_printComments', var.get("this").callprop('_getComments', Js(False), var.get('node'), var.get('parent')))
        PyJs__printTrailingComments_621_._set_name('_printTrailingComments')
        var.get('Printer').get('prototype').put('_printTrailingComments', PyJs__printTrailingComments_621_)
        @Js
        def PyJs__printLeadingComments_622_(node, parent, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent, '_printLeadingComments':PyJs__printLeadingComments_622_}, var)
            var.registers(['node', 'parent'])
            var.get("this").callprop('_printComments', var.get("this").callprop('_getComments', var.get('true'), var.get('node'), var.get('parent')))
        PyJs__printLeadingComments_622_._set_name('_printLeadingComments')
        var.get('Printer').get('prototype').put('_printLeadingComments', PyJs__printLeadingComments_622_)
        @Js
        def PyJs_printInnerComments_623_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'printInnerComments':PyJs_printInnerComments_623_, 'arguments':arguments}, var)
            var.registers(['node', 'indent'])
            var.put('indent', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('true')))
            if var.get('node').get('innerComments').neg():
                return var.get('undefined')
            if var.get('indent'):
                var.get("this").callprop('indent')
            var.get("this").callprop('_printComments', var.get('node').get('innerComments'))
            if var.get('indent'):
                var.get("this").callprop('dedent')
        PyJs_printInnerComments_623_._set_name('printInnerComments')
        var.get('Printer').get('prototype').put('printInnerComments', PyJs_printInnerComments_623_)
        @Js
        def PyJs_printSequence_624_(nodes, parent, this, arguments, var=var):
            var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments, 'parent':parent, 'printSequence':PyJs_printSequence_624_}, var)
            var.registers(['nodes', 'parent', 'opts'])
            PyJs_Object_625_ = Js({})
            var.put('opts', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else PyJs_Object_625_))
            var.get('opts').put('statement', var.get('true'))
            return var.get("this").callprop('printJoin', var.get('nodes'), var.get('parent'), var.get('opts'))
        PyJs_printSequence_624_._set_name('printSequence')
        var.get('Printer').get('prototype').put('printSequence', PyJs_printSequence_624_)
        @Js
        def PyJs_printList_626_(items, parent, this, arguments, var=var):
            var = Scope({'this':this, 'items':items, 'printList':PyJs_printList_626_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['items', 'parent', 'opts'])
            PyJs_Object_627_ = Js({})
            var.put('opts', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else PyJs_Object_627_))
            if (var.get('opts').get('separator')==var.get("null")):
                var.get('opts').put('separator', var.get('commaSeparator'))
            return var.get("this").callprop('printJoin', var.get('items'), var.get('parent'), var.get('opts'))
        PyJs_printList_626_._set_name('printList')
        var.get('Printer').get('prototype').put('printList', PyJs_printList_626_)
        @Js
        def PyJs__printNewline_628_(leading, node, parent, opts, this, arguments, var=var):
            var = Scope({'node':node, '_printNewline':PyJs__printNewline_628_, 'arguments':arguments, 'parent':parent, 'this':this, 'leading':leading, 'opts':opts}, var)
            var.registers(['node', 'needs', 'parent', '_comments2', 'leading', '_comment', 'lines', '_this2', '_comments', '_comment2', 'opts'])
            var.put('_this2', var.get("this"))
            if (var.get("this").get('format').get('retainLines') or var.get("this").get('format').get('compact')):
                return var.get('undefined')
            if var.get("this").get('format').get('concise'):
                var.get("this").callprop('space')
                return var.get('undefined')
            var.put('lines', Js(0.0))
            if (((var.get('node').get('start')!=var.get("null")) and var.get('node').get('_ignoreUserWhitespace').neg()) and var.get("this").get('_whitespace')):
                if var.get('leading'):
                    var.put('_comments', var.get('node').get('leadingComments'))
                    @Js
                    def PyJs_anonymous_629_(comment, this, arguments, var=var):
                        var = Scope({'comment':comment, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comment'])
                        return (var.get('comment').get('loc').neg().neg() and var.get('_this2').get('format').callprop('shouldPrintComment', var.get('comment').get('value')))
                    PyJs_anonymous_629_._set_name('anonymous')
                    var.put('_comment', (var.get('_comments') and PyJsComma(Js(0.0),var.get('_find2').get('default'))(var.get('_comments'), PyJs_anonymous_629_)))
                    var.put('lines', var.get("this").get('_whitespace').callprop('getNewlinesBefore', (var.get('_comment') or var.get('node'))))
                else:
                    var.put('_comments2', var.get('node').get('trailingComments'))
                    @Js
                    def PyJs_anonymous_630_(comment, this, arguments, var=var):
                        var = Scope({'comment':comment, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comment'])
                        return (var.get('comment').get('loc').neg().neg() and var.get('_this2').get('format').callprop('shouldPrintComment', var.get('comment').get('value')))
                    PyJs_anonymous_630_._set_name('anonymous')
                    var.put('_comment2', (var.get('_comments2') and PyJsComma(Js(0.0),var.get('_findLast2').get('default'))(var.get('_comments2'), PyJs_anonymous_630_)))
                    var.put('lines', var.get("this").get('_whitespace').callprop('getNewlinesAfter', (var.get('_comment2') or var.get('node'))))
            else:
                if var.get('leading').neg():
                    (var.put('lines',Js(var.get('lines').to_number())+Js(1))-Js(1))
                if var.get('opts').get('addNewlines'):
                    var.put('lines', (var.get('opts').callprop('addNewlines', var.get('leading'), var.get('node')) or Js(0.0)), '+')
                var.put('needs', var.get('n').get('needsWhitespaceAfter'))
                if var.get('leading'):
                    var.put('needs', var.get('n').get('needsWhitespaceBefore'))
                if var.get('needs')(var.get('node'), var.get('parent')):
                    (var.put('lines',Js(var.get('lines').to_number())+Js(1))-Js(1))
                if var.get("this").get('_buf').callprop('hasContent').neg():
                    var.put('lines', Js(0.0))
            var.get("this").callprop('newline', var.get('lines'))
        PyJs__printNewline_628_._set_name('_printNewline')
        var.get('Printer').get('prototype').put('_printNewline', PyJs__printNewline_628_)
        @Js
        def PyJs__getComments_631_(leading, node, this, arguments, var=var):
            var = Scope({'node':node, 'leading':leading, 'this':this, 'arguments':arguments, '_getComments':PyJs__getComments_631_}, var)
            var.registers(['node', 'leading'])
            return ((var.get('node') and (var.get('node').get('leadingComments') if var.get('leading') else var.get('node').get('trailingComments'))) or Js([]))
        PyJs__getComments_631_._set_name('_getComments')
        var.get('Printer').get('prototype').put('_getComments', PyJs__getComments_631_)
        @Js
        def PyJs__printComment_632_(comment, this, arguments, var=var):
            var = Scope({'comment':comment, 'this':this, '_printComment':PyJs__printComment_632_, 'arguments':arguments}, var)
            var.registers(['comment', 'val', 'indentSize', 'newlineRegex', 'offset', '_this3'])
            var.put('_this3', var.get("this"))
            if var.get("this").get('format').callprop('shouldPrintComment', var.get('comment').get('value')).neg():
                return var.get('undefined')
            if var.get('comment').get('ignore'):
                return var.get('undefined')
            if var.get("this").get('_printedComments').callprop('has', var.get('comment')):
                return var.get('undefined')
            var.get("this").get('_printedComments').callprop('add', var.get('comment'))
            if (var.get('comment').get('start')!=var.get("null")):
                if var.get("this").get('_printedCommentStarts').get(var.get('comment').get('start')):
                    return var.get('undefined')
                var.get("this").get('_printedCommentStarts').put(var.get('comment').get('start'), var.get('true'))
            var.get("this").callprop('newline', (var.get("this").get('_whitespace').callprop('getNewlinesBefore', var.get('comment')) if var.get("this").get('_whitespace') else Js(0.0)))
            if (var.get("this").callprop('endsWith', Js('[')).neg() and var.get("this").callprop('endsWith', Js('{')).neg()):
                var.get("this").callprop('space')
            var.put('val', (((Js('//')+var.get('comment').get('value'))+Js('\n')) if PyJsStrictEq(var.get('comment').get('type'),Js('CommentLine')) else ((Js('/*')+var.get('comment').get('value'))+Js('*/'))))
            if (PyJsStrictEq(var.get('comment').get('type'),Js('CommentBlock')) and var.get("this").get('format').get('indent').get('adjustMultilineComment')):
                var.put('offset', (var.get('comment').get('loc') and var.get('comment').get('loc').get('start').get('column')))
                if var.get('offset'):
                    var.put('newlineRegex', var.get('RegExp').create(((Js('\\n\\s{1,')+var.get('offset'))+Js('}')), Js('g')))
                    var.put('val', var.get('val').callprop('replace', var.get('newlineRegex'), Js('\n')))
                var.put('indentSize', var.get('Math').callprop('max', var.get("this").callprop('_getIndent').get('length'), var.get("this").get('_buf').callprop('getCurrentColumn')))
                var.put('val', var.get('val').callprop('replace', JsRegExp('/\\n(?!$)/g'), (Js('\n')+PyJsComma(Js(0.0),var.get('_repeat2').get('default'))(Js(' '), var.get('indentSize')))))
            @Js
            def PyJs_anonymous_633_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('_this3').callprop('_append', var.get('val'))
            PyJs_anonymous_633_._set_name('anonymous')
            var.get("this").callprop('withSource', Js('start'), var.get('comment').get('loc'), PyJs_anonymous_633_)
            var.get("this").callprop('newline', ((var.get("this").get('_whitespace').callprop('getNewlinesAfter', var.get('comment')) if var.get("this").get('_whitespace') else Js(0.0))+((-Js(1.0)) if PyJsStrictEq(var.get('comment').get('type'),Js('CommentLine')) else Js(0.0))))
        PyJs__printComment_632_._set_name('_printComment')
        var.get('Printer').get('prototype').put('_printComment', PyJs__printComment_632_)
        @Js
        def PyJs__printComments_634_(comments, this, arguments, var=var):
            var = Scope({'this':this, '_printComments':PyJs__printComments_634_, 'arguments':arguments, 'comments':comments}, var)
            var.registers(['_isArray', '_iterator', 'comments', '_i', '_ref', '_comment3'])
            if (var.get('comments').neg() or var.get('comments').get('length').neg()):
                return var.get('undefined')
            #for JS loop
            var.put('_iterator', var.get('comments'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('_comment3', var.get('_ref'))
                var.get("this").callprop('_printComment', var.get('_comment3'))
            
        PyJs__printComments_634_._set_name('_printComments')
        var.get('Printer').get('prototype').put('_printComments', PyJs__printComments_634_)
        return var.get('Printer')
    PyJs_anonymous_579_._set_name('anonymous')
    var.put('Printer', PyJs_anonymous_579_())
    var.get('exports').put('default', var.get('Printer'))
    pass
    var.put('_arr', Js([var.get('require')(Js('./generators/template-literals')), var.get('require')(Js('./generators/expressions')), var.get('require')(Js('./generators/statements')), var.get('require')(Js('./generators/classes')), var.get('require')(Js('./generators/methods')), var.get('require')(Js('./generators/modules')), var.get('require')(Js('./generators/types')), var.get('require')(Js('./generators/flow')), var.get('require')(Js('./generators/base')), var.get('require')(Js('./generators/jsx'))]))
    #for JS loop
    var.put('_i2', Js(0.0))
    while (var.get('_i2')<var.get('_arr').get('length')):
        try:
            var.put('generator', var.get('_arr').get(var.get('_i2')))
            PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('Printer').get('prototype'), var.get('generator'))
        finally:
                (var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_576_._set_name('anonymous')
PyJs_Object_635_ = Js({'./buffer':Js(29.0),'./generators/base':Js(30.0),'./generators/classes':Js(31.0),'./generators/expressions':Js(32.0),'./generators/flow':Js(33.0),'./generators/jsx':Js(34.0),'./generators/methods':Js(35.0),'./generators/modules':Js(36.0),'./generators/statements':Js(37.0),'./generators/template-literals':Js(38.0),'./generators/types':Js(39.0),'./node':Js(41.0),'./whitespace':Js(46.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/core-js/object/assign':Js(100.0),'babel-runtime/core-js/weak-set':Js(109.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0),'lodash/find':Js(447.0),'lodash/findLast':Js(449.0),'lodash/isInteger':Js(464.0),'lodash/repeat':Js(483.0)})
@Js
def PyJs_anonymous_636_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_typeof2', '_typeof3', 'exports', '_sourceMap', 'require', 'SourceMap', 'module', '_keys2', '_keys', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2', '_sourceMap2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_637_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_637_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_sourceMap', var.get('require')(Js('source-map')))
    var.put('_sourceMap2', var.get('_interopRequireDefault')(var.get('_sourceMap')))
    pass
    @Js
    def PyJs_anonymous_638_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['SourceMap'])
        @Js
        def PyJsHoisted_SourceMap_(opts, code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['code', 'opts', '_this'])
            var.put('_this', var.get("this"))
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('SourceMap'))
            var.get("this").put('_opts', var.get('opts'))
            PyJs_Object_639_ = Js({'file':var.get('opts').get('sourceMapTarget'),'sourceRoot':var.get('opts').get('sourceRoot')})
            var.get("this").put('_map', var.get('_sourceMap2').get('default').get('SourceMapGenerator').create(PyJs_Object_639_))
            if PyJsStrictEq(var.get('code',throw=False).typeof(),Js('string')):
                var.get("this").get('_map').callprop('setSourceContent', var.get('opts').get('sourceFileName'), var.get('code'))
            else:
                if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('code',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('code'))),Js('object')):
                    @Js
                    def PyJs_anonymous_640_(sourceFileName, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'sourceFileName':sourceFileName}, var)
                        var.registers(['sourceFileName'])
                        var.get('_this').get('_map').callprop('setSourceContent', var.get('sourceFileName'), var.get('code').get(var.get('sourceFileName')))
                    PyJs_anonymous_640_._set_name('anonymous')
                    PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('code')).callprop('forEach', PyJs_anonymous_640_)
        PyJsHoisted_SourceMap_.__name__ = 'SourceMap'
        var.put('SourceMap', PyJsHoisted_SourceMap_)
        pass
        @Js
        def PyJs_get_641_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_641_}, var)
            var.registers([])
            return var.get("this").get('_map').callprop('toJSON')
        PyJs_get_641_._set_name('get')
        var.get('SourceMap').get('prototype').put('get', PyJs_get_641_)
        @Js
        def PyJs_mark_642_(generatedLine, generatedColumn, line, column, identifierName, filename, this, arguments, var=var):
            var = Scope({'generatedColumn':generatedColumn, 'identifierName':identifierName, 'column':column, 'filename':filename, 'this':this, 'generatedLine':generatedLine, 'arguments':arguments, 'line':line, 'mark':PyJs_mark_642_}, var)
            var.registers(['generatedColumn', 'identifierName', 'column', 'filename', 'generatedLine', 'line'])
            if (PyJsStrictNeq(var.get("this").get('_lastGenLine'),var.get('generatedLine')) and PyJsStrictEq(var.get('line'),var.get("null"))):
                return var.get('undefined')
            if ((PyJsStrictEq(var.get("this").get('_lastGenLine'),var.get('generatedLine')) and PyJsStrictEq(var.get("this").get('_lastSourceLine'),var.get('line'))) and PyJsStrictEq(var.get("this").get('_lastSourceColumn'),var.get('column'))):
                return var.get('undefined')
            var.get("this").put('_lastGenLine', var.get('generatedLine'))
            var.get("this").put('_lastSourceLine', var.get('line'))
            var.get("this").put('_lastSourceColumn', var.get('column'))
            PyJs_Object_644_ = Js({'line':var.get('generatedLine'),'column':var.get('generatedColumn')})
            PyJs_Object_645_ = Js({'line':var.get('line'),'column':var.get('column')})
            PyJs_Object_643_ = Js({'name':var.get('identifierName'),'generated':PyJs_Object_644_,'source':(var.get("null") if (var.get('line')==var.get("null")) else (var.get('filename') or var.get("this").get('_opts').get('sourceFileName'))),'original':(var.get("null") if (var.get('line')==var.get("null")) else PyJs_Object_645_)})
            var.get("this").get('_map').callprop('addMapping', PyJs_Object_643_)
        PyJs_mark_642_._set_name('mark')
        var.get('SourceMap').get('prototype').put('mark', PyJs_mark_642_)
        return var.get('SourceMap')
    PyJs_anonymous_638_._set_name('anonymous')
    var.put('SourceMap', PyJs_anonymous_638_())
    var.get('exports').put('default', var.get('SourceMap'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_636_._set_name('anonymous')
PyJs_Object_646_ = Js({'babel-runtime/core-js/object/keys':Js(103.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/typeof':Js(114.0),'source-map':Js(519.0)})
@Js
def PyJs_anonymous_647_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Whitespace', 'require', 'module', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_648_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_648_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    pass
    @Js
    def PyJs_anonymous_649_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Whitespace'])
        @Js
        def PyJsHoisted_Whitespace_(tokens, this, arguments, var=var):
            var = Scope({'tokens':tokens, 'this':this, 'arguments':arguments}, var)
            var.registers(['tokens'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Whitespace'))
            var.get("this").put('tokens', var.get('tokens'))
            PyJs_Object_650_ = Js({})
            var.get("this").put('used', PyJs_Object_650_)
        PyJsHoisted_Whitespace_.__name__ = 'Whitespace'
        var.put('Whitespace', PyJsHoisted_Whitespace_)
        pass
        @Js
        def PyJs_getNewlinesBefore_651_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'getNewlinesBefore':PyJs_getNewlinesBefore_651_}, var)
            var.registers(['tokens', 'startToken', 'node', 'endToken', 'index'])
            var.put('startToken', PyJsComma(Js(0.0), Js(None)))
            var.put('endToken', PyJsComma(Js(0.0), Js(None)))
            var.put('tokens', var.get("this").get('tokens'))
            @Js
            def PyJs_anonymous_652_(token, this, arguments, var=var):
                var = Scope({'this':this, 'token':token, 'arguments':arguments}, var)
                var.registers(['token'])
                return (var.get('token').get('start')-var.get('node').get('start'))
            PyJs_anonymous_652_._set_name('anonymous')
            var.put('index', var.get("this").callprop('_findToken', PyJs_anonymous_652_, Js(0.0), var.get('tokens').get('length')))
            if (var.get('index')>=Js(0.0)):
                while (var.get('index') and PyJsStrictEq(var.get('node').get('start'),var.get('tokens').get((var.get('index')-Js(1.0))).get('start'))):
                    var.put('index',Js(var.get('index').to_number())-Js(1))
                var.put('startToken', var.get('tokens').get((var.get('index')-Js(1.0))))
                var.put('endToken', var.get('tokens').get(var.get('index')))
            return var.get("this").callprop('_getNewlinesBetween', var.get('startToken'), var.get('endToken'))
        PyJs_getNewlinesBefore_651_._set_name('getNewlinesBefore')
        var.get('Whitespace').get('prototype').put('getNewlinesBefore', PyJs_getNewlinesBefore_651_)
        @Js
        def PyJs_getNewlinesAfter_653_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'getNewlinesAfter':PyJs_getNewlinesAfter_653_}, var)
            var.registers(['tokens', 'startToken', 'node', 'endToken', 'index'])
            var.put('startToken', PyJsComma(Js(0.0), Js(None)))
            var.put('endToken', PyJsComma(Js(0.0), Js(None)))
            var.put('tokens', var.get("this").get('tokens'))
            @Js
            def PyJs_anonymous_654_(token, this, arguments, var=var):
                var = Scope({'this':this, 'token':token, 'arguments':arguments}, var)
                var.registers(['token'])
                return (var.get('token').get('end')-var.get('node').get('end'))
            PyJs_anonymous_654_._set_name('anonymous')
            var.put('index', var.get("this").callprop('_findToken', PyJs_anonymous_654_, Js(0.0), var.get('tokens').get('length')))
            if (var.get('index')>=Js(0.0)):
                while (var.get('index') and PyJsStrictEq(var.get('node').get('end'),var.get('tokens').get((var.get('index')-Js(1.0))).get('end'))):
                    var.put('index',Js(var.get('index').to_number())-Js(1))
                var.put('startToken', var.get('tokens').get(var.get('index')))
                var.put('endToken', var.get('tokens').get((var.get('index')+Js(1.0))))
                if PyJsStrictEq(var.get('endToken').get('type').get('label'),Js(',')):
                    var.put('endToken', var.get('tokens').get((var.get('index')+Js(2.0))))
            if (var.get('endToken') and PyJsStrictEq(var.get('endToken').get('type').get('label'),Js('eof'))):
                return Js(1.0)
            else:
                return var.get("this").callprop('_getNewlinesBetween', var.get('startToken'), var.get('endToken'))
        PyJs_getNewlinesAfter_653_._set_name('getNewlinesAfter')
        var.get('Whitespace').get('prototype').put('getNewlinesAfter', PyJs_getNewlinesAfter_653_)
        @Js
        def PyJs__getNewlinesBetween_655_(startToken, endToken, this, arguments, var=var):
            var = Scope({'this':this, 'startToken':startToken, 'arguments':arguments, 'endToken':endToken, '_getNewlinesBetween':PyJs__getNewlinesBetween_655_}, var)
            var.registers(['end', 'startToken', 'lines', 'start', 'line', 'endToken'])
            if (var.get('endToken').neg() or var.get('endToken').get('loc').neg()):
                return Js(0.0)
            var.put('start', (var.get('startToken').get('loc').get('end').get('line') if var.get('startToken') else Js(1.0)))
            var.put('end', var.get('endToken').get('loc').get('start').get('line'))
            var.put('lines', Js(0.0))
            #for JS loop
            var.put('line', var.get('start'))
            while (var.get('line')<var.get('end')):
                try:
                    if PyJsStrictEq(var.get("this").get('used').get(var.get('line')).typeof(),Js('undefined')):
                        var.get("this").get('used').put(var.get('line'), var.get('true'))
                        (var.put('lines',Js(var.get('lines').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('line',Js(var.get('line').to_number())+Js(1))-Js(1))
            return var.get('lines')
        PyJs__getNewlinesBetween_655_._set_name('_getNewlinesBetween')
        var.get('Whitespace').get('prototype').put('_getNewlinesBetween', PyJs__getNewlinesBetween_655_)
        @Js
        def PyJs__findToken_656_(test, start, end, this, arguments, var=var):
            var = Scope({'end':end, '_findToken':PyJs__findToken_656_, 'this':this, 'start':start, 'arguments':arguments, 'test':test}, var)
            var.registers(['test', 'middle', 'end', 'match', 'start'])
            if (var.get('start')>=var.get('end')):
                return (-Js(1.0))
            var.put('middle', PyJsBshift((var.get('start')+var.get('end')),Js(1.0)))
            var.put('match', var.get('test')(var.get("this").get('tokens').get(var.get('middle'))))
            if (var.get('match')<Js(0.0)):
                return var.get("this").callprop('_findToken', var.get('test'), (var.get('middle')+Js(1.0)), var.get('end'))
            else:
                if (var.get('match')>Js(0.0)):
                    return var.get("this").callprop('_findToken', var.get('test'), var.get('start'), var.get('middle'))
                else:
                    if PyJsStrictEq(var.get('match'),Js(0.0)):
                        return var.get('middle')
            return (-Js(1.0))
        PyJs__findToken_656_._set_name('_findToken')
        var.get('Whitespace').get('prototype').put('_findToken', PyJs__findToken_656_)
        return var.get('Whitespace')
    PyJs_anonymous_649_._set_name('anonymous')
    var.put('Whitespace', PyJs_anonymous_649_())
    var.get('exports').put('default', var.get('Whitespace'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_647_._set_name('anonymous')
PyJs_Object_657_ = Js({'babel-runtime/helpers/classCallCheck':Js(110.0)})
@Js
def PyJs_anonymous_658_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', 'module', '_babelHelperHoistVariables', 't', '_babelHelperHoistVariables2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_664_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_664_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_663_ = Js({})
            var.put('newObj', PyJs_Object_663_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_659_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['node', 'container', 'args', 'state', 'call', 'path', 'scope', 'callee'])
        var.put('scope', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('path').get('scope')))
        var.put('node', var.get('path').get('node'))
        var.put('container', var.get('t').callprop('functionExpression', var.get("null"), Js([]), var.get('node').get('body'), var.get('node').get('generator'), var.get('node').get('async')))
        var.put('callee', var.get('container'))
        var.put('args', Js([]))
        @Js
        def PyJs_anonymous_660_(id, this, arguments, var=var):
            var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
            var.registers(['id'])
            PyJs_Object_661_ = Js({'id':var.get('id')})
            return var.get('scope').callprop('push', PyJs_Object_661_)
        PyJs_anonymous_660_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_babelHelperHoistVariables2').get('default'))(var.get('path'), PyJs_anonymous_660_)
        PyJs_Object_662_ = Js({'foundThis':Js(False),'foundArguments':Js(False)})
        var.put('state', PyJs_Object_662_)
        var.get('path').callprop('traverse', var.get('visitor'), var.get('state'))
        if var.get('state').get('foundArguments'):
            var.put('callee', var.get('t').callprop('memberExpression', var.get('container'), var.get('t').callprop('identifier', Js('apply'))))
            var.put('args', Js([]))
            if var.get('state').get('foundThis'):
                var.get('args').callprop('push', var.get('t').callprop('thisExpression'))
            if var.get('state').get('foundArguments'):
                if var.get('state').get('foundThis').neg():
                    var.get('args').callprop('push', var.get('t').callprop('nullLiteral'))
                var.get('args').callprop('push', var.get('t').callprop('identifier', Js('arguments')))
        var.put('call', var.get('t').callprop('callExpression', var.get('callee'), var.get('args')))
        if var.get('node').get('generator'):
            var.put('call', var.get('t').callprop('yieldExpression', var.get('call'), var.get('true')))
        return var.get('t').callprop('returnStatement', var.get('call'))
    PyJs_anonymous_659_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_659_)
    var.put('_babelHelperHoistVariables', var.get('require')(Js('babel-helper-hoist-variables')))
    var.put('_babelHelperHoistVariables2', var.get('_interopRequireDefault')(var.get('_babelHelperHoistVariables')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_enter_666_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'enter':PyJs_enter_666_}, var)
        var.registers(['path', 'state'])
        if var.get('path').callprop('isThisExpression'):
            var.get('state').put('foundThis', var.get('true'))
        PyJs_Object_667_ = Js({'name':Js('arguments')})
        if var.get('path').callprop('isReferencedIdentifier', PyJs_Object_667_):
            var.get('state').put('foundArguments', var.get('true'))
    PyJs_enter_666_._set_name('enter')
    @Js
    def PyJs_Function_668_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_668_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Function_668_._set_name('Function')
    PyJs_Object_665_ = Js({'enter':PyJs_enter_666_,'Function':PyJs_Function_668_})
    var.put('visitor', PyJs_Object_665_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_658_._set_name('anonymous')
PyJs_Object_669_ = Js({'babel-helper-hoist-variables':Js(51.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_670_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['toDefineObject', 'exports', 'toComputedObjectFromClass', '_each', '_interopRequireWildcard', '_babelHelperFunctionName', 'require', '_babelTypes', '_has2', '_has', 'hasComputed', 'push', 'module', '_each2', 't', '_babelHelperFunctionName2', '_interopRequireDefault', 'toKind', 'toClassObject'])
    @Js
    def PyJsHoisted_toDefineObject_(mutatorMap, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'mutatorMap':mutatorMap}, var)
        var.registers(['mutatorMap'])
        @Js
        def PyJs_anonymous_678_(map, this, arguments, var=var):
            var = Scope({'this':this, 'map':map, 'arguments':arguments}, var)
            var.registers(['map'])
            if var.get('map').get('value'):
                var.get('map').put('writable', var.get('t').callprop('booleanLiteral', var.get('true')))
            var.get('map').put('configurable', var.get('t').callprop('booleanLiteral', var.get('true')))
            var.get('map').put('enumerable', var.get('t').callprop('booleanLiteral', var.get('true')))
        PyJs_anonymous_678_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('mutatorMap'), PyJs_anonymous_678_)
        return var.get('toClassObject')(var.get('mutatorMap'))
    PyJsHoisted_toDefineObject_.__name__ = 'toDefineObject'
    var.put('toDefineObject', PyJsHoisted_toDefineObject_)
    @Js
    def PyJsHoisted_toComputedObjectFromClass_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['i', 'obj', 'objExpr', 'val', 'prop'])
        var.put('objExpr', var.get('t').callprop('arrayExpression', Js([])))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('obj').get('properties').get('length')):
            try:
                var.put('prop', var.get('obj').get('properties').get(var.get('i')))
                var.put('val', var.get('prop').get('value'))
                var.get('val').get('properties').callprop('unshift', var.get('t').callprop('objectProperty', var.get('t').callprop('identifier', Js('key')), var.get('t').callprop('toComputedKey', var.get('prop'))))
                var.get('objExpr').get('elements').callprop('push', var.get('val'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('objExpr')
    PyJsHoisted_toComputedObjectFromClass_.__name__ = 'toComputedObjectFromClass'
    var.put('toComputedObjectFromClass', PyJsHoisted_toComputedObjectFromClass_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_671_ = Js({})
            var.put('newObj', PyJs_Object_671_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_hasComputed_(mutatorMap, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'mutatorMap':mutatorMap}, var)
        var.registers(['mutatorMap', 'key'])
        for PyJsTemp in var.get('mutatorMap'):
            var.put('key', PyJsTemp)
            if var.get('mutatorMap').get(var.get('key')).get('_computed'):
                return var.get('true')
        return Js(False)
    PyJsHoisted_hasComputed_.__name__ = 'hasComputed'
    var.put('hasComputed', PyJsHoisted_hasComputed_)
    @Js
    def PyJsHoisted_push_(mutatorMap, node, kind, file, scope, this, arguments, var=var):
        var = Scope({'node':node, 'kind':kind, 'arguments':arguments, 'file':file, 'this':this, 'scope':scope, 'mutatorMap':mutatorMap}, var)
        var.registers(['node', 'map', 'kind', 'file', 'inheritedKind', 'value', 'alias', 'key', 'scope', 'decorators', 'mutatorMap'])
        var.put('alias', var.get('t').callprop('toKeyAlias', var.get('node')))
        PyJs_Object_673_ = Js({})
        var.put('map', PyJs_Object_673_)
        if PyJsComma(Js(0.0),var.get('_has2').get('default'))(var.get('mutatorMap'), var.get('alias')):
            var.put('map', var.get('mutatorMap').get(var.get('alias')))
        var.get('mutatorMap').put(var.get('alias'), var.get('map'))
        var.get('map').put('_inherits', (var.get('map').get('_inherits') or Js([])))
        var.get('map').get('_inherits').callprop('push', var.get('node'))
        var.get('map').put('_key', var.get('node').get('key'))
        if var.get('node').get('computed'):
            var.get('map').put('_computed', var.get('true'))
        if var.get('node').get('decorators'):
            var.put('decorators', var.get('map').put('decorators', (var.get('map').get('decorators') or var.get('t').callprop('arrayExpression', Js([])))))
            @Js
            def PyJs_anonymous_674_(dec, this, arguments, var=var):
                var = Scope({'this':this, 'dec':dec, 'arguments':arguments}, var)
                var.registers(['dec'])
                return var.get('dec').get('expression')
            PyJs_anonymous_674_._set_name('anonymous')
            var.get('decorators').put('elements', var.get('decorators').get('elements').callprop('concat', var.get('node').get('decorators').callprop('map', PyJs_anonymous_674_).callprop('reverse')))
        if (var.get('map').get('value') or var.get('map').get('initializer')):
            PyJsTempException = JsToPyException(var.get('file').callprop('buildCodeFrameError', var.get('node'), Js('Key conflict with sibling node')))
            raise PyJsTempException
        var.put('key', PyJsComma(Js(0.0), Js(None)))
        var.put('value', PyJsComma(Js(0.0), Js(None)))
        if ((var.get('t').callprop('isObjectProperty', var.get('node')) or var.get('t').callprop('isObjectMethod', var.get('node'))) or var.get('t').callprop('isClassMethod', var.get('node'))):
            var.put('key', var.get('t').callprop('toComputedKey', var.get('node'), var.get('node').get('key')))
        if (var.get('t').callprop('isObjectProperty', var.get('node')) or var.get('t').callprop('isClassProperty', var.get('node'))):
            var.put('value', var.get('node').get('value'))
        else:
            if (var.get('t').callprop('isObjectMethod', var.get('node')) or var.get('t').callprop('isClassMethod', var.get('node'))):
                var.put('value', var.get('t').callprop('functionExpression', var.get("null"), var.get('node').get('params'), var.get('node').get('body'), var.get('node').get('generator'), var.get('node').get('async')))
                var.get('value').put('returnType', var.get('node').get('returnType'))
        var.put('inheritedKind', var.get('toKind')(var.get('node')))
        if (var.get('kind').neg() or PyJsStrictNeq(var.get('inheritedKind'),Js('value'))):
            var.put('kind', var.get('inheritedKind'))
        if (((var.get('scope') and var.get('t').callprop('isStringLiteral', var.get('key'))) and (PyJsStrictEq(var.get('kind'),Js('value')) or PyJsStrictEq(var.get('kind'),Js('initializer')))) and var.get('t').callprop('isFunctionExpression', var.get('value'))):
            PyJs_Object_675_ = Js({'id':var.get('key'),'node':var.get('value'),'scope':var.get('scope')})
            var.put('value', PyJsComma(Js(0.0),var.get('_babelHelperFunctionName2').get('default'))(PyJs_Object_675_))
        if var.get('value'):
            var.get('t').callprop('inheritsComments', var.get('value'), var.get('node'))
            var.get('map').put(var.get('kind'), var.get('value'))
        return var.get('map')
    PyJsHoisted_push_.__name__ = 'push'
    var.put('push', PyJsHoisted_push_)
    @Js
    def PyJsHoisted_toClassObject_(mutatorMap, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'mutatorMap':mutatorMap}, var)
        var.registers(['objExpr', 'mutatorMap'])
        var.put('objExpr', var.get('t').callprop('objectExpression', Js([])))
        @Js
        def PyJs_anonymous_676_(map, this, arguments, var=var):
            var = Scope({'this':this, 'map':map, 'arguments':arguments}, var)
            var.registers(['mapNode', 'propNode', 'map'])
            var.put('mapNode', var.get('t').callprop('objectExpression', Js([])))
            var.put('propNode', var.get('t').callprop('objectProperty', var.get('map').get('_key'), var.get('mapNode'), var.get('map').get('_computed')))
            @Js
            def PyJs_anonymous_677_(node, key, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments, 'key':key}, var)
                var.registers(['node', 'inheritNode', 'key', 'prop'])
                if PyJsStrictEq(var.get('key').get('0'),Js('_')):
                    return var.get('undefined')
                var.put('inheritNode', var.get('node'))
                if (var.get('t').callprop('isClassMethod', var.get('node')) or var.get('t').callprop('isClassProperty', var.get('node'))):
                    var.put('node', var.get('node').get('value'))
                var.put('prop', var.get('t').callprop('objectProperty', var.get('t').callprop('identifier', var.get('key')), var.get('node')))
                var.get('t').callprop('inheritsComments', var.get('prop'), var.get('inheritNode'))
                var.get('t').callprop('removeComments', var.get('inheritNode'))
                var.get('mapNode').get('properties').callprop('push', var.get('prop'))
            PyJs_anonymous_677_._set_name('anonymous')
            PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('map'), PyJs_anonymous_677_)
            var.get('objExpr').get('properties').callprop('push', var.get('propNode'))
        PyJs_anonymous_676_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('mutatorMap'), PyJs_anonymous_676_)
        return var.get('objExpr')
    PyJsHoisted_toClassObject_.__name__ = 'toClassObject'
    var.put('toClassObject', PyJsHoisted_toClassObject_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_672_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_672_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_toKind_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if (var.get('t').callprop('isClassMethod', var.get('node')) or var.get('t').callprop('isObjectMethod', var.get('node'))):
            if (PyJsStrictEq(var.get('node').get('kind'),Js('get')) or PyJsStrictEq(var.get('node').get('kind'),Js('set'))):
                return var.get('node').get('kind')
        return Js('value')
    PyJsHoisted_toKind_.__name__ = 'toKind'
    var.put('toKind', PyJsHoisted_toKind_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('push', var.get('push'))
    var.get('exports').put('hasComputed', var.get('hasComputed'))
    var.get('exports').put('toComputedObjectFromClass', var.get('toComputedObjectFromClass'))
    var.get('exports').put('toClassObject', var.get('toClassObject'))
    var.get('exports').put('toDefineObject', var.get('toDefineObject'))
    var.put('_babelHelperFunctionName', var.get('require')(Js('babel-helper-function-name')))
    var.put('_babelHelperFunctionName2', var.get('_interopRequireDefault')(var.get('_babelHelperFunctionName')))
    var.put('_each', var.get('require')(Js('lodash/each')))
    var.put('_each2', var.get('_interopRequireDefault')(var.get('_each')))
    var.put('_has', var.get('require')(Js('lodash/has')))
    var.put('_has2', var.get('_interopRequireDefault')(var.get('_has')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_670_._set_name('anonymous')
PyJs_Object_679_ = Js({'babel-helper-function-name':Js(49.0),'babel-types':Js(258.0),'lodash/each':Js(443.0),'lodash/has':Js(453.0)})
@Js
def PyJs_anonymous_680_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'exports', '_interopRequireWildcard', 'visitor', '_babelHelperGetFunctionArity', '_babelTypes', 'visit', '_babelHelperGetFunctionArity2', 'wrap', '_babelTemplate', 'buildPropertyMethodAssignmentWrapper', '_babelTemplate2', 't', '_interopRequireDefault', 'require', 'buildGeneratorPropertyMethodAssignmentWrapper'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_684_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_684_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_wrap_(state, method, id, scope, this, arguments, var=var):
        var = Scope({'state':state, 'arguments':arguments, 'this':this, 'scope':scope, 'method':method, 'id':id}, var)
        var.registers(['i', 'len', 'id', 'state', 'params', 'build', '_template', 'scope', 'method'])
        if var.get('state').get('selfReference'):
            if (var.get('scope').callprop('hasBinding', var.get('id').get('name')) and var.get('scope').callprop('hasGlobal', var.get('id').get('name')).neg()):
                var.get('scope').callprop('rename', var.get('id').get('name'))
            else:
                if var.get('t').callprop('isFunction', var.get('method')).neg():
                    return var.get('undefined')
                var.put('build', var.get('buildPropertyMethodAssignmentWrapper'))
                if var.get('method').get('generator'):
                    var.put('build', var.get('buildGeneratorPropertyMethodAssignmentWrapper'))
                PyJs_Object_687_ = Js({'FUNCTION':var.get('method'),'FUNCTION_ID':var.get('id'),'FUNCTION_KEY':var.get('scope').callprop('generateUidIdentifier', var.get('id').get('name'))})
                var.put('_template', var.get('build')(PyJs_Object_687_).get('expression'))
                var.get('_template').get('callee').put('_skipModulesRemap', var.get('true'))
                var.put('params', var.get('_template').get('callee').get('body').get('body').get('0').get('params'))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('len', PyJsComma(Js(0.0),var.get('_babelHelperGetFunctionArity2').get('default'))(var.get('method')))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('params').callprop('push', var.get('scope').callprop('generateUidIdentifier', Js('x')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('_template')
        var.get('method').put('id', var.get('id'))
        var.get('scope').callprop('getProgramParent').get('references').put(var.get('id').get('name'), var.get('true'))
    PyJsHoisted_wrap_.__name__ = 'wrap'
    var.put('wrap', PyJsHoisted_wrap_)
    @Js
    def PyJsHoisted_visit_(node, name, scope, this, arguments, var=var):
        var = Scope({'node':node, 'scope':scope, 'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['node', 'scope', 'state', 'binding', 'name'])
        PyJs_Object_688_ = Js({'selfAssignment':Js(False),'selfReference':Js(False),'outerDeclar':var.get('scope').callprop('getBindingIdentifier', var.get('name')),'references':Js([]),'name':var.get('name')})
        var.put('state', PyJs_Object_688_)
        var.put('binding', var.get('scope').callprop('getOwnBinding', var.get('name')))
        if var.get('binding'):
            if PyJsStrictEq(var.get('binding').get('kind'),Js('param')):
                var.get('state').put('selfReference', var.get('true'))
            else:
                pass
        else:
            if (var.get('state').get('outerDeclar') or var.get('scope').callprop('hasGlobal', var.get('name'))):
                var.get('scope').callprop('traverse', var.get('node'), var.get('visitor'), var.get('state'))
        return var.get('state')
    PyJsHoisted_visit_.__name__ = 'visit'
    var.put('visit', PyJsHoisted_visit_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_683_ = Js({})
            var.put('newObj', PyJs_Object_683_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_681_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['node', 'name', 'parent', 'binding', 'state', 'scope', '_ref', 'id'])
        var.put('node', var.get('_ref').get('node'))
        var.put('parent', var.get('_ref').get('parent'))
        var.put('scope', var.get('_ref').get('scope'))
        var.put('id', var.get('_ref').get('id'))
        if var.get('node').get('id'):
            return var.get('undefined')
        PyJs_Object_682_ = Js({'kind':Js('method')})
        if ((var.get('t').callprop('isObjectProperty', var.get('parent')) or var.get('t').callprop('isObjectMethod', var.get('parent'), PyJs_Object_682_)) and (var.get('parent').get('computed').neg() or var.get('t').callprop('isLiteral', var.get('parent').get('key')))):
            var.put('id', var.get('parent').get('key'))
        else:
            if var.get('t').callprop('isVariableDeclarator', var.get('parent')):
                var.put('id', var.get('parent').get('id'))
                if var.get('t').callprop('isIdentifier', var.get('id')):
                    var.put('binding', var.get('scope').get('parent').callprop('getBinding', var.get('id').get('name')))
                    if ((var.get('binding') and var.get('binding').get('constant')) and PyJsStrictEq(var.get('scope').callprop('getBinding', var.get('id').get('name')),var.get('binding'))):
                        var.get('node').put('id', var.get('id'))
                        var.get('node').get('id').put(var.get('t').get('NOT_LOCAL_BINDING'), var.get('true'))
                        return var.get('undefined')
            else:
                if var.get('t').callprop('isAssignmentExpression', var.get('parent')):
                    var.put('id', var.get('parent').get('left'))
                else:
                    if var.get('id').neg():
                        return var.get('undefined')
        var.put('name', PyJsComma(Js(0.0), Js(None)))
        if (var.get('id') and var.get('t').callprop('isLiteral', var.get('id'))):
            var.put('name', var.get('id').get('value'))
        else:
            if (var.get('id') and var.get('t').callprop('isIdentifier', var.get('id'))):
                var.put('name', var.get('id').get('name'))
            else:
                return var.get('undefined')
        var.put('name', var.get('t').callprop('toBindingIdentifierName', var.get('name')))
        var.put('id', var.get('t').callprop('identifier', var.get('name')))
        var.get('id').put(var.get('t').get('NOT_LOCAL_BINDING'), var.get('true'))
        var.put('state', var.get('visit')(var.get('node'), var.get('name'), var.get('scope')))
        return (var.get('wrap')(var.get('state'), var.get('node'), var.get('id'), var.get('scope')) or var.get('node'))
    PyJs_anonymous_681_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_681_)
    var.put('_babelHelperGetFunctionArity', var.get('require')(Js('babel-helper-get-function-arity')))
    var.put('_babelHelperGetFunctionArity2', var.get('_interopRequireDefault')(var.get('_babelHelperGetFunctionArity')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('buildPropertyMethodAssignmentWrapper', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n')))
    var.put('buildGeneratorPropertyMethodAssignmentWrapper', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n')))
    @Js
    def PyJs_ReferencedIdentifierBindingIdentifier_686_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifierBindingIdentifier':PyJs_ReferencedIdentifierBindingIdentifier_686_, 'arguments':arguments}, var)
        var.registers(['path', 'state', 'localDeclar'])
        if PyJsStrictNeq(var.get('path').get('node').get('name'),var.get('state').get('name')):
            return var.get('undefined')
        var.put('localDeclar', var.get('path').get('scope').callprop('getBindingIdentifier', var.get('state').get('name')))
        if PyJsStrictNeq(var.get('localDeclar'),var.get('state').get('outerDeclar')):
            return var.get('undefined')
        var.get('state').put('selfReference', var.get('true'))
        var.get('path').callprop('stop')
    PyJs_ReferencedIdentifierBindingIdentifier_686_._set_name('ReferencedIdentifierBindingIdentifier')
    PyJs_Object_685_ = Js({'ReferencedIdentifier|BindingIdentifier':PyJs_ReferencedIdentifierBindingIdentifier_686_})
    var.put('visitor', PyJs_Object_685_)
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_680_._set_name('anonymous')
PyJs_Object_689_ = Js({'babel-helper-get-function-arity':Js(50.0),'babel-template':Js(221.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_690_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_692_ = Js({})
            var.put('newObj', PyJs_Object_692_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_691_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'node', 'params', 'param'])
        var.put('params', var.get('node').get('params'))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('params').get('length')):
            try:
                var.put('param', var.get('params').get(var.get('i')))
                if (var.get('t').callprop('isAssignmentPattern', var.get('param')) or var.get('t').callprop('isRestElement', var.get('param'))):
                    return var.get('i')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('params').get('length')
    PyJs_anonymous_691_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_691_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_690_._set_name('anonymous')
PyJs_Object_693_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_694_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', 'module', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_698_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_698_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_697_ = Js({})
            var.put('newObj', PyJs_Object_697_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_695_(path, emit, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'emit':emit, 'arguments':arguments}, var)
        var.registers(['path', 'kind', 'emit'])
        var.put('kind', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else Js('var')))
        PyJs_Object_696_ = Js({'kind':var.get('kind'),'emit':var.get('emit')})
        var.get('path').callprop('traverse', var.get('visitor'), PyJs_Object_696_)
    PyJs_anonymous_695_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_695_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_Scope_700_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'Scope':PyJs_Scope_700_}, var)
        var.registers(['path', 'state'])
        if PyJsStrictEq(var.get('state').get('kind'),Js('let')):
            var.get('path').callprop('skip')
    PyJs_Scope_700_._set_name('Scope')
    @Js
    def PyJs_Function_701_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_701_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Function_701_._set_name('Function')
    @Js
    def PyJs_VariableDeclaration_702_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'VariableDeclaration':PyJs_VariableDeclaration_702_}, var)
        var.registers(['_isArray', '_iterator', 'firstId', 'declarations', 'state', 'declar', '_i', 'path', 'nodes', '_ref', 'name'])
        if (var.get('state').get('kind') and PyJsStrictNeq(var.get('path').get('node').get('kind'),var.get('state').get('kind'))):
            return var.get('undefined')
        var.put('nodes', Js([]))
        var.put('declarations', var.get('path').callprop('get', Js('declarations')))
        var.put('firstId', PyJsComma(Js(0.0), Js(None)))
        #for JS loop
        var.put('_iterator', var.get('declarations'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('declar', var.get('_ref'))
            var.put('firstId', var.get('declar').get('node').get('id'))
            if var.get('declar').get('node').get('init'):
                var.get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('declar').get('node').get('id'), var.get('declar').get('node').get('init'))))
            for PyJsTemp in var.get('declar').callprop('getBindingIdentifiers'):
                var.put('name', PyJsTemp)
                var.get('state').callprop('emit', var.get('t').callprop('identifier', var.get('name')), var.get('name'))
        
        PyJs_Object_703_ = Js({'left':var.get('path').get('node')})
        if var.get('path').get('parentPath').callprop('isFor', PyJs_Object_703_):
            var.get('path').callprop('replaceWith', var.get('firstId'))
        else:
            var.get('path').callprop('replaceWithMultiple', var.get('nodes'))
    PyJs_VariableDeclaration_702_._set_name('VariableDeclaration')
    PyJs_Object_699_ = Js({'Scope':PyJs_Scope_700_,'Function':PyJs_Function_701_,'VariableDeclaration':PyJs_VariableDeclaration_702_})
    var.put('visitor', PyJs_Object_699_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_694_._set_name('anonymous')
PyJs_Object_704_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_705_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_708_ = Js({})
            var.put('newObj', PyJs_Object_708_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_706_(callee, thisNode, args, this, arguments, var=var):
        var = Scope({'thisNode':thisNode, 'this':this, 'args':args, 'callee':callee, 'arguments':arguments}, var)
        var.registers(['thisNode', 'args', 'callee'])
        PyJs_Object_707_ = Js({'name':Js('arguments')})
        if ((PyJsStrictEq(var.get('args').get('length'),Js(1.0)) and var.get('t').callprop('isSpreadElement', var.get('args').get('0'))) and var.get('t').callprop('isIdentifier', var.get('args').get('0').get('argument'), PyJs_Object_707_)):
            return var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('callee'), var.get('t').callprop('identifier', Js('apply'))), Js([var.get('thisNode'), var.get('args').get('0').get('argument')]))
        else:
            return var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('callee'), var.get('t').callprop('identifier', Js('call'))), Js([var.get('thisNode')]).callprop('concat', var.get('args')))
    PyJs_anonymous_706_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_706_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_705_._set_name('anonymous')
PyJs_Object_709_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_710_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'pullFlag', '_interopRequireWildcard', '_pull', 'is', '_babelTypes', 'module', '_pull2', 't', '_interopRequireDefault', 'require'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_712_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_712_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_is_(node, flag, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'flag':flag, 'arguments':arguments}, var)
        var.registers(['node', 'flag'])
        return (var.get('t').callprop('isRegExpLiteral', var.get('node')) and (var.get('node').get('flags').callprop('indexOf', var.get('flag'))>=Js(0.0)))
    PyJsHoisted_is_.__name__ = 'is'
    var.put('is', PyJsHoisted_is_)
    @Js
    def PyJsHoisted_pullFlag_(node, flag, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'flag':flag, 'arguments':arguments}, var)
        var.registers(['node', 'flag', 'flags'])
        var.put('flags', var.get('node').get('flags').callprop('split', Js('')))
        if (var.get('node').get('flags').callprop('indexOf', var.get('flag'))<Js(0.0)):
            return var.get('undefined')
        PyJsComma(Js(0.0),var.get('_pull2').get('default'))(var.get('flags'), var.get('flag'))
        var.get('node').put('flags', var.get('flags').callprop('join', Js('')))
    PyJsHoisted_pullFlag_.__name__ = 'pullFlag'
    var.put('pullFlag', PyJsHoisted_pullFlag_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_711_ = Js({})
            var.put('newObj', PyJs_Object_711_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('is', var.get('is'))
    var.get('exports').put('pullFlag', var.get('pullFlag'))
    var.put('_pull', var.get('require')(Js('lodash/pull')))
    var.put('_pull2', var.get('_interopRequireDefault')(var.get('_pull')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
PyJs_anonymous_710_._set_name('anonymous')
PyJs_Object_713_ = Js({'babel-types':Js(258.0),'lodash/pull':Js(481.0)})
@Js
def PyJs_anonymous_714_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getPrototypeOfExpression', 'exports', '_symbol2', 'isMemberExpressionSuper', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', 'messages', 'ReplaceSupers', 'module', '_babelHelperOptimiseCallExpression', 'HARDCORE_THIS_REF', '_symbol', 't', '_babelHelperOptimiseCallExpression2', '_interopRequireDefault', 'isIllegalBareSuper', '_classCallCheck3', '_classCallCheck2', '_babelMessages'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_716_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_716_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isIllegalBareSuper_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if var.get('t').callprop('isSuper', var.get('node')).neg():
            return Js(False)
        PyJs_Object_717_ = Js({'computed':Js(False)})
        if var.get('t').callprop('isMemberExpression', var.get('parent'), PyJs_Object_717_):
            return Js(False)
        PyJs_Object_718_ = Js({'callee':var.get('node')})
        if var.get('t').callprop('isCallExpression', var.get('parent'), PyJs_Object_718_):
            return Js(False)
        return var.get('true')
    PyJsHoisted_isIllegalBareSuper_.__name__ = 'isIllegalBareSuper'
    var.put('isIllegalBareSuper', PyJsHoisted_isIllegalBareSuper_)
    @Js
    def PyJsHoisted_isMemberExpressionSuper_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return (var.get('t').callprop('isMemberExpression', var.get('node')) and var.get('t').callprop('isSuper', var.get('node').get('object')))
    PyJsHoisted_isMemberExpressionSuper_.__name__ = 'isMemberExpressionSuper'
    var.put('isMemberExpressionSuper', PyJsHoisted_isMemberExpressionSuper_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_715_ = Js({})
            var.put('newObj', PyJs_Object_715_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_getPrototypeOfExpression_(objectRef, isStatic, this, arguments, var=var):
        var = Scope({'this':this, 'objectRef':objectRef, 'isStatic':isStatic, 'arguments':arguments}, var)
        var.registers(['objectRef', 'isStatic', 'targetRef'])
        var.put('targetRef', (var.get('objectRef') if var.get('isStatic') else var.get('t').callprop('memberExpression', var.get('objectRef'), var.get('t').callprop('identifier', Js('prototype')))))
        def PyJs_LONG_719_(var=var):
            return var.get('t').callprop('logicalExpression', Js('||'), var.get('t').callprop('memberExpression', var.get('targetRef'), var.get('t').callprop('identifier', Js('__proto__'))), var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('Object')), var.get('t').callprop('identifier', Js('getPrototypeOf'))), Js([var.get('targetRef')])))
        return PyJs_LONG_719_()
    PyJsHoisted_getPrototypeOfExpression_.__name__ = 'getPrototypeOfExpression'
    var.put('getPrototypeOfExpression', PyJsHoisted_getPrototypeOfExpression_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    var.put('_babelHelperOptimiseCallExpression', var.get('require')(Js('babel-helper-optimise-call-expression')))
    var.put('_babelHelperOptimiseCallExpression2', var.get('_interopRequireDefault')(var.get('_babelHelperOptimiseCallExpression')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('HARDCORE_THIS_REF', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
    pass
    pass
    pass
    @Js
    def PyJs_Function_721_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_721_, 'arguments':arguments}, var)
        var.registers(['path'])
        if var.get('path').callprop('inShadow', Js('this')).neg():
            var.get('path').callprop('skip')
    PyJs_Function_721_._set_name('Function')
    @Js
    def PyJs_ReturnStatement_722_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReturnStatement':PyJs_ReturnStatement_722_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if var.get('path').callprop('inShadow', Js('this')).neg():
            var.get('state').get('returns').callprop('push', var.get('path'))
    PyJs_ReturnStatement_722_._set_name('ReturnStatement')
    @Js
    def PyJs_ThisExpression_723_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ThisExpression':PyJs_ThisExpression_723_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if var.get('path').get('node').get(var.get('HARDCORE_THIS_REF')).neg():
            var.get('state').get('thises').callprop('push', var.get('path'))
    PyJs_ThisExpression_723_._set_name('ThisExpression')
    @Js
    def PyJs_enter_724_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'enter':PyJs_enter_724_}, var)
        var.registers(['callback', 'isBareSuper', 'state', 'result', 'path'])
        var.put('callback', var.get('state').get('specHandle'))
        if var.get('state').get('isLoose'):
            var.put('callback', var.get('state').get('looseHandle'))
        var.put('isBareSuper', (var.get('path').callprop('isCallExpression') and var.get('path').callprop('get', Js('callee')).callprop('isSuper')))
        var.put('result', var.get('callback').callprop('call', var.get('state'), var.get('path')))
        if var.get('result'):
            var.get('state').put('hasSuper', var.get('true'))
        if var.get('isBareSuper'):
            var.get('state').get('bareSupers').callprop('push', var.get('path'))
        if PyJsStrictEq(var.get('result'),var.get('true')):
            var.get('path').callprop('requeue')
        if (PyJsStrictNeq(var.get('result'),var.get('true')) and var.get('result')):
            if var.get('Array').callprop('isArray', var.get('result')):
                var.get('path').callprop('replaceWithMultiple', var.get('result'))
            else:
                var.get('path').callprop('replaceWith', var.get('result'))
    PyJs_enter_724_._set_name('enter')
    PyJs_Object_720_ = Js({'Function':PyJs_Function_721_,'ReturnStatement':PyJs_ReturnStatement_722_,'ThisExpression':PyJs_ThisExpression_723_,'enter':PyJs_enter_724_})
    var.put('visitor', PyJs_Object_720_)
    @Js
    def PyJs_anonymous_725_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['ReplaceSupers'])
        @Js
        def PyJsHoisted_ReplaceSupers_(opts, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['inClass', 'opts'])
            var.put('inClass', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js(False)))
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('ReplaceSupers'))
            var.get("this").put('forceSuperMemoisation', var.get('opts').get('forceSuperMemoisation'))
            var.get("this").put('methodPath', var.get('opts').get('methodPath'))
            var.get("this").put('methodNode', var.get('opts').get('methodNode'))
            var.get("this").put('superRef', var.get('opts').get('superRef'))
            var.get("this").put('isStatic', var.get('opts').get('isStatic'))
            var.get("this").put('hasSuper', Js(False))
            var.get("this").put('inClass', var.get('inClass'))
            var.get("this").put('isLoose', var.get('opts').get('isLoose'))
            var.get("this").put('scope', var.get("this").get('methodPath').get('scope'))
            var.get("this").put('file', var.get('opts').get('file'))
            var.get("this").put('opts', var.get('opts'))
            var.get("this").put('bareSupers', Js([]))
            var.get("this").put('returns', Js([]))
            var.get("this").put('thises', Js([]))
        PyJsHoisted_ReplaceSupers_.__name__ = 'ReplaceSupers'
        var.put('ReplaceSupers', PyJsHoisted_ReplaceSupers_)
        pass
        @Js
        def PyJs_getObjectRef_726_(this, arguments, var=var):
            var = Scope({'this':this, 'getObjectRef':PyJs_getObjectRef_726_, 'arguments':arguments}, var)
            var.registers([])
            return (var.get("this").get('opts').get('objectRef') or var.get("this").get('opts').callprop('getObjectRef'))
        PyJs_getObjectRef_726_._set_name('getObjectRef')
        var.get('ReplaceSupers').get('prototype').put('getObjectRef', PyJs_getObjectRef_726_)
        @Js
        def PyJs_setSuperProperty_727_(property, value, isComputed, this, arguments, var=var):
            var = Scope({'setSuperProperty':PyJs_setSuperProperty_727_, 'this':this, 'value':value, 'arguments':arguments, 'property':property, 'isComputed':isComputed}, var)
            var.registers(['property', 'value', 'isComputed'])
            def PyJs_LONG_728_(var=var):
                return var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('set')), Js([var.get('getPrototypeOfExpression')(var.get("this").callprop('getObjectRef'), var.get("this").get('isStatic')), (var.get('property') if var.get('isComputed') else var.get('t').callprop('stringLiteral', var.get('property').get('name'))), var.get('value'), var.get('t').callprop('thisExpression')]))
            return PyJs_LONG_728_()
        PyJs_setSuperProperty_727_._set_name('setSuperProperty')
        var.get('ReplaceSupers').get('prototype').put('setSuperProperty', PyJs_setSuperProperty_727_)
        @Js
        def PyJs_getSuperProperty_729_(property, isComputed, this, arguments, var=var):
            var = Scope({'this':this, 'getSuperProperty':PyJs_getSuperProperty_729_, 'property':property, 'arguments':arguments, 'isComputed':isComputed}, var)
            var.registers(['property', 'isComputed'])
            def PyJs_LONG_730_(var=var):
                return var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('get')), Js([var.get('getPrototypeOfExpression')(var.get("this").callprop('getObjectRef'), var.get("this").get('isStatic')), (var.get('property') if var.get('isComputed') else var.get('t').callprop('stringLiteral', var.get('property').get('name'))), var.get('t').callprop('thisExpression')]))
            return PyJs_LONG_730_()
        PyJs_getSuperProperty_729_._set_name('getSuperProperty')
        var.get('ReplaceSupers').get('prototype').put('getSuperProperty', PyJs_getSuperProperty_729_)
        @Js
        def PyJs_replace_731_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'replace':PyJs_replace_731_}, var)
            var.registers([])
            var.get("this").get('methodPath').callprop('traverse', var.get('visitor'), var.get("this"))
        PyJs_replace_731_._set_name('replace')
        var.get('ReplaceSupers').get('prototype').put('replace', PyJs_replace_731_)
        @Js
        def PyJs_getLooseSuperProperty_732_(id, parent, this, arguments, var=var):
            var = Scope({'this':this, 'getLooseSuperProperty':PyJs_getLooseSuperProperty_732_, 'id':id, 'parent':parent, 'arguments':arguments}, var)
            var.registers(['methodNode', 'superRef', 'id', 'parent'])
            var.put('methodNode', var.get("this").get('methodNode'))
            var.put('superRef', (var.get("this").get('superRef') or var.get('t').callprop('identifier', Js('Function'))))
            if PyJsStrictEq(var.get('parent').get('property'),var.get('id')):
                return var.get('undefined')
            else:
                PyJs_Object_733_ = Js({'callee':var.get('id')})
                if var.get('t').callprop('isCallExpression', var.get('parent'), PyJs_Object_733_):
                    return var.get('undefined')
                else:
                    if (var.get('t').callprop('isMemberExpression', var.get('parent')) and var.get('methodNode').get('static').neg()):
                        return var.get('t').callprop('memberExpression', var.get('superRef'), var.get('t').callprop('identifier', Js('prototype')))
                    else:
                        return var.get('superRef')
        PyJs_getLooseSuperProperty_732_._set_name('getLooseSuperProperty')
        var.get('ReplaceSupers').get('prototype').put('getLooseSuperProperty', PyJs_getLooseSuperProperty_732_)
        @Js
        def PyJs_looseHandle_734_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'looseHandle':PyJs_looseHandle_734_}, var)
            var.registers(['node', 'path', 'callee'])
            var.put('node', var.get('path').get('node'))
            if var.get('path').callprop('isSuper'):
                return var.get("this").callprop('getLooseSuperProperty', var.get('node'), var.get('path').get('parent'))
            else:
                if var.get('path').callprop('isCallExpression'):
                    var.put('callee', var.get('node').get('callee'))
                    if var.get('t').callprop('isMemberExpression', var.get('callee')).neg():
                        return var.get('undefined')
                    if var.get('t').callprop('isSuper', var.get('callee').get('object')).neg():
                        return var.get('undefined')
                    var.get('t').callprop('appendToMemberExpression', var.get('callee'), var.get('t').callprop('identifier', Js('call')))
                    var.get('node').get('arguments').callprop('unshift', var.get('t').callprop('thisExpression'))
                    return var.get('true')
        PyJs_looseHandle_734_._set_name('looseHandle')
        var.get('ReplaceSupers').get('prototype').put('looseHandle', PyJs_looseHandle_734_)
        @Js
        def PyJs_specHandleAssignmentExpression_735_(ref, path, node, this, arguments, var=var):
            var = Scope({'node':node, 'specHandleAssignmentExpression':PyJs_specHandleAssignmentExpression_735_, 'this':this, 'arguments':arguments, 'path':path, 'ref':ref}, var)
            var.registers(['node', 'path', 'ref'])
            if PyJsStrictEq(var.get('node').get('operator'),Js('=')):
                return var.get("this").callprop('setSuperProperty', var.get('node').get('left').get('property'), var.get('node').get('right'), var.get('node').get('left').get('computed'))
            else:
                var.put('ref', (var.get('ref') or var.get('path').get('scope').callprop('generateUidIdentifier', Js('ref'))))
                return Js([var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('ref'), var.get('node').get('left'))])), var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('node').get('left'), var.get('t').callprop('binaryExpression', var.get('node').get('operator').get('0'), var.get('ref'), var.get('node').get('right'))))])
        PyJs_specHandleAssignmentExpression_735_._set_name('specHandleAssignmentExpression')
        var.get('ReplaceSupers').get('prototype').put('specHandleAssignmentExpression', PyJs_specHandleAssignmentExpression_735_)
        @Js
        def PyJs_specHandle_736_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'specHandle':PyJs_specHandle_736_}, var)
            var.registers(['node', 'binary', 'superProperty', 'computed', 'parent', 'ref', 'args', 'path', 'property', 'callee'])
            var.put('property', PyJsComma(Js(0.0), Js(None)))
            var.put('computed', PyJsComma(Js(0.0), Js(None)))
            var.put('args', PyJsComma(Js(0.0), Js(None)))
            var.put('parent', var.get('path').get('parent'))
            var.put('node', var.get('path').get('node'))
            if var.get('isIllegalBareSuper')(var.get('node'), var.get('parent')):
                PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', var.get('messages').callprop('get', Js('classesIllegalBareSuper'))))
                raise PyJsTempException
            if var.get('t').callprop('isCallExpression', var.get('node')):
                var.put('callee', var.get('node').get('callee'))
                if var.get('t').callprop('isSuper', var.get('callee')):
                    return var.get('undefined')
                else:
                    if var.get('isMemberExpressionSuper')(var.get('callee')):
                        var.put('property', var.get('callee').get('property'))
                        var.put('computed', var.get('callee').get('computed'))
                        var.put('args', var.get('node').get('arguments'))
            else:
                if (var.get('t').callprop('isMemberExpression', var.get('node')) and var.get('t').callprop('isSuper', var.get('node').get('object'))):
                    var.put('property', var.get('node').get('property'))
                    var.put('computed', var.get('node').get('computed'))
                else:
                    if (var.get('t').callprop('isUpdateExpression', var.get('node')) and var.get('isMemberExpressionSuper')(var.get('node').get('argument'))):
                        var.put('binary', var.get('t').callprop('binaryExpression', var.get('node').get('operator').get('0'), var.get('node').get('argument'), var.get('t').callprop('numericLiteral', Js(1.0))))
                        if var.get('node').get('prefix'):
                            return var.get("this").callprop('specHandleAssignmentExpression', var.get("null"), var.get('path'), var.get('binary'))
                        else:
                            var.put('ref', var.get('path').get('scope').callprop('generateUidIdentifier', Js('ref')))
                            return var.get("this").callprop('specHandleAssignmentExpression', var.get('ref'), var.get('path'), var.get('binary')).callprop('concat', var.get('t').callprop('expressionStatement', var.get('ref')))
                    else:
                        if (var.get('t').callprop('isAssignmentExpression', var.get('node')) and var.get('isMemberExpressionSuper')(var.get('node').get('left'))):
                            return var.get("this").callprop('specHandleAssignmentExpression', var.get("null"), var.get('path'), var.get('node'))
            if var.get('property').neg():
                return var.get('undefined')
            var.put('superProperty', var.get("this").callprop('getSuperProperty', var.get('property'), var.get('computed')))
            if var.get('args'):
                return var.get("this").callprop('optimiseCall', var.get('superProperty'), var.get('args'))
            else:
                return var.get('superProperty')
        PyJs_specHandle_736_._set_name('specHandle')
        var.get('ReplaceSupers').get('prototype').put('specHandle', PyJs_specHandle_736_)
        @Js
        def PyJs_optimiseCall_737_(callee, args, this, arguments, var=var):
            var = Scope({'this':this, 'args':args, 'callee':callee, 'arguments':arguments, 'optimiseCall':PyJs_optimiseCall_737_}, var)
            var.registers(['thisNode', 'args', 'callee'])
            var.put('thisNode', var.get('t').callprop('thisExpression'))
            var.get('thisNode').put(var.get('HARDCORE_THIS_REF'), var.get('true'))
            return PyJsComma(Js(0.0),var.get('_babelHelperOptimiseCallExpression2').get('default'))(var.get('callee'), var.get('thisNode'), var.get('args'))
        PyJs_optimiseCall_737_._set_name('optimiseCall')
        var.get('ReplaceSupers').get('prototype').put('optimiseCall', PyJs_optimiseCall_737_)
        return var.get('ReplaceSupers')
    PyJs_anonymous_725_._set_name('anonymous')
    var.put('ReplaceSupers', PyJs_anonymous_725_())
    var.get('exports').put('default', var.get('ReplaceSupers'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_714_._set_name('anonymous')
PyJs_Object_738_ = Js({'babel-helper-optimise-call-expression':Js(52.0),'babel-messages':Js(57.0),'babel-runtime/core-js/symbol':Js(105.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_739_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', '_babelTemplate', 'module', 'helpers', '_interopRequireDefault', '_babelTemplate2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_740_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_740_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    pass
    PyJs_Object_741_ = Js({})
    var.put('helpers', PyJs_Object_741_)
    var.get('exports').put('default', var.get('helpers'))
    def PyJs_LONG_742_(var=var):
        return var.get('helpers').put('typeof', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (typeof Symbol === "function" && typeof Symbol.iterator === "symbol")\n    ? function (obj) { return typeof obj; }\n    : function (obj) {\n        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype\n          ? "symbol"\n          : typeof obj;\n      };\n')))
    PyJs_LONG_742_()
    def PyJs_LONG_743_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we\'re going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : \'\' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n'))
    var.get('helpers').put('jsx', PyJs_LONG_743_())
    def PyJs_LONG_744_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (iterable) {\n    if (typeof Symbol === "function") {\n      if (Symbol.asyncIterator) {\n        var method = iterable[Symbol.asyncIterator];\n        if (method != null) return method.call(iterable);\n      }\n      if (Symbol.iterator) {\n        return iterable[Symbol.iterator]();\n      }\n    }\n    throw new TypeError("Object is not async iterable");\n  })\n'))
    var.get('helpers').put('asyncIterator', PyJs_LONG_744_())
    def PyJs_LONG_745_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function () {\n    function AwaitValue(value) {\n      this.value = value;\n    }\n\n    function AsyncGenerator(gen) {\n      var front, back;\n\n      function send(key, arg) {\n        return new Promise(function (resolve, reject) {\n          var request = {\n            key: key,\n            arg: arg,\n            resolve: resolve,\n            reject: reject,\n            next: null\n          };\n\n          if (back) {\n            back = back.next = request;\n          } else {\n            front = back = request;\n            resume(key, arg);\n          }\n        });\n      }\n\n      function resume(key, arg) {\n        try {\n          var result = gen[key](arg)\n          var value = result.value;\n          if (value instanceof AwaitValue) {\n            Promise.resolve(value.value).then(\n              function (arg) { resume("next", arg); },\n              function (arg) { resume("throw", arg); });\n          } else {\n            settle(result.done ? "return" : "normal", result.value);\n          }\n        } catch (err) {\n          settle("throw", err);\n        }\n      }\n\n      function settle(type, value) {\n        switch (type) {\n          case "return":\n            front.resolve({ value: value, done: true });\n            break;\n          case "throw":\n            front.reject(value);\n            break;\n          default:\n            front.resolve({ value: value, done: false });\n            break;\n        }\n\n        front = front.next;\n        if (front) {\n          resume(front.key, front.arg);\n        } else {\n          back = null;\n        }\n      }\n\n      this._invoke = send;\n\n      // Hide "return" method if generator return is not supported\n      if (typeof gen.return !== "function") {\n        this.return = undefined;\n      }\n    }\n\n    if (typeof Symbol === "function" && Symbol.asyncIterator) {\n      AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; };\n    }\n\n    AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };\n    AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };\n    AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };\n\n    return {\n      wrap: function (fn) {\n        return function () {\n          return new AsyncGenerator(fn.apply(this, arguments));\n        };\n      },\n      await: function (value) {\n        return new AwaitValue(value);\n      }\n    };\n\n  })()\n'))
    var.get('helpers').put('asyncGenerator', PyJs_LONG_745_())
    def PyJs_LONG_746_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (inner, awaitWrap) {\n    var iter = {}, waiting = false;\n\n    function pump(key, value) {\n      waiting = true;\n      value = new Promise(function (resolve) { resolve(inner[key](value)); });\n      return { done: false, value: awaitWrap(value) };\n    };\n\n    if (typeof Symbol === "function" && Symbol.iterator) {\n      iter[Symbol.iterator] = function () { return this; };\n    }\n\n    iter.next = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n      return pump("next", value);\n    };\n\n    if (typeof inner.throw === "function") {\n      iter.throw = function (value) {\n        if (waiting) {\n          waiting = false;\n          throw value;\n        }\n        return pump("throw", value);\n      };\n    }\n\n    if (typeof inner.return === "function") {\n      iter.return = function (value) {\n        return pump("return", value);\n      };\n    }\n\n    return iter;\n  })\n'))
    var.get('helpers').put('asyncGeneratorDelegate', PyJs_LONG_746_())
    def PyJs_LONG_747_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step("next", value);\n            }, function (err) {\n              step("throw", err);\n            });\n          }\n        }\n\n        return step("next");\n      });\n    };\n  })\n'))
    var.get('helpers').put('asyncToGenerator', PyJs_LONG_747_())
    var.get('helpers').put('classCallCheck', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError("Cannot call a class as a function");\n    }\n  });\n')))
    def PyJs_LONG_748_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ("value" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n'))
    var.get('helpers').put('createClass', PyJs_LONG_748_())
    var.get('helpers').put('defineEnumerableProperties', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if ("value" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n')))
    def PyJs_LONG_749_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n'))
    var.get('helpers').put('defaults', PyJs_LONG_749_())
    def PyJs_LONG_750_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n'))
    var.get('helpers').put('defineProperty', PyJs_LONG_750_())
    def PyJs_LONG_751_(var=var):
        return var.get('helpers').put('extends', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n')))
    PyJs_LONG_751_()
    def PyJs_LONG_752_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if ("value" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n'))
    var.get('helpers').put('get', PyJs_LONG_752_())
    def PyJs_LONG_753_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (subClass, superClass) {\n    if (typeof superClass !== "function" && superClass !== null) {\n      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n'))
    var.get('helpers').put('inherits', PyJs_LONG_753_())
    var.get('helpers').put('instanceof', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (left, right) {\n    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n')))
    var.get('helpers').put('interopRequireDefault', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n')))
    def PyJs_LONG_754_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n'))
    var.get('helpers').put('interopRequireWildcard', PyJs_LONG_754_())
    var.get('helpers').put('newArrowCheck', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError("Cannot instantiate an arrow function");\n    }\n  });\n')))
    var.get('helpers').put('objectDestructuringEmpty', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj) {\n    if (obj == null) throw new TypeError("Cannot destructure undefined");\n  });\n')))
    var.get('helpers').put('objectWithoutProperties', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n')))
    var.get('helpers').put('possibleConstructorReturn', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n    }\n    return call && (typeof call === "object" || typeof call === "function") ? call : self;\n  });\n')))
    var.get('helpers').put('selfGlobal', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  typeof global === "undefined" ? self : global\n')))
    def PyJs_LONG_755_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if ("value" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n'))
    var.get('helpers').put('set', PyJs_LONG_755_())
    def PyJs_LONG_756_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i["return"]) _i["return"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError("Invalid attempt to destructure non-iterable instance");\n      }\n    };\n  })();\n'))
    var.get('helpers').put('slicedToArray', PyJs_LONG_756_())
    def PyJs_LONG_757_(var=var):
        return PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError("Invalid attempt to destructure non-iterable instance");\n    }\n  });\n'))
    var.get('helpers').put('slicedToArrayLoose', PyJs_LONG_757_())
    var.get('helpers').put('taggedTemplateLiteral', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n')))
    var.get('helpers').put('taggedTemplateLiteralLoose', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n')))
    var.get('helpers').put('temporalRef', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + " is not defined - temporal dead zone");\n    } else {\n      return val;\n    }\n  })\n')))
    var.get('helpers').put('temporalUndefined', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  ({})\n')))
    var.get('helpers').put('toArray', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n')))
    var.get('helpers').put('toConsumableArray', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n')))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_739_._set_name('anonymous')
PyJs_Object_758_ = Js({'babel-template':Js(221.0)})
@Js
def PyJs_anonymous_759_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'get', '_helpers2', 'require', 'list', '_helpers', '_keys2', '_keys', 'module', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_760_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_760_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_get_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name', 'fn'])
        var.put('fn', var.get('_helpers2').get('default').get(var.get('name')))
        if var.get('fn').neg():
            PyJsTempException = JsToPyException(var.get('ReferenceError').create((Js('Unknown helper ')+var.get('name'))))
            raise PyJsTempException
        return var.get('fn')().get('expression')
    PyJsHoisted_get_.__name__ = 'get'
    var.put('get', PyJsHoisted_get_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('list', var.get('undefined'))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.get('exports').put('get', var.get('get'))
    var.put('_helpers', var.get('require')(Js('./helpers')))
    var.put('_helpers2', var.get('_interopRequireDefault')(var.get('_helpers')))
    pass
    pass
    @Js
    def PyJs_anonymous_761_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return PyJsStrictNeq(var.get('name'),Js('__esModule'))
    PyJs_anonymous_761_._set_name('anonymous')
    @Js
    def PyJs_anonymous_762_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return (var.get('name').callprop('slice', Js(1.0)) if PyJsStrictEq(var.get('name').get('0'),Js('_')) else var.get('name'))
    PyJs_anonymous_762_._set_name('anonymous')
    var.put('list', var.get('exports').put('list', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('_helpers2').get('default')).callprop('map', PyJs_anonymous_762_).callprop('filter', PyJs_anonymous_761_)))
    var.get('exports').put('default', var.get('get'))
PyJs_anonymous_759_._set_name('anonymous')
PyJs_Object_763_ = Js({'./helpers':Js(55.0),'babel-runtime/core-js/object/keys':Js(103.0)})
@Js
def PyJs_anonymous_764_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_stringify2', '_interopRequireWildcard', 'get', 'require', 'parseArgs', 'MESSAGES', '_util', 'util', '_stringify', 'module', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_766_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_766_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_parseArgs_(args, this, arguments, var=var):
        var = Scope({'this':this, 'args':args, 'arguments':arguments}, var)
        var.registers(['args'])
        @Js
        def PyJs_anonymous_769_(val, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
            var.registers(['val'])
            if ((var.get('val')!=var.get("null")) and var.get('val').get('inspect')):
                return var.get('val').callprop('inspect')
            else:
                try:
                    return (PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('val')) or (var.get('val')+Js('')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_98138155 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        return var.get('util').callprop('inspect', var.get('val'))
                    finally:
                        if PyJsHolder_65_98138155 is not None:
                            var.own['e'] = PyJsHolder_65_98138155
                        else:
                            del var.own['e']
                        del PyJsHolder_65_98138155
        PyJs_anonymous_769_._set_name('anonymous')
        return var.get('args').callprop('map', PyJs_anonymous_769_)
    PyJsHoisted_parseArgs_.__name__ = 'parseArgs'
    var.put('parseArgs', PyJsHoisted_parseArgs_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_765_ = Js({})
            var.put('newObj', PyJs_Object_765_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_get_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['_len', '_key', 'args', 'key', 'msg'])
        #for JS loop
        var.put('_len', var.get('arguments').get('length'))
        var.put('args', var.get('Array')(((var.get('_len')-Js(1.0)) if (var.get('_len')>Js(1.0)) else Js(0.0))))
        var.put('_key', Js(1.0))
        while (var.get('_key')<var.get('_len')):
            try:
                var.get('args').put((var.get('_key')-Js(1.0)), var.get('arguments').get(var.get('_key')))
            finally:
                    (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
        var.put('msg', var.get('MESSAGES').get(var.get('key')))
        if var.get('msg').neg():
            PyJsTempException = JsToPyException(var.get('ReferenceError').create((Js('Unknown message ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('key')))))
            raise PyJsTempException
        var.put('args', var.get('parseArgs')(var.get('args')))
        @Js
        def PyJs_anonymous_768_(str, i, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['i', 'str'])
            return var.get('args').get((var.get('i')-Js(1.0)))
        PyJs_anonymous_768_._set_name('anonymous')
        return var.get('msg').callprop('replace', JsRegExp('/\\$(\\d+)/g'), PyJs_anonymous_768_)
    PyJsHoisted_get_.__name__ = 'get'
    var.put('get', PyJsHoisted_get_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('MESSAGES', var.get('undefined'))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.get('exports').put('get', var.get('get'))
    var.get('exports').put('parseArgs', var.get('parseArgs'))
    var.put('_util', var.get('require')(Js('util')))
    var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
    pass
    pass
    PyJs_Object_767_ = Js({'tailCallReassignmentDeopt':Js("Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence"),'classesIllegalBareSuper':Js('Illegal use of bare super'),'classesIllegalSuperCall':Js('Direct super call is illegal in non-constructor, use super.$1() instead'),'scopeDuplicateDeclaration':Js('Duplicate declaration $1'),'settersNoRest':Js("Setters aren't allowed to have a rest"),'noAssignmentsInForHead':Js('No assignments allowed in for-in/of head'),'expectedMemberExpressionOrIdentifier':Js('Expected type MemberExpression or Identifier'),'invalidParentForThisNode':Js("We don't know how to handle this node within the current parent - please open an issue"),'readOnly':Js('$1 is read-only'),'unknownForHead':Js('Unknown node type $1 in ForStatement'),'didYouMean':Js('Did you mean $1?'),'codeGeneratorDeopt':Js('Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.'),'missingTemplatesDirectory':Js('no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues'),'unsupportedOutputType':Js('Unsupported output type $1'),'illegalMethodName':Js('Illegal method name $1'),'lostTrackNodePath':Js("We lost track of this node's position, likely because the AST was directly manipulated"),'modulesIllegalExportName':Js('Illegal export $1'),'modulesDuplicateDeclarations':Js('Duplicate module declarations with the same source but in different scopes'),'undeclaredVariable':Js('Reference to undeclared variable $1'),'undeclaredVariableType':Js('Referencing a type alias outside of a type annotation'),'undeclaredVariableSuggestion':Js('Reference to undeclared variable $1 - did you mean $2?'),'traverseNeedsParent':Js('You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.'),'traverseVerifyRootFunction':Js("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?"),'traverseVerifyVisitorProperty':Js('You passed `traverse()` a visitor object with the property $1 that has the invalid property $2'),'traverseVerifyNodeType':Js("You gave us a visitor for the node type $1 but it's not a valid type"),'pluginNotObject':Js('Plugin $2 specified in $1 was expected to return an object when invoked but returned $3'),'pluginNotFunction':Js('Plugin $2 specified in $1 was expected to return a function but returned $3'),'pluginUnknown':Js('Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4'),'pluginInvalidProperty':Js('Plugin $2 specified in $1 provided an invalid property of $3')})
    var.put('MESSAGES', var.get('exports').put('MESSAGES', PyJs_Object_767_))
    pass
    pass
PyJs_anonymous_764_._set_name('anonymous')
PyJs_Object_770_ = Js({'babel-runtime/core-js/json/stringify':Js(97.0),'util':Js(534.0)})
@Js
def PyJs_anonymous_771_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_776_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_776_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_772_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'messages'])
        var.put('messages', var.get('_ref').get('messages'))
        @Js
        def PyJs_Scope_775_(_ref2, this, arguments, var=var):
            var = Scope({'this':this, 'Scope':PyJs_Scope_775_, '_ref2':_ref2, 'arguments':arguments}, var)
            var.registers(['_isArray', '_iterator', 'name', 'violation', '_ref3', 'binding', '_ref2', '_i', 'scope'])
            var.put('scope', var.get('_ref2').get('scope'))
            for PyJsTemp in var.get('scope').get('bindings'):
                var.put('name', PyJsTemp)
                var.put('binding', var.get('scope').get('bindings').get(var.get('name')))
                if (PyJsStrictNeq(var.get('binding').get('kind'),Js('const')) and PyJsStrictNeq(var.get('binding').get('kind'),Js('module'))):
                    continue
                #for JS loop
                var.put('_iterator', var.get('binding').get('constantViolations'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref3', var.get('_i').get('value'))
                    var.put('violation', var.get('_ref3'))
                    PyJsTempException = JsToPyException(var.get('violation').callprop('buildCodeFrameError', var.get('messages').callprop('get', Js('readOnly'), var.get('name'))))
                    raise PyJsTempException
                
        PyJs_Scope_775_._set_name('Scope')
        PyJs_Object_774_ = Js({'Scope':PyJs_Scope_775_})
        PyJs_Object_773_ = Js({'visitor':PyJs_Object_774_})
        return PyJs_Object_773_
    PyJs_anonymous_772_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_772_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_771_._set_name('anonymous')
PyJs_Object_777_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_778_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_779_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 't'])
        var.put('t', var.get('_ref').get('types'))
        @Js
        def PyJs_ArrowFunctionExpression_782_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_782_}, var)
            var.registers(['node', 'path', 'state', 'boundThis'])
            if var.get('state').get('opts').get('spec'):
                var.put('node', var.get('path').get('node'))
                if var.get('node').get('shadow'):
                    return var.get('undefined')
                PyJs_Object_783_ = Js({'this':Js(False)})
                var.get('node').put('shadow', PyJs_Object_783_)
                var.get('node').put('type', Js('FunctionExpression'))
                var.put('boundThis', var.get('t').callprop('thisExpression'))
                var.get('boundThis').put('_forceShadow', var.get('path'))
                var.get('path').callprop('ensureBlock')
                var.get('path').callprop('get', Js('body')).callprop('unshiftContainer', Js('body'), var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('state').callprop('addHelper', Js('newArrowCheck')), Js([var.get('t').callprop('thisExpression'), var.get('boundThis')]))))
                var.get('path').callprop('replaceWith', var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('node'), var.get('t').callprop('identifier', Js('bind'))), Js([var.get('t').callprop('thisExpression')])))
            else:
                var.get('path').callprop('arrowFunctionToShadowed')
        PyJs_ArrowFunctionExpression_782_._set_name('ArrowFunctionExpression')
        PyJs_Object_781_ = Js({'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_782_})
        PyJs_Object_780_ = Js({'visitor':PyJs_Object_781_})
        return PyJs_Object_780_
    PyJs_anonymous_779_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_779_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_778_._set_name('anonymous')
PyJs_Object_784_ = Js({})
@Js
def PyJs_anonymous_785_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_792_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_792_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_786_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 't', 'statementList'])
        @Js
        def PyJsHoisted_statementList_(key, path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'key':key}, var)
            var.registers(['key', 'paths', '_isArray', '_iterator', 'func', '_ref2', 'declar', '_i', 'path', '_path'])
            var.put('paths', var.get('path').callprop('get', var.get('key')))
            #for JS loop
            var.put('_iterator', var.get('paths'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('_path', var.get('_ref2'))
                var.put('func', var.get('_path').get('node'))
                if var.get('_path').callprop('isFunctionDeclaration').neg():
                    continue
                var.put('declar', var.get('t').callprop('variableDeclaration', Js('let'), Js([var.get('t').callprop('variableDeclarator', var.get('func').get('id'), var.get('t').callprop('toExpression', var.get('func')))])))
                var.get('declar').put('_blockHoist', Js(2.0))
                var.get('func').put('id', var.get("null"))
                var.get('_path').callprop('replaceWith', var.get('declar'))
            
        PyJsHoisted_statementList_.__name__ = 'statementList'
        var.put('statementList', PyJsHoisted_statementList_)
        var.put('t', var.get('_ref').get('types'))
        pass
        @Js
        def PyJs_BlockStatement_789_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'BlockStatement':PyJs_BlockStatement_789_}, var)
            var.registers(['node', 'path', 'parent'])
            var.put('node', var.get('path').get('node'))
            var.put('parent', var.get('path').get('parent'))
            PyJs_Object_790_ = Js({'body':var.get('node')})
            if (var.get('t').callprop('isFunction', var.get('parent'), PyJs_Object_790_) or var.get('t').callprop('isExportDeclaration', var.get('parent'))):
                return var.get('undefined')
            var.get('statementList')(Js('body'), var.get('path'))
        PyJs_BlockStatement_789_._set_name('BlockStatement')
        @Js
        def PyJs_SwitchCase_791_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'SwitchCase':PyJs_SwitchCase_791_, 'arguments':arguments}, var)
            var.registers(['path'])
            var.get('statementList')(Js('consequent'), var.get('path'))
        PyJs_SwitchCase_791_._set_name('SwitchCase')
        PyJs_Object_788_ = Js({'BlockStatement':PyJs_BlockStatement_789_,'SwitchCase':PyJs_SwitchCase_791_})
        PyJs_Object_787_ = Js({'visitor':PyJs_Object_788_})
        return PyJs_Object_787_
    PyJs_anonymous_786_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_786_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_785_._set_name('anonymous')
PyJs_Object_793_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_794_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_symbol2', 'continuationVisitor', 'loopLabelVisitor', '_babelTemplate', 'module', 'letReferenceFunctionVisitor', 'isVar', '_interopRequireDefault', 'loopNodeTo', '_extend', '_babelTraverse', 'convertBlockScopedToVar', '_tdz', 'BlockScoping', 'ignoreBlock', 'hoistVarDeclarationsVisitor', '_values2', '_extend2', '_create2', 'buildRetCheck', '_classCallCheck3', '_classCallCheck2', '_create', 'exports', '_babelTraverse2', '_interopRequireWildcard', '_babelTypes', '_symbol', 'isBlockScoped', 'loopVisitor', 'require', '_babelTemplate2', 't', '_values', 'letReferenceBlockVisitor'])
    @Js
    def PyJsHoisted_convertBlockScopedToVar_(path, node, parent, scope, this, arguments, var=var):
        var = Scope({'node':node, 'arguments':arguments, 'parent':parent, 'scope':scope, 'this':this, 'path':path}, var)
        var.registers(['node', 'name', 'moveBindingsToParent', 'i', 'binding', 'ids', 'declar', 'parent', 'parentScope', 'path', 'scope'])
        var.put('moveBindingsToParent', (var.get('arguments').get('4') if ((var.get('arguments').get('length')>Js(4.0)) and PyJsStrictNeq(var.get('arguments').get('4'),var.get('undefined'))) else Js(False)))
        if var.get('node').neg():
            var.put('node', var.get('path').get('node'))
        if var.get('t').callprop('isFor', var.get('parent')).neg():
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('node').get('declarations').get('length')):
                try:
                    var.put('declar', var.get('node').get('declarations').get(var.get('i')))
                    var.get('declar').put('init', (var.get('declar').get('init') or var.get('scope').callprop('buildUndefinedNode')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.get('node').put(var.get('t').get('BLOCK_SCOPED_SYMBOL'), var.get('true'))
        var.get('node').put('kind', Js('var'))
        if var.get('moveBindingsToParent'):
            var.put('parentScope', var.get('scope').callprop('getFunctionParent'))
            var.put('ids', var.get('path').callprop('getBindingIdentifiers'))
            for PyJsTemp in var.get('ids'):
                var.put('name', PyJsTemp)
                var.put('binding', var.get('scope').callprop('getOwnBinding', var.get('name')))
                if var.get('binding'):
                    var.get('binding').put('kind', Js('var'))
                var.get('scope').callprop('moveBindingTo', var.get('name'), var.get('parentScope'))
    PyJsHoisted_convertBlockScopedToVar_.__name__ = 'convertBlockScopedToVar'
    var.put('convertBlockScopedToVar', PyJsHoisted_convertBlockScopedToVar_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_802_ = Js({})
            var.put('newObj', PyJs_Object_802_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_ignoreBlock_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path'])
        return (var.get('t').callprop('isLoop', var.get('path').get('parent')) or var.get('t').callprop('isCatchClause', var.get('path').get('parent')))
    PyJsHoisted_ignoreBlock_.__name__ = 'ignoreBlock'
    var.put('ignoreBlock', PyJsHoisted_ignoreBlock_)
    @Js
    def PyJsHoisted_loopNodeTo_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isBreakStatement', var.get('node')):
            return Js('break')
        else:
            if var.get('t').callprop('isContinueStatement', var.get('node')):
                return Js('continue')
    PyJsHoisted_loopNodeTo_.__name__ = 'loopNodeTo'
    var.put('loopNodeTo', PyJsHoisted_loopNodeTo_)
    @Js
    def PyJsHoisted_isVar_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        PyJs_Object_804_ = Js({'kind':Js('var')})
        return (var.get('t').callprop('isVariableDeclaration', var.get('node'), PyJs_Object_804_) and var.get('isBlockScoped')(var.get('node')).neg())
    PyJsHoisted_isVar_.__name__ = 'isVar'
    var.put('isVar', PyJsHoisted_isVar_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_803_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_803_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isBlockScoped_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isVariableDeclaration', var.get('node')).neg():
            return Js(False)
        if var.get('node').get(var.get('t').get('BLOCK_SCOPED_SYMBOL')):
            return var.get('true')
        if (PyJsStrictNeq(var.get('node').get('kind'),Js('let')) and PyJsStrictNeq(var.get('node').get('kind'),Js('const'))):
            return Js(False)
        return var.get('true')
    PyJsHoisted_isBlockScoped_.__name__ = 'isBlockScoped'
    var.put('isBlockScoped', PyJsHoisted_isBlockScoped_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    @Js
    def PyJs_anonymous_795_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_VariableDeclaration_798_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'VariableDeclaration':PyJs_VariableDeclaration_798_}, var)
            var.registers(['node', 'decl', 'parent', 'i', 'file', 'path', 'scope', 'nodes', 'assign'])
            var.put('node', var.get('path').get('node'))
            var.put('parent', var.get('path').get('parent'))
            var.put('scope', var.get('path').get('scope'))
            if var.get('isBlockScoped')(var.get('node')).neg():
                return var.get('undefined')
            var.get('convertBlockScopedToVar')(var.get('path'), var.get("null"), var.get('parent'), var.get('scope'), var.get('true'))
            if var.get('node').get('_tdzThis'):
                var.put('nodes', Js([var.get('node')]))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('node').get('declarations').get('length')):
                    try:
                        var.put('decl', var.get('node').get('declarations').get(var.get('i')))
                        if var.get('decl').get('init'):
                            var.put('assign', var.get('t').callprop('assignmentExpression', Js('='), var.get('decl').get('id'), var.get('decl').get('init')))
                            var.get('assign').put('_ignoreBlockScopingTDZ', var.get('true'))
                            var.get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('assign')))
                        var.get('decl').put('init', var.get('file').callprop('addHelper', Js('temporalUndefined')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('node').put('_blockHoist', Js(2.0))
                if var.get('path').callprop('isCompletionRecord'):
                    var.get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('scope').callprop('buildUndefinedNode')))
                var.get('path').callprop('replaceWithMultiple', var.get('nodes'))
        PyJs_VariableDeclaration_798_._set_name('VariableDeclaration')
        @Js
        def PyJs_Loop_799_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'Loop':PyJs_Loop_799_, 'arguments':arguments, 'file':file}, var)
            var.registers(['node', 'blockScoping', 'parent', 'replace', 'file', 'path', 'scope'])
            var.put('node', var.get('path').get('node'))
            var.put('parent', var.get('path').get('parent'))
            var.put('scope', var.get('path').get('scope'))
            var.get('t').callprop('ensureBlock', var.get('node'))
            var.put('blockScoping', var.get('BlockScoping').create(var.get('path'), var.get('path').callprop('get', Js('body')), var.get('parent'), var.get('scope'), var.get('file')))
            var.put('replace', var.get('blockScoping').callprop('run'))
            if var.get('replace'):
                var.get('path').callprop('replaceWith', var.get('replace'))
        PyJs_Loop_799_._set_name('Loop')
        @Js
        def PyJs_CatchClause_800_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'CatchClause':PyJs_CatchClause_800_}, var)
            var.registers(['scope', 'blockScoping', 'file', 'parent', 'path'])
            var.put('parent', var.get('path').get('parent'))
            var.put('scope', var.get('path').get('scope'))
            var.put('blockScoping', var.get('BlockScoping').create(var.get("null"), var.get('path').callprop('get', Js('body')), var.get('parent'), var.get('scope'), var.get('file')))
            var.get('blockScoping').callprop('run')
        PyJs_CatchClause_800_._set_name('CatchClause')
        @Js
        def PyJs_BlockStatementSwitchStatementProgram_801_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'BlockStatementSwitchStatementProgram':PyJs_BlockStatementSwitchStatementProgram_801_, 'arguments':arguments, 'file':file}, var)
            var.registers(['path', 'blockScoping', 'file'])
            if var.get('ignoreBlock')(var.get('path')).neg():
                var.put('blockScoping', var.get('BlockScoping').create(var.get("null"), var.get('path'), var.get('path').get('parent'), var.get('path').get('scope'), var.get('file')))
                var.get('blockScoping').callprop('run')
        PyJs_BlockStatementSwitchStatementProgram_801_._set_name('BlockStatementSwitchStatementProgram')
        PyJs_Object_797_ = Js({'VariableDeclaration':PyJs_VariableDeclaration_798_,'Loop':PyJs_Loop_799_,'CatchClause':PyJs_CatchClause_800_,'BlockStatement|SwitchStatement|Program':PyJs_BlockStatementSwitchStatementProgram_801_})
        PyJs_Object_796_ = Js({'visitor':PyJs_Object_797_})
        return PyJs_Object_796_
    PyJs_anonymous_795_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_795_)
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_babelTraverse2', var.get('_interopRequireDefault')(var.get('_babelTraverse')))
    var.put('_tdz', var.get('require')(Js('./tdz')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_values', var.get('require')(Js('lodash/values')))
    var.put('_values2', var.get('_interopRequireDefault')(var.get('_values')))
    var.put('_extend', var.get('require')(Js('lodash/extend')))
    var.put('_extend2', var.get('_interopRequireDefault')(var.get('_extend')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    pass
    pass
    pass
    var.put('buildRetCheck', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  if (typeof RETURN === "object") return RETURN.v;\n')))
    pass
    pass
    pass
    @Js
    def PyJs_Function_806_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'Function':PyJs_Function_806_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        var.get('path').callprop('traverse', var.get('letReferenceFunctionVisitor'), var.get('state'))
        return var.get('path').callprop('skip')
    PyJs_Function_806_._set_name('Function')
    PyJs_Object_805_ = Js({'Function':PyJs_Function_806_})
    var.put('letReferenceBlockVisitor', var.get('_babelTraverse2').get('default').get('visitors').callprop('merge', Js([PyJs_Object_805_, var.get('_tdz').get('visitor')])))
    @Js
    def PyJs_ReferencedIdentifier_808_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_808_, 'arguments':arguments}, var)
        var.registers(['localBinding', 'path', 'state', 'ref'])
        var.put('ref', var.get('state').get('letReferences').get(var.get('path').get('node').get('name')))
        if var.get('ref').neg():
            return var.get('undefined')
        var.put('localBinding', var.get('path').get('scope').callprop('getBindingIdentifier', var.get('path').get('node').get('name')))
        if (var.get('localBinding') and PyJsStrictNeq(var.get('localBinding'),var.get('ref'))):
            return var.get('undefined')
        var.get('state').put('closurify', var.get('true'))
    PyJs_ReferencedIdentifier_808_._set_name('ReferencedIdentifier')
    PyJs_Object_807_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_808_})
    var.put('letReferenceFunctionVisitor', var.get('_babelTraverse2').get('default').get('visitors').callprop('merge', Js([PyJs_Object_807_, var.get('_tdz').get('visitor')])))
    @Js
    def PyJs_enter_810_(path, self, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'self':self, 'arguments':arguments, 'enter':PyJs_enter_810_}, var)
        var.registers(['node', 'path', 'nodes', 'self', 'parent'])
        var.put('node', var.get('path').get('node'))
        var.put('parent', var.get('path').get('parent'))
        if var.get('path').callprop('isForStatement'):
            if var.get('isVar')(var.get('node').get('init'), var.get('node')):
                var.put('nodes', var.get('self').callprop('pushDeclar', var.get('node').get('init')))
                if PyJsStrictEq(var.get('nodes').get('length'),Js(1.0)):
                    var.get('node').put('init', var.get('nodes').get('0'))
                else:
                    var.get('node').put('init', var.get('t').callprop('sequenceExpression', var.get('nodes')))
        else:
            if var.get('path').callprop('isFor'):
                if var.get('isVar')(var.get('node').get('left'), var.get('node')):
                    var.get('self').callprop('pushDeclar', var.get('node').get('left'))
                    var.get('node').put('left', var.get('node').get('left').get('declarations').get('0').get('id'))
            else:
                if var.get('isVar')(var.get('node'), var.get('parent')):
                    @Js
                    def PyJs_anonymous_811_(expr, this, arguments, var=var):
                        var = Scope({'this':this, 'expr':expr, 'arguments':arguments}, var)
                        var.registers(['expr'])
                        return var.get('t').callprop('expressionStatement', var.get('expr'))
                    PyJs_anonymous_811_._set_name('anonymous')
                    var.get('path').callprop('replaceWithMultiple', var.get('self').callprop('pushDeclar', var.get('node')).callprop('map', PyJs_anonymous_811_))
                else:
                    if var.get('path').callprop('isFunction'):
                        return var.get('path').callprop('skip')
    PyJs_enter_810_._set_name('enter')
    PyJs_Object_809_ = Js({'enter':PyJs_enter_810_})
    var.put('hoistVarDeclarationsVisitor', PyJs_Object_809_)
    @Js
    def PyJs_LabeledStatement_813_(_ref, state, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'LabeledStatement':PyJs_LabeledStatement_813_, 'state':state, 'arguments':arguments}, var)
        var.registers(['node', '_ref', 'state'])
        var.put('node', var.get('_ref').get('node'))
        var.get('state').get('innerLabels').callprop('push', var.get('node').get('label').get('name'))
    PyJs_LabeledStatement_813_._set_name('LabeledStatement')
    PyJs_Object_812_ = Js({'LabeledStatement':PyJs_LabeledStatement_813_})
    var.put('loopLabelVisitor', PyJs_Object_812_)
    @Js
    def PyJs_enter_815_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'enter':PyJs_enter_815_}, var)
        var.registers(['path', 'bindings', 'name', 'state'])
        if (var.get('path').callprop('isAssignmentExpression') or var.get('path').callprop('isUpdateExpression')):
            var.put('bindings', var.get('path').callprop('getBindingIdentifiers'))
            for PyJsTemp in var.get('bindings'):
                var.put('name', PyJsTemp)
                if PyJsStrictNeq(var.get('state').get('outsideReferences').get(var.get('name')),var.get('path').get('scope').callprop('getBindingIdentifier', var.get('name'))):
                    continue
                var.get('state').get('reassignments').put(var.get('name'), var.get('true'))
    PyJs_enter_815_._set_name('enter')
    PyJs_Object_814_ = Js({'enter':PyJs_enter_815_})
    var.put('continuationVisitor', PyJs_Object_814_)
    pass
    @Js
    def PyJs_Loop_817_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'Loop':PyJs_Loop_817_}, var)
        var.registers(['oldIgnoreLabeless', 'state', 'path'])
        var.put('oldIgnoreLabeless', var.get('state').get('ignoreLabeless'))
        var.get('state').put('ignoreLabeless', var.get('true'))
        var.get('path').callprop('traverse', var.get('loopVisitor'), var.get('state'))
        var.get('state').put('ignoreLabeless', var.get('oldIgnoreLabeless'))
        var.get('path').callprop('skip')
    PyJs_Loop_817_._set_name('Loop')
    @Js
    def PyJs_Function_818_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_818_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Function_818_._set_name('Function')
    @Js
    def PyJs_SwitchCase_819_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'SwitchCase':PyJs_SwitchCase_819_}, var)
        var.registers(['oldInSwitchCase', 'state', 'path'])
        var.put('oldInSwitchCase', var.get('state').get('inSwitchCase'))
        var.get('state').put('inSwitchCase', var.get('true'))
        var.get('path').callprop('traverse', var.get('loopVisitor'), var.get('state'))
        var.get('state').put('inSwitchCase', var.get('oldInSwitchCase'))
        var.get('path').callprop('skip')
    PyJs_SwitchCase_819_._set_name('SwitchCase')
    @Js
    def PyJs_BreakStatementContinueStatementReturnStatement_820_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'BreakStatementContinueStatementReturnStatement':PyJs_BreakStatementContinueStatementReturnStatement_820_}, var)
        var.registers(['node', 'parent', 'loopText', 'replace', 'state', 'path', 'scope'])
        var.put('node', var.get('path').get('node'))
        var.put('parent', var.get('path').get('parent'))
        var.put('scope', var.get('path').get('scope'))
        if var.get('node').get(var.get("this").get('LOOP_IGNORE')):
            return var.get('undefined')
        var.put('replace', PyJsComma(Js(0.0), Js(None)))
        var.put('loopText', var.get('loopNodeTo')(var.get('node')))
        if var.get('loopText'):
            if var.get('node').get('label'):
                if (var.get('state').get('innerLabels').callprop('indexOf', var.get('node').get('label').get('name'))>=Js(0.0)):
                    return var.get('undefined')
                var.put('loopText', ((var.get('loopText')+Js('|'))+var.get('node').get('label').get('name')))
            else:
                if var.get('state').get('ignoreLabeless'):
                    return var.get('undefined')
                if var.get('state').get('inSwitchCase'):
                    return var.get('undefined')
                if (var.get('t').callprop('isBreakStatement', var.get('node')) and var.get('t').callprop('isSwitchCase', var.get('parent'))):
                    return var.get('undefined')
            var.get('state').put('hasBreakContinue', var.get('true'))
            var.get('state').get('map').put(var.get('loopText'), var.get('node'))
            var.put('replace', var.get('t').callprop('stringLiteral', var.get('loopText')))
        if var.get('path').callprop('isReturnStatement'):
            var.get('state').put('hasReturn', var.get('true'))
            var.put('replace', var.get('t').callprop('objectExpression', Js([var.get('t').callprop('objectProperty', var.get('t').callprop('identifier', Js('v')), (var.get('node').get('argument') or var.get('scope').callprop('buildUndefinedNode')))])))
        if var.get('replace'):
            var.put('replace', var.get('t').callprop('returnStatement', var.get('replace')))
            var.get('replace').put(var.get("this").get('LOOP_IGNORE'), var.get('true'))
            var.get('path').callprop('skip')
            var.get('path').callprop('replaceWith', var.get('t').callprop('inherits', var.get('replace'), var.get('node')))
    PyJs_BreakStatementContinueStatementReturnStatement_820_._set_name('BreakStatementContinueStatementReturnStatement')
    PyJs_Object_816_ = Js({'Loop':PyJs_Loop_817_,'Function':PyJs_Function_818_,'SwitchCase':PyJs_SwitchCase_819_,'BreakStatement|ContinueStatement|ReturnStatement':PyJs_BreakStatementContinueStatementReturnStatement_820_})
    var.put('loopVisitor', PyJs_Object_816_)
    @Js
    def PyJs_anonymous_821_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['BlockScoping'])
        @Js
        def PyJsHoisted_BlockScoping_(loopPath, blockPath, parent, scope, file, this, arguments, var=var):
            var = Scope({'arguments':arguments, 'parent':parent, 'file':file, 'blockPath':blockPath, 'this':this, 'scope':scope, 'loopPath':loopPath}, var)
            var.registers(['scope', 'blockPath', 'file', 'parent', 'loopPath'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('BlockScoping'))
            var.get("this").put('parent', var.get('parent'))
            var.get("this").put('scope', var.get('scope'))
            var.get("this").put('file', var.get('file'))
            var.get("this").put('blockPath', var.get('blockPath'))
            var.get("this").put('block', var.get('blockPath').get('node'))
            var.get("this").put('outsideLetReferences', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('hasLetReferences', Js(False))
            var.get("this").put('letReferences', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('body', Js([]))
            if var.get('loopPath'):
                var.get("this").put('loopParent', var.get('loopPath').get('parent'))
                var.get("this").put('loopLabel', (var.get('t').callprop('isLabeledStatement', var.get("this").get('loopParent')) and var.get("this").get('loopParent').get('label')))
                var.get("this").put('loopPath', var.get('loopPath'))
                var.get("this").put('loop', var.get('loopPath').get('node'))
        PyJsHoisted_BlockScoping_.__name__ = 'BlockScoping'
        var.put('BlockScoping', PyJsHoisted_BlockScoping_)
        pass
        @Js
        def PyJs_run_822_(this, arguments, var=var):
            var = Scope({'this':this, 'run':PyJs_run_822_, 'arguments':arguments}, var)
            var.registers(['needsClosure', 'block'])
            var.put('block', var.get("this").get('block'))
            if var.get('block').get('_letDone'):
                return var.get('undefined')
            var.get('block').put('_letDone', var.get('true'))
            var.put('needsClosure', var.get("this").callprop('getLetReferences'))
            if (var.get('t').callprop('isFunction', var.get("this").get('parent')) or var.get('t').callprop('isProgram', var.get("this").get('block'))):
                var.get("this").callprop('updateScopeInfo')
                return var.get('undefined')
            if var.get("this").get('hasLetReferences').neg():
                return var.get('undefined')
            if var.get('needsClosure'):
                var.get("this").callprop('wrapClosure')
            else:
                var.get("this").callprop('remap')
            var.get("this").callprop('updateScopeInfo')
            if (var.get("this").get('loopLabel') and var.get('t').callprop('isLabeledStatement', var.get("this").get('loopParent')).neg()):
                return var.get('t').callprop('labeledStatement', var.get("this").get('loopLabel'), var.get("this").get('loop'))
        PyJs_run_822_._set_name('run')
        var.get('BlockScoping').get('prototype').put('run', PyJs_run_822_)
        @Js
        def PyJs_updateScopeInfo_823_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'updateScopeInfo':PyJs_updateScopeInfo_823_}, var)
            var.registers(['letRefs', 'binding', 'key', 'parentScope', 'scope', 'ref'])
            var.put('scope', var.get("this").get('scope'))
            var.put('parentScope', var.get('scope').callprop('getFunctionParent'))
            var.put('letRefs', var.get("this").get('letReferences'))
            for PyJsTemp in var.get('letRefs'):
                var.put('key', PyJsTemp)
                var.put('ref', var.get('letRefs').get(var.get('key')))
                var.put('binding', var.get('scope').callprop('getBinding', var.get('ref').get('name')))
                if var.get('binding').neg():
                    continue
                if (PyJsStrictEq(var.get('binding').get('kind'),Js('let')) or PyJsStrictEq(var.get('binding').get('kind'),Js('const'))):
                    var.get('binding').put('kind', Js('var'))
                    var.get('scope').callprop('moveBindingTo', var.get('ref').get('name'), var.get('parentScope'))
        PyJs_updateScopeInfo_823_._set_name('updateScopeInfo')
        var.get('BlockScoping').get('prototype').put('updateScopeInfo', PyJs_updateScopeInfo_823_)
        @Js
        def PyJs_remap_824_(this, arguments, var=var):
            var = Scope({'this':this, 'remap':PyJs_remap_824_, 'arguments':arguments}, var)
            var.registers(['scope', 'ref', 'key', 'letRefs'])
            var.put('letRefs', var.get("this").get('letReferences'))
            var.put('scope', var.get("this").get('scope'))
            for PyJsTemp in var.get('letRefs'):
                var.put('key', PyJsTemp)
                var.put('ref', var.get('letRefs').get(var.get('key')))
                if (var.get('scope').callprop('parentHasBinding', var.get('key')) or var.get('scope').callprop('hasGlobal', var.get('key'))):
                    if var.get('scope').callprop('hasOwnBinding', var.get('key')):
                        var.get('scope').callprop('rename', var.get('ref').get('name'))
                    if var.get("this").get('blockPath').get('scope').callprop('hasOwnBinding', var.get('key')):
                        var.get("this").get('blockPath').get('scope').callprop('rename', var.get('ref').get('name'))
        PyJs_remap_824_._set_name('remap')
        var.get('BlockScoping').get('prototype').put('remap', PyJs_remap_824_)
        @Js
        def PyJs_wrapClosure_825_(this, arguments, var=var):
            var = Scope({'this':this, 'wrapClosure':PyJs_wrapClosure_825_, 'arguments':arguments}, var)
            var.registers(['hasYield', 'name', 'call', 'args', 'hasAsync', 'ret', 'params', 'fn', 'outsideRefs', 'isSwitch', 'ref', 'id', 'block'])
            var.put('block', var.get("this").get('block'))
            var.put('outsideRefs', var.get("this").get('outsideLetReferences'))
            if var.get("this").get('loop'):
                for PyJsTemp in var.get('outsideRefs'):
                    var.put('name', PyJsTemp)
                    var.put('id', var.get('outsideRefs').get(var.get('name')))
                    if (var.get("this").get('scope').callprop('hasGlobal', var.get('id').get('name')) or var.get("this").get('scope').callprop('parentHasBinding', var.get('id').get('name'))):
                        var.get('outsideRefs').delete(var.get('id').get('name'))
                        var.get("this").get('letReferences').delete(var.get('id').get('name'))
                        var.get("this").get('scope').callprop('rename', var.get('id').get('name'))
                        var.get("this").get('letReferences').put(var.get('id').get('name'), var.get('id'))
                        var.get('outsideRefs').put(var.get('id').get('name'), var.get('id'))
            var.get("this").put('has', var.get("this").callprop('checkLoop'))
            var.get("this").callprop('hoistVarDeclarations')
            var.put('params', PyJsComma(Js(0.0),var.get('_values2').get('default'))(var.get('outsideRefs')))
            var.put('args', PyJsComma(Js(0.0),var.get('_values2').get('default'))(var.get('outsideRefs')))
            var.put('isSwitch', var.get("this").get('blockPath').callprop('isSwitchStatement'))
            var.put('fn', var.get('t').callprop('functionExpression', var.get("null"), var.get('params'), var.get('t').callprop('blockStatement', (Js([var.get('block')]) if var.get('isSwitch') else var.get('block').get('body')))))
            var.get('fn').put('shadow', var.get('true'))
            var.get("this").callprop('addContinuations', var.get('fn'))
            var.put('ref', var.get('fn'))
            if var.get("this").get('loop'):
                var.put('ref', var.get("this").get('scope').callprop('generateUidIdentifier', Js('loop')))
                var.get("this").get('loopPath').callprop('insertBefore', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('ref'), var.get('fn'))])))
            var.put('call', var.get('t').callprop('callExpression', var.get('ref'), var.get('args')))
            var.put('ret', var.get("this").get('scope').callprop('generateUidIdentifier', Js('ret')))
            var.put('hasYield', var.get('_babelTraverse2').get('default').callprop('hasType', var.get('fn').get('body'), var.get("this").get('scope'), Js('YieldExpression'), var.get('t').get('FUNCTION_TYPES')))
            if var.get('hasYield'):
                var.get('fn').put('generator', var.get('true'))
                var.put('call', var.get('t').callprop('yieldExpression', var.get('call'), var.get('true')))
            var.put('hasAsync', var.get('_babelTraverse2').get('default').callprop('hasType', var.get('fn').get('body'), var.get("this").get('scope'), Js('AwaitExpression'), var.get('t').get('FUNCTION_TYPES')))
            if var.get('hasAsync'):
                var.get('fn').put('async', var.get('true'))
                var.put('call', var.get('t').callprop('awaitExpression', var.get('call')))
            var.get("this").callprop('buildClosure', var.get('ret'), var.get('call'))
            if var.get('isSwitch'):
                var.get("this").get('blockPath').callprop('replaceWithMultiple', var.get("this").get('body'))
            else:
                var.get('block').put('body', var.get("this").get('body'))
        PyJs_wrapClosure_825_._set_name('wrapClosure')
        var.get('BlockScoping').get('prototype').put('wrapClosure', PyJs_wrapClosure_825_)
        @Js
        def PyJs_buildClosure_826_(ret, call, this, arguments, var=var):
            var = Scope({'this':this, 'buildClosure':PyJs_buildClosure_826_, 'call':call, 'arguments':arguments, 'ret':ret}, var)
            var.registers(['has', 'call', 'ret'])
            var.put('has', var.get("this").get('has'))
            if (var.get('has').get('hasReturn') or var.get('has').get('hasBreakContinue')):
                var.get("this").callprop('buildHas', var.get('ret'), var.get('call'))
            else:
                var.get("this").get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('call')))
        PyJs_buildClosure_826_._set_name('buildClosure')
        var.get('BlockScoping').get('prototype').put('buildClosure', PyJs_buildClosure_826_)
        @Js
        def PyJs_addContinuations_827_(fn, this, arguments, var=var):
            var = Scope({'this':this, 'addContinuations':PyJs_addContinuations_827_, 'arguments':arguments, 'fn':fn}, var)
            var.registers(['i', 'state', 'newParam', 'param', 'fn'])
            PyJs_Object_829_ = Js({})
            PyJs_Object_828_ = Js({'reassignments':PyJs_Object_829_,'outsideReferences':var.get("this").get('outsideLetReferences')})
            var.put('state', PyJs_Object_828_)
            var.get("this").get('scope').callprop('traverse', var.get('fn'), var.get('continuationVisitor'), var.get('state'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('fn').get('params').get('length')):
                try:
                    var.put('param', var.get('fn').get('params').get(var.get('i')))
                    if var.get('state').get('reassignments').get(var.get('param').get('name')).neg():
                        continue
                    var.put('newParam', var.get("this").get('scope').callprop('generateUidIdentifier', var.get('param').get('name')))
                    var.get('fn').get('params').put(var.get('i'), var.get('newParam'))
                    var.get("this").get('scope').callprop('rename', var.get('param').get('name'), var.get('newParam').get('name'), var.get('fn'))
                    var.get('fn').get('body').get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('param'), var.get('newParam'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_addContinuations_827_._set_name('addContinuations')
        var.get('BlockScoping').get('prototype').put('addContinuations', PyJs_addContinuations_827_)
        @Js
        def PyJs_getLetReferences_830_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getLetReferences':PyJs_getLetReferences_830_}, var)
            var.registers(['_this', 'state', 'i', '_i2', 'j', 'declarPath', 'declarators', 'keys', 'init', 'declar', 'addDeclarationsFromChild', '_i', 'consequents', '_declarPath', '_declar', 'block'])
            var.put('_this', var.get("this"))
            var.put('block', var.get("this").get('block'))
            var.put('declarators', Js([]))
            if var.get("this").get('loop'):
                var.put('init', (var.get("this").get('loop').get('left') or var.get("this").get('loop').get('init')))
                if var.get('isBlockScoped')(var.get('init')):
                    var.get('declarators').callprop('push', var.get('init'))
                    PyJsComma(Js(0.0),var.get('_extend2').get('default'))(var.get("this").get('outsideLetReferences'), var.get('t').callprop('getBindingIdentifiers', var.get('init')))
            @Js
            def PyJs_addDeclarationsFromChild_831_(path, node, this, arguments, var=var):
                var = Scope({'node':node, 'path':path, 'this':this, 'arguments':arguments, 'addDeclarationsFromChild':PyJs_addDeclarationsFromChild_831_}, var)
                var.registers(['node', 'path'])
                var.put('node', (var.get('node') or var.get('path').get('node')))
                if ((var.get('t').callprop('isClassDeclaration', var.get('node')) or var.get('t').callprop('isFunctionDeclaration', var.get('node'))) or var.get('isBlockScoped')(var.get('node'))):
                    if var.get('isBlockScoped')(var.get('node')):
                        var.get('convertBlockScopedToVar')(var.get('path'), var.get('node'), var.get('block'), var.get('_this').get('scope'))
                    var.put('declarators', var.get('declarators').callprop('concat', (var.get('node').get('declarations') or var.get('node'))))
                if var.get('t').callprop('isLabeledStatement', var.get('node')):
                    var.get('addDeclarationsFromChild')(var.get('path').callprop('get', Js('body')), var.get('node').get('body'))
            PyJs_addDeclarationsFromChild_831_._set_name('addDeclarationsFromChild')
            var.put('addDeclarationsFromChild', PyJs_addDeclarationsFromChild_831_)
            if var.get('block').get('body'):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('block').get('body').get('length')):
                    try:
                        var.put('declarPath', var.get("this").get('blockPath').callprop('get', Js('body')).get(var.get('i')))
                        var.get('addDeclarationsFromChild')(var.get('declarPath'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('block').get('cases'):
                #for JS loop
                var.put('_i', Js(0.0))
                while (var.get('_i')<var.get('block').get('cases').get('length')):
                    try:
                        var.put('consequents', var.get('block').get('cases').get(var.get('_i')).get('consequent'))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('consequents').get('length')):
                            try:
                                var.put('_declarPath', var.get("this").get('blockPath').callprop('get', Js('cases')).get(var.get('_i')))
                                var.put('declar', var.get('consequents').get(var.get('j')))
                                var.get('addDeclarationsFromChild')(var.get('_declarPath'), var.get('declar'))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    finally:
                            (var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('_i2', Js(0.0))
            while (var.get('_i2')<var.get('declarators').get('length')):
                try:
                    var.put('_declar', var.get('declarators').get(var.get('_i2')))
                    var.put('keys', var.get('t').callprop('getBindingIdentifiers', var.get('_declar')))
                    PyJsComma(Js(0.0),var.get('_extend2').get('default'))(var.get("this").get('letReferences'), var.get('keys'))
                    var.get("this").put('hasLetReferences', var.get('true'))
                finally:
                        (var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))
            if var.get("this").get('hasLetReferences').neg():
                return var.get('undefined')
            PyJs_Object_832_ = Js({'letReferences':var.get("this").get('letReferences'),'closurify':Js(False),'file':var.get("this").get('file')})
            var.put('state', PyJs_Object_832_)
            var.get("this").get('blockPath').callprop('traverse', var.get('letReferenceBlockVisitor'), var.get('state'))
            return var.get('state').get('closurify')
        PyJs_getLetReferences_830_._set_name('getLetReferences')
        var.get('BlockScoping').get('prototype').put('getLetReferences', PyJs_getLetReferences_830_)
        @Js
        def PyJs_checkLoop_833_(this, arguments, var=var):
            var = Scope({'this':this, 'checkLoop':PyJs_checkLoop_833_, 'arguments':arguments}, var)
            var.registers(['state'])
            PyJs_Object_835_ = Js({})
            PyJs_Object_834_ = Js({'hasBreakContinue':Js(False),'ignoreLabeless':Js(False),'inSwitchCase':Js(False),'innerLabels':Js([]),'hasReturn':Js(False),'isLoop':var.get("this").get('loop').neg().neg(),'map':PyJs_Object_835_,'LOOP_IGNORE':PyJsComma(Js(0.0),var.get('_symbol2').get('default'))()})
            var.put('state', PyJs_Object_834_)
            var.get("this").get('blockPath').callprop('traverse', var.get('loopLabelVisitor'), var.get('state'))
            var.get("this").get('blockPath').callprop('traverse', var.get('loopVisitor'), var.get('state'))
            return var.get('state')
        PyJs_checkLoop_833_._set_name('checkLoop')
        var.get('BlockScoping').get('prototype').put('checkLoop', PyJs_checkLoop_833_)
        @Js
        def PyJs_hoistVarDeclarations_836_(this, arguments, var=var):
            var = Scope({'this':this, 'hoistVarDeclarations':PyJs_hoistVarDeclarations_836_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").get('blockPath').callprop('traverse', var.get('hoistVarDeclarationsVisitor'), var.get("this"))
        PyJs_hoistVarDeclarations_836_._set_name('hoistVarDeclarations')
        var.get('BlockScoping').get('prototype').put('hoistVarDeclarations', PyJs_hoistVarDeclarations_836_)
        @Js
        def PyJs_pushDeclar_837_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'pushDeclar':PyJs_pushDeclar_837_, 'arguments':arguments}, var)
            var.registers(['node', 'name', 'i', 'expr', 'declars', 'replace', 'declar', 'names'])
            var.put('declars', Js([]))
            var.put('names', var.get('t').callprop('getBindingIdentifiers', var.get('node')))
            for PyJsTemp in var.get('names'):
                var.put('name', PyJsTemp)
                var.get('declars').callprop('push', var.get('t').callprop('variableDeclarator', var.get('names').get(var.get('name'))))
            var.get("this").get('body').callprop('push', var.get('t').callprop('variableDeclaration', var.get('node').get('kind'), var.get('declars')))
            var.put('replace', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('node').get('declarations').get('length')):
                try:
                    var.put('declar', var.get('node').get('declarations').get(var.get('i')))
                    if var.get('declar').get('init').neg():
                        continue
                    var.put('expr', var.get('t').callprop('assignmentExpression', Js('='), var.get('declar').get('id'), var.get('declar').get('init')))
                    var.get('replace').callprop('push', var.get('t').callprop('inherits', var.get('expr'), var.get('declar')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('replace')
        PyJs_pushDeclar_837_._set_name('pushDeclar')
        var.get('BlockScoping').get('prototype').put('pushDeclar', PyJs_pushDeclar_837_)
        @Js
        def PyJs_buildHas_838_(ret, call, this, arguments, var=var):
            var = Scope({'this':this, 'buildHas':PyJs_buildHas_838_, 'call':call, 'arguments':arguments, 'ret':ret}, var)
            var.registers(['body', 'i', 'retCheck', 'ret', 'caseConsequent', 'single', 'call', 'key', 'cases', 'has'])
            var.put('body', var.get("this").get('body'))
            var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('ret'), var.get('call'))])))
            var.put('retCheck', PyJsComma(Js(0.0), Js(None)))
            var.put('has', var.get("this").get('has'))
            var.put('cases', Js([]))
            if var.get('has').get('hasReturn'):
                PyJs_Object_839_ = Js({'RETURN':var.get('ret')})
                var.put('retCheck', var.get('buildRetCheck')(PyJs_Object_839_))
            if var.get('has').get('hasBreakContinue'):
                for PyJsTemp in var.get('has').get('map'):
                    var.put('key', PyJsTemp)
                    var.get('cases').callprop('push', var.get('t').callprop('switchCase', var.get('t').callprop('stringLiteral', var.get('key')), Js([var.get('has').get('map').get(var.get('key'))])))
                if var.get('has').get('hasReturn'):
                    var.get('cases').callprop('push', var.get('t').callprop('switchCase', var.get("null"), Js([var.get('retCheck')])))
                if PyJsStrictEq(var.get('cases').get('length'),Js(1.0)):
                    var.put('single', var.get('cases').get('0'))
                    var.get('body').callprop('push', var.get('t').callprop('ifStatement', var.get('t').callprop('binaryExpression', Js('==='), var.get('ret'), var.get('single').get('test')), var.get('single').get('consequent').get('0')))
                else:
                    if var.get("this").get('loop'):
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('cases').get('length')):
                            try:
                                var.put('caseConsequent', var.get('cases').get(var.get('i')).get('consequent').get('0'))
                                if (var.get('t').callprop('isBreakStatement', var.get('caseConsequent')) and var.get('caseConsequent').get('label').neg()):
                                    var.get('caseConsequent').put('label', var.get("this").put('loopLabel', (var.get("this").get('loopLabel') or var.get("this").get('scope').callprop('generateUidIdentifier', Js('loop')))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('body').callprop('push', var.get('t').callprop('switchStatement', var.get('ret'), var.get('cases')))
            else:
                if var.get('has').get('hasReturn'):
                    var.get('body').callprop('push', var.get('retCheck'))
        PyJs_buildHas_838_._set_name('buildHas')
        var.get('BlockScoping').get('prototype').put('buildHas', PyJs_buildHas_838_)
        return var.get('BlockScoping')
    PyJs_anonymous_821_._set_name('anonymous')
    var.put('BlockScoping', PyJs_anonymous_821_())
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_794_._set_name('anonymous')
PyJs_Object_840_ = Js({'./tdz':Js(62.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-runtime/core-js/symbol':Js(105.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-template':Js(221.0),'babel-traverse':Js(225.0),'babel-types':Js(258.0),'lodash/extend':Js(446.0),'lodash/values':Js(496.0)})
@Js
def PyJs_anonymous_841_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', 'module', 'getTDZStatus', 't', 'buildTDZAssert', 'isReference'])
    @Js
    def PyJsHoisted_getTDZStatus_(refPath, bindingPath, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'refPath':refPath, 'bindingPath':bindingPath}, var)
        var.registers(['refPath', 'bindingPath', 'executionStatus'])
        var.put('executionStatus', var.get('bindingPath').callprop('_guessExecutionStatusRelativeTo', var.get('refPath')))
        if PyJsStrictEq(var.get('executionStatus'),Js('before')):
            return Js('inside')
        else:
            if PyJsStrictEq(var.get('executionStatus'),Js('after')):
                return Js('outside')
            else:
                return Js('maybe')
    PyJsHoisted_getTDZStatus_.__name__ = 'getTDZStatus'
    var.put('getTDZStatus', PyJsHoisted_getTDZStatus_)
    @Js
    def PyJsHoisted_buildTDZAssert_(node, file, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'file':file}, var)
        var.registers(['node', 'file'])
        return var.get('t').callprop('callExpression', var.get('file').callprop('addHelper', Js('temporalRef')), Js([var.get('node'), var.get('t').callprop('stringLiteral', var.get('node').get('name')), var.get('file').callprop('addHelper', Js('temporalUndefined'))]))
    PyJsHoisted_buildTDZAssert_.__name__ = 'buildTDZAssert'
    var.put('buildTDZAssert', PyJsHoisted_buildTDZAssert_)
    @Js
    def PyJsHoisted_isReference_(node, scope, state, this, arguments, var=var):
        var = Scope({'node':node, 'scope':scope, 'state':state, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'scope', 'declared', 'state'])
        var.put('declared', var.get('state').get('letReferences').get(var.get('node').get('name')))
        if var.get('declared').neg():
            return Js(False)
        return PyJsStrictEq(var.get('scope').callprop('getBindingIdentifier', var.get('node').get('name')),var.get('declared'))
    PyJsHoisted_isReference_.__name__ = 'isReference'
    var.put('isReference', PyJsHoisted_isReference_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_842_ = Js({})
            var.put('newObj', PyJs_Object_842_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('visitor', var.get('undefined'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    @Js
    def PyJs_ReferencedIdentifier_844_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_844_, 'arguments':arguments}, var)
        var.registers(['node', 'status', 'bindingPath', 'parent', 'assert', 'state', 'path', 'scope'])
        if var.get("this").get('file').get('opts').get('tdz').neg():
            return var.get('undefined')
        var.put('node', var.get('path').get('node'))
        var.put('parent', var.get('path').get('parent'))
        var.put('scope', var.get('path').get('scope'))
        PyJs_Object_845_ = Js({'left':var.get('node')})
        if var.get('path').get('parentPath').callprop('isFor', PyJs_Object_845_):
            return var.get('undefined')
        if var.get('isReference')(var.get('node'), var.get('scope'), var.get('state')).neg():
            return var.get('undefined')
        var.put('bindingPath', var.get('scope').callprop('getBinding', var.get('node').get('name')).get('path'))
        var.put('status', var.get('getTDZStatus')(var.get('path'), var.get('bindingPath')))
        if PyJsStrictEq(var.get('status'),Js('inside')):
            return var.get('undefined')
        if PyJsStrictEq(var.get('status'),Js('maybe')):
            var.put('assert', var.get('buildTDZAssert')(var.get('node'), var.get('state').get('file')))
            var.get('bindingPath').get('parent').put('_tdzThis', var.get('true'))
            var.get('path').callprop('skip')
            if var.get('path').get('parentPath').callprop('isUpdateExpression'):
                if var.get('parent').get('_ignoreBlockScopingTDZ'):
                    return var.get('undefined')
                var.get('path').get('parentPath').callprop('replaceWith', var.get('t').callprop('sequenceExpression', Js([var.get('assert'), var.get('parent')])))
            else:
                var.get('path').callprop('replaceWith', var.get('assert'))
        else:
            if PyJsStrictEq(var.get('status'),Js('outside')):
                var.get('path').callprop('replaceWith', var.get('t').callprop('throwStatement', var.get('t').callprop('inherits', var.get('t').callprop('newExpression', var.get('t').callprop('identifier', Js('ReferenceError')), Js([var.get('t').callprop('stringLiteral', (var.get('node').get('name')+Js(' is not defined - temporal dead zone')))])), var.get('node'))))
    PyJs_ReferencedIdentifier_844_._set_name('ReferencedIdentifier')
    @Js
    def PyJs_exit_847_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'exit':PyJs_exit_847_, 'arguments':arguments}, var)
        var.registers(['node', 'name', 'ids', 'state', 'path', 'nodes', 'id'])
        if var.get("this").get('file').get('opts').get('tdz').neg():
            return var.get('undefined')
        var.put('node', var.get('path').get('node'))
        if var.get('node').get('_ignoreBlockScopingTDZ'):
            return var.get('undefined')
        var.put('nodes', Js([]))
        var.put('ids', var.get('path').callprop('getBindingIdentifiers'))
        for PyJsTemp in var.get('ids'):
            var.put('name', PyJsTemp)
            var.put('id', var.get('ids').get(var.get('name')))
            if var.get('isReference')(var.get('id'), var.get('path').get('scope'), var.get('state')):
                var.get('nodes').callprop('push', var.get('buildTDZAssert')(var.get('id'), var.get('state').get('file')))
        if var.get('nodes').get('length'):
            var.get('node').put('_ignoreBlockScopingTDZ', var.get('true'))
            var.get('nodes').callprop('push', var.get('node'))
            var.get('path').callprop('replaceWithMultiple', var.get('nodes').callprop('map', var.get('t').get('expressionStatement')))
    PyJs_exit_847_._set_name('exit')
    PyJs_Object_846_ = Js({'exit':PyJs_exit_847_})
    PyJs_Object_843_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_844_,'AssignmentExpression':PyJs_Object_846_})
    var.put('visitor', var.get('exports').put('visitor', PyJs_Object_843_))
PyJs_anonymous_841_._set_name('anonymous')
PyJs_Object_848_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_849_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_vanilla', 'exports', '_symbol2', '_loose', 'require', '_babelHelperFunctionName', 'module', '_vanilla2', '_symbol', '_babelHelperFunctionName2', '_interopRequireDefault', '_loose2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_856_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_856_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_850_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['VISITED', '_ref', 't'])
        var.put('t', var.get('_ref').get('types'))
        var.put('VISITED', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
        @Js
        def PyJs_ExportDefaultDeclaration_853_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ExportDefaultDeclaration':PyJs_ExportDefaultDeclaration_853_}, var)
            var.registers(['node', 'path', 'ref'])
            if var.get('path').callprop('get', Js('declaration')).callprop('isClassDeclaration').neg():
                return var.get('undefined')
            var.put('node', var.get('path').get('node'))
            var.put('ref', (var.get('node').get('declaration').get('id') or var.get('path').get('scope').callprop('generateUidIdentifier', Js('class'))))
            var.get('node').get('declaration').put('id', var.get('ref'))
            var.get('path').callprop('replaceWith', var.get('node').get('declaration'))
            var.get('path').callprop('insertAfter', var.get('t').callprop('exportDefaultDeclaration', var.get('ref')))
        PyJs_ExportDefaultDeclaration_853_._set_name('ExportDefaultDeclaration')
        @Js
        def PyJs_ClassDeclaration_854_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'ClassDeclaration':PyJs_ClassDeclaration_854_, 'arguments':arguments}, var)
            var.registers(['node', 'path', 'ref'])
            var.put('node', var.get('path').get('node'))
            var.put('ref', (var.get('node').get('id') or var.get('path').get('scope').callprop('generateUidIdentifier', Js('class'))))
            var.get('path').callprop('replaceWith', var.get('t').callprop('variableDeclaration', Js('let'), Js([var.get('t').callprop('variableDeclarator', var.get('ref'), var.get('t').callprop('toExpression', var.get('node')))])))
        PyJs_ClassDeclaration_854_._set_name('ClassDeclaration')
        @Js
        def PyJs_ClassExpression_855_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'ClassExpression':PyJs_ClassExpression_855_}, var)
            var.registers(['node', 'path', 'state', 'inferred', 'Constructor'])
            var.put('node', var.get('path').get('node'))
            if var.get('node').get(var.get('VISITED')):
                return var.get('undefined')
            var.put('inferred', PyJsComma(Js(0.0),var.get('_babelHelperFunctionName2').get('default'))(var.get('path')))
            if (var.get('inferred') and PyJsStrictNeq(var.get('inferred'),var.get('node'))):
                return var.get('path').callprop('replaceWith', var.get('inferred'))
            var.get('node').put(var.get('VISITED'), var.get('true'))
            var.put('Constructor', var.get('_vanilla2').get('default'))
            if var.get('state').get('opts').get('loose'):
                var.put('Constructor', var.get('_loose2').get('default'))
            var.get('path').callprop('replaceWith', var.get('Constructor').create(var.get('path'), var.get('state').get('file')).callprop('run'))
        PyJs_ClassExpression_855_._set_name('ClassExpression')
        PyJs_Object_852_ = Js({'ExportDefaultDeclaration':PyJs_ExportDefaultDeclaration_853_,'ClassDeclaration':PyJs_ClassDeclaration_854_,'ClassExpression':PyJs_ClassExpression_855_})
        PyJs_Object_851_ = Js({'visitor':PyJs_Object_852_})
        return PyJs_Object_851_
    PyJs_anonymous_850_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_850_)
    var.put('_loose', var.get('require')(Js('./loose')))
    var.put('_loose2', var.get('_interopRequireDefault')(var.get('_loose')))
    var.put('_vanilla', var.get('require')(Js('./vanilla')))
    var.put('_vanilla2', var.get('_interopRequireDefault')(var.get('_vanilla')))
    var.put('_babelHelperFunctionName', var.get('require')(Js('babel-helper-function-name')))
    var.put('_babelHelperFunctionName2', var.get('_interopRequireDefault')(var.get('_babelHelperFunctionName')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_849_._set_name('anonymous')
PyJs_Object_857_ = Js({'./loose':Js(64.0),'./vanilla':Js(65.0),'babel-helper-function-name':Js(49.0),'babel-runtime/core-js/symbol':Js(105.0)})
@Js
def PyJs_anonymous_858_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_vanilla', 'LooseClassTransformer', '_vanilla2', 'exports', '_interopRequireWildcard', '_inherits3', '_inherits2', 'require', '_babelTypes', '_possibleConstructorReturn3', '_possibleConstructorReturn2', 'module', 't', '_babelHelperFunctionName', '_babelHelperFunctionName2', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_860_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_860_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_859_ = Js({})
            var.put('newObj', PyJs_Object_859_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_possibleConstructorReturn2', var.get('require')(Js('babel-runtime/helpers/possibleConstructorReturn')))
    var.put('_possibleConstructorReturn3', var.get('_interopRequireDefault')(var.get('_possibleConstructorReturn2')))
    var.put('_inherits2', var.get('require')(Js('babel-runtime/helpers/inherits')))
    var.put('_inherits3', var.get('_interopRequireDefault')(var.get('_inherits2')))
    var.put('_babelHelperFunctionName', var.get('require')(Js('babel-helper-function-name')))
    var.put('_babelHelperFunctionName2', var.get('_interopRequireDefault')(var.get('_babelHelperFunctionName')))
    var.put('_vanilla', var.get('require')(Js('./vanilla')))
    var.put('_vanilla2', var.get('_interopRequireDefault')(var.get('_vanilla')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_anonymous_861_(_VanillaTransformer, this, arguments, var=var):
        var = Scope({'this':this, '_VanillaTransformer':_VanillaTransformer, 'arguments':arguments}, var)
        var.registers(['LooseClassTransformer', '_VanillaTransformer'])
        @Js
        def PyJsHoisted_LooseClassTransformer_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_this'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('LooseClassTransformer'))
            var.put('_this', PyJsComma(Js(0.0),var.get('_possibleConstructorReturn3').get('default'))(var.get("this"), var.get('_VanillaTransformer').callprop('apply', var.get("this"), var.get('arguments'))))
            var.get('_this').put('isLoose', var.get('true'))
            return var.get('_this')
        PyJsHoisted_LooseClassTransformer_.__name__ = 'LooseClassTransformer'
        var.put('LooseClassTransformer', PyJsHoisted_LooseClassTransformer_)
        PyJsComma(Js(0.0),var.get('_inherits3').get('default'))(var.get('LooseClassTransformer'), var.get('_VanillaTransformer'))
        pass
        @Js
        def PyJs__processMethod_862_(node, scope, this, arguments, var=var):
            var = Scope({'node':node, 'scope':scope, '_processMethod':PyJs__processMethod_862_, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', 'methodName', 'func', 'expr', 'classRef', 'key', 'scope'])
            if var.get('node').get('decorators').neg():
                var.put('classRef', var.get("this").get('classRef'))
                if var.get('node').get('static').neg():
                    var.put('classRef', var.get('t').callprop('memberExpression', var.get('classRef'), var.get('t').callprop('identifier', Js('prototype'))))
                var.put('methodName', var.get('t').callprop('memberExpression', var.get('classRef'), var.get('node').get('key'), (var.get('node').get('computed') or var.get('t').callprop('isLiteral', var.get('node').get('key')))))
                var.put('func', var.get('t').callprop('functionExpression', var.get("null"), var.get('node').get('params'), var.get('node').get('body'), var.get('node').get('generator'), var.get('node').get('async')))
                var.get('func').put('returnType', var.get('node').get('returnType'))
                var.put('key', var.get('t').callprop('toComputedKey', var.get('node'), var.get('node').get('key')))
                if var.get('t').callprop('isStringLiteral', var.get('key')):
                    PyJs_Object_863_ = Js({'node':var.get('func'),'id':var.get('key'),'scope':var.get('scope')})
                    var.put('func', PyJsComma(Js(0.0),var.get('_babelHelperFunctionName2').get('default'))(PyJs_Object_863_))
                var.put('expr', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('methodName'), var.get('func'))))
                var.get('t').callprop('inheritsComments', var.get('expr'), var.get('node'))
                var.get("this").get('body').callprop('push', var.get('expr'))
                return var.get('true')
        PyJs__processMethod_862_._set_name('_processMethod')
        var.get('LooseClassTransformer').get('prototype').put('_processMethod', PyJs__processMethod_862_)
        return var.get('LooseClassTransformer')
    PyJs_anonymous_861_._set_name('anonymous')
    var.put('LooseClassTransformer', PyJs_anonymous_861_(var.get('_vanilla2').get('default')))
    var.get('exports').put('default', var.get('LooseClassTransformer'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_858_._set_name('anonymous')
PyJs_Object_864_ = Js({'./vanilla':Js(65.0),'babel-helper-function-name':Js(49.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-runtime/helpers/inherits':Js(111.0),'babel-runtime/helpers/possibleConstructorReturn':Js(113.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_865_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['defineMap', '_babelHelperDefineMap', 'verifyConstructorVisitor', '_babelTemplate', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_babelTraverse', 'findThisesVisitor', 'noMethodVisitor', '_babelHelperOptimiseCallExpression2', '_classCallCheck3', '_classCallCheck2', 'exports', '_interopRequireWildcard', '_babelTypes', 'buildDerivedConstructor', '_babelHelperReplaceSupers', '_babelHelperReplaceSupers2', 'require', '_babelHelperOptimiseCallExpression', 'ClassTransformer', '_babelTemplate2', 't'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_867_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_867_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_866_ = Js({})
            var.put('newObj', PyJs_Object_866_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_babelHelperReplaceSupers', var.get('require')(Js('babel-helper-replace-supers')))
    var.put('_babelHelperReplaceSupers2', var.get('_interopRequireDefault')(var.get('_babelHelperReplaceSupers')))
    var.put('_babelHelperOptimiseCallExpression', var.get('require')(Js('babel-helper-optimise-call-expression')))
    var.put('_babelHelperOptimiseCallExpression2', var.get('_interopRequireDefault')(var.get('_babelHelperOptimiseCallExpression')))
    var.put('_babelHelperDefineMap', var.get('require')(Js('babel-helper-define-map')))
    var.put('defineMap', var.get('_interopRequireWildcard')(var.get('_babelHelperDefineMap')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('buildDerivedConstructor', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function () {\n    super(...arguments);\n  })\n')))
    @Js
    def PyJs_FunctionExpressionFunctionDeclaration_869_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'FunctionExpressionFunctionDeclaration':PyJs_FunctionExpressionFunctionDeclaration_869_}, var)
        var.registers(['path'])
        if var.get('path').callprop('is', Js('shadow')).neg():
            var.get('path').callprop('skip')
    PyJs_FunctionExpressionFunctionDeclaration_869_._set_name('FunctionExpressionFunctionDeclaration')
    @Js
    def PyJs_Method_870_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'Method':PyJs_Method_870_}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Method_870_._set_name('Method')
    PyJs_Object_868_ = Js({'FunctionExpression|FunctionDeclaration':PyJs_FunctionExpressionFunctionDeclaration_869_,'Method':PyJs_Method_870_})
    var.put('noMethodVisitor', PyJs_Object_868_)
    @Js
    def PyJs_Super_872_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Super':PyJs_Super_872_, 'arguments':arguments}, var)
        var.registers(['path'])
        PyJs_Object_873_ = Js({'callee':var.get('path').get('node')})
        if ((var.get("this").get('isDerived') and var.get("this").get('hasBareSuper').neg()) and var.get('path').get('parentPath').callprop('isCallExpression', PyJs_Object_873_).neg()):
            PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js("'super.*' is not allowed before super()")))
            raise PyJsTempException
    PyJs_Super_872_._set_name('Super')
    @Js
    def PyJs_exit_875_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_875_, 'arguments':arguments}, var)
        var.registers(['path'])
        if var.get('path').callprop('get', Js('callee')).callprop('isSuper'):
            var.get("this").put('hasBareSuper', var.get('true'))
            if var.get("this").get('isDerived').neg():
                PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js('super() is only allowed in a derived constructor')))
                raise PyJsTempException
    PyJs_exit_875_._set_name('exit')
    PyJs_Object_874_ = Js({'exit':PyJs_exit_875_})
    @Js
    def PyJs_ThisExpression_876_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ThisExpression':PyJs_ThisExpression_876_, 'arguments':arguments}, var)
        var.registers(['path'])
        if (var.get("this").get('isDerived') and var.get("this").get('hasBareSuper').neg()):
            if var.get('path').callprop('inShadow', Js('this')).neg():
                PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js("'this' is not allowed before super()")))
                raise PyJsTempException
    PyJs_ThisExpression_876_._set_name('ThisExpression')
    PyJs_Object_871_ = Js({'Super':PyJs_Super_872_,'CallExpression':PyJs_Object_874_,'ThisExpression':PyJs_ThisExpression_876_})
    var.put('verifyConstructorVisitor', var.get('_babelTraverse').get('visitors').callprop('merge', Js([var.get('noMethodVisitor'), PyJs_Object_871_])))
    @Js
    def PyJs_ThisExpression_878_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ThisExpression':PyJs_ThisExpression_878_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get("this").get('superThises').callprop('push', var.get('path'))
    PyJs_ThisExpression_878_._set_name('ThisExpression')
    PyJs_Object_877_ = Js({'ThisExpression':PyJs_ThisExpression_878_})
    var.put('findThisesVisitor', var.get('_babelTraverse').get('visitors').callprop('merge', Js([var.get('noMethodVisitor'), PyJs_Object_877_])))
    @Js
    def PyJs_anonymous_879_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['ClassTransformer'])
        @Js
        def PyJsHoisted_ClassTransformer_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file}, var)
            var.registers(['path', 'file'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('ClassTransformer'))
            var.get("this").put('parent', var.get('path').get('parent'))
            var.get("this").put('scope', var.get('path').get('scope'))
            var.get("this").put('node', var.get('path').get('node'))
            var.get("this").put('path', var.get('path'))
            var.get("this").put('file', var.get('file'))
            var.get("this").callprop('clearDescriptors')
            var.get("this").put('instancePropBody', Js([]))
            PyJs_Object_880_ = Js({})
            var.get("this").put('instancePropRefs', PyJs_Object_880_)
            var.get("this").put('staticPropBody', Js([]))
            var.get("this").put('body', Js([]))
            var.get("this").put('bareSuperAfter', Js([]))
            var.get("this").put('bareSupers', Js([]))
            var.get("this").put('pushedConstructor', Js(False))
            var.get("this").put('pushedInherits', Js(False))
            var.get("this").put('isLoose', Js(False))
            var.get("this").put('superThises', Js([]))
            var.get("this").put('classId', var.get("this").get('node').get('id'))
            var.get("this").put('classRef', (var.get('t').callprop('identifier', var.get("this").get('node').get('id').get('name')) if var.get("this").get('node').get('id') else var.get("this").get('scope').callprop('generateUidIdentifier', Js('class'))))
            var.get("this").put('superName', (var.get("this").get('node').get('superClass') or var.get('t').callprop('identifier', Js('Function'))))
            var.get("this").put('isDerived', var.get("this").get('node').get('superClass').neg().neg())
        PyJsHoisted_ClassTransformer_.__name__ = 'ClassTransformer'
        var.put('ClassTransformer', PyJsHoisted_ClassTransformer_)
        pass
        @Js
        def PyJs_run_881_(this, arguments, var=var):
            var = Scope({'this':this, 'run':PyJs_run_881_, 'arguments':arguments}, var)
            var.registers(['body', 'container', '_this', 'file', 'superName', 'closureArgs', 'closureParams', 'constructorBody'])
            var.put('_this', var.get("this"))
            var.put('superName', var.get("this").get('superName'))
            var.put('file', var.get("this").get('file'))
            var.put('body', var.get("this").get('body'))
            var.put('constructorBody', var.get("this").put('constructorBody', var.get('t').callprop('blockStatement', Js([]))))
            var.get("this").put('constructor', var.get("this").callprop('buildConstructor'))
            var.put('closureParams', Js([]))
            var.put('closureArgs', Js([]))
            if var.get("this").get('isDerived'):
                var.get('closureArgs').callprop('push', var.get('superName'))
                var.put('superName', var.get("this").get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('superName')))
                var.get('closureParams').callprop('push', var.get('superName'))
                var.get("this").put('superName', var.get('superName'))
            var.get("this").callprop('buildBody')
            var.get('constructorBody').get('body').callprop('unshift', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('file').callprop('addHelper', Js('classCallCheck')), Js([var.get('t').callprop('thisExpression'), var.get("this").get('classRef')]))))
            @Js
            def PyJs_anonymous_882_(fn, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fn':fn}, var)
                var.registers(['fn'])
                return var.get('fn')(var.get('_this').get('classRef'))
            PyJs_anonymous_882_._set_name('anonymous')
            var.put('body', var.get('body').callprop('concat', var.get("this").get('staticPropBody').callprop('map', PyJs_anonymous_882_)))
            if var.get("this").get('classId'):
                if PyJsStrictEq(var.get('body').get('length'),Js(1.0)):
                    return var.get('t').callprop('toExpression', var.get('body').get('0'))
            var.get('body').callprop('push', var.get('t').callprop('returnStatement', var.get("this").get('classRef')))
            var.put('container', var.get('t').callprop('functionExpression', var.get("null"), var.get('closureParams'), var.get('t').callprop('blockStatement', var.get('body'))))
            var.get('container').put('shadow', var.get('true'))
            return var.get('t').callprop('callExpression', var.get('container'), var.get('closureArgs'))
        PyJs_run_881_._set_name('run')
        var.get('ClassTransformer').get('prototype').put('run', PyJs_run_881_)
        @Js
        def PyJs_buildConstructor_883_(this, arguments, var=var):
            var = Scope({'this':this, 'buildConstructor':PyJs_buildConstructor_883_, 'arguments':arguments}, var)
            var.registers(['func'])
            var.put('func', var.get('t').callprop('functionDeclaration', var.get("this").get('classRef'), Js([]), var.get("this").get('constructorBody')))
            var.get('t').callprop('inherits', var.get('func'), var.get("this").get('node'))
            return var.get('func')
        PyJs_buildConstructor_883_._set_name('buildConstructor')
        var.get('ClassTransformer').get('prototype').put('buildConstructor', PyJs_buildConstructor_883_)
        @Js
        def PyJs_pushToMap_884_(node, enumerable, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'pushToMap':PyJs_pushToMap_884_, 'enumerable':enumerable, 'arguments':arguments}, var)
            var.registers(['node', 'map', 'kind', 'scope', 'enumerable', 'mutatorMap'])
            var.put('kind', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else Js('value')))
            var.put('scope', var.get('arguments').get('3'))
            var.put('mutatorMap', PyJsComma(Js(0.0), Js(None)))
            if var.get('node').get('static'):
                var.get("this").put('hasStaticDescriptors', var.get('true'))
                var.put('mutatorMap', var.get("this").get('staticMutatorMap'))
            else:
                var.get("this").put('hasInstanceDescriptors', var.get('true'))
                var.put('mutatorMap', var.get("this").get('instanceMutatorMap'))
            var.put('map', var.get('defineMap').callprop('push', var.get('mutatorMap'), var.get('node'), var.get('kind'), var.get("this").get('file'), var.get('scope')))
            if var.get('enumerable'):
                var.get('map').put('enumerable', var.get('t').callprop('booleanLiteral', var.get('true')))
            return var.get('map')
        PyJs_pushToMap_884_._set_name('pushToMap')
        var.get('ClassTransformer').get('prototype').put('pushToMap', PyJs_pushToMap_884_)
        @Js
        def PyJs_constructorMeMaybe_885_(this, arguments, var=var):
            var = Scope({'this':this, 'constructorMeMaybe':PyJs_constructorMeMaybe_885_, 'arguments':arguments}, var)
            var.registers(['body', 'paths', '_isArray', '_iterator', '_constructor', 'params', '_i', 'path', 'hasConstructor', '_ref'])
            var.put('hasConstructor', Js(False))
            var.put('paths', var.get("this").get('path').callprop('get', Js('body.body')))
            #for JS loop
            var.put('_iterator', var.get('paths'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('path', var.get('_ref'))
                var.put('hasConstructor', var.get('path').callprop('equals', Js('kind'), Js('constructor')))
                if var.get('hasConstructor'):
                    break
            
            if var.get('hasConstructor'):
                return var.get('undefined')
            var.put('params', PyJsComma(Js(0.0), Js(None)))
            var.put('body', PyJsComma(Js(0.0), Js(None)))
            if var.get("this").get('isDerived'):
                var.put('_constructor', var.get('buildDerivedConstructor')().get('expression'))
                var.put('params', var.get('_constructor').get('params'))
                var.put('body', var.get('_constructor').get('body'))
            else:
                var.put('params', Js([]))
                var.put('body', var.get('t').callprop('blockStatement', Js([])))
            var.get("this").get('path').callprop('get', Js('body')).callprop('unshiftContainer', Js('body'), var.get('t').callprop('classMethod', Js('constructor'), var.get('t').callprop('identifier', Js('constructor')), var.get('params'), var.get('body')))
        PyJs_constructorMeMaybe_885_._set_name('constructorMeMaybe')
        var.get('ClassTransformer').get('prototype').put('constructorMeMaybe', PyJs_constructorMeMaybe_885_)
        @Js
        def PyJs_buildBody_886_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'buildBody':PyJs_buildBody_886_}, var)
            var.registers(['constructorBody'])
            var.get("this").callprop('constructorMeMaybe')
            var.get("this").callprop('pushBody')
            var.get("this").callprop('verifyConstructor')
            if var.get("this").get('userConstructor'):
                var.put('constructorBody', var.get("this").get('constructorBody'))
                var.get('constructorBody').put('body', var.get('constructorBody').get('body').callprop('concat', var.get("this").get('userConstructor').get('body').get('body')))
                var.get('t').callprop('inherits', var.get("this").get('constructor'), var.get("this").get('userConstructor'))
                var.get('t').callprop('inherits', var.get('constructorBody'), var.get("this").get('userConstructor').get('body'))
            var.get("this").callprop('pushDescriptors')
        PyJs_buildBody_886_._set_name('buildBody')
        var.get('ClassTransformer').get('prototype').put('buildBody', PyJs_buildBody_886_)
        @Js
        def PyJs_pushBody_887_(this, arguments, var=var):
            var = Scope({'this':this, 'pushBody':PyJs_pushBody_887_, 'arguments':arguments}, var)
            var.registers(['node', '_isArray2', 'isConstructor', '_i2', 'classBodyPaths', '_ref2', 'replaceSupers', 'path', '_iterator2'])
            var.put('classBodyPaths', var.get("this").get('path').callprop('get', Js('body.body')))
            #for JS loop
            var.put('_iterator2', var.get('classBodyPaths'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('path', var.get('_ref2'))
                var.put('node', var.get('path').get('node'))
                if var.get('path').callprop('isClassProperty'):
                    PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js('Missing class properties transform.')))
                    raise PyJsTempException
                if var.get('node').get('decorators'):
                    PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js('Method has decorators, put the decorator plugin before the classes one.')))
                    raise PyJsTempException
                if var.get('t').callprop('isClassMethod', var.get('node')):
                    var.put('isConstructor', PyJsStrictEq(var.get('node').get('kind'),Js('constructor')))
                    if var.get('isConstructor'):
                        var.get('path').callprop('traverse', var.get('verifyConstructorVisitor'), var.get("this"))
                        if (var.get("this").get('hasBareSuper').neg() and var.get("this").get('isDerived')):
                            PyJsTempException = JsToPyException(var.get('path').callprop('buildCodeFrameError', Js('missing super() call in constructor')))
                            raise PyJsTempException
                    PyJs_Object_888_ = Js({'forceSuperMemoisation':var.get('isConstructor'),'methodPath':var.get('path'),'methodNode':var.get('node'),'objectRef':var.get("this").get('classRef'),'superRef':var.get("this").get('superName'),'isStatic':var.get('node').get('static'),'isLoose':var.get("this").get('isLoose'),'scope':var.get("this").get('scope'),'file':var.get("this").get('file')})
                    var.put('replaceSupers', var.get('_babelHelperReplaceSupers2').get('default').create(PyJs_Object_888_, var.get('true')))
                    var.get('replaceSupers').callprop('replace')
                    if var.get('isConstructor'):
                        var.get("this").callprop('pushConstructor', var.get('replaceSupers'), var.get('node'), var.get('path'))
                    else:
                        var.get("this").callprop('pushMethod', var.get('node'), var.get('path'))
            
        PyJs_pushBody_887_._set_name('pushBody')
        var.get('ClassTransformer').get('prototype').put('pushBody', PyJs_pushBody_887_)
        @Js
        def PyJs_clearDescriptors_889_(this, arguments, var=var):
            var = Scope({'this':this, 'clearDescriptors':PyJs_clearDescriptors_889_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").put('hasInstanceDescriptors', Js(False))
            var.get("this").put('hasStaticDescriptors', Js(False))
            PyJs_Object_890_ = Js({})
            var.get("this").put('instanceMutatorMap', PyJs_Object_890_)
            PyJs_Object_891_ = Js({})
            var.get("this").put('staticMutatorMap', PyJs_Object_891_)
        PyJs_clearDescriptors_889_._set_name('clearDescriptors')
        var.get('ClassTransformer').get('prototype').put('clearDescriptors', PyJs_clearDescriptors_889_)
        @Js
        def PyJs_pushDescriptors_892_(this, arguments, var=var):
            var = Scope({'this':this, 'pushDescriptors':PyJs_pushDescriptors_892_, 'arguments':arguments}, var)
            var.registers(['body', 'i', 'args', 'lastNonNullIndex', 'staticProps', 'instanceProps', 'nullNode'])
            var.get("this").callprop('pushInherits')
            var.put('body', var.get("this").get('body'))
            var.put('instanceProps', PyJsComma(Js(0.0), Js(None)))
            var.put('staticProps', PyJsComma(Js(0.0), Js(None)))
            if var.get("this").get('hasInstanceDescriptors'):
                var.put('instanceProps', var.get('defineMap').callprop('toClassObject', var.get("this").get('instanceMutatorMap')))
            if var.get("this").get('hasStaticDescriptors'):
                var.put('staticProps', var.get('defineMap').callprop('toClassObject', var.get("this").get('staticMutatorMap')))
            if (var.get('instanceProps') or var.get('staticProps')):
                if var.get('instanceProps'):
                    var.put('instanceProps', var.get('defineMap').callprop('toComputedObjectFromClass', var.get('instanceProps')))
                if var.get('staticProps'):
                    var.put('staticProps', var.get('defineMap').callprop('toComputedObjectFromClass', var.get('staticProps')))
                var.put('nullNode', var.get('t').callprop('nullLiteral'))
                var.put('args', Js([var.get("this").get('classRef'), var.get('nullNode'), var.get('nullNode'), var.get('nullNode'), var.get('nullNode')]))
                if var.get('instanceProps'):
                    var.get('args').put('1', var.get('instanceProps'))
                if var.get('staticProps'):
                    var.get('args').put('2', var.get('staticProps'))
                if var.get("this").get('instanceInitializersId'):
                    var.get('args').put('3', var.get("this").get('instanceInitializersId'))
                    var.get('body').callprop('unshift', var.get("this").callprop('buildObjectAssignment', var.get("this").get('instanceInitializersId')))
                if var.get("this").get('staticInitializersId'):
                    var.get('args').put('4', var.get("this").get('staticInitializersId'))
                    var.get('body').callprop('unshift', var.get("this").callprop('buildObjectAssignment', var.get("this").get('staticInitializersId')))
                var.put('lastNonNullIndex', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('args').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('args').get(var.get('i')),var.get('nullNode')):
                            var.put('lastNonNullIndex', var.get('i'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('args', var.get('args').callprop('slice', Js(0.0), (var.get('lastNonNullIndex')+Js(1.0))))
                var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('createClass')), var.get('args'))))
            var.get("this").callprop('clearDescriptors')
        PyJs_pushDescriptors_892_._set_name('pushDescriptors')
        var.get('ClassTransformer').get('prototype').put('pushDescriptors', PyJs_pushDescriptors_892_)
        @Js
        def PyJs_buildObjectAssignment_893_(id, this, arguments, var=var):
            var = Scope({'this':this, 'buildObjectAssignment':PyJs_buildObjectAssignment_893_, 'id':id, 'arguments':arguments}, var)
            var.registers(['id'])
            return var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('id'), var.get('t').callprop('objectExpression', Js([])))]))
        PyJs_buildObjectAssignment_893_._set_name('buildObjectAssignment')
        var.get('ClassTransformer').get('prototype').put('buildObjectAssignment', PyJs_buildObjectAssignment_893_)
        @Js
        def PyJs_wrapSuperCall_894_(bareSuper, superRef, thisRef, body, this, arguments, var=var):
            var = Scope({'bareSuper':bareSuper, 'body':body, 'thisRef':thisRef, 'arguments':arguments, 'this':this, 'superRef':superRef, 'wrapSuperCall':PyJs_wrapSuperCall_894_}, var)
            var.registers(['bareSuper', 'body', 'superRef', 'call', 'bareSuperNode', 'thisRef', 'bareSuperAfter'])
            var.put('bareSuperNode', var.get('bareSuper').get('node'))
            if var.get("this").get('isLoose'):
                var.get('bareSuperNode').get('arguments').callprop('unshift', var.get('t').callprop('thisExpression'))
                PyJs_Object_895_ = Js({'name':Js('arguments')})
                if ((PyJsStrictEq(var.get('bareSuperNode').get('arguments').get('length'),Js(2.0)) and var.get('t').callprop('isSpreadElement', var.get('bareSuperNode').get('arguments').get('1'))) and var.get('t').callprop('isIdentifier', var.get('bareSuperNode').get('arguments').get('1').get('argument'), PyJs_Object_895_)):
                    var.get('bareSuperNode').get('arguments').put('1', var.get('bareSuperNode').get('arguments').get('1').get('argument'))
                    var.get('bareSuperNode').put('callee', var.get('t').callprop('memberExpression', var.get('superRef'), var.get('t').callprop('identifier', Js('apply'))))
                else:
                    var.get('bareSuperNode').put('callee', var.get('t').callprop('memberExpression', var.get('superRef'), var.get('t').callprop('identifier', Js('call'))))
            else:
                def PyJs_LONG_896_(var=var):
                    return var.get('t').callprop('logicalExpression', Js('||'), var.get('t').callprop('memberExpression', var.get("this").get('classRef'), var.get('t').callprop('identifier', Js('__proto__'))), var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('Object')), var.get('t').callprop('identifier', Js('getPrototypeOf'))), Js([var.get("this").get('classRef')])))
                var.put('bareSuperNode', PyJsComma(Js(0.0),var.get('_babelHelperOptimiseCallExpression2').get('default'))(PyJs_LONG_896_(), var.get('t').callprop('thisExpression'), var.get('bareSuperNode').get('arguments')))
            var.put('call', var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('possibleConstructorReturn')), Js([var.get('t').callprop('thisExpression'), var.get('bareSuperNode')])))
            @Js
            def PyJs_anonymous_897_(fn, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fn':fn}, var)
                var.registers(['fn'])
                return var.get('fn')(var.get('thisRef'))
            PyJs_anonymous_897_._set_name('anonymous')
            var.put('bareSuperAfter', var.get("this").get('bareSuperAfter').callprop('map', PyJs_anonymous_897_))
            if ((var.get('bareSuper').get('parentPath').callprop('isExpressionStatement') and PyJsStrictEq(var.get('bareSuper').get('parentPath').get('container'),var.get('body').get('node').get('body'))) and PyJsStrictEq((var.get('body').get('node').get('body').get('length')-Js(1.0)),var.get('bareSuper').get('parentPath').get('key'))):
                if (var.get("this").get('superThises').get('length') or var.get('bareSuperAfter').get('length')):
                    PyJs_Object_898_ = Js({'id':var.get('thisRef')})
                    var.get('bareSuper').get('scope').callprop('push', PyJs_Object_898_)
                    var.put('call', var.get('t').callprop('assignmentExpression', Js('='), var.get('thisRef'), var.get('call')))
                if var.get('bareSuperAfter').get('length'):
                    var.put('call', var.get('t').callprop('toSequenceExpression', Js([var.get('call')]).callprop('concat', var.get('bareSuperAfter'), Js([var.get('thisRef')]))))
                var.get('bareSuper').get('parentPath').callprop('replaceWith', var.get('t').callprop('returnStatement', var.get('call')))
            else:
                var.get('bareSuper').callprop('replaceWithMultiple', Js([var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('thisRef'), var.get('call'))]))]).callprop('concat', var.get('bareSuperAfter'), Js([var.get('t').callprop('expressionStatement', var.get('thisRef'))])))
        PyJs_wrapSuperCall_894_._set_name('wrapSuperCall')
        var.get('ClassTransformer').get('prototype').put('wrapSuperCall', PyJs_wrapSuperCall_894_)
        @Js
        def PyJs_verifyConstructor_899_(this, arguments, var=var):
            var = Scope({'this':this, 'verifyConstructor':PyJs_verifyConstructor_899_, 'arguments':arguments}, var)
            var.registers(['_isArray5', '_isArray4', 'wrapReturn', '_isArray3', 'bareSuper', 'superRef', '_i5', '_i4', '_i3', 'returnPath', 'ref', 'body', 'bodyPaths', 'thisPath', 'guaranteedSuperBeforeFinish', 'thisRef', 'path', '_ref5', '_ref4', '_ref3', '_iterator5', '_iterator4', '_this2', '_iterator3'])
            var.put('_this2', var.get("this"))
            if var.get("this").get('isDerived').neg():
                return var.get('undefined')
            var.put('path', var.get("this").get('userConstructorPath'))
            var.put('body', var.get('path').callprop('get', Js('body')))
            var.get('path').callprop('traverse', var.get('findThisesVisitor'), var.get("this"))
            var.put('guaranteedSuperBeforeFinish', var.get("this").get('bareSupers').get('length').neg().neg())
            var.put('superRef', (var.get("this").get('superName') or var.get('t').callprop('identifier', Js('Function'))))
            var.put('thisRef', var.get('path').get('scope').callprop('generateUidIdentifier', Js('this')))
            #for JS loop
            var.put('_iterator3', var.get("this").get('bareSupers'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref3', var.get('_i3').get('value'))
                var.put('bareSuper', var.get('_ref3'))
                var.get("this").callprop('wrapSuperCall', var.get('bareSuper'), var.get('superRef'), var.get('thisRef'), var.get('body'))
                if var.get('guaranteedSuperBeforeFinish'):
                    @Js
                    def PyJs_anonymous_900_(parentPath, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'parentPath':parentPath}, var)
                        var.registers(['parentPath'])
                        if PyJsStrictEq(var.get('parentPath'),var.get('path')):
                            return var.get('true')
                        if (var.get('parentPath').callprop('isLoop') or var.get('parentPath').callprop('isConditional')):
                            var.put('guaranteedSuperBeforeFinish', Js(False))
                            return var.get('true')
                    PyJs_anonymous_900_._set_name('anonymous')
                    var.get('bareSuper').callprop('find', PyJs_anonymous_900_)
            
            #for JS loop
            var.put('_iterator4', var.get("this").get('superThises'))
            var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
            var.put('_i4', Js(0.0))
            var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
            while 1:
                pass
                if var.get('_isArray4'):
                    if (var.get('_i4')>=var.get('_iterator4').get('length')):
                        break
                    var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i4', var.get('_iterator4').callprop('next'))
                    if var.get('_i4').get('done'):
                        break
                    var.put('_ref4', var.get('_i4').get('value'))
                var.put('thisPath', var.get('_ref4'))
                var.get('thisPath').callprop('replaceWith', var.get('thisRef'))
            
            @Js
            def PyJs_wrapReturn_901_(returnArg, this, arguments, var=var):
                var = Scope({'this':this, 'returnArg':returnArg, 'wrapReturn':PyJs_wrapReturn_901_, 'arguments':arguments}, var)
                var.registers(['returnArg'])
                return var.get('t').callprop('callExpression', var.get('_this2').get('file').callprop('addHelper', Js('possibleConstructorReturn')), Js([var.get('thisRef')]).callprop('concat', (var.get('returnArg') or Js([]))))
            PyJs_wrapReturn_901_._set_name('wrapReturn')
            var.put('wrapReturn', PyJs_wrapReturn_901_)
            var.put('bodyPaths', var.get('body').callprop('get', Js('body')))
            if (var.get('bodyPaths').get('length') and var.get('bodyPaths').callprop('pop').callprop('isReturnStatement').neg()):
                var.get('body').callprop('pushContainer', Js('body'), var.get('t').callprop('returnStatement', (var.get('thisRef') if var.get('guaranteedSuperBeforeFinish') else var.get('wrapReturn')())))
            #for JS loop
            var.put('_iterator5', var.get("this").get('superReturns'))
            var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
            var.put('_i5', Js(0.0))
            var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
            while 1:
                pass
                if var.get('_isArray5'):
                    if (var.get('_i5')>=var.get('_iterator5').get('length')):
                        break
                    var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i5', var.get('_iterator5').callprop('next'))
                    if var.get('_i5').get('done'):
                        break
                    var.put('_ref5', var.get('_i5').get('value'))
                var.put('returnPath', var.get('_ref5'))
                if var.get('returnPath').get('node').get('argument'):
                    var.put('ref', var.get('returnPath').get('scope').callprop('generateDeclaredUidIdentifier', Js('ret')))
                    var.get('returnPath').callprop('get', Js('argument')).callprop('replaceWithMultiple', Js([var.get('t').callprop('assignmentExpression', Js('='), var.get('ref'), var.get('returnPath').get('node').get('argument')), var.get('wrapReturn')(var.get('ref'))]))
                else:
                    var.get('returnPath').callprop('get', Js('argument')).callprop('replaceWith', var.get('wrapReturn')())
            
        PyJs_verifyConstructor_899_._set_name('verifyConstructor')
        var.get('ClassTransformer').get('prototype').put('verifyConstructor', PyJs_verifyConstructor_899_)
        @Js
        def PyJs_pushMethod_902_(node, path, this, arguments, var=var):
            var = Scope({'node':node, 'path':path, 'this':this, 'arguments':arguments, 'pushMethod':PyJs_pushMethod_902_}, var)
            var.registers(['node', 'scope', 'path'])
            var.put('scope', (var.get('path').get('scope') if var.get('path') else var.get("this").get('scope')))
            if PyJsStrictEq(var.get('node').get('kind'),Js('method')):
                if var.get("this").callprop('_processMethod', var.get('node'), var.get('scope')):
                    return var.get('undefined')
            var.get("this").callprop('pushToMap', var.get('node'), Js(False), var.get("null"), var.get('scope'))
        PyJs_pushMethod_902_._set_name('pushMethod')
        var.get('ClassTransformer').get('prototype').put('pushMethod', PyJs_pushMethod_902_)
        @Js
        def PyJs__processMethod_903_(this, arguments, var=var):
            var = Scope({'this':this, '_processMethod':PyJs__processMethod_903_, 'arguments':arguments}, var)
            var.registers([])
            return Js(False)
        PyJs__processMethod_903_._set_name('_processMethod')
        var.get('ClassTransformer').get('prototype').put('_processMethod', PyJs__processMethod_903_)
        @Js
        def PyJs_pushConstructor_904_(replaceSupers, method, path, this, arguments, var=var):
            var = Scope({'this':this, 'replaceSupers':replaceSupers, 'arguments':arguments, 'path':path, 'method':method, 'pushConstructor':PyJs_pushConstructor_904_}, var)
            var.registers(['path', 'replaceSupers', 'construct', 'method'])
            var.get("this").put('bareSupers', var.get('replaceSupers').get('bareSupers'))
            var.get("this").put('superReturns', var.get('replaceSupers').get('returns'))
            if var.get('path').get('scope').callprop('hasOwnBinding', var.get("this").get('classRef').get('name')):
                var.get('path').get('scope').callprop('rename', var.get("this").get('classRef').get('name'))
            var.put('construct', var.get("this").get('constructor'))
            var.get("this").put('userConstructorPath', var.get('path'))
            var.get("this").put('userConstructor', var.get('method'))
            var.get("this").put('hasConstructor', var.get('true'))
            var.get('t').callprop('inheritsComments', var.get('construct'), var.get('method'))
            var.get('construct').put('_ignoreUserWhitespace', var.get('true'))
            var.get('construct').put('params', var.get('method').get('params'))
            var.get('t').callprop('inherits', var.get('construct').get('body'), var.get('method').get('body'))
            var.get('construct').get('body').put('directives', var.get('method').get('body').get('directives'))
            var.get("this").callprop('_pushConstructor')
        PyJs_pushConstructor_904_._set_name('pushConstructor')
        var.get('ClassTransformer').get('prototype').put('pushConstructor', PyJs_pushConstructor_904_)
        @Js
        def PyJs__pushConstructor_905_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_pushConstructor':PyJs__pushConstructor_905_}, var)
            var.registers([])
            if var.get("this").get('pushedConstructor'):
                return var.get('undefined')
            var.get("this").put('pushedConstructor', var.get('true'))
            if (var.get("this").get('hasInstanceDescriptors') or var.get("this").get('hasStaticDescriptors')):
                var.get("this").callprop('pushDescriptors')
            var.get("this").get('body').callprop('push', var.get("this").get('constructor'))
            var.get("this").callprop('pushInherits')
        PyJs__pushConstructor_905_._set_name('_pushConstructor')
        var.get('ClassTransformer').get('prototype').put('_pushConstructor', PyJs__pushConstructor_905_)
        @Js
        def PyJs_pushInherits_906_(this, arguments, var=var):
            var = Scope({'this':this, 'pushInherits':PyJs_pushInherits_906_, 'arguments':arguments}, var)
            var.registers([])
            if (var.get("this").get('isDerived').neg() or var.get("this").get('pushedInherits')):
                return var.get('undefined')
            var.get("this").put('pushedInherits', var.get('true'))
            var.get("this").get('body').callprop('unshift', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('inherits')), Js([var.get("this").get('classRef'), var.get("this").get('superName')]))))
        PyJs_pushInherits_906_._set_name('pushInherits')
        var.get('ClassTransformer').get('prototype').put('pushInherits', PyJs_pushInherits_906_)
        return var.get('ClassTransformer')
    PyJs_anonymous_879_._set_name('anonymous')
    var.put('ClassTransformer', PyJs_anonymous_879_())
    var.get('exports').put('default', var.get('ClassTransformer'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_865_._set_name('anonymous')
PyJs_Object_907_ = Js({'babel-helper-define-map':Js(48.0),'babel-helper-optimise-call-expression':Js(52.0),'babel-helper-replace-supers':Js(54.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-template':Js(221.0),'babel-traverse':Js(225.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_908_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_918_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_918_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_909_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'loose', 'pushAssign', 'getValue', 'pushMutatorDefine', 't', 'template', 'buildMutatorMapAssign', 'spec'])
        @Js
        def PyJsHoisted_spec_(info, this, arguments, var=var):
            var = Scope({'info':info, 'this':this, 'arguments':arguments}, var)
            var.registers(['body', 'info', '_isArray2', '_ref4', '_i2', 'prop', 'state', 'computedProps', 'objId', 'key', '_iterator2'])
            var.put('objId', var.get('info').get('objId'))
            var.put('body', var.get('info').get('body'))
            var.put('computedProps', var.get('info').get('computedProps'))
            var.put('state', var.get('info').get('state'))
            #for JS loop
            var.put('_iterator2', var.get('computedProps'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref4', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref4', var.get('_i2').get('value'))
                var.put('prop', var.get('_ref4'))
                var.put('key', var.get('t').callprop('toComputedKey', var.get('prop')))
                if (PyJsStrictEq(var.get('prop').get('kind'),Js('get')) or PyJsStrictEq(var.get('prop').get('kind'),Js('set'))):
                    var.get('pushMutatorDefine')(var.get('info'), var.get('prop'))
                else:
                    PyJs_Object_911_ = Js({'value':Js('__proto__')})
                    if var.get('t').callprop('isStringLiteral', var.get('key'), PyJs_Object_911_):
                        var.get('pushAssign')(var.get('objId'), var.get('prop'), var.get('body'))
                    else:
                        if PyJsStrictEq(var.get('computedProps').get('length'),Js(1.0)):
                            return var.get('t').callprop('callExpression', var.get('state').callprop('addHelper', Js('defineProperty')), Js([var.get('info').get('initPropExpression'), var.get('key'), var.get('getValue')(var.get('prop'))]))
                        else:
                            var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('state').callprop('addHelper', Js('defineProperty')), Js([var.get('objId'), var.get('key'), var.get('getValue')(var.get('prop'))]))))
            
        PyJsHoisted_spec_.__name__ = 'spec'
        var.put('spec', PyJsHoisted_spec_)
        @Js
        def PyJsHoisted_pushMutatorDefine_(_ref2, prop, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_ref2':_ref2, 'prop':prop}, var)
            var.registers(['body', 'maybeMemoise', '_ref2', 'prop', 'objId', 'key', 'scope', 'getMutatorId'])
            var.put('objId', var.get('_ref2').get('objId'))
            var.put('body', var.get('_ref2').get('body'))
            var.put('getMutatorId', var.get('_ref2').get('getMutatorId'))
            var.put('scope', var.get('_ref2').get('scope'))
            var.put('key', (var.get('t').callprop('stringLiteral', var.get('prop').get('key').get('name')) if (var.get('prop').get('computed').neg() and var.get('t').callprop('isIdentifier', var.get('prop').get('key'))) else var.get('prop').get('key')))
            var.put('maybeMemoise', var.get('scope').callprop('maybeGenerateMemoised', var.get('key')))
            if var.get('maybeMemoise'):
                var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('maybeMemoise'), var.get('key'))))
                var.put('key', var.get('maybeMemoise'))
            PyJs_Object_910_ = Js({'MUTATOR_MAP_REF':var.get('getMutatorId')(),'KEY':var.get('key'),'VALUE':var.get('getValue')(var.get('prop')),'KIND':var.get('t').callprop('identifier', var.get('prop').get('kind'))})
            var.get('body').get('push').callprop('apply', var.get('body'), var.get('buildMutatorMapAssign')(PyJs_Object_910_))
        PyJsHoisted_pushMutatorDefine_.__name__ = 'pushMutatorDefine'
        var.put('pushMutatorDefine', PyJsHoisted_pushMutatorDefine_)
        @Js
        def PyJsHoisted_loose_(info, this, arguments, var=var):
            var = Scope({'info':info, 'this':this, 'arguments':arguments}, var)
            var.registers(['info', '_isArray', '_iterator', '_ref3', 'prop', '_i'])
            #for JS loop
            var.put('_iterator', var.get('info').get('computedProps'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref3', var.get('_i').get('value'))
                var.put('prop', var.get('_ref3'))
                if (PyJsStrictEq(var.get('prop').get('kind'),Js('get')) or PyJsStrictEq(var.get('prop').get('kind'),Js('set'))):
                    var.get('pushMutatorDefine')(var.get('info'), var.get('prop'))
                else:
                    var.get('pushAssign')(var.get('info').get('objId'), var.get('prop'), var.get('info').get('body'))
            
        PyJsHoisted_loose_.__name__ = 'loose'
        var.put('loose', PyJsHoisted_loose_)
        @Js
        def PyJsHoisted_pushAssign_(objId, prop, body, this, arguments, var=var):
            var = Scope({'body':body, 'this':this, 'objId':objId, 'arguments':arguments, 'prop':prop}, var)
            var.registers(['body', 'objId', 'prop'])
            if (PyJsStrictEq(var.get('prop').get('kind'),Js('get')) and PyJsStrictEq(var.get('prop').get('kind'),Js('set'))):
                var.get('pushMutatorDefine')(var.get('objId'), var.get('prop'), var.get('body'))
            else:
                var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('memberExpression', var.get('objId'), var.get('prop').get('key'), (var.get('prop').get('computed') or var.get('t').callprop('isLiteral', var.get('prop').get('key')))), var.get('getValue')(var.get('prop')))))
        PyJsHoisted_pushAssign_.__name__ = 'pushAssign'
        var.put('pushAssign', PyJsHoisted_pushAssign_)
        @Js
        def PyJsHoisted_getValue_(prop, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'prop':prop}, var)
            var.registers(['prop'])
            if var.get('t').callprop('isObjectProperty', var.get('prop')):
                return var.get('prop').get('value')
            else:
                if var.get('t').callprop('isObjectMethod', var.get('prop')):
                    return var.get('t').callprop('functionExpression', var.get("null"), var.get('prop').get('params'), var.get('prop').get('body'), var.get('prop').get('generator'), var.get('prop').get('async'))
        PyJsHoisted_getValue_.__name__ = 'getValue'
        var.put('getValue', PyJsHoisted_getValue_)
        var.put('t', var.get('_ref').get('types'))
        var.put('template', var.get('_ref').get('template'))
        var.put('buildMutatorMapAssign', var.get('template')(Js('\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ')))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_exit_915_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'exit':PyJs_exit_915_, 'arguments':arguments}, var)
            var.registers(['body', '_isArray4', '_isArray3', 'initProps', 'single', 'computedProps', '_i4', '_i3', 'hasComputed', 'prop', 'state', 'scope', 'getMutatorId', 'node', 'parent', 'initPropExpression', 'mutatorRef', 'foundComputed', 'objId', 'path', '_prop', '_ref6', '_ref5', 'callback', '_iterator4', '_iterator3'])
            var.put('node', var.get('path').get('node'))
            var.put('parent', var.get('path').get('parent'))
            var.put('scope', var.get('path').get('scope'))
            var.put('hasComputed', Js(False))
            #for JS loop
            var.put('_iterator3', var.get('node').get('properties'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref5', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref5', var.get('_i3').get('value'))
                var.put('prop', var.get('_ref5'))
                var.put('hasComputed', PyJsStrictEq(var.get('prop').get('computed'),var.get('true')))
                if var.get('hasComputed'):
                    break
            
            if var.get('hasComputed').neg():
                return var.get('undefined')
            var.put('initProps', Js([]))
            var.put('computedProps', Js([]))
            var.put('foundComputed', Js(False))
            #for JS loop
            var.put('_iterator4', var.get('node').get('properties'))
            var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
            var.put('_i4', Js(0.0))
            var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
            while 1:
                pass
                if var.get('_isArray4'):
                    if (var.get('_i4')>=var.get('_iterator4').get('length')):
                        break
                    var.put('_ref6', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i4', var.get('_iterator4').callprop('next'))
                    if var.get('_i4').get('done'):
                        break
                    var.put('_ref6', var.get('_i4').get('value'))
                var.put('_prop', var.get('_ref6'))
                if var.get('_prop').get('computed'):
                    var.put('foundComputed', var.get('true'))
                if var.get('foundComputed'):
                    var.get('computedProps').callprop('push', var.get('_prop'))
                else:
                    var.get('initProps').callprop('push', var.get('_prop'))
            
            var.put('objId', var.get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('parent')))
            var.put('initPropExpression', var.get('t').callprop('objectExpression', var.get('initProps')))
            var.put('body', Js([]))
            var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('objId'), var.get('initPropExpression'))])))
            var.put('callback', var.get('spec'))
            if var.get('state').get('opts').get('loose'):
                var.put('callback', var.get('loose'))
            var.put('mutatorRef', PyJsComma(Js(0.0), Js(None)))
            @Js
            def PyJs_getMutatorId_916_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'getMutatorId':PyJs_getMutatorId_916_}, var)
                var.registers([])
                if var.get('mutatorRef').neg():
                    var.put('mutatorRef', var.get('scope').callprop('generateUidIdentifier', Js('mutatorMap')))
                    var.get('body').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('mutatorRef'), var.get('t').callprop('objectExpression', Js([])))])))
                return var.get('mutatorRef')
            PyJs_getMutatorId_916_._set_name('getMutatorId')
            var.put('getMutatorId', PyJs_getMutatorId_916_)
            PyJs_Object_917_ = Js({'scope':var.get('scope'),'objId':var.get('objId'),'body':var.get('body'),'computedProps':var.get('computedProps'),'initPropExpression':var.get('initPropExpression'),'getMutatorId':var.get('getMutatorId'),'state':var.get('state')})
            var.put('single', var.get('callback')(PyJs_Object_917_))
            if var.get('mutatorRef'):
                var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('state').callprop('addHelper', Js('defineEnumerableProperties')), Js([var.get('objId'), var.get('mutatorRef')]))))
            if var.get('single'):
                var.get('path').callprop('replaceWith', var.get('single'))
            else:
                var.get('body').callprop('push', var.get('t').callprop('expressionStatement', var.get('objId')))
                var.get('path').callprop('replaceWithMultiple', var.get('body'))
        PyJs_exit_915_._set_name('exit')
        PyJs_Object_914_ = Js({'exit':PyJs_exit_915_})
        PyJs_Object_913_ = Js({'ObjectExpression':PyJs_Object_914_})
        PyJs_Object_912_ = Js({'visitor':PyJs_Object_913_})
        return PyJs_Object_912_
    PyJs_anonymous_909_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_909_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_908_._set_name('anonymous')
PyJs_Object_919_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_920_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_classCallCheck2', 'require', 'module', '_interopRequireDefault', '_classCallCheck3', '_getIterator3', '_getIterator2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_950_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_950_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_921_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['DestructuringTransformer', 'hasRest', 'variableDeclarationHasPattern', 't', '_ref', 'arrayUnpackVisitor'])
        @Js
        def PyJsHoisted_hasRest_(pattern, this, arguments, var=var):
            var = Scope({'this':this, 'pattern':pattern, 'arguments':arguments}, var)
            var.registers(['_isArray2', 'pattern', '_ref3', '_i2', 'elem', '_iterator2'])
            #for JS loop
            var.put('_iterator2', var.get('pattern').get('elements'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref3', var.get('_i2').get('value'))
                var.put('elem', var.get('_ref3'))
                if var.get('t').callprop('isRestElement', var.get('elem')):
                    return var.get('true')
            
            return Js(False)
        PyJsHoisted_hasRest_.__name__ = 'hasRest'
        var.put('hasRest', PyJsHoisted_hasRest_)
        @Js
        def PyJsHoisted_variableDeclarationHasPattern_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', '_isArray', '_iterator', '_ref2', 'declar', '_i'])
            #for JS loop
            var.put('_iterator', var.get('node').get('declarations'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('declar', var.get('_ref2'))
                if var.get('t').callprop('isPattern', var.get('declar').get('id')):
                    return var.get('true')
            
            return Js(False)
        PyJsHoisted_variableDeclarationHasPattern_.__name__ = 'variableDeclarationHasPattern'
        var.put('variableDeclarationHasPattern', PyJsHoisted_variableDeclarationHasPattern_)
        var.put('t', var.get('_ref').get('types'))
        pass
        pass
        @Js
        def PyJs_ReferencedIdentifier_923_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_923_, 'arguments':arguments}, var)
            var.registers(['path', 'state'])
            if var.get('state').get('bindings').get(var.get('path').get('node').get('name')):
                var.get('state').put('deopt', var.get('true'))
                var.get('path').callprop('stop')
        PyJs_ReferencedIdentifier_923_._set_name('ReferencedIdentifier')
        PyJs_Object_922_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_923_})
        var.put('arrayUnpackVisitor', PyJs_Object_922_)
        @Js
        def PyJs_anonymous_924_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['DestructuringTransformer'])
            @Js
            def PyJsHoisted_DestructuringTransformer_(opts, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
                var.registers(['opts'])
                PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('DestructuringTransformer'))
                var.get("this").put('blockHoist', var.get('opts').get('blockHoist'))
                var.get("this").put('operator', var.get('opts').get('operator'))
                PyJs_Object_925_ = Js({})
                var.get("this").put('arrays', PyJs_Object_925_)
                var.get("this").put('nodes', (var.get('opts').get('nodes') or Js([])))
                var.get("this").put('scope', var.get('opts').get('scope'))
                var.get("this").put('file', var.get('opts').get('file'))
                var.get("this").put('kind', var.get('opts').get('kind'))
            PyJsHoisted_DestructuringTransformer_.__name__ = 'DestructuringTransformer'
            var.put('DestructuringTransformer', PyJsHoisted_DestructuringTransformer_)
            pass
            @Js
            def PyJs_buildVariableAssignment_926_(id, init, this, arguments, var=var):
                var = Scope({'this':this, 'init':init, 'buildVariableAssignment':PyJs_buildVariableAssignment_926_, 'id':id, 'arguments':arguments}, var)
                var.registers(['node', 'init', 'id', 'op'])
                var.put('op', var.get("this").get('operator'))
                if var.get('t').callprop('isMemberExpression', var.get('id')):
                    var.put('op', Js('='))
                var.put('node', PyJsComma(Js(0.0), Js(None)))
                if var.get('op'):
                    var.put('node', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', var.get('op'), var.get('id'), var.get('init'))))
                else:
                    var.put('node', var.get('t').callprop('variableDeclaration', var.get("this").get('kind'), Js([var.get('t').callprop('variableDeclarator', var.get('id'), var.get('init'))])))
                var.get('node').put('_blockHoist', var.get("this").get('blockHoist'))
                return var.get('node')
            PyJs_buildVariableAssignment_926_._set_name('buildVariableAssignment')
            var.get('DestructuringTransformer').get('prototype').put('buildVariableAssignment', PyJs_buildVariableAssignment_926_)
            @Js
            def PyJs_buildVariableDeclaration_927_(id, init, this, arguments, var=var):
                var = Scope({'this':this, 'init':init, 'buildVariableDeclaration':PyJs_buildVariableDeclaration_927_, 'id':id, 'arguments':arguments}, var)
                var.registers(['init', 'declar', 'id'])
                var.put('declar', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('id'), var.get('init'))])))
                var.get('declar').put('_blockHoist', var.get("this").get('blockHoist'))
                return var.get('declar')
            PyJs_buildVariableDeclaration_927_._set_name('buildVariableDeclaration')
            var.get('DestructuringTransformer').get('prototype').put('buildVariableDeclaration', PyJs_buildVariableDeclaration_927_)
            @Js
            def PyJs_push_928_(id, init, this, arguments, var=var):
                var = Scope({'this':this, 'push':PyJs_push_928_, 'init':init, 'id':id, 'arguments':arguments}, var)
                var.registers(['init', 'id'])
                if var.get('t').callprop('isObjectPattern', var.get('id')):
                    var.get("this").callprop('pushObjectPattern', var.get('id'), var.get('init'))
                else:
                    if var.get('t').callprop('isArrayPattern', var.get('id')):
                        var.get("this").callprop('pushArrayPattern', var.get('id'), var.get('init'))
                    else:
                        if var.get('t').callprop('isAssignmentPattern', var.get('id')):
                            var.get("this").callprop('pushAssignmentPattern', var.get('id'), var.get('init'))
                        else:
                            var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableAssignment', var.get('id'), var.get('init')))
            PyJs_push_928_._set_name('push')
            var.get('DestructuringTransformer').get('prototype').put('push', PyJs_push_928_)
            @Js
            def PyJs_toArray_929_(node, count, this, arguments, var=var):
                var = Scope({'node':node, 'count':count, 'this':this, 'arguments':arguments, 'toArray':PyJs_toArray_929_}, var)
                var.registers(['node', 'count'])
                if (var.get("this").get('file').get('opts').get('loose') or (var.get('t').callprop('isIdentifier', var.get('node')) and var.get("this").get('arrays').get(var.get('node').get('name')))):
                    return var.get('node')
                else:
                    return var.get("this").get('scope').callprop('toArray', var.get('node'), var.get('count'))
            PyJs_toArray_929_._set_name('toArray')
            var.get('DestructuringTransformer').get('prototype').put('toArray', PyJs_toArray_929_)
            @Js
            def PyJs_pushAssignmentPattern_930_(pattern, valueRef, this, arguments, var=var):
                var = Scope({'this':this, 'pattern':pattern, 'valueRef':valueRef, 'arguments':arguments, 'pushAssignmentPattern':PyJs_pushAssignmentPattern_930_}, var)
                var.registers(['pattern', 'tempValueDefault', 'declar', 'tempValueRef', 'tempConditional', 'valueRef', 'left'])
                var.put('tempValueRef', var.get("this").get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('valueRef')))
                var.put('declar', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('tempValueRef'), var.get('valueRef'))])))
                var.get('declar').put('_blockHoist', var.get("this").get('blockHoist'))
                var.get("this").get('nodes').callprop('push', var.get('declar'))
                var.put('tempConditional', var.get('t').callprop('conditionalExpression', var.get('t').callprop('binaryExpression', Js('==='), var.get('tempValueRef'), var.get('t').callprop('identifier', Js('undefined'))), var.get('pattern').get('right'), var.get('tempValueRef')))
                var.put('left', var.get('pattern').get('left'))
                if var.get('t').callprop('isPattern', var.get('left')):
                    var.put('tempValueDefault', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('tempValueRef'), var.get('tempConditional'))))
                    var.get('tempValueDefault').put('_blockHoist', var.get("this").get('blockHoist'))
                    var.get("this").get('nodes').callprop('push', var.get('tempValueDefault'))
                    var.get("this").callprop('push', var.get('left'), var.get('tempValueRef'))
                else:
                    var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableAssignment', var.get('left'), var.get('tempConditional')))
            PyJs_pushAssignmentPattern_930_._set_name('pushAssignmentPattern')
            var.get('DestructuringTransformer').get('prototype').put('pushAssignmentPattern', PyJs_pushAssignmentPattern_930_)
            @Js
            def PyJs_pushObjectRest_931_(pattern, objRef, spreadProp, spreadPropIndex, this, arguments, var=var):
                var = Scope({'objRef':objRef, 'arguments':arguments, 'pushObjectRest':PyJs_pushObjectRest_931_, 'this':this, 'pattern':pattern, 'spreadProp':spreadProp, 'spreadPropIndex':spreadPropIndex}, var)
                var.registers(['keys', 'pattern', 'spreadProp', 'value', 'prop', 'objRef', 'i', 'key', 'spreadPropIndex'])
                var.put('keys', Js([]))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('pattern').get('properties').get('length')):
                    try:
                        var.put('prop', var.get('pattern').get('properties').get(var.get('i')))
                        if (var.get('i')>=var.get('spreadPropIndex')):
                            break
                        if var.get('t').callprop('isRestProperty', var.get('prop')):
                            continue
                        var.put('key', var.get('prop').get('key'))
                        if (var.get('t').callprop('isIdentifier', var.get('key')) and var.get('prop').get('computed').neg()):
                            var.put('key', var.get('t').callprop('stringLiteral', var.get('prop').get('key').get('name')))
                        var.get('keys').callprop('push', var.get('key'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('keys', var.get('t').callprop('arrayExpression', var.get('keys')))
                var.put('value', var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('objectWithoutProperties')), Js([var.get('objRef'), var.get('keys')])))
                var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableAssignment', var.get('spreadProp').get('argument'), var.get('value')))
            PyJs_pushObjectRest_931_._set_name('pushObjectRest')
            var.get('DestructuringTransformer').get('prototype').put('pushObjectRest', PyJs_pushObjectRest_931_)
            @Js
            def PyJs_pushObjectProperty_932_(prop, propRef, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'pushObjectProperty':PyJs_pushObjectProperty_932_, 'propRef':propRef, 'prop':prop}, var)
                var.registers(['objRef', 'pattern', 'propRef', 'prop'])
                if var.get('t').callprop('isLiteral', var.get('prop').get('key')):
                    var.get('prop').put('computed', var.get('true'))
                var.put('pattern', var.get('prop').get('value'))
                var.put('objRef', var.get('t').callprop('memberExpression', var.get('propRef'), var.get('prop').get('key'), var.get('prop').get('computed')))
                if var.get('t').callprop('isPattern', var.get('pattern')):
                    var.get("this").callprop('push', var.get('pattern'), var.get('objRef'))
                else:
                    var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableAssignment', var.get('pattern'), var.get('objRef')))
            PyJs_pushObjectProperty_932_._set_name('pushObjectProperty')
            var.get('DestructuringTransformer').get('prototype').put('pushObjectProperty', PyJs_pushObjectProperty_932_)
            @Js
            def PyJs_pushObjectPattern_933_(pattern, objRef, this, arguments, var=var):
                var = Scope({'objRef':objRef, 'pattern':pattern, 'pushObjectPattern':PyJs_pushObjectPattern_933_, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'pattern', 'objRef', 'temp', 'prop'])
                if var.get('pattern').get('properties').get('length').neg():
                    var.get("this").get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get("this").get('file').callprop('addHelper', Js('objectDestructuringEmpty')), Js([var.get('objRef')]))))
                if ((var.get('pattern').get('properties').get('length')>Js(1.0)) and var.get("this").get('scope').callprop('isStatic', var.get('objRef')).neg()):
                    var.put('temp', var.get("this").get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('objRef')))
                    var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableDeclaration', var.get('temp'), var.get('objRef')))
                    var.put('objRef', var.get('temp'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('pattern').get('properties').get('length')):
                    try:
                        var.put('prop', var.get('pattern').get('properties').get(var.get('i')))
                        if var.get('t').callprop('isRestProperty', var.get('prop')):
                            var.get("this").callprop('pushObjectRest', var.get('pattern'), var.get('objRef'), var.get('prop'), var.get('i'))
                        else:
                            var.get("this").callprop('pushObjectProperty', var.get('prop'), var.get('objRef'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_pushObjectPattern_933_._set_name('pushObjectPattern')
            var.get('DestructuringTransformer').get('prototype').put('pushObjectPattern', PyJs_pushObjectPattern_933_)
            @Js
            def PyJs_canUnpackArrayPattern_934_(pattern, arr, this, arguments, var=var):
                var = Scope({'this':this, 'pattern':pattern, 'arr':arr, 'canUnpackArrayPattern':PyJs_canUnpackArrayPattern_934_, 'arguments':arguments}, var)
                var.registers(['_i4', 'arr', '_isArray4', '_isArray3', 'pattern', '_ref5', '_ref4', '_i3', 'elem', 'state', '_elem', '_iterator4', 'bindings', '_iterator3'])
                if var.get('t').callprop('isArrayExpression', var.get('arr')).neg():
                    return Js(False)
                if (var.get('pattern').get('elements').get('length')>var.get('arr').get('elements').get('length')):
                    return var.get('undefined')
                if ((var.get('pattern').get('elements').get('length')<var.get('arr').get('elements').get('length')) and var.get('hasRest')(var.get('pattern')).neg()):
                    return Js(False)
                #for JS loop
                var.put('_iterator3', var.get('pattern').get('elements'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref4', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref4', var.get('_i3').get('value'))
                    var.put('elem', var.get('_ref4'))
                    if var.get('elem').neg():
                        return Js(False)
                    if var.get('t').callprop('isMemberExpression', var.get('elem')):
                        return Js(False)
                
                #for JS loop
                var.put('_iterator4', var.get('arr').get('elements'))
                var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
                var.put('_i4', Js(0.0))
                var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
                while 1:
                    pass
                    if var.get('_isArray4'):
                        if (var.get('_i4')>=var.get('_iterator4').get('length')):
                            break
                        var.put('_ref5', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i4', var.get('_iterator4').callprop('next'))
                        if var.get('_i4').get('done'):
                            break
                        var.put('_ref5', var.get('_i4').get('value'))
                    var.put('_elem', var.get('_ref5'))
                    if var.get('t').callprop('isSpreadElement', var.get('_elem')):
                        return Js(False)
                    if var.get('t').callprop('isCallExpression', var.get('_elem')):
                        return Js(False)
                    if var.get('t').callprop('isMemberExpression', var.get('_elem')):
                        return Js(False)
                
                var.put('bindings', var.get('t').callprop('getBindingIdentifiers', var.get('pattern')))
                PyJs_Object_935_ = Js({'deopt':Js(False),'bindings':var.get('bindings')})
                var.put('state', PyJs_Object_935_)
                var.get("this").get('scope').callprop('traverse', var.get('arr'), var.get('arrayUnpackVisitor'), var.get('state'))
                return var.get('state').get('deopt').neg()
            PyJs_canUnpackArrayPattern_934_._set_name('canUnpackArrayPattern')
            var.get('DestructuringTransformer').get('prototype').put('canUnpackArrayPattern', PyJs_canUnpackArrayPattern_934_)
            @Js
            def PyJs_pushUnpackedArrayPattern_936_(pattern, arr, this, arguments, var=var):
                var = Scope({'this':this, 'pattern':pattern, 'arr':arr, 'arguments':arguments, 'pushUnpackedArrayPattern':PyJs_pushUnpackedArrayPattern_936_}, var)
                var.registers(['i', 'pattern', 'arr', 'elem'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('pattern').get('elements').get('length')):
                    try:
                        var.put('elem', var.get('pattern').get('elements').get(var.get('i')))
                        if var.get('t').callprop('isRestElement', var.get('elem')):
                            var.get("this").callprop('push', var.get('elem').get('argument'), var.get('t').callprop('arrayExpression', var.get('arr').get('elements').callprop('slice', var.get('i'))))
                        else:
                            var.get("this").callprop('push', var.get('elem'), var.get('arr').get('elements').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_pushUnpackedArrayPattern_936_._set_name('pushUnpackedArrayPattern')
            var.get('DestructuringTransformer').get('prototype').put('pushUnpackedArrayPattern', PyJs_pushUnpackedArrayPattern_936_)
            @Js
            def PyJs_pushArrayPattern_937_(pattern, arrayRef, this, arguments, var=var):
                var = Scope({'this':this, 'pattern':pattern, 'arguments':arguments, 'arrayRef':arrayRef, 'pushArrayPattern':PyJs_pushArrayPattern_937_}, var)
                var.registers(['count', 'toArray', 'i', 'pattern', 'elem', 'arrayRef', 'elemRef'])
                if var.get('pattern').get('elements').neg():
                    return var.get('undefined')
                if var.get("this").callprop('canUnpackArrayPattern', var.get('pattern'), var.get('arrayRef')):
                    return var.get("this").callprop('pushUnpackedArrayPattern', var.get('pattern'), var.get('arrayRef'))
                var.put('count', (var.get('hasRest')(var.get('pattern')).neg() and var.get('pattern').get('elements').get('length')))
                var.put('toArray', var.get("this").callprop('toArray', var.get('arrayRef'), var.get('count')))
                if var.get('t').callprop('isIdentifier', var.get('toArray')):
                    var.put('arrayRef', var.get('toArray'))
                else:
                    var.put('arrayRef', var.get("this").get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('arrayRef')))
                    var.get("this").get('arrays').put(var.get('arrayRef').get('name'), var.get('true'))
                    var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableDeclaration', var.get('arrayRef'), var.get('toArray')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('pattern').get('elements').get('length')):
                    try:
                        var.put('elem', var.get('pattern').get('elements').get(var.get('i')))
                        if var.get('elem').neg():
                            continue
                        var.put('elemRef', PyJsComma(Js(0.0), Js(None)))
                        if var.get('t').callprop('isRestElement', var.get('elem')):
                            var.put('elemRef', var.get("this").callprop('toArray', var.get('arrayRef')))
                            if (var.get('i')>Js(0.0)):
                                var.put('elemRef', var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('elemRef'), var.get('t').callprop('identifier', Js('slice'))), Js([var.get('t').callprop('numericLiteral', var.get('i'))])))
                            var.put('elem', var.get('elem').get('argument'))
                        else:
                            var.put('elemRef', var.get('t').callprop('memberExpression', var.get('arrayRef'), var.get('t').callprop('numericLiteral', var.get('i')), var.get('true')))
                        var.get("this").callprop('push', var.get('elem'), var.get('elemRef'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_pushArrayPattern_937_._set_name('pushArrayPattern')
            var.get('DestructuringTransformer').get('prototype').put('pushArrayPattern', PyJs_pushArrayPattern_937_)
            @Js
            def PyJs_init_938_(pattern, ref, this, arguments, var=var):
                var = Scope({'this':this, 'pattern':pattern, 'init':PyJs_init_938_, 'ref':ref, 'arguments':arguments}, var)
                var.registers(['pattern', 'memo', 'ref'])
                if (var.get('t').callprop('isArrayExpression', var.get('ref')).neg() and var.get('t').callprop('isMemberExpression', var.get('ref')).neg()):
                    var.put('memo', var.get("this").get('scope').callprop('maybeGenerateMemoised', var.get('ref'), var.get('true')))
                    if var.get('memo'):
                        var.get("this").get('nodes').callprop('push', var.get("this").callprop('buildVariableDeclaration', var.get('memo'), var.get('ref')))
                        var.put('ref', var.get('memo'))
                var.get("this").callprop('push', var.get('pattern'), var.get('ref'))
                return var.get("this").get('nodes')
            PyJs_init_938_._set_name('init')
            var.get('DestructuringTransformer').get('prototype').put('init', PyJs_init_938_)
            return var.get('DestructuringTransformer')
        PyJs_anonymous_924_._set_name('anonymous')
        var.put('DestructuringTransformer', PyJs_anonymous_924_())
        @Js
        def PyJs_ExportNamedDeclaration_941_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ExportNamedDeclaration':PyJs_ExportNamedDeclaration_941_}, var)
            var.registers(['id', 'specifiers', 'path', 'name', 'declaration'])
            var.put('declaration', var.get('path').callprop('get', Js('declaration')))
            if var.get('declaration').callprop('isVariableDeclaration').neg():
                return var.get('undefined')
            if var.get('variableDeclarationHasPattern')(var.get('declaration').get('node')).neg():
                return var.get('undefined')
            var.put('specifiers', Js([]))
            for PyJsTemp in var.get('path').callprop('getOuterBindingIdentifiers', var.get('path')):
                var.put('name', PyJsTemp)
                var.put('id', var.get('t').callprop('identifier', var.get('name')))
                var.get('specifiers').callprop('push', var.get('t').callprop('exportSpecifier', var.get('id'), var.get('id')))
            var.get('path').callprop('replaceWith', var.get('declaration').get('node'))
            var.get('path').callprop('insertAfter', var.get('t').callprop('exportNamedDeclaration', var.get("null"), var.get('specifiers')))
        PyJs_ExportNamedDeclaration_941_._set_name('ExportNamedDeclaration')
        @Js
        def PyJs_ForXStatement_942_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'ForXStatement':PyJs_ForXStatement_942_}, var)
            var.registers(['node', 'destructuring', 'file', 'temp', 'pattern', 'key', 'path', 'scope', 'nodes', 'block', 'left'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('left', var.get('node').get('left'))
            if var.get('t').callprop('isPattern', var.get('left')):
                var.put('temp', var.get('scope').callprop('generateUidIdentifier', Js('ref')))
                var.get('node').put('left', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('temp'))])))
                var.get('path').callprop('ensureBlock')
                var.get('node').get('body').get('body').callprop('unshift', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('left'), var.get('temp'))])))
                return var.get('undefined')
            if var.get('t').callprop('isVariableDeclaration', var.get('left')).neg():
                return var.get('undefined')
            var.put('pattern', var.get('left').get('declarations').get('0').get('id'))
            if var.get('t').callprop('isPattern', var.get('pattern')).neg():
                return var.get('undefined')
            var.put('key', var.get('scope').callprop('generateUidIdentifier', Js('ref')))
            var.get('node').put('left', var.get('t').callprop('variableDeclaration', var.get('left').get('kind'), Js([var.get('t').callprop('variableDeclarator', var.get('key'), var.get("null"))])))
            var.put('nodes', Js([]))
            PyJs_Object_943_ = Js({'kind':var.get('left').get('kind'),'file':var.get('file'),'scope':var.get('scope'),'nodes':var.get('nodes')})
            var.put('destructuring', var.get('DestructuringTransformer').create(PyJs_Object_943_))
            var.get('destructuring').callprop('init', var.get('pattern'), var.get('key'))
            var.get('path').callprop('ensureBlock')
            var.put('block', var.get('node').get('body'))
            var.get('block').put('body', var.get('nodes').callprop('concat', var.get('block').get('body')))
        PyJs_ForXStatement_942_._set_name('ForXStatement')
        @Js
        def PyJs_CatchClause_944_(_ref6, file, this, arguments, var=var):
            var = Scope({'this':this, '_ref6':_ref6, 'arguments':arguments, 'file':file, 'CatchClause':PyJs_CatchClause_944_}, var)
            var.registers(['node', 'destructuring', 'pattern', 'file', '_ref6', 'scope', 'nodes', 'ref'])
            var.put('node', var.get('_ref6').get('node'))
            var.put('scope', var.get('_ref6').get('scope'))
            var.put('pattern', var.get('node').get('param'))
            if var.get('t').callprop('isPattern', var.get('pattern')).neg():
                return var.get('undefined')
            var.put('ref', var.get('scope').callprop('generateUidIdentifier', Js('ref')))
            var.get('node').put('param', var.get('ref'))
            var.put('nodes', Js([]))
            PyJs_Object_945_ = Js({'kind':Js('let'),'file':var.get('file'),'scope':var.get('scope'),'nodes':var.get('nodes')})
            var.put('destructuring', var.get('DestructuringTransformer').create(PyJs_Object_945_))
            var.get('destructuring').callprop('init', var.get('pattern'), var.get('ref'))
            var.get('node').get('body').put('body', var.get('nodes').callprop('concat', var.get('node').get('body').get('body')))
        PyJs_CatchClause_944_._set_name('CatchClause')
        @Js
        def PyJs_AssignmentExpression_946_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'AssignmentExpression':PyJs_AssignmentExpression_946_}, var)
            var.registers(['node', 'destructuring', 'file', 'path', 'scope', 'nodes', 'ref'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            if var.get('t').callprop('isPattern', var.get('node').get('left')).neg():
                return var.get('undefined')
            var.put('nodes', Js([]))
            PyJs_Object_947_ = Js({'operator':var.get('node').get('operator'),'file':var.get('file'),'scope':var.get('scope'),'nodes':var.get('nodes')})
            var.put('destructuring', var.get('DestructuringTransformer').create(PyJs_Object_947_))
            var.put('ref', PyJsComma(Js(0.0), Js(None)))
            if (var.get('path').callprop('isCompletionRecord') or var.get('path').get('parentPath').callprop('isExpressionStatement').neg()):
                var.put('ref', var.get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('node').get('right'), Js('ref')))
                var.get('nodes').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('ref'), var.get('node').get('right'))])))
                if var.get('t').callprop('isArrayExpression', var.get('node').get('right')):
                    var.get('destructuring').get('arrays').put(var.get('ref').get('name'), var.get('true'))
            var.get('destructuring').callprop('init', var.get('node').get('left'), (var.get('ref') or var.get('node').get('right')))
            if var.get('ref'):
                var.get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('ref')))
            var.get('path').callprop('replaceWithMultiple', var.get('nodes'))
        PyJs_AssignmentExpression_946_._set_name('AssignmentExpression')
        @Js
        def PyJs_VariableDeclaration_948_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file, 'VariableDeclaration':PyJs_VariableDeclaration_948_}, var)
            var.registers(['node', '_isArray5', 'patternId', '_ref7', 'parent', 'i', 'pattern', '_i5', 'tail', '_iterator5', '_node', 'declar', 'nodesOut', 'file', 'path', 'destructuring', 'scope', 'nodes', '_tail$declarations'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('parent', var.get('path').get('parent'))
            if var.get('t').callprop('isForXStatement', var.get('parent')):
                return var.get('undefined')
            if (var.get('parent').neg() or var.get('path').get('container').neg()):
                return var.get('undefined')
            if var.get('variableDeclarationHasPattern')(var.get('node')).neg():
                return var.get('undefined')
            var.put('nodes', Js([]))
            var.put('declar', PyJsComma(Js(0.0), Js(None)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('node').get('declarations').get('length')):
                try:
                    var.put('declar', var.get('node').get('declarations').get(var.get('i')))
                    var.put('patternId', var.get('declar').get('init'))
                    var.put('pattern', var.get('declar').get('id'))
                    PyJs_Object_949_ = Js({'blockHoist':var.get('node').get('_blockHoist'),'nodes':var.get('nodes'),'scope':var.get('scope'),'kind':var.get('node').get('kind'),'file':var.get('file')})
                    var.put('destructuring', var.get('DestructuringTransformer').create(PyJs_Object_949_))
                    if var.get('t').callprop('isPattern', var.get('pattern')):
                        var.get('destructuring').callprop('init', var.get('pattern'), var.get('patternId'))
                        if PyJsStrictNeq((+var.get('i')),(var.get('node').get('declarations').get('length')-Js(1.0))):
                            var.get('t').callprop('inherits', var.get('nodes').get((var.get('nodes').get('length')-Js(1.0))), var.get('declar'))
                    else:
                        var.get('nodes').callprop('push', var.get('t').callprop('inherits', var.get('destructuring').callprop('buildVariableAssignment', var.get('declar').get('id'), var.get('declar').get('init')), var.get('declar')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('nodesOut', Js([]))
            #for JS loop
            var.put('_iterator5', var.get('nodes'))
            var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
            var.put('_i5', Js(0.0))
            var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
            while 1:
                pass
                if var.get('_isArray5'):
                    if (var.get('_i5')>=var.get('_iterator5').get('length')):
                        break
                    var.put('_ref7', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i5', var.get('_iterator5').callprop('next'))
                    if var.get('_i5').get('done'):
                        break
                    var.put('_ref7', var.get('_i5').get('value'))
                var.put('_node', var.get('_ref7'))
                var.put('tail', var.get('nodesOut').get((var.get('nodesOut').get('length')-Js(1.0))))
                if (((var.get('tail') and var.get('t').callprop('isVariableDeclaration', var.get('tail'))) and var.get('t').callprop('isVariableDeclaration', var.get('_node'))) and PyJsStrictEq(var.get('tail').get('kind'),var.get('_node').get('kind'))):
                    pass
                    var.put('_tail$declarations', var.get('tail').get('declarations')).get('push').callprop('apply', var.get('_tail$declarations'), var.get('_node').get('declarations'))
                else:
                    var.get('nodesOut').callprop('push', var.get('_node'))
            
            if PyJsStrictEq(var.get('nodesOut').get('length'),Js(1.0)):
                var.get('path').callprop('replaceWith', var.get('nodesOut').get('0'))
            else:
                var.get('path').callprop('replaceWithMultiple', var.get('nodesOut'))
        PyJs_VariableDeclaration_948_._set_name('VariableDeclaration')
        PyJs_Object_940_ = Js({'ExportNamedDeclaration':PyJs_ExportNamedDeclaration_941_,'ForXStatement':PyJs_ForXStatement_942_,'CatchClause':PyJs_CatchClause_944_,'AssignmentExpression':PyJs_AssignmentExpression_946_,'VariableDeclaration':PyJs_VariableDeclaration_948_})
        PyJs_Object_939_ = Js({'visitor':PyJs_Object_940_})
        return PyJs_Object_939_
    PyJs_anonymous_921_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_921_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_920_._set_name('anonymous')
PyJs_Object_951_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0)})
@Js
def PyJs_anonymous_952_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', 'exports', '_interopRequireWildcard', 'getName', '_babelTypes', 'module', '_create2', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'require'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_959_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_959_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getName_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        if var.get('t').callprop('isIdentifier', var.get('key')):
            return var.get('key').get('name')
        return var.get('key').get('value').callprop('toString')
    PyJsHoisted_getName_.__name__ = 'getName'
    var.put('getName', PyJsHoisted_getName_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_958_ = Js({})
            var.put('newObj', PyJs_Object_958_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    @Js
    def PyJs_anonymous_953_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_ObjectExpression_956_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'ObjectExpression':PyJs_ObjectExpression_956_, 'arguments':arguments}, var)
            var.registers(['node', 'alreadySeenGetters', '_isArray', 'plainProps', 'name', 'alreadySeenSetters', 'alreadySeenData', 'prop', '_i', 'path', 'isDuplicate', '_iterator', '_ref'])
            var.put('node', var.get('path').get('node'))
            @Js
            def PyJs_anonymous_957_(prop, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'prop':prop}, var)
                var.registers(['prop'])
                return (var.get('t').callprop('isSpreadProperty', var.get('prop')).neg() and var.get('prop').get('computed').neg())
            PyJs_anonymous_957_._set_name('anonymous')
            var.put('plainProps', var.get('node').get('properties').callprop('filter', PyJs_anonymous_957_))
            var.put('alreadySeenData', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('alreadySeenGetters', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('alreadySeenSetters', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            #for JS loop
            var.put('_iterator', var.get('plainProps'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('prop', var.get('_ref'))
                var.put('name', var.get('getName')(var.get('prop').get('key')))
                var.put('isDuplicate', Js(False))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('prop').get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('get')):
                        SWITCHED = True
                        if (var.get('alreadySeenData').get(var.get('name')) or var.get('alreadySeenGetters').get(var.get('name'))):
                            var.put('isDuplicate', var.get('true'))
                        var.get('alreadySeenGetters').put(var.get('name'), var.get('true'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('set')):
                        SWITCHED = True
                        if (var.get('alreadySeenData').get(var.get('name')) or var.get('alreadySeenSetters').get(var.get('name'))):
                            var.put('isDuplicate', var.get('true'))
                        var.get('alreadySeenSetters').put(var.get('name'), var.get('true'))
                        break
                    if True:
                        SWITCHED = True
                        if ((var.get('alreadySeenData').get(var.get('name')) or var.get('alreadySeenGetters').get(var.get('name'))) or var.get('alreadySeenSetters').get(var.get('name'))):
                            var.put('isDuplicate', var.get('true'))
                        var.get('alreadySeenData').put(var.get('name'), var.get('true'))
                    SWITCHED = True
                    break
                if var.get('isDuplicate'):
                    var.get('prop').put('computed', var.get('true'))
                    var.get('prop').put('key', var.get('t').callprop('stringLiteral', var.get('name')))
            
        PyJs_ObjectExpression_956_._set_name('ObjectExpression')
        PyJs_Object_955_ = Js({'ObjectExpression':PyJs_ObjectExpression_956_})
        PyJs_Object_954_ = Js({'visitor':PyJs_Object_955_})
        return PyJs_Object_954_
    PyJs_anonymous_953_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_953_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_952_._set_name('anonymous')
PyJs_Object_960_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_961_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_962_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['loose', 'messages', '_ForOfStatementArray', 'buildForOfArray', 'buildForOfLoose', 't', 'template', '_ref', 'buildForOf', 'spec'])
        @Js
        def PyJsHoisted_loose_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file}, var)
            var.registers(['node', 'iteratorKey', 'isArrayKey', 'declar', 'file', 'path', 'scope', 'id', 'loop', 'left'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('left', var.get('node').get('left'))
            var.put('declar', PyJsComma(Js(0.0), Js(None)))
            var.put('id', PyJsComma(Js(0.0), Js(None)))
            if ((var.get('t').callprop('isIdentifier', var.get('left')) or var.get('t').callprop('isPattern', var.get('left'))) or var.get('t').callprop('isMemberExpression', var.get('left'))):
                var.put('id', var.get('left'))
            else:
                if var.get('t').callprop('isVariableDeclaration', var.get('left')):
                    var.put('id', var.get('scope').callprop('generateUidIdentifier', Js('ref')))
                    var.put('declar', var.get('t').callprop('variableDeclaration', var.get('left').get('kind'), Js([var.get('t').callprop('variableDeclarator', var.get('left').get('declarations').get('0').get('id'), var.get('id'))])))
                else:
                    PyJsTempException = JsToPyException(var.get('file').callprop('buildCodeFrameError', var.get('left'), var.get('messages').callprop('get', Js('unknownForHead'), var.get('left').get('type'))))
                    raise PyJsTempException
            var.put('iteratorKey', var.get('scope').callprop('generateUidIdentifier', Js('iterator')))
            var.put('isArrayKey', var.get('scope').callprop('generateUidIdentifier', Js('isArray')))
            PyJs_Object_969_ = Js({'LOOP_OBJECT':var.get('iteratorKey'),'IS_ARRAY':var.get('isArrayKey'),'OBJECT':var.get('node').get('right'),'INDEX':var.get('scope').callprop('generateUidIdentifier', Js('i')),'ID':var.get('id')})
            var.put('loop', var.get('buildForOfLoose')(PyJs_Object_969_))
            if var.get('declar').neg():
                var.get('loop').get('body').get('body').callprop('shift')
            PyJs_Object_970_ = Js({'declar':var.get('declar'),'node':var.get('loop'),'loop':var.get('loop')})
            return PyJs_Object_970_
        PyJsHoisted_loose_.__name__ = 'loose'
        var.put('loose', PyJsHoisted_loose_)
        @Js
        def PyJsHoisted__ForOfStatementArray_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['node', 'iterationValue', 'right', 'uid', 'iterationKey', 'path', 'scope', 'nodes', 'loop', 'left'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('nodes', Js([]))
            var.put('right', var.get('node').get('right'))
            if (var.get('t').callprop('isIdentifier', var.get('right')).neg() or var.get('scope').callprop('hasBinding', var.get('right').get('name')).neg()):
                var.put('uid', var.get('scope').callprop('generateUidIdentifier', Js('arr')))
                var.get('nodes').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('uid'), var.get('right'))])))
                var.put('right', var.get('uid'))
            var.put('iterationKey', var.get('scope').callprop('generateUidIdentifier', Js('i')))
            PyJs_Object_965_ = Js({'BODY':var.get('node').get('body'),'KEY':var.get('iterationKey'),'ARR':var.get('right')})
            var.put('loop', var.get('buildForOfArray')(PyJs_Object_965_))
            var.get('t').callprop('inherits', var.get('loop'), var.get('node'))
            var.get('t').callprop('ensureBlock', var.get('loop'))
            var.put('iterationValue', var.get('t').callprop('memberExpression', var.get('right'), var.get('iterationKey'), var.get('true')))
            var.put('left', var.get('node').get('left'))
            if var.get('t').callprop('isVariableDeclaration', var.get('left')):
                var.get('left').get('declarations').get('0').put('init', var.get('iterationValue'))
                var.get('loop').get('body').get('body').callprop('unshift', var.get('left'))
            else:
                var.get('loop').get('body').get('body').callprop('unshift', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('left'), var.get('iterationValue'))))
            if var.get('path').get('parentPath').callprop('isLabeledStatement'):
                var.put('loop', var.get('t').callprop('labeledStatement', var.get('path').get('parentPath').get('node').get('label'), var.get('loop')))
            var.get('nodes').callprop('push', var.get('loop'))
            return var.get('nodes')
        PyJsHoisted__ForOfStatementArray_.__name__ = '_ForOfStatementArray'
        var.put('_ForOfStatementArray', PyJsHoisted__ForOfStatementArray_)
        @Js
        def PyJsHoisted_spec_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'file':file}, var)
            var.registers(['node', 'stepValue', 'isLabeledParent', 'stepKey', 'file', 'parent', 'tryBody', 'declar', 'template', 'path', 'scope', 'iteratorKey', 'loop', 'left'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('parent', var.get('path').get('parent'))
            var.put('left', var.get('node').get('left'))
            var.put('declar', PyJsComma(Js(0.0), Js(None)))
            var.put('stepKey', var.get('scope').callprop('generateUidIdentifier', Js('step')))
            var.put('stepValue', var.get('t').callprop('memberExpression', var.get('stepKey'), var.get('t').callprop('identifier', Js('value'))))
            if ((var.get('t').callprop('isIdentifier', var.get('left')) or var.get('t').callprop('isPattern', var.get('left'))) or var.get('t').callprop('isMemberExpression', var.get('left'))):
                var.put('declar', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('left'), var.get('stepValue'))))
            else:
                if var.get('t').callprop('isVariableDeclaration', var.get('left')):
                    var.put('declar', var.get('t').callprop('variableDeclaration', var.get('left').get('kind'), Js([var.get('t').callprop('variableDeclarator', var.get('left').get('declarations').get('0').get('id'), var.get('stepValue'))])))
                else:
                    PyJsTempException = JsToPyException(var.get('file').callprop('buildCodeFrameError', var.get('left'), var.get('messages').callprop('get', Js('unknownForHead'), var.get('left').get('type'))))
                    raise PyJsTempException
            var.put('iteratorKey', var.get('scope').callprop('generateUidIdentifier', Js('iterator')))
            PyJs_Object_971_ = Js({'ITERATOR_HAD_ERROR_KEY':var.get('scope').callprop('generateUidIdentifier', Js('didIteratorError')),'ITERATOR_COMPLETION':var.get('scope').callprop('generateUidIdentifier', Js('iteratorNormalCompletion')),'ITERATOR_ERROR_KEY':var.get('scope').callprop('generateUidIdentifier', Js('iteratorError')),'ITERATOR_KEY':var.get('iteratorKey'),'STEP_KEY':var.get('stepKey'),'OBJECT':var.get('node').get('right'),'BODY':var.get("null")})
            var.put('template', var.get('buildForOf')(PyJs_Object_971_))
            var.put('isLabeledParent', var.get('t').callprop('isLabeledStatement', var.get('parent')))
            var.put('tryBody', var.get('template').get('3').get('block').get('body'))
            var.put('loop', var.get('tryBody').get('0'))
            if var.get('isLabeledParent'):
                var.get('tryBody').put('0', var.get('t').callprop('labeledStatement', var.get('parent').get('label'), var.get('loop')))
            PyJs_Object_972_ = Js({'replaceParent':var.get('isLabeledParent'),'declar':var.get('declar'),'loop':var.get('loop'),'node':var.get('template')})
            return PyJs_Object_972_
        PyJsHoisted_spec_.__name__ = 'spec'
        var.put('spec', PyJsHoisted_spec_)
        var.put('messages', var.get('_ref').get('messages'))
        var.put('template', var.get('_ref').get('template'))
        var.put('t', var.get('_ref').get('types'))
        var.put('buildForOfArray', var.get('template')(Js('\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ')))
        def PyJs_LONG_963_(var=var):
            return var.get('template')(Js('\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  '))
        var.put('buildForOfLoose', PyJs_LONG_963_())
        def PyJs_LONG_964_(var=var):
            return var.get('template')(Js('\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  '))
        var.put('buildForOf', PyJs_LONG_964_())
        pass
        @Js
        def PyJs_ForOfStatement_968_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'ForOfStatement':PyJs_ForOfStatement_968_}, var)
            var.registers(['node', 'callback', 'state', 'declar', 'build', 'loop', 'path', 'block'])
            if var.get('path').callprop('get', Js('right')).callprop('isArrayExpression'):
                if var.get('path').get('parentPath').callprop('isLabeledStatement'):
                    return var.get('path').get('parentPath').callprop('replaceWithMultiple', var.get('_ForOfStatementArray')(var.get('path')))
                else:
                    return var.get('path').callprop('replaceWithMultiple', var.get('_ForOfStatementArray')(var.get('path')))
            var.put('callback', var.get('spec'))
            if var.get('state').get('opts').get('loose'):
                var.put('callback', var.get('loose'))
            var.put('node', var.get('path').get('node'))
            var.put('build', var.get('callback')(var.get('path'), var.get('state')))
            var.put('declar', var.get('build').get('declar'))
            var.put('loop', var.get('build').get('loop'))
            var.put('block', var.get('loop').get('body'))
            var.get('path').callprop('ensureBlock')
            if var.get('declar'):
                var.get('block').get('body').callprop('push', var.get('declar'))
            var.get('block').put('body', var.get('block').get('body').callprop('concat', var.get('node').get('body').get('body')))
            var.get('t').callprop('inherits', var.get('loop'), var.get('node'))
            var.get('t').callprop('inherits', var.get('loop').get('body'), var.get('node').get('body'))
            if var.get('build').get('replaceParent'):
                var.get('path').get('parentPath').callprop('replaceWithMultiple', var.get('build').get('node'))
                var.get('path').callprop('remove')
            else:
                var.get('path').callprop('replaceWithMultiple', var.get('build').get('node'))
        PyJs_ForOfStatement_968_._set_name('ForOfStatement')
        PyJs_Object_967_ = Js({'ForOfStatement':PyJs_ForOfStatement_968_})
        PyJs_Object_966_ = Js({'visitor':PyJs_Object_967_})
        return PyJs_Object_966_
        pass
        pass
    PyJs_anonymous_962_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_962_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_961_._set_name('anonymous')
PyJs_Object_973_ = Js({})
@Js
def PyJs_anonymous_974_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', '_babelHelperFunctionName', 'module', '_babelHelperFunctionName2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_981_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_981_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_975_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_exit_979_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_979_, 'arguments':arguments}, var)
            var.registers(['path', 'replacement'])
            if (PyJsStrictNeq(var.get('path').get('key'),Js('value')) and var.get('path').get('parentPath').callprop('isObjectProperty').neg()):
                var.put('replacement', PyJsComma(Js(0.0),var.get('_babelHelperFunctionName2').get('default'))(var.get('path')))
                if var.get('replacement'):
                    var.get('path').callprop('replaceWith', var.get('replacement'))
        PyJs_exit_979_._set_name('exit')
        PyJs_Object_978_ = Js({'exit':PyJs_exit_979_})
        @Js
        def PyJs_ObjectProperty_980_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'ObjectProperty':PyJs_ObjectProperty_980_, 'arguments':arguments}, var)
            var.registers(['newNode', 'value', 'path'])
            var.put('value', var.get('path').callprop('get', Js('value')))
            if var.get('value').callprop('isFunction'):
                var.put('newNode', PyJsComma(Js(0.0),var.get('_babelHelperFunctionName2').get('default'))(var.get('value')))
                if var.get('newNode'):
                    var.get('value').callprop('replaceWith', var.get('newNode'))
        PyJs_ObjectProperty_980_._set_name('ObjectProperty')
        PyJs_Object_977_ = Js({'ArrowFunctionExpression|FunctionExpression':PyJs_Object_978_,'ObjectProperty':PyJs_ObjectProperty_980_})
        PyJs_Object_976_ = Js({'visitor':PyJs_Object_977_})
        return PyJs_Object_976_
    PyJs_anonymous_975_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_975_)
    var.put('_babelHelperFunctionName', var.get('require')(Js('babel-helper-function-name')))
    var.put('_babelHelperFunctionName2', var.get('_interopRequireDefault')(var.get('_babelHelperFunctionName')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_974_._set_name('anonymous')
PyJs_Object_982_ = Js({'babel-helper-function-name':Js(49.0)})
@Js
def PyJs_anonymous_983_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_984_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_NumericLiteral_987_(_ref, this, arguments, var=var):
            var = Scope({'this':this, 'NumericLiteral':PyJs_NumericLiteral_987_, '_ref':_ref, 'arguments':arguments}, var)
            var.registers(['node', '_ref'])
            var.put('node', var.get('_ref').get('node'))
            if (var.get('node').get('extra') and JsRegExp('/^0[ob]/i').callprop('test', var.get('node').get('extra').get('raw'))):
                var.get('node').put('extra', var.get('undefined'))
        PyJs_NumericLiteral_987_._set_name('NumericLiteral')
        @Js
        def PyJs_StringLiteral_988_(_ref2, this, arguments, var=var):
            var = Scope({'this':this, 'StringLiteral':PyJs_StringLiteral_988_, '_ref2':_ref2, 'arguments':arguments}, var)
            var.registers(['node', '_ref2'])
            var.put('node', var.get('_ref2').get('node'))
            if (var.get('node').get('extra') and JsRegExp('/\\\\[u]/gi').callprop('test', var.get('node').get('extra').get('raw'))):
                var.get('node').put('extra', var.get('undefined'))
        PyJs_StringLiteral_988_._set_name('StringLiteral')
        PyJs_Object_986_ = Js({'NumericLiteral':PyJs_NumericLiteral_987_,'StringLiteral':PyJs_StringLiteral_988_})
        PyJs_Object_985_ = Js({'visitor':PyJs_Object_986_})
        return PyJs_Object_985_
    PyJs_anonymous_984_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_984_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_983_._set_name('anonymous')
PyJs_Object_989_ = Js({})
@Js
def PyJs_anonymous_990_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', 'buildDefine', 'exports', 'require', '_babelTemplate', 'module', '_create2', '_babelTemplate2', 'buildFactory', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1007_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1007_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    @Js
    def PyJs_anonymous_991_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['isValidRequireCall', 'amdVisitor', '_ref', 't'])
        @Js
        def PyJsHoisted_isValidRequireCall_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path', 'args', 'arg'])
            if var.get('path').callprop('isCallExpression').neg():
                return Js(False)
            PyJs_Object_992_ = Js({'name':Js('require')})
            if var.get('path').callprop('get', Js('callee')).callprop('isIdentifier', PyJs_Object_992_).neg():
                return Js(False)
            if var.get('path').get('scope').callprop('getBinding', Js('require')):
                return Js(False)
            var.put('args', var.get('path').callprop('get', Js('arguments')))
            if PyJsStrictNeq(var.get('args').get('length'),Js(1.0)):
                return Js(False)
            var.put('arg', var.get('args').get('0'))
            if var.get('arg').callprop('isStringLiteral').neg():
                return Js(False)
            return var.get('true')
        PyJsHoisted_isValidRequireCall_.__name__ = 'isValidRequireCall'
        var.put('isValidRequireCall', PyJsHoisted_isValidRequireCall_)
        var.put('t', var.get('_ref').get('types'))
        pass
        @Js
        def PyJs_ReferencedIdentifier_994_(_ref2, this, arguments, var=var):
            var = Scope({'this':this, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_994_, '_ref2':_ref2, 'arguments':arguments}, var)
            var.registers(['node', 'scope', '_ref2'])
            var.put('node', var.get('_ref2').get('node'))
            var.put('scope', var.get('_ref2').get('scope'))
            if (PyJsStrictEq(var.get('node').get('name'),Js('exports')) and var.get('scope').callprop('getBinding', Js('exports')).neg()):
                var.get("this").put('hasExports', var.get('true'))
            if (PyJsStrictEq(var.get('node').get('name'),Js('module')) and var.get('scope').callprop('getBinding', Js('module')).neg()):
                var.get("this").put('hasModule', var.get('true'))
        PyJs_ReferencedIdentifier_994_._set_name('ReferencedIdentifier')
        @Js
        def PyJs_CallExpression_995_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'CallExpression':PyJs_CallExpression_995_}, var)
            var.registers(['path'])
            if var.get('isValidRequireCall')(var.get('path')).neg():
                return var.get('undefined')
            var.get("this").get('bareSources').callprop('push', var.get('path').get('node').get('arguments').get('0'))
            var.get('path').callprop('remove')
        PyJs_CallExpression_995_._set_name('CallExpression')
        @Js
        def PyJs_VariableDeclarator_996_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'VariableDeclarator':PyJs_VariableDeclarator_996_}, var)
            var.registers(['source', 'init', 'id', 'path'])
            var.put('id', var.get('path').callprop('get', Js('id')))
            if var.get('id').callprop('isIdentifier').neg():
                return var.get('undefined')
            var.put('init', var.get('path').callprop('get', Js('init')))
            if var.get('isValidRequireCall')(var.get('init')).neg():
                return var.get('undefined')
            var.put('source', var.get('init').get('node').get('arguments').get('0'))
            var.get("this").get('sourceNames').put(var.get('source').get('value'), var.get('true'))
            var.get("this").get('sources').callprop('push', Js([var.get('id').get('node'), var.get('source')]))
            var.get('path').callprop('remove')
        PyJs_VariableDeclarator_996_._set_name('VariableDeclarator')
        PyJs_Object_993_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_994_,'CallExpression':PyJs_CallExpression_995_,'VariableDeclarator':PyJs_VariableDeclarator_996_})
        var.put('amdVisitor', PyJs_Object_993_)
        @Js
        def PyJs_pre_998_(this, arguments, var=var):
            var = Scope({'this':this, 'pre':PyJs_pre_998_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").put('sources', Js([]))
            var.get("this").put('sourceNames', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('bareSources', Js([]))
            var.get("this").put('hasExports', Js(False))
            var.get("this").put('hasModule', Js(False))
        PyJs_pre_998_._set_name('pre')
        @Js
        def PyJs_exit_1001_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_1001_, 'arguments':arguments}, var)
            var.registers(['node', 'moduleName', '_this', 'factory', 'sources', 'params', 'path'])
            var.put('_this', var.get("this"))
            if var.get("this").get('ran'):
                return var.get('undefined')
            var.get("this").put('ran', var.get('true'))
            var.get('path').callprop('traverse', var.get('amdVisitor'), var.get("this"))
            @Js
            def PyJs_anonymous_1002_(source, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'arguments':arguments}, var)
                var.registers(['source'])
                return var.get('source').get('0')
            PyJs_anonymous_1002_._set_name('anonymous')
            var.put('params', var.get("this").get('sources').callprop('map', PyJs_anonymous_1002_))
            @Js
            def PyJs_anonymous_1003_(source, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'arguments':arguments}, var)
                var.registers(['source'])
                return var.get('source').get('1')
            PyJs_anonymous_1003_._set_name('anonymous')
            var.put('sources', var.get("this").get('sources').callprop('map', PyJs_anonymous_1003_))
            @Js
            def PyJs_anonymous_1004_(str, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
                var.registers(['str'])
                return var.get('_this').get('sourceNames').get(var.get('str').get('value')).neg()
            PyJs_anonymous_1004_._set_name('anonymous')
            var.put('sources', var.get('sources').callprop('concat', var.get("this").get('bareSources').callprop('filter', PyJs_anonymous_1004_)))
            var.put('moduleName', var.get("this").callprop('getModuleName'))
            if var.get('moduleName'):
                var.put('moduleName', var.get('t').callprop('stringLiteral', var.get('moduleName')))
            if var.get("this").get('hasExports'):
                var.get('sources').callprop('unshift', var.get('t').callprop('stringLiteral', Js('exports')))
                var.get('params').callprop('unshift', var.get('t').callprop('identifier', Js('exports')))
            if var.get("this").get('hasModule'):
                var.get('sources').callprop('unshift', var.get('t').callprop('stringLiteral', Js('module')))
                var.get('params').callprop('unshift', var.get('t').callprop('identifier', Js('module')))
            var.put('node', var.get('path').get('node'))
            PyJs_Object_1005_ = Js({'PARAMS':var.get('params'),'BODY':var.get('node').get('body')})
            var.put('factory', var.get('buildFactory')(PyJs_Object_1005_))
            var.get('factory').get('expression').get('body').put('directives', var.get('node').get('directives'))
            var.get('node').put('directives', Js([]))
            PyJs_Object_1006_ = Js({'MODULE_NAME':var.get('moduleName'),'SOURCES':var.get('sources'),'FACTORY':var.get('factory')})
            var.get('node').put('body', Js([var.get('buildDefine')(PyJs_Object_1006_)]))
        PyJs_exit_1001_._set_name('exit')
        PyJs_Object_1000_ = Js({'exit':PyJs_exit_1001_})
        PyJs_Object_999_ = Js({'Program':PyJs_Object_1000_})
        PyJs_Object_997_ = Js({'inherits':var.get('require')(Js('babel-plugin-transform-es2015-modules-commonjs')),'pre':PyJs_pre_998_,'visitor':PyJs_Object_999_})
        return PyJs_Object_997_
    PyJs_anonymous_991_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_991_)
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    pass
    var.put('buildDefine', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  define(MODULE_NAME, [SOURCES], FACTORY);\n')))
    var.put('buildFactory', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (PARAMS) {\n    BODY;\n  })\n')))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_990_._set_name('anonymous')
PyJs_Object_1008_ = Js({'babel-plugin-transform-es2015-modules-commonjs':Js(73.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-template':Js(221.0)})
@Js
def PyJs_anonymous_1009_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_symbol2', '_babelTemplate', 'module', 'buildLooseExportsModuleDeclaration', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'buildExportAll', '_create2', '_keys', 'buildExportsAssignment', 'THIS_BREAK_KEYS', '_create', 'exports', '_interopRequireWildcard', '_babelTypes', 'buildRequire', 'buildExportsModuleDeclaration', '_symbol', '_path2', 'buildExportsFrom', '_keys2', '_babelTemplate2', 't', 'require'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1028_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1028_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1027_ = Js({})
            var.put('newObj', PyJs_Object_1027_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1010_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['reassignmentVisitor', 'REASSIGN_REMAP_SKIP'])
        var.put('REASSIGN_REMAP_SKIP', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
        @Js
        def PyJs_ReferencedIdentifier_1012_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_1012_, 'arguments':arguments}, var)
            var.registers(['property', 'remap', 'object', 'name', 'path'])
            var.put('name', var.get('path').get('node').get('name'))
            var.put('remap', var.get("this").get('remaps').get(var.get('name')))
            if var.get('remap').neg():
                return var.get('undefined')
            if PyJsStrictNeq(var.get("this").get('scope').callprop('getBinding', var.get('name')),var.get('path').get('scope').callprop('getBinding', var.get('name'))):
                return var.get('undefined')
            PyJs_Object_1013_ = Js({'callee':var.get('path').get('node')})
            if var.get('path').get('parentPath').callprop('isCallExpression', PyJs_Object_1013_):
                var.get('path').callprop('replaceWith', var.get('t').callprop('sequenceExpression', Js([var.get('t').callprop('numericLiteral', Js(0.0)), var.get('remap')])))
            else:
                if (var.get('path').callprop('isJSXIdentifier') and var.get('t').callprop('isMemberExpression', var.get('remap'))):
                    var.put('object', var.get('remap').get('object'))
                    var.put('property', var.get('remap').get('property'))
                    var.get('path').callprop('replaceWith', var.get('t').callprop('JSXMemberExpression', var.get('t').callprop('JSXIdentifier', var.get('object').get('name')), var.get('t').callprop('JSXIdentifier', var.get('property').get('name'))))
                else:
                    var.get('path').callprop('replaceWith', var.get('remap'))
            var.get("this").callprop('requeueInParent', var.get('path'))
        PyJs_ReferencedIdentifier_1012_._set_name('ReferencedIdentifier')
        @Js
        def PyJs_AssignmentExpression_1014_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'AssignmentExpression':PyJs_AssignmentExpression_1014_}, var)
            var.registers(['node', '_isArray', '_iterator', 'name', 'exports', 'reid', '_i', 'path', '_ref', 'left'])
            var.put('node', var.get('path').get('node'))
            if var.get('node').get(var.get('REASSIGN_REMAP_SKIP')):
                return var.get('undefined')
            var.put('left', var.get('path').callprop('get', Js('left')))
            if var.get('left').callprop('isIdentifier').neg():
                return var.get('undefined')
            var.put('name', var.get('left').get('node').get('name'))
            var.put('exports', var.get("this").get('exports').get(var.get('name')))
            if var.get('exports').neg():
                return var.get('undefined')
            if PyJsStrictNeq(var.get("this").get('scope').callprop('getBinding', var.get('name')),var.get('path').get('scope').callprop('getBinding', var.get('name'))):
                return var.get('undefined')
            var.get('node').put(var.get('REASSIGN_REMAP_SKIP'), var.get('true'))
            #for JS loop
            var.put('_iterator', var.get('exports'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('reid', var.get('_ref'))
                var.put('node', var.get('buildExportsAssignment')(var.get('reid'), var.get('node')).get('expression'))
            
            var.get('path').callprop('replaceWith', var.get('node'))
            var.get("this").callprop('requeueInParent', var.get('path'))
        PyJs_AssignmentExpression_1014_._set_name('AssignmentExpression')
        @Js
        def PyJs_UpdateExpression_1015_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'UpdateExpression':PyJs_UpdateExpression_1015_}, var)
            var.registers(['node', 'exports', 'name', 'arg', 'operator', 'path', 'nodes'])
            var.put('arg', var.get('path').callprop('get', Js('argument')))
            if var.get('arg').callprop('isIdentifier').neg():
                return var.get('undefined')
            var.put('name', var.get('arg').get('node').get('name'))
            var.put('exports', var.get("this").get('exports').get(var.get('name')))
            if var.get('exports').neg():
                return var.get('undefined')
            if PyJsStrictNeq(var.get("this").get('scope').callprop('getBinding', var.get('name')),var.get('path').get('scope').callprop('getBinding', var.get('name'))):
                return var.get('undefined')
            var.put('node', var.get('t').callprop('assignmentExpression', (var.get('path').get('node').get('operator').get('0')+Js('=')), var.get('arg').get('node'), var.get('t').callprop('numericLiteral', Js(1.0))))
            if ((var.get('path').get('parentPath').callprop('isExpressionStatement') and var.get('path').callprop('isCompletionRecord').neg()) or var.get('path').get('node').get('prefix')):
                var.get('path').callprop('replaceWith', var.get('node'))
                var.get("this").callprop('requeueInParent', var.get('path'))
                return var.get('undefined')
            var.put('nodes', Js([]))
            var.get('nodes').callprop('push', var.get('node'))
            var.put('operator', PyJsComma(Js(0.0), Js(None)))
            if PyJsStrictEq(var.get('path').get('node').get('operator'),Js('--')):
                var.put('operator', Js('+'))
            else:
                var.put('operator', Js('-'))
            var.get('nodes').callprop('push', var.get('t').callprop('binaryExpression', var.get('operator'), var.get('arg').get('node'), var.get('t').callprop('numericLiteral', Js(1.0))))
            var.get('path').callprop('replaceWithMultiple', var.get('t').callprop('sequenceExpression', var.get('nodes')))
        PyJs_UpdateExpression_1015_._set_name('UpdateExpression')
        PyJs_Object_1011_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_1012_,'AssignmentExpression':PyJs_AssignmentExpression_1014_,'UpdateExpression':PyJs_UpdateExpression_1015_})
        var.put('reassignmentVisitor', PyJs_Object_1011_)
        @Js
        def PyJs_ThisExpression_1018_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'ThisExpression':PyJs_ThisExpression_1018_, 'arguments':arguments}, var)
            var.registers(['path', 'state'])
            if var.get("this").get('ranCommonJS'):
                return var.get('undefined')
            @Js
            def PyJs_anonymous_1019_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return (var.get('path').callprop('is', Js('shadow')).neg() and (var.get('THIS_BREAK_KEYS').callprop('indexOf', var.get('path').get('type'))>=Js(0.0)))
            PyJs_anonymous_1019_._set_name('anonymous')
            if (PyJsStrictNeq(var.get('state').get('opts').get('allowTopLevelThis'),var.get('true')) and var.get('path').callprop('findParent', PyJs_anonymous_1019_).neg()):
                var.get('path').callprop('replaceWith', var.get('t').callprop('identifier', Js('undefined')))
        PyJs_ThisExpression_1018_._set_name('ThisExpression')
        @Js
        def PyJs_exit_1021_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_1021_, 'arguments':arguments}, var)
            var.registers(['decl', 'addRequire', '_isArray5', '_isArray4', '_isArray3', '_isArray2', '_isArray6', 'imports', '_specifiers', 'ids', '_specifier4', '_isArray7', 'hoistedExportsNode', '_declaration', '_specifier2', '_specifier3', 'specifier', 'importsEntry', '_specifier', '_importsEntry$specifi', 'uid', '_iterator6', 'i', '_source', '_i7', '_i6', '_i5', '_i4', 'hasImports', '_i2', 'id', 'strict', 'init', 'exportNode', 'scope', 'nodes', 'defNode', 'ref', 'addTo', 'body', 'exports', 'node', '_i3', 'requireNode', 'nonHoistedExportNames', '_varDecl', 'varDecl', 'declarators', 'topNodes', 'buildTemplate', 'key', 'declaration', '_id4', 'path', 'name', '_id2', '_id3', 'remaps', 'specifiers', '_id', '_imports$source', 'hasExports', '_defNode', '_ref6', '_ref5', '_ref4', '_ref3', '_ref2', 'maxBlockHoist', '_ref7', 'declar', 'source', 'wildcard', 'target', '_iterator5', '_iterator4', '_iterator7', '_iterator2', 'requires', '_iterator3', '_path'])
            @Js
            def PyJsHoisted_addRequire_(source, blockHoist, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'blockHoist':blockHoist, 'arguments':arguments}, var)
                var.registers(['cached', 'varDecl', 'blockHoist', 'ref', 'source'])
                var.put('cached', var.get('requires').get(var.get('source')))
                if var.get('cached'):
                    return var.get('cached')
                var.put('ref', var.get('path').get('scope').callprop('generateUidIdentifier', PyJsComma(Js(0.0),var.get('_path2').get('basename'))(var.get('source'), PyJsComma(Js(0.0),var.get('_path2').get('extname'))(var.get('source')))))
                var.put('varDecl', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('ref'), var.get('buildRequire')(var.get('t').callprop('stringLiteral', var.get('source'))).get('expression'))])))
                if var.get('imports').get(var.get('source')):
                    var.get('varDecl').put('loc', var.get('imports').get(var.get('source')).get('loc'))
                if (PyJsStrictEq(var.get('blockHoist',throw=False).typeof(),Js('number')) and (var.get('blockHoist')>Js(0.0))):
                    var.get('varDecl').put('_blockHoist', var.get('blockHoist'))
                var.get('topNodes').callprop('push', var.get('varDecl'))
                return var.get('requires').put(var.get('source'), var.get('ref'))
            PyJsHoisted_addRequire_.__name__ = 'addRequire'
            var.put('addRequire', PyJsHoisted_addRequire_)
            @Js
            def PyJsHoisted_addTo_(obj, key, arr, this, arguments, var=var):
                var = Scope({'this':this, 'arr':arr, 'obj':obj, 'arguments':arguments, 'key':key}, var)
                var.registers(['arr', 'obj', 'key', 'existing'])
                var.put('existing', (var.get('obj').get(var.get('key')) or Js([])))
                var.get('obj').put(var.get('key'), var.get('existing').callprop('concat', var.get('arr')))
            PyJsHoisted_addTo_.__name__ = 'addTo'
            var.put('addTo', PyJsHoisted_addTo_)
            var.get("this").put('ranCommonJS', var.get('true'))
            var.put('strict', var.get("this").get('opts').get('strict').neg().neg())
            var.put('scope', var.get('path').get('scope'))
            var.get('scope').callprop('rename', Js('module'))
            var.get('scope').callprop('rename', Js('exports'))
            var.get('scope').callprop('rename', Js('require'))
            var.put('hasExports', Js(False))
            var.put('hasImports', Js(False))
            var.put('body', var.get('path').callprop('get', Js('body')))
            var.put('imports', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('exports', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('nonHoistedExportNames', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('topNodes', Js([]))
            var.put('remaps', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('requires', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            pass
            pass
            #for JS loop
            var.put('_iterator2', var.get('body'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('_path', var.get('_ref2'))
                if var.get('_path').callprop('isExportDeclaration'):
                    var.put('hasExports', var.get('true'))
                    var.put('specifiers', Js([]).callprop('concat', var.get('_path').callprop('get', Js('declaration')), var.get('_path').callprop('get', Js('specifiers'))))
                    #for JS loop
                    var.put('_iterator4', var.get('specifiers'))
                    var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
                    var.put('_i4', Js(0.0))
                    var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
                    while 1:
                        pass
                        if var.get('_isArray4'):
                            if (var.get('_i4')>=var.get('_iterator4').get('length')):
                                break
                            var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i4', var.get('_iterator4').callprop('next'))
                            if var.get('_i4').get('done'):
                                break
                            var.put('_ref4', var.get('_i4').get('value'))
                        var.put('_specifier2', var.get('_ref4'))
                        var.put('ids', var.get('_specifier2').callprop('getBindingIdentifiers'))
                        if var.get('ids').get('__esModule'):
                            PyJsTempException = JsToPyException(var.get('_specifier2').callprop('buildCodeFrameError', Js('Illegal export "__esModule"')))
                            raise PyJsTempException
                    
                if var.get('_path').callprop('isImportDeclaration'):
                    pass
                    var.put('hasImports', var.get('true'))
                    var.put('key', var.get('_path').get('node').get('source').get('value'))
                    PyJs_Object_1022_ = Js({'specifiers':Js([]),'maxBlockHoist':Js(0.0),'loc':var.get('_path').get('node').get('loc')})
                    var.put('importsEntry', (var.get('imports').get(var.get('key')) or PyJs_Object_1022_))
                    var.put('_importsEntry$specifi', var.get('importsEntry').get('specifiers')).get('push').callprop('apply', var.get('_importsEntry$specifi'), var.get('_path').get('node').get('specifiers'))
                    if PyJsStrictEq(var.get('_path').get('node').get('_blockHoist').typeof(),Js('number')):
                        var.get('importsEntry').put('maxBlockHoist', var.get('Math').callprop('max', var.get('_path').get('node').get('_blockHoist'), var.get('importsEntry').get('maxBlockHoist')))
                    var.get('imports').put(var.get('key'), var.get('importsEntry'))
                    var.get('_path').callprop('remove')
                else:
                    if var.get('_path').callprop('isExportDefaultDeclaration'):
                        var.put('declaration', var.get('_path').callprop('get', Js('declaration')))
                        if var.get('declaration').callprop('isFunctionDeclaration'):
                            var.put('id', var.get('declaration').get('node').get('id'))
                            var.put('defNode', var.get('t').callprop('identifier', Js('default')))
                            if var.get('id'):
                                var.get('addTo')(var.get('exports'), var.get('id').get('name'), var.get('defNode'))
                                var.get('topNodes').callprop('push', var.get('buildExportsAssignment')(var.get('defNode'), var.get('id')))
                                var.get('_path').callprop('replaceWith', var.get('declaration').get('node'))
                            else:
                                var.get('topNodes').callprop('push', var.get('buildExportsAssignment')(var.get('defNode'), var.get('t').callprop('toExpression', var.get('declaration').get('node'))))
                                var.get('_path').callprop('remove')
                        else:
                            if var.get('declaration').callprop('isClassDeclaration'):
                                var.put('_id', var.get('declaration').get('node').get('id'))
                                var.put('_defNode', var.get('t').callprop('identifier', Js('default')))
                                if var.get('_id'):
                                    var.get('addTo')(var.get('exports'), var.get('_id').get('name'), var.get('_defNode'))
                                    var.get('_path').callprop('replaceWithMultiple', Js([var.get('declaration').get('node'), var.get('buildExportsAssignment')(var.get('_defNode'), var.get('_id'))]))
                                else:
                                    var.get('_path').callprop('replaceWith', var.get('buildExportsAssignment')(var.get('_defNode'), var.get('t').callprop('toExpression', var.get('declaration').get('node'))))
                                    var.get('_path').get('parentPath').callprop('requeue', var.get('_path').callprop('get', Js('expression.left')))
                            else:
                                var.get('_path').callprop('replaceWith', var.get('buildExportsAssignment')(var.get('t').callprop('identifier', Js('default')), var.get('declaration').get('node')))
                                var.get('_path').get('parentPath').callprop('requeue', var.get('_path').callprop('get', Js('expression.left')))
                    else:
                        if var.get('_path').callprop('isExportNamedDeclaration'):
                            var.put('_declaration', var.get('_path').callprop('get', Js('declaration')))
                            if var.get('_declaration').get('node'):
                                if var.get('_declaration').callprop('isFunctionDeclaration'):
                                    var.put('_id2', var.get('_declaration').get('node').get('id'))
                                    var.get('addTo')(var.get('exports'), var.get('_id2').get('name'), var.get('_id2'))
                                    var.get('topNodes').callprop('push', var.get('buildExportsAssignment')(var.get('_id2'), var.get('_id2')))
                                    var.get('_path').callprop('replaceWith', var.get('_declaration').get('node'))
                                else:
                                    if var.get('_declaration').callprop('isClassDeclaration'):
                                        var.put('_id3', var.get('_declaration').get('node').get('id'))
                                        var.get('addTo')(var.get('exports'), var.get('_id3').get('name'), var.get('_id3'))
                                        var.get('_path').callprop('replaceWithMultiple', Js([var.get('_declaration').get('node'), var.get('buildExportsAssignment')(var.get('_id3'), var.get('_id3'))]))
                                        var.get('nonHoistedExportNames').put(var.get('_id3').get('name'), var.get('true'))
                                    else:
                                        if var.get('_declaration').callprop('isVariableDeclaration'):
                                            var.put('declarators', var.get('_declaration').callprop('get', Js('declarations')))
                                            #for JS loop
                                            var.put('_iterator5', var.get('declarators'))
                                            var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
                                            var.put('_i5', Js(0.0))
                                            var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
                                            while 1:
                                                pass
                                                if var.get('_isArray5'):
                                                    if (var.get('_i5')>=var.get('_iterator5').get('length')):
                                                        break
                                                    var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                                                else:
                                                    var.put('_i5', var.get('_iterator5').callprop('next'))
                                                    if var.get('_i5').get('done'):
                                                        break
                                                    var.put('_ref5', var.get('_i5').get('value'))
                                                var.put('decl', var.get('_ref5'))
                                                var.put('_id4', var.get('decl').callprop('get', Js('id')))
                                                var.put('init', var.get('decl').callprop('get', Js('init')))
                                                if var.get('init').get('node').neg():
                                                    var.get('init').callprop('replaceWith', var.get('t').callprop('identifier', Js('undefined')))
                                                if var.get('_id4').callprop('isIdentifier'):
                                                    var.get('addTo')(var.get('exports'), var.get('_id4').get('node').get('name'), var.get('_id4').get('node'))
                                                    var.get('init').callprop('replaceWith', var.get('buildExportsAssignment')(var.get('_id4').get('node'), var.get('init').get('node')).get('expression'))
                                                    var.get('nonHoistedExportNames').put(var.get('_id4').get('node').get('name'), var.get('true'))
                                                else:
                                                    pass
                                            
                                            var.get('_path').callprop('replaceWith', var.get('_declaration').get('node'))
                                continue
                            var.put('_specifiers', var.get('_path').callprop('get', Js('specifiers')))
                            var.put('nodes', Js([]))
                            var.put('_source', var.get('_path').get('node').get('source'))
                            if var.get('_source'):
                                var.put('ref', var.get('addRequire')(var.get('_source').get('value'), var.get('_path').get('node').get('_blockHoist')))
                                #for JS loop
                                var.put('_iterator6', var.get('_specifiers'))
                                var.put('_isArray6', var.get('Array').callprop('isArray', var.get('_iterator6')))
                                var.put('_i6', Js(0.0))
                                var.put('_iterator6', (var.get('_iterator6') if var.get('_isArray6') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator6'))))
                                while 1:
                                    pass
                                    if var.get('_isArray6'):
                                        if (var.get('_i6')>=var.get('_iterator6').get('length')):
                                            break
                                        var.put('_ref6', var.get('_iterator6').get((var.put('_i6',Js(var.get('_i6').to_number())+Js(1))-Js(1))))
                                    else:
                                        var.put('_i6', var.get('_iterator6').callprop('next'))
                                        if var.get('_i6').get('done'):
                                            break
                                        var.put('_ref6', var.get('_i6').get('value'))
                                    var.put('_specifier3', var.get('_ref6'))
                                    if var.get('_specifier3').callprop('isExportNamespaceSpecifier'):
                                        pass
                                    else:
                                        if var.get('_specifier3').callprop('isExportDefaultSpecifier'):
                                            pass
                                        else:
                                            if var.get('_specifier3').callprop('isExportSpecifier'):
                                                if PyJsStrictEq(var.get('_specifier3').get('node').get('local').get('name'),Js('default')):
                                                    def PyJs_LONG_1023_(var=var):
                                                        return var.get('topNodes').callprop('push', var.get('buildExportsFrom')(var.get('t').callprop('stringLiteral', var.get('_specifier3').get('node').get('exported').get('name')), var.get('t').callprop('memberExpression', var.get('t').callprop('callExpression', var.get("this").callprop('addHelper', Js('interopRequireDefault')), Js([var.get('ref')])), var.get('_specifier3').get('node').get('local'))))
                                                    PyJs_LONG_1023_()
                                                else:
                                                    var.get('topNodes').callprop('push', var.get('buildExportsFrom')(var.get('t').callprop('stringLiteral', var.get('_specifier3').get('node').get('exported').get('name')), var.get('t').callprop('memberExpression', var.get('ref'), var.get('_specifier3').get('node').get('local'))))
                                                var.get('nonHoistedExportNames').put(var.get('_specifier3').get('node').get('exported').get('name'), var.get('true'))
                                
                            else:
                                #for JS loop
                                var.put('_iterator7', var.get('_specifiers'))
                                var.put('_isArray7', var.get('Array').callprop('isArray', var.get('_iterator7')))
                                var.put('_i7', Js(0.0))
                                var.put('_iterator7', (var.get('_iterator7') if var.get('_isArray7') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator7'))))
                                while 1:
                                    pass
                                    if var.get('_isArray7'):
                                        if (var.get('_i7')>=var.get('_iterator7').get('length')):
                                            break
                                        var.put('_ref7', var.get('_iterator7').get((var.put('_i7',Js(var.get('_i7').to_number())+Js(1))-Js(1))))
                                    else:
                                        var.put('_i7', var.get('_iterator7').callprop('next'))
                                        if var.get('_i7').get('done'):
                                            break
                                        var.put('_ref7', var.get('_i7').get('value'))
                                    var.put('_specifier4', var.get('_ref7'))
                                    if var.get('_specifier4').callprop('isExportSpecifier'):
                                        var.get('addTo')(var.get('exports'), var.get('_specifier4').get('node').get('local').get('name'), var.get('_specifier4').get('node').get('exported'))
                                        var.get('nonHoistedExportNames').put(var.get('_specifier4').get('node').get('exported').get('name'), var.get('true'))
                                        var.get('nodes').callprop('push', var.get('buildExportsAssignment')(var.get('_specifier4').get('node').get('exported'), var.get('_specifier4').get('node').get('local')))
                                
                            var.get('_path').callprop('replaceWithMultiple', var.get('nodes'))
                        else:
                            if var.get('_path').callprop('isExportAllDeclaration'):
                                PyJs_Object_1024_ = Js({'OBJECT':var.get('addRequire')(var.get('_path').get('node').get('source').get('value'), var.get('_path').get('node').get('_blockHoist'))})
                                var.put('exportNode', var.get('buildExportAll')(PyJs_Object_1024_))
                                var.get('exportNode').put('loc', var.get('_path').get('node').get('loc'))
                                var.get('topNodes').callprop('push', var.get('exportNode'))
                                var.get('_path').callprop('remove')
            
            for PyJsTemp in var.get('imports'):
                var.put('source', PyJsTemp)
                var.put('_imports$source', var.get('imports').get(var.get('source')))
                var.put('specifiers', var.get('_imports$source').get('specifiers'))
                var.put('maxBlockHoist', var.get('_imports$source').get('maxBlockHoist'))
                if var.get('specifiers').get('length'):
                    var.put('uid', var.get('addRequire')(var.get('source'), var.get('maxBlockHoist')))
                    var.put('wildcard', PyJsComma(Js(0.0), Js(None)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('specifiers').get('length')):
                        try:
                            var.put('specifier', var.get('specifiers').get(var.get('i')))
                            if var.get('t').callprop('isImportNamespaceSpecifier', var.get('specifier')):
                                if var.get('strict'):
                                    var.get('remaps').put(var.get('specifier').get('local').get('name'), var.get('uid'))
                                else:
                                    var.put('varDecl', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('specifier').get('local'), var.get('t').callprop('callExpression', var.get("this").callprop('addHelper', Js('interopRequireWildcard')), Js([var.get('uid')])))])))
                                    if (var.get('maxBlockHoist')>Js(0.0)):
                                        var.get('varDecl').put('_blockHoist', var.get('maxBlockHoist'))
                                    var.get('topNodes').callprop('push', var.get('varDecl'))
                                var.put('wildcard', var.get('specifier').get('local'))
                            else:
                                if var.get('t').callprop('isImportDefaultSpecifier', var.get('specifier')):
                                    var.get('specifiers').put(var.get('i'), var.get('t').callprop('importSpecifier', var.get('specifier').get('local'), var.get('t').callprop('identifier', Js('default'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('_iterator3', var.get('specifiers'))
                    var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                    var.put('_i3', Js(0.0))
                    var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                    while 1:
                        pass
                        if var.get('_isArray3'):
                            if (var.get('_i3')>=var.get('_iterator3').get('length')):
                                break
                            var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i3', var.get('_iterator3').callprop('next'))
                            if var.get('_i3').get('done'):
                                break
                            var.put('_ref3', var.get('_i3').get('value'))
                        var.put('_specifier', var.get('_ref3'))
                        if var.get('t').callprop('isImportSpecifier', var.get('_specifier')):
                            var.put('target', var.get('uid'))
                            if PyJsStrictEq(var.get('_specifier').get('imported').get('name'),Js('default')):
                                if var.get('wildcard'):
                                    var.put('target', var.get('wildcard'))
                                else:
                                    var.put('target', var.put('wildcard', var.get('path').get('scope').callprop('generateUidIdentifier', var.get('uid').get('name'))))
                                    var.put('_varDecl', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('target'), var.get('t').callprop('callExpression', var.get("this").callprop('addHelper', Js('interopRequireDefault')), Js([var.get('uid')])))])))
                                    if (var.get('maxBlockHoist')>Js(0.0)):
                                        var.get('_varDecl').put('_blockHoist', var.get('maxBlockHoist'))
                                    var.get('topNodes').callprop('push', var.get('_varDecl'))
                            var.get('remaps').put(var.get('_specifier').get('local').get('name'), var.get('t').callprop('memberExpression', var.get('target'), var.get('t').callprop('cloneWithoutLoc', var.get('_specifier').get('imported'))))
                    
                else:
                    var.put('requireNode', var.get('buildRequire')(var.get('t').callprop('stringLiteral', var.get('source'))))
                    var.get('requireNode').put('loc', var.get('imports').get(var.get('source')).get('loc'))
                    var.get('topNodes').callprop('push', var.get('requireNode'))
            if (var.get('hasImports') and PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('nonHoistedExportNames')).get('length')):
                var.put('hoistedExportsNode', var.get('t').callprop('identifier', Js('undefined')))
                for PyJsTemp in var.get('nonHoistedExportNames'):
                    var.put('name', PyJsTemp)
                    var.put('hoistedExportsNode', var.get('buildExportsAssignment')(var.get('t').callprop('identifier', var.get('name')), var.get('hoistedExportsNode')).get('expression'))
                var.put('node', var.get('t').callprop('expressionStatement', var.get('hoistedExportsNode')))
                var.get('node').put('_blockHoist', Js(3.0))
                var.get('topNodes').callprop('unshift', var.get('node'))
            if (var.get('hasExports') and var.get('strict').neg()):
                var.put('buildTemplate', var.get('buildExportsModuleDeclaration'))
                if var.get("this").get('opts').get('loose'):
                    var.put('buildTemplate', var.get('buildLooseExportsModuleDeclaration'))
                var.put('declar', var.get('buildTemplate')())
                var.get('declar').put('_blockHoist', Js(3.0))
                var.get('topNodes').callprop('unshift', var.get('declar'))
            var.get('path').callprop('unshiftContainer', Js('body'), var.get('topNodes'))
            @Js
            def PyJs_requeueInParent_1026_(newPath, this, arguments, var=var):
                var = Scope({'newPath':newPath, 'this':this, 'arguments':arguments, 'requeueInParent':PyJs_requeueInParent_1026_}, var)
                var.registers(['newPath'])
                return var.get('path').callprop('requeue', var.get('newPath'))
            PyJs_requeueInParent_1026_._set_name('requeueInParent')
            PyJs_Object_1025_ = Js({'remaps':var.get('remaps'),'scope':var.get('scope'),'exports':var.get('exports'),'requeueInParent':PyJs_requeueInParent_1026_})
            var.get('path').callprop('traverse', var.get('reassignmentVisitor'), PyJs_Object_1025_)
        PyJs_exit_1021_._set_name('exit')
        PyJs_Object_1020_ = Js({'exit':PyJs_exit_1021_})
        PyJs_Object_1017_ = Js({'ThisExpression':PyJs_ThisExpression_1018_,'Program':PyJs_Object_1020_})
        PyJs_Object_1016_ = Js({'inherits':var.get('require')(Js('babel-plugin-transform-strict-mode')),'visitor':PyJs_Object_1017_})
        return PyJs_Object_1016_
    PyJs_anonymous_1010_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1010_)
    var.put('_path2', var.get('require')(Js('path')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('buildRequire', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  require($0);\n')))
    var.put('buildExportsModuleDeclaration', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  Object.defineProperty(exports, "__esModule", {\n    value: true\n  });\n')))
    var.put('buildExportsFrom', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  Object.defineProperty(exports, $0, {\n    enumerable: true,\n    get: function () {\n      return $1;\n    }\n  });\n')))
    var.put('buildLooseExportsModuleDeclaration', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  exports.__esModule = true;\n')))
    var.put('buildExportsAssignment', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  exports.$0 = $1;\n')))
    var.put('buildExportAll', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  Object.keys(OBJECT).forEach(function (key) {\n    if (key === "default" || key === "__esModule") return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return OBJECT[key];\n      }\n    });\n  });\n')))
    var.put('THIS_BREAK_KEYS', Js([Js('FunctionExpression'), Js('FunctionDeclaration'), Js('ClassProperty'), Js('ClassMethod'), Js('ObjectMethod')]))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1009_._set_name('anonymous')
PyJs_Object_1029_ = Js({'babel-plugin-transform-strict-mode':Js(94.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-runtime/core-js/object/keys':Js(103.0),'babel-runtime/core-js/symbol':Js(105.0),'babel-template':Js(221.0),'babel-types':Js(258.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_1030_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', 'exports', '_symbol2', '_babelHelperHoistVariables', 'buildExportAll', 'require', '_babelTemplate', 'module', '_create2', 'buildTemplate', '_symbol', '_babelHelperHoistVariables2', '_interopRequireDefault', '_babelTemplate2', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1047_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1047_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1031_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['reassignmentVisitor', 'IGNORE_REASSIGNMENT_SYMBOL', '_ref', 't'])
        var.put('t', var.get('_ref').get('types'))
        var.put('IGNORE_REASSIGNMENT_SYMBOL', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
        @Js
        def PyJs_AssignmentExpressionUpdateExpression_1033_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'AssignmentExpressionUpdateExpression':PyJs_AssignmentExpressionUpdateExpression_1033_}, var)
            var.registers(['node', '_isArray', '_iterator', 'name', 'exportedNames', '_ref2', 'exportedName', '_i', 'arg', 'isPostUpdateExpression', 'path'])
            if var.get('path').get('node').get(var.get('IGNORE_REASSIGNMENT_SYMBOL')):
                return var.get('undefined')
            var.get('path').get('node').put(var.get('IGNORE_REASSIGNMENT_SYMBOL'), var.get('true'))
            var.put('arg', var.get('path').callprop('get', (Js('left') if var.get('path').callprop('isAssignmentExpression') else Js('argument'))))
            if var.get('arg').callprop('isIdentifier').neg():
                return var.get('undefined')
            var.put('name', var.get('arg').get('node').get('name'))
            if PyJsStrictNeq(var.get("this").get('scope').callprop('getBinding', var.get('name')),var.get('path').get('scope').callprop('getBinding', var.get('name'))):
                return var.get('undefined')
            var.put('exportedNames', var.get("this").get('exports').get(var.get('name')))
            if var.get('exportedNames').neg():
                return var.get('undefined')
            var.put('node', var.get('path').get('node'))
            var.put('isPostUpdateExpression', (var.get('path').callprop('isUpdateExpression') and var.get('node').get('prefix').neg()))
            if var.get('isPostUpdateExpression'):
                if PyJsStrictEq(var.get('node').get('operator'),Js('++')):
                    var.put('node', var.get('t').callprop('binaryExpression', Js('+'), var.get('node').get('argument'), var.get('t').callprop('numericLiteral', Js(1.0))))
                else:
                    if PyJsStrictEq(var.get('node').get('operator'),Js('--')):
                        var.put('node', var.get('t').callprop('binaryExpression', Js('-'), var.get('node').get('argument'), var.get('t').callprop('numericLiteral', Js(1.0))))
                    else:
                        var.put('isPostUpdateExpression', Js(False))
            #for JS loop
            var.put('_iterator', var.get('exportedNames'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('exportedName', var.get('_ref2'))
                var.put('node', var.get("this").callprop('buildCall', var.get('exportedName'), var.get('node')).get('expression'))
            
            if var.get('isPostUpdateExpression'):
                var.put('node', var.get('t').callprop('sequenceExpression', Js([var.get('node'), var.get('path').get('node')])))
            var.get('path').callprop('replaceWith', var.get('node'))
        PyJs_AssignmentExpressionUpdateExpression_1033_._set_name('AssignmentExpressionUpdateExpression')
        PyJs_Object_1032_ = Js({'AssignmentExpression|UpdateExpression':PyJs_AssignmentExpressionUpdateExpression_1033_})
        var.put('reassignmentVisitor', PyJs_Object_1032_)
        @Js
        def PyJs_ReferencedIdentifier_1036_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_1036_, 'arguments':arguments}, var)
            var.registers(['path', 'state'])
            if ((var.get('path').get('node').get('name')==Js('__moduleName')) and var.get('path').get('scope').callprop('hasBinding', Js('__moduleName')).neg()):
                var.get('path').callprop('replaceWith', var.get('t').callprop('memberExpression', var.get('state').get('contextIdent'), var.get('t').callprop('identifier', Js('id'))))
        PyJs_ReferencedIdentifier_1036_._set_name('ReferencedIdentifier')
        @Js
        def PyJs_enter_1038_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'enter':PyJs_enter_1038_}, var)
            var.registers(['path', 'state'])
            var.get('state').put('contextIdent', var.get('path').get('scope').callprop('generateUidIdentifier', Js('context')))
        PyJs_enter_1038_._set_name('enter')
        @Js
        def PyJs_exit_1039_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'exit':PyJs_exit_1039_, 'arguments':arguments}, var)
            var.registers(['_isArray7', 'specifier', '_isArray5', '_isArray4', '_isArray3', 'contextIdent', '_isArray6', '_i3', '_name2', 'canHoist', '_nodes', 'sources', 'variableIds', 'path', 'id', '_isArray2', 'setterBody', '_source', '_i7', '_i6', '_i5', 'addExportName', 'removedPaths', '_i2', '_specifier', 'source', '_node', '_declar', 'nodes', '_ref3', 'body', 'node', 'state', 'bindingIdentifiers', 'pushModule', 'setters', '_path3', 'exportIdent', '_specifiers', 'exportObjRef', '_bindingIdentifiers', '_path2', 'beforeBody', 'target', 'specifiers', 'moduleName', '_iterator6', 'name', '_ref8', '_ref7', '_ref6', '_ref5', '_ref4', 'modules', 'exportNames', '_name', 'buildExportCall', '_i4', 'declar', '_nodes2', '_iterator5', '_iterator4', '_iterator7', '_iterator2', '_iterator3', '_path'])
            @Js
            def PyJsHoisted_buildExportCall_(name, val, this, arguments, var=var):
                var = Scope({'this':this, 'name':name, 'val':val, 'arguments':arguments}, var)
                var.registers(['name', 'val'])
                return var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('exportIdent'), Js([var.get('t').callprop('stringLiteral', var.get('name')), var.get('val')])))
            PyJsHoisted_buildExportCall_.__name__ = 'buildExportCall'
            var.put('buildExportCall', PyJsHoisted_buildExportCall_)
            @Js
            def PyJsHoisted_addExportName_(key, val, this, arguments, var=var):
                var = Scope({'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
                var.registers(['val', 'key'])
                var.get('exportNames').put(var.get('key'), (var.get('exportNames').get(var.get('key')) or Js([])))
                var.get('exportNames').get(var.get('key')).callprop('push', var.get('val'))
            PyJsHoisted_addExportName_.__name__ = 'addExportName'
            var.put('addExportName', PyJsHoisted_addExportName_)
            @Js
            def PyJsHoisted_pushModule_(source, key, specifiers, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'arguments':arguments, 'key':key, 'specifiers':specifiers}, var)
                var.registers(['source', 'key', '_modules', 'specifiers'])
                PyJs_Object_1040_ = Js({'imports':Js([]),'exports':Js([])})
                var.put('_modules', var.get('modules').put(var.get('source'), (var.get('modules').get(var.get('source')) or PyJs_Object_1040_)))
                var.get('_modules').put(var.get('key'), var.get('_modules').get(var.get('key')).callprop('concat', var.get('specifiers')))
            PyJsHoisted_pushModule_.__name__ = 'pushModule'
            var.put('pushModule', PyJsHoisted_pushModule_)
            var.put('exportIdent', var.get('path').get('scope').callprop('generateUidIdentifier', Js('export')))
            var.put('contextIdent', var.get('state').get('contextIdent'))
            var.put('exportNames', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('modules', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('beforeBody', Js([]))
            var.put('setters', Js([]))
            var.put('sources', Js([]))
            var.put('variableIds', Js([]))
            var.put('removedPaths', Js([]))
            pass
            pass
            pass
            var.put('body', var.get('path').callprop('get', Js('body')))
            var.put('canHoist', var.get('true'))
            #for JS loop
            var.put('_iterator2', var.get('body'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref3', var.get('_i2').get('value'))
                var.put('_path', var.get('_ref3'))
                if var.get('_path').callprop('isExportDeclaration'):
                    var.put('_path', var.get('_path').callprop('get', Js('declaration')))
                if (var.get('_path').callprop('isVariableDeclaration') and PyJsStrictNeq(var.get('_path').get('node').get('kind'),Js('var'))):
                    var.put('canHoist', Js(False))
                    break
            
            #for JS loop
            var.put('_iterator3', var.get('body'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref4', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref4', var.get('_i3').get('value'))
                var.put('_path2', var.get('_ref4'))
                if (var.get('canHoist') and var.get('_path2').callprop('isFunctionDeclaration')):
                    var.get('beforeBody').callprop('push', var.get('_path2').get('node'))
                    var.get('removedPaths').callprop('push', var.get('_path2'))
                else:
                    if var.get('_path2').callprop('isImportDeclaration'):
                        var.put('_source', var.get('_path2').get('node').get('source').get('value'))
                        var.get('pushModule')(var.get('_source'), Js('imports'), var.get('_path2').get('node').get('specifiers'))
                        for PyJsTemp in var.get('_path2').callprop('getBindingIdentifiers'):
                            var.put('name', PyJsTemp)
                            var.get('_path2').get('scope').callprop('removeBinding', var.get('name'))
                            var.get('variableIds').callprop('push', var.get('t').callprop('identifier', var.get('name')))
                        var.get('_path2').callprop('remove')
                    else:
                        if var.get('_path2').callprop('isExportAllDeclaration'):
                            var.get('pushModule')(var.get('_path2').get('node').get('source').get('value'), Js('exports'), var.get('_path2').get('node'))
                            var.get('_path2').callprop('remove')
                        else:
                            if var.get('_path2').callprop('isExportDefaultDeclaration'):
                                var.put('declar', var.get('_path2').callprop('get', Js('declaration')))
                                if (var.get('declar').callprop('isClassDeclaration') or var.get('declar').callprop('isFunctionDeclaration')):
                                    var.put('id', var.get('declar').get('node').get('id'))
                                    var.put('nodes', Js([]))
                                    if var.get('id'):
                                        var.get('nodes').callprop('push', var.get('declar').get('node'))
                                        var.get('nodes').callprop('push', var.get('buildExportCall')(Js('default'), var.get('id')))
                                        var.get('addExportName')(var.get('id').get('name'), Js('default'))
                                    else:
                                        var.get('nodes').callprop('push', var.get('buildExportCall')(Js('default'), var.get('t').callprop('toExpression', var.get('declar').get('node'))))
                                    if (var.get('canHoist').neg() or var.get('declar').callprop('isClassDeclaration')):
                                        var.get('_path2').callprop('replaceWithMultiple', var.get('nodes'))
                                    else:
                                        var.put('beforeBody', var.get('beforeBody').callprop('concat', var.get('nodes')))
                                        var.get('removedPaths').callprop('push', var.get('_path2'))
                                else:
                                    var.get('_path2').callprop('replaceWith', var.get('buildExportCall')(Js('default'), var.get('declar').get('node')))
                            else:
                                if var.get('_path2').callprop('isExportNamedDeclaration'):
                                    var.put('_declar', var.get('_path2').callprop('get', Js('declaration')))
                                    if var.get('_declar').get('node'):
                                        var.get('_path2').callprop('replaceWith', var.get('_declar'))
                                        var.put('_nodes', Js([]))
                                        var.put('bindingIdentifiers', PyJsComma(Js(0.0), Js(None)))
                                        if var.get('_path2').callprop('isFunction'):
                                            var.put('_node', var.get('_declar').get('node'))
                                            var.put('_name', var.get('_node').get('id').get('name'))
                                            if var.get('canHoist'):
                                                var.get('addExportName')(var.get('_name'), var.get('_name'))
                                                var.get('beforeBody').callprop('push', var.get('_node'))
                                                var.get('beforeBody').callprop('push', var.get('buildExportCall')(var.get('_name'), var.get('_node').get('id')))
                                                var.get('removedPaths').callprop('push', var.get('_path2'))
                                            else:
                                                pass
                                                PyJs_Object_1041_ = Js({})
                                                var.put('bindingIdentifiers', PyJsComma(PyJsComma(var.put('_bindingIdentifiers', PyJs_Object_1041_),var.get('_bindingIdentifiers').put(var.get('_name'), var.get('_node').get('id'))),var.get('_bindingIdentifiers')))
                                        else:
                                            var.put('bindingIdentifiers', var.get('_declar').callprop('getBindingIdentifiers'))
                                        for PyJsTemp in var.get('bindingIdentifiers'):
                                            var.put('_name2', PyJsTemp)
                                            var.get('addExportName')(var.get('_name2'), var.get('_name2'))
                                            var.get('_nodes').callprop('push', var.get('buildExportCall')(var.get('_name2'), var.get('t').callprop('identifier', var.get('_name2'))))
                                        var.get('_path2').callprop('insertAfter', var.get('_nodes'))
                                    else:
                                        var.put('_specifiers', var.get('_path2').get('node').get('specifiers'))
                                        if (var.get('_specifiers') and var.get('_specifiers').get('length')):
                                            if var.get('_path2').get('node').get('source'):
                                                var.get('pushModule')(var.get('_path2').get('node').get('source').get('value'), Js('exports'), var.get('_specifiers'))
                                                var.get('_path2').callprop('remove')
                                            else:
                                                var.put('_nodes2', Js([]))
                                                #for JS loop
                                                var.put('_iterator7', var.get('_specifiers'))
                                                var.put('_isArray7', var.get('Array').callprop('isArray', var.get('_iterator7')))
                                                var.put('_i7', Js(0.0))
                                                var.put('_iterator7', (var.get('_iterator7') if var.get('_isArray7') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator7'))))
                                                while 1:
                                                    pass
                                                    if var.get('_isArray7'):
                                                        if (var.get('_i7')>=var.get('_iterator7').get('length')):
                                                            break
                                                        var.put('_ref8', var.get('_iterator7').get((var.put('_i7',Js(var.get('_i7').to_number())+Js(1))-Js(1))))
                                                    else:
                                                        var.put('_i7', var.get('_iterator7').callprop('next'))
                                                        if var.get('_i7').get('done'):
                                                            break
                                                        var.put('_ref8', var.get('_i7').get('value'))
                                                    var.put('_specifier', var.get('_ref8'))
                                                    var.get('_nodes2').callprop('push', var.get('buildExportCall')(var.get('_specifier').get('exported').get('name'), var.get('_specifier').get('local')))
                                                    var.get('addExportName')(var.get('_specifier').get('local').get('name'), var.get('_specifier').get('exported').get('name'))
                                                
                                                var.get('_path2').callprop('replaceWithMultiple', var.get('_nodes2'))
            
            for PyJsTemp in var.get('modules'):
                var.put('source', PyJsTemp)
                var.put('specifiers', var.get('modules').get(var.get('source')))
                var.put('setterBody', Js([]))
                var.put('target', var.get('path').get('scope').callprop('generateUidIdentifier', var.get('source')))
                #for JS loop
                var.put('_iterator4', var.get('specifiers').get('imports'))
                var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
                var.put('_i4', Js(0.0))
                var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
                while 1:
                    pass
                    if var.get('_isArray4'):
                        if (var.get('_i4')>=var.get('_iterator4').get('length')):
                            break
                        var.put('_ref5', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i4', var.get('_iterator4').callprop('next'))
                        if var.get('_i4').get('done'):
                            break
                        var.put('_ref5', var.get('_i4').get('value'))
                    var.put('specifier', var.get('_ref5'))
                    if var.get('t').callprop('isImportNamespaceSpecifier', var.get('specifier')):
                        var.get('setterBody').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('specifier').get('local'), var.get('target'))))
                    else:
                        if var.get('t').callprop('isImportDefaultSpecifier', var.get('specifier')):
                            var.put('specifier', var.get('t').callprop('importSpecifier', var.get('specifier').get('local'), var.get('t').callprop('identifier', Js('default'))))
                    if var.get('t').callprop('isImportSpecifier', var.get('specifier')):
                        var.get('setterBody').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('specifier').get('local'), var.get('t').callprop('memberExpression', var.get('target'), var.get('specifier').get('imported')))))
                
                if var.get('specifiers').get('exports').get('length'):
                    var.put('exportObjRef', var.get('path').get('scope').callprop('generateUidIdentifier', Js('exportObj')))
                    var.get('setterBody').callprop('push', var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('exportObjRef'), var.get('t').callprop('objectExpression', Js([])))])))
                    #for JS loop
                    var.put('_iterator5', var.get('specifiers').get('exports'))
                    var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
                    var.put('_i5', Js(0.0))
                    var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
                    while 1:
                        pass
                        if var.get('_isArray5'):
                            if (var.get('_i5')>=var.get('_iterator5').get('length')):
                                break
                            var.put('_ref6', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i5', var.get('_iterator5').callprop('next'))
                            if var.get('_i5').get('done'):
                                break
                            var.put('_ref6', var.get('_i5').get('value'))
                        var.put('node', var.get('_ref6'))
                        if var.get('t').callprop('isExportAllDeclaration', var.get('node')):
                            PyJs_Object_1042_ = Js({'KEY':var.get('path').get('scope').callprop('generateUidIdentifier', Js('key')),'EXPORT_OBJ':var.get('exportObjRef'),'TARGET':var.get('target')})
                            var.get('setterBody').callprop('push', var.get('buildExportAll')(PyJs_Object_1042_))
                        else:
                            if var.get('t').callprop('isExportSpecifier', var.get('node')):
                                var.get('setterBody').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('memberExpression', var.get('exportObjRef'), var.get('node').get('exported')), var.get('t').callprop('memberExpression', var.get('target'), var.get('node').get('local')))))
                            else:
                                pass
                    
                    var.get('setterBody').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('callExpression', var.get('exportIdent'), Js([var.get('exportObjRef')]))))
                var.get('sources').callprop('push', var.get('t').callprop('stringLiteral', var.get('source')))
                var.get('setters').callprop('push', var.get('t').callprop('functionExpression', var.get("null"), Js([var.get('target')]), var.get('t').callprop('blockStatement', var.get('setterBody'))))
            var.put('moduleName', var.get("this").callprop('getModuleName'))
            if var.get('moduleName'):
                var.put('moduleName', var.get('t').callprop('stringLiteral', var.get('moduleName')))
            if var.get('canHoist'):
                @Js
                def PyJs_anonymous_1043_(id, this, arguments, var=var):
                    var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
                    var.registers(['id'])
                    return var.get('variableIds').callprop('push', var.get('id'))
                PyJs_anonymous_1043_._set_name('anonymous')
                PyJsComma(Js(0.0),var.get('_babelHelperHoistVariables2').get('default'))(var.get('path'), PyJs_anonymous_1043_)
            if var.get('variableIds').get('length'):
                @Js
                def PyJs_anonymous_1044_(id, this, arguments, var=var):
                    var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
                    var.registers(['id'])
                    return var.get('t').callprop('variableDeclarator', var.get('id'))
                PyJs_anonymous_1044_._set_name('anonymous')
                var.get('beforeBody').callprop('unshift', var.get('t').callprop('variableDeclaration', Js('var'), var.get('variableIds').callprop('map', PyJs_anonymous_1044_)))
            PyJs_Object_1045_ = Js({'exports':var.get('exportNames'),'buildCall':var.get('buildExportCall'),'scope':var.get('path').get('scope')})
            var.get('path').callprop('traverse', var.get('reassignmentVisitor'), PyJs_Object_1045_)
            #for JS loop
            var.put('_iterator6', var.get('removedPaths'))
            var.put('_isArray6', var.get('Array').callprop('isArray', var.get('_iterator6')))
            var.put('_i6', Js(0.0))
            var.put('_iterator6', (var.get('_iterator6') if var.get('_isArray6') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator6'))))
            while 1:
                pass
                if var.get('_isArray6'):
                    if (var.get('_i6')>=var.get('_iterator6').get('length')):
                        break
                    var.put('_ref7', var.get('_iterator6').get((var.put('_i6',Js(var.get('_i6').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i6', var.get('_iterator6').callprop('next'))
                    if var.get('_i6').get('done'):
                        break
                    var.put('_ref7', var.get('_i6').get('value'))
                var.put('_path3', var.get('_ref7'))
                var.get('_path3').callprop('remove')
            
            PyJs_Object_1046_ = Js({'SYSTEM_REGISTER':var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', (var.get('state').get('opts').get('systemGlobal') or Js('System'))), var.get('t').callprop('identifier', Js('register'))),'BEFORE_BODY':var.get('beforeBody'),'MODULE_NAME':var.get('moduleName'),'SETTERS':var.get('setters'),'SOURCES':var.get('sources'),'BODY':var.get('path').get('node').get('body'),'EXPORT_IDENTIFIER':var.get('exportIdent'),'CONTEXT_IDENTIFIER':var.get('contextIdent')})
            var.get('path').get('node').put('body', Js([var.get('buildTemplate')(PyJs_Object_1046_)]))
        PyJs_exit_1039_._set_name('exit')
        PyJs_Object_1037_ = Js({'enter':PyJs_enter_1038_,'exit':PyJs_exit_1039_})
        PyJs_Object_1035_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_1036_,'Program':PyJs_Object_1037_})
        PyJs_Object_1034_ = Js({'visitor':PyJs_Object_1035_})
        return PyJs_Object_1034_
    PyJs_anonymous_1031_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1031_)
    var.put('_babelHelperHoistVariables', var.get('require')(Js('babel-helper-hoist-variables')))
    var.put('_babelHelperHoistVariables2', var.get('_interopRequireDefault')(var.get('_babelHelperHoistVariables')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    pass
    var.put('buildTemplate', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  SYSTEM_REGISTER(MODULE_NAME, [SOURCES], function (EXPORT_IDENTIFIER, CONTEXT_IDENTIFIER) {\n    "use strict";\n    BEFORE_BODY;\n    return {\n      setters: [SETTERS],\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n')))
    var.put('buildExportAll', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  for (var KEY in TARGET) {\n    if (KEY !== "default" && KEY !== "__esModule") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n')))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1030_._set_name('anonymous')
PyJs_Object_1048_ = Js({'babel-helper-hoist-variables':Js(51.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-runtime/core-js/symbol':Js(105.0),'babel-template':Js(221.0)})
@Js
def PyJs_anonymous_1049_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', '_babelTemplate', 'module', '_babelTemplate2', 'buildWrapper', 'buildGlobalExport', '_interopRequireDefault', 'buildPrerequisiteAssignment', '_path'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1064_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1064_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1050_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'isValidDefine', 't'])
        @Js
        def PyJsHoisted_isValidDefine_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['expr', 'args', 'path'])
            if var.get('path').callprop('isExpressionStatement').neg():
                return var.get('undefined')
            var.put('expr', var.get('path').callprop('get', Js('expression')))
            if var.get('expr').callprop('isCallExpression').neg():
                return Js(False)
            PyJs_Object_1051_ = Js({'name':Js('define')})
            if var.get('expr').callprop('get', Js('callee')).callprop('isIdentifier', PyJs_Object_1051_).neg():
                return Js(False)
            var.put('args', var.get('expr').callprop('get', Js('arguments')))
            if (PyJsStrictEq(var.get('args').get('length'),Js(3.0)) and var.get('args').callprop('shift').callprop('isStringLiteral').neg()):
                return Js(False)
            if PyJsStrictNeq(var.get('args').get('length'),Js(2.0)):
                return Js(False)
            if var.get('args').callprop('shift').callprop('isArrayExpression').neg():
                return Js(False)
            if var.get('args').callprop('shift').callprop('isFunctionExpression').neg():
                return Js(False)
            return var.get('true')
        PyJsHoisted_isValidDefine_.__name__ = 'isValidDefine'
        var.put('isValidDefine', PyJsHoisted_isValidDefine_)
        var.put('t', var.get('_ref').get('types'))
        pass
        @Js
        def PyJs_exit_1055_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'exit':PyJs_exit_1055_, 'arguments':arguments}, var)
            var.registers(['browserGlobals', 'moduleName', 'last', 'members', 'globalName', 'args', 'browserArgs', 'commonArgs', 'amdArgs', 'state', 'call', 'func', 'globalToAssign', 'moduleNameOrBasename', 'path', 'globalExport', 'prerequisiteAssignments'])
            var.put('last', var.get('path').callprop('get', Js('body')).callprop('pop'))
            if var.get('isValidDefine')(var.get('last')).neg():
                return var.get('undefined')
            var.put('call', var.get('last').get('node').get('expression'))
            var.put('args', var.get('call').get('arguments'))
            var.put('moduleName', (var.get('args').callprop('shift') if PyJsStrictEq(var.get('args').get('length'),Js(3.0)) else var.get("null")))
            var.put('amdArgs', var.get('call').get('arguments').get('0'))
            var.put('func', var.get('call').get('arguments').get('1'))
            PyJs_Object_1056_ = Js({})
            var.put('browserGlobals', (var.get('state').get('opts').get('globals') or PyJs_Object_1056_))
            @Js
            def PyJs_anonymous_1057_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                if (PyJsStrictEq(var.get('arg').get('value'),Js('module')) or PyJsStrictEq(var.get('arg').get('value'),Js('exports'))):
                    return var.get('t').callprop('identifier', var.get('arg').get('value'))
                else:
                    return var.get('t').callprop('callExpression', var.get('t').callprop('identifier', Js('require')), Js([var.get('arg')]))
            PyJs_anonymous_1057_._set_name('anonymous')
            var.put('commonArgs', var.get('amdArgs').get('elements').callprop('map', PyJs_anonymous_1057_))
            @Js
            def PyJs_anonymous_1058_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['memberExpression', 'globalRef', 'arg', 'globalName', 'requireName'])
                if PyJsStrictEq(var.get('arg').get('value'),Js('module')):
                    return var.get('t').callprop('identifier', Js('mod'))
                else:
                    if PyJsStrictEq(var.get('arg').get('value'),Js('exports')):
                        return var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('mod')), var.get('t').callprop('identifier', Js('exports')))
                    else:
                        var.put('memberExpression', PyJsComma(Js(0.0), Js(None)))
                        if var.get('state').get('opts').get('exactGlobals'):
                            var.put('globalRef', var.get('browserGlobals').get(var.get('arg').get('value')))
                            if var.get('globalRef'):
                                @Js
                                def PyJs_anonymous_1059_(accum, curr, this, arguments, var=var):
                                    var = Scope({'this':this, 'curr':curr, 'accum':accum, 'arguments':arguments}, var)
                                    var.registers(['curr', 'accum'])
                                    return var.get('t').callprop('memberExpression', var.get('accum'), var.get('t').callprop('identifier', var.get('curr')))
                                PyJs_anonymous_1059_._set_name('anonymous')
                                var.put('memberExpression', var.get('globalRef').callprop('split', Js('.')).callprop('reduce', PyJs_anonymous_1059_, var.get('t').callprop('identifier', Js('global'))))
                            else:
                                var.put('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('global')), var.get('t').callprop('identifier', var.get('t').callprop('toIdentifier', var.get('arg').get('value')))))
                        else:
                            var.put('requireName', PyJsComma(Js(0.0),var.get('_path').get('basename'))(var.get('arg').get('value'), PyJsComma(Js(0.0),var.get('_path').get('extname'))(var.get('arg').get('value'))))
                            var.put('globalName', (var.get('browserGlobals').get(var.get('requireName')) or var.get('requireName')))
                            var.put('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('global')), var.get('t').callprop('identifier', var.get('t').callprop('toIdentifier', var.get('globalName')))))
                        return var.get('memberExpression')
            PyJs_anonymous_1058_._set_name('anonymous')
            var.put('browserArgs', var.get('amdArgs').get('elements').callprop('map', PyJs_anonymous_1058_))
            var.put('moduleNameOrBasename', (var.get('moduleName').get('value') if var.get('moduleName') else var.get("this").get('file').get('opts').get('basename')))
            var.put('globalToAssign', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('global')), var.get('t').callprop('identifier', var.get('t').callprop('toIdentifier', var.get('moduleNameOrBasename')))))
            var.put('prerequisiteAssignments', var.get("null"))
            if var.get('state').get('opts').get('exactGlobals'):
                var.put('globalName', var.get('browserGlobals').get(var.get('moduleNameOrBasename')))
                if var.get('globalName'):
                    var.put('prerequisiteAssignments', Js([]))
                    var.put('members', var.get('globalName').callprop('split', Js('.')))
                    @Js
                    def PyJs_anonymous_1060_(accum, curr, this, arguments, var=var):
                        var = Scope({'this':this, 'curr':curr, 'accum':accum, 'arguments':arguments}, var)
                        var.registers(['curr', 'accum'])
                        PyJs_Object_1061_ = Js({'GLOBAL_REFERENCE':var.get('accum')})
                        var.get('prerequisiteAssignments').callprop('push', var.get('buildPrerequisiteAssignment')(PyJs_Object_1061_))
                        return var.get('t').callprop('memberExpression', var.get('accum'), var.get('t').callprop('identifier', var.get('curr')))
                    PyJs_anonymous_1060_._set_name('anonymous')
                    var.put('globalToAssign', var.get('members').callprop('slice', Js(1.0)).callprop('reduce', PyJs_anonymous_1060_, var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('global')), var.get('t').callprop('identifier', var.get('members').get('0')))))
            PyJs_Object_1062_ = Js({'BROWSER_ARGUMENTS':var.get('browserArgs'),'PREREQUISITE_ASSIGNMENTS':var.get('prerequisiteAssignments'),'GLOBAL_TO_ASSIGN':var.get('globalToAssign')})
            var.put('globalExport', var.get('buildGlobalExport')(PyJs_Object_1062_))
            PyJs_Object_1063_ = Js({'MODULE_NAME':var.get('moduleName'),'AMD_ARGUMENTS':var.get('amdArgs'),'COMMON_ARGUMENTS':var.get('commonArgs'),'GLOBAL_EXPORT':var.get('globalExport'),'FUNC':var.get('func')})
            var.get('last').callprop('replaceWith', var.get('buildWrapper')(PyJs_Object_1063_))
        PyJs_exit_1055_._set_name('exit')
        PyJs_Object_1054_ = Js({'exit':PyJs_exit_1055_})
        PyJs_Object_1053_ = Js({'Program':PyJs_Object_1054_})
        PyJs_Object_1052_ = Js({'inherits':var.get('require')(Js('babel-plugin-transform-es2015-modules-amd')),'visitor':PyJs_Object_1053_})
        return PyJs_Object_1052_
    PyJs_anonymous_1050_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1050_)
    var.put('_path', var.get('require')(Js('path')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    pass
    var.put('buildPrerequisiteAssignment', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  GLOBAL_REFERENCE = GLOBAL_REFERENCE || {}\n')))
    var.put('buildGlobalExport', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  var mod = { exports: {} };\n  factory(BROWSER_ARGUMENTS);\n  PREREQUISITE_ASSIGNMENTS\n  GLOBAL_TO_ASSIGN = mod.exports;\n')))
    var.put('buildWrapper', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  (function (global, factory) {\n    if (typeof define === "function" && define.amd) {\n      define(MODULE_NAME, AMD_ARGUMENTS, factory);\n    } else if (typeof exports !== "undefined") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      GLOBAL_EXPORT\n    }\n  })(this, FUNC);\n')))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1049_._set_name('anonymous')
PyJs_Object_1065_ = Js({'babel-plugin-transform-es2015-modules-amd':Js(72.0),'babel-template':Js(221.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_1066_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_babelHelperReplaceSupers2', 'exports', '_symbol2', 'require', 'module', '_symbol', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_babelHelperReplaceSupers'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1077_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1077_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1067_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'Property', 't', 'CONTAINS_SUPER'])
        @Js
        def PyJsHoisted_Property_(path, node, scope, getObjectRef, file, this, arguments, var=var):
            var = Scope({'node':node, 'getObjectRef':getObjectRef, 'arguments':arguments, 'file':file, 'scope':scope, 'this':this, 'path':path}, var)
            var.registers(['node', 'getObjectRef', 'replaceSupers', 'file', 'scope', 'path'])
            PyJs_Object_1068_ = Js({'getObjectRef':var.get('getObjectRef'),'methodNode':var.get('node'),'methodPath':var.get('path'),'isStatic':var.get('true'),'scope':var.get('scope'),'file':var.get('file')})
            var.put('replaceSupers', var.get('_babelHelperReplaceSupers2').get('default').create(PyJs_Object_1068_))
            var.get('replaceSupers').callprop('replace')
        PyJsHoisted_Property_.__name__ = 'Property'
        var.put('Property', PyJsHoisted_Property_)
        var.put('t', var.get('_ref').get('types'))
        pass
        var.put('CONTAINS_SUPER', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
        @Js
        def PyJs_Super_1071_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'Super':PyJs_Super_1071_, 'arguments':arguments}, var)
            var.registers(['path', 'parentObj'])
            @Js
            def PyJs_anonymous_1072_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return var.get('path').callprop('isObjectExpression')
            PyJs_anonymous_1072_._set_name('anonymous')
            var.put('parentObj', var.get('path').callprop('findParent', PyJs_anonymous_1072_))
            if var.get('parentObj'):
                var.get('parentObj').get('node').put(var.get('CONTAINS_SUPER'), var.get('true'))
        PyJs_Super_1071_._set_name('Super')
        @Js
        def PyJs_exit_1074_(path, file, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_1074_, 'arguments':arguments, 'file':file}, var)
            var.registers(['getObjectRef', 'objectRef', '_isArray', '_iterator', 'file', 'propPath', '_ref2', 'propPaths', '_i', 'path'])
            if var.get('path').get('node').get(var.get('CONTAINS_SUPER')).neg():
                return var.get('undefined')
            var.put('objectRef', PyJsComma(Js(0.0), Js(None)))
            @Js
            def PyJs_getObjectRef_1075_(this, arguments, var=var):
                var = Scope({'this':this, 'getObjectRef':PyJs_getObjectRef_1075_, 'arguments':arguments}, var)
                var.registers([])
                return var.put('objectRef', (var.get('objectRef') or var.get('path').get('scope').callprop('generateUidIdentifier', Js('obj'))))
            PyJs_getObjectRef_1075_._set_name('getObjectRef')
            var.put('getObjectRef', PyJs_getObjectRef_1075_)
            var.put('propPaths', var.get('path').callprop('get', Js('properties')))
            #for JS loop
            var.put('_iterator', var.get('propPaths'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('propPath', var.get('_ref2'))
                if var.get('propPath').callprop('isObjectProperty'):
                    var.put('propPath', var.get('propPath').callprop('get', Js('value')))
                var.get('Property')(var.get('propPath'), var.get('propPath').get('node'), var.get('path').get('scope'), var.get('getObjectRef'), var.get('file'))
            
            if var.get('objectRef'):
                PyJs_Object_1076_ = Js({'id':var.get('objectRef')})
                var.get('path').get('scope').callprop('push', PyJs_Object_1076_)
                var.get('path').callprop('replaceWith', var.get('t').callprop('assignmentExpression', Js('='), var.get('objectRef'), var.get('path').get('node')))
        PyJs_exit_1074_._set_name('exit')
        PyJs_Object_1073_ = Js({'exit':PyJs_exit_1074_})
        PyJs_Object_1070_ = Js({'Super':PyJs_Super_1071_,'ObjectExpression':PyJs_Object_1073_})
        PyJs_Object_1069_ = Js({'visitor':PyJs_Object_1070_})
        return PyJs_Object_1069_
    PyJs_anonymous_1067_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1067_)
    var.put('_babelHelperReplaceSupers', var.get('require')(Js('babel-helper-replace-supers')))
    var.put('_babelHelperReplaceSupers2', var.get('_interopRequireDefault')(var.get('_babelHelperReplaceSupers')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1066_._set_name('anonymous')
PyJs_Object_1078_ = Js({'babel-helper-replace-supers':Js(54.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/symbol':Js(105.0)})
@Js
def PyJs_anonymous_1079_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_babelHelperCallDelegate', 'module', 'require', '_babelHelperCallDelegate2', 'exports', '_interopRequireWildcard', 'visitor', '_babelHelperGetFunctionArity', '_babelTypes', '_babelHelperGetFunctionArity2', 'iifeVisitor', '_babelTemplate', 'isSafeBinding', '_babelTemplate2', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'buildCutOff', 'hasDefaults', 'buildDefaultParam'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1081_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1081_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isSafeBinding_(scope, node, this, arguments, var=var):
        var = Scope({'node':node, 'scope':scope, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'scope', 'kind', '_scope$getOwnBinding'])
        if var.get('scope').callprop('hasOwnBinding', var.get('node').get('name')).neg():
            return var.get('true')
        var.put('_scope$getOwnBinding', var.get('scope').callprop('getOwnBinding', var.get('node').get('name')))
        var.put('kind', var.get('_scope$getOwnBinding').get('kind'))
        return (PyJsStrictEq(var.get('kind'),Js('param')) or PyJsStrictEq(var.get('kind'),Js('local')))
    PyJsHoisted_isSafeBinding_.__name__ = 'isSafeBinding'
    var.put('isSafeBinding', PyJsHoisted_isSafeBinding_)
    @Js
    def PyJsHoisted_hasDefaults_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_isArray', '_iterator', 'param', '_i', '_ref'])
        #for JS loop
        var.put('_iterator', var.get('node').get('params'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('param', var.get('_ref'))
            if var.get('t').callprop('isIdentifier', var.get('param')).neg():
                return var.get('true')
        
        return Js(False)
    PyJsHoisted_hasDefaults_.__name__ = 'hasDefaults'
    var.put('hasDefaults', PyJsHoisted_hasDefaults_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1080_ = Js({})
            var.put('newObj', PyJs_Object_1080_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('visitor', var.get('undefined'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_babelHelperGetFunctionArity', var.get('require')(Js('babel-helper-get-function-arity')))
    var.put('_babelHelperGetFunctionArity2', var.get('_interopRequireDefault')(var.get('_babelHelperGetFunctionArity')))
    var.put('_babelHelperCallDelegate', var.get('require')(Js('babel-helper-call-delegate')))
    var.put('_babelHelperCallDelegate2', var.get('_interopRequireDefault')(var.get('_babelHelperCallDelegate')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('buildDefaultParam', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  let VARIABLE_NAME =\n    ARGUMENTS.length > ARGUMENT_KEY && ARGUMENTS[ARGUMENT_KEY] !== undefined ?\n      ARGUMENTS[ARGUMENT_KEY]\n    :\n      DEFAULT_VALUE;\n')))
    var.put('buildCutOff', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  let $0 = $1[$2];\n')))
    pass
    pass
    @Js
    def PyJs_ReferencedIdentifier_1083_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_1083_, 'arguments':arguments}, var)
        var.registers(['node', 'scope', 'state', 'path'])
        var.put('scope', var.get('path').get('scope'))
        var.put('node', var.get('path').get('node'))
        if (PyJsStrictEq(var.get('node').get('name'),Js('eval')) or var.get('isSafeBinding')(var.get('scope'), var.get('node')).neg()):
            var.get('state').put('iife', var.get('true'))
            var.get('path').callprop('stop')
    PyJs_ReferencedIdentifier_1083_._set_name('ReferencedIdentifier')
    @Js
    def PyJs_Scope_1084_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'Scope':PyJs_Scope_1084_}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Scope_1084_._set_name('Scope')
    PyJs_Object_1082_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_1083_,'Scope':PyJs_Scope_1084_})
    var.put('iifeVisitor', PyJs_Object_1082_)
    @Js
    def PyJs_Function_1086_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_1086_, 'arguments':arguments}, var)
        var.registers(['node', 'body', 'pushDefNode', 'right', 'lastNonDefaultParam', 'i', 'argsIdentifier', '_i2', 'param', '_param', 'state', 'declar', 'params', 'path', 'scope', 'placeholder', 'left'])
        @Js
        def PyJsHoisted_pushDefNode_(left, right, i, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, 'right':right, 'arguments':arguments, 'left':left}, var)
            var.registers(['i', 'defNode', 'right', 'left'])
            PyJs_Object_1088_ = Js({'VARIABLE_NAME':var.get('left'),'DEFAULT_VALUE':var.get('right'),'ARGUMENT_KEY':var.get('t').callprop('numericLiteral', var.get('i')),'ARGUMENTS':var.get('argsIdentifier')})
            var.put('defNode', var.get('buildDefaultParam')(PyJs_Object_1088_))
            var.get('defNode').put('_blockHoist', (var.get('node').get('params').get('length')-var.get('i')))
            var.get('body').callprop('push', var.get('defNode'))
        PyJsHoisted_pushDefNode_.__name__ = 'pushDefNode'
        var.put('pushDefNode', PyJsHoisted_pushDefNode_)
        var.put('node', var.get('path').get('node'))
        var.put('scope', var.get('path').get('scope'))
        if var.get('hasDefaults')(var.get('node')).neg():
            return var.get('undefined')
        var.get('path').callprop('ensureBlock')
        PyJs_Object_1087_ = Js({'iife':Js(False),'scope':var.get('scope')})
        var.put('state', PyJs_Object_1087_)
        var.put('body', Js([]))
        var.put('argsIdentifier', var.get('t').callprop('identifier', Js('arguments')))
        var.get('argsIdentifier').put('_shadowedFunctionLiteral', var.get('path'))
        pass
        var.put('lastNonDefaultParam', PyJsComma(Js(0.0),var.get('_babelHelperGetFunctionArity2').get('default'))(var.get('node')))
        var.put('params', var.get('path').callprop('get', Js('params')))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('params').get('length')):
            try:
                var.put('param', var.get('params').get(var.get('i')))
                if var.get('param').callprop('isAssignmentPattern').neg():
                    if (var.get('state').get('iife').neg() and var.get('param').callprop('isIdentifier').neg()):
                        var.get('param').callprop('traverse', var.get('iifeVisitor'), var.get('state'))
                    continue
                var.put('left', var.get('param').callprop('get', Js('left')))
                var.put('right', var.get('param').callprop('get', Js('right')))
                if ((var.get('i')>=var.get('lastNonDefaultParam')) or var.get('left').callprop('isPattern')):
                    var.put('placeholder', var.get('scope').callprop('generateUidIdentifier', Js('x')))
                    var.get('placeholder').put('_isDefaultPlaceholder', var.get('true'))
                    var.get('node').get('params').put(var.get('i'), var.get('placeholder'))
                else:
                    var.get('node').get('params').put(var.get('i'), var.get('left').get('node'))
                if var.get('state').get('iife').neg():
                    if (var.get('right').callprop('isIdentifier') and var.get('isSafeBinding')(var.get('scope'), var.get('right').get('node')).neg()):
                        var.get('state').put('iife', var.get('true'))
                    else:
                        var.get('right').callprop('traverse', var.get('iifeVisitor'), var.get('state'))
                var.get('pushDefNode')(var.get('left').get('node'), var.get('right').get('node'), var.get('i'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        #for JS loop
        var.put('_i2', (var.get('lastNonDefaultParam')+Js(1.0)))
        while (var.get('_i2')<var.get('node').get('params').get('length')):
            try:
                var.put('_param', var.get('node').get('params').get(var.get('_i2')))
                if var.get('_param').get('_isDefaultPlaceholder'):
                    continue
                var.put('declar', var.get('buildCutOff')(var.get('_param'), var.get('argsIdentifier'), var.get('t').callprop('numericLiteral', var.get('_i2'))))
                var.get('declar').put('_blockHoist', (var.get('node').get('params').get('length')-var.get('_i2')))
                var.get('body').callprop('push', var.get('declar'))
            finally:
                    (var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))
        var.get('node').put('params', var.get('node').get('params').callprop('slice', Js(0.0), var.get('lastNonDefaultParam')))
        if var.get('state').get('iife'):
            var.get('body').callprop('push', PyJsComma(Js(0.0),var.get('_babelHelperCallDelegate2').get('default'))(var.get('path'), var.get('scope')))
            var.get('path').callprop('set', Js('body'), var.get('t').callprop('blockStatement', var.get('body')))
        else:
            var.get('path').callprop('get', Js('body')).callprop('unshiftContainer', Js('body'), var.get('body'))
    PyJs_Function_1086_._set_name('Function')
    PyJs_Object_1085_ = Js({'Function':PyJs_Function_1086_})
    var.put('visitor', var.get('exports').put('visitor', PyJs_Object_1085_))
PyJs_anonymous_1079_._set_name('anonymous')
PyJs_Object_1089_ = Js({'babel-helper-call-delegate':Js(47.0),'babel-helper-get-function-arity':Js(50.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-template':Js(221.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1090_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1091_ = Js({})
            var.put('newObj', PyJs_Object_1091_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('visitor', var.get('undefined'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    @Js
    def PyJs_Function_1093_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_1093_, 'arguments':arguments}, var)
        var.registers(['uid', 'i', 'param', 'outputParamsLength', 'params', 'path', 'hoistTweak', 'declar'])
        var.put('params', var.get('path').callprop('get', Js('params')))
        var.put('hoistTweak', (Js(1.0) if var.get('t').callprop('isRestElement', var.get('params').get((var.get('params').get('length')-Js(1.0)))) else Js(0.0)))
        var.put('outputParamsLength', (var.get('params').get('length')-var.get('hoistTweak')))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('outputParamsLength')):
            try:
                var.put('param', var.get('params').get(var.get('i')))
                if (var.get('param').callprop('isArrayPattern') or var.get('param').callprop('isObjectPattern')):
                    var.put('uid', var.get('path').get('scope').callprop('generateUidIdentifier', Js('ref')))
                    var.put('declar', var.get('t').callprop('variableDeclaration', Js('let'), Js([var.get('t').callprop('variableDeclarator', var.get('param').get('node'), var.get('uid'))])))
                    var.get('declar').put('_blockHoist', (var.get('outputParamsLength')-var.get('i')))
                    var.get('path').callprop('ensureBlock')
                    var.get('path').callprop('get', Js('body')).callprop('unshiftContainer', Js('body'), var.get('declar'))
                    var.get('param').callprop('replaceWith', var.get('uid'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_Function_1093_._set_name('Function')
    PyJs_Object_1092_ = Js({'Function':PyJs_Function_1093_})
    var.put('visitor', var.get('exports').put('visitor', PyJs_Object_1092_))
PyJs_anonymous_1090_._set_name('anonymous')
PyJs_Object_1094_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1095_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'destructuring', '_interopRequireWildcard', '_default', 'require', 'rest', '_rest', '_destructuring', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_babelTraverse', 'def'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1101_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1101_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1100_ = Js({})
            var.put('newObj', PyJs_Object_1100_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_1096_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_ArrowFunctionExpression_1099_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_1099_}, var)
            var.registers(['_isArray', '_iterator', 'param', 'params', '_i', 'path', '_ref'])
            var.put('params', var.get('path').callprop('get', Js('params')))
            #for JS loop
            var.put('_iterator', var.get('params'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('param', var.get('_ref'))
                if (var.get('param').callprop('isRestElement') or var.get('param').callprop('isAssignmentPattern')):
                    var.get('path').callprop('arrowFunctionToShadowed')
                    break
            
        PyJs_ArrowFunctionExpression_1099_._set_name('ArrowFunctionExpression')
        PyJs_Object_1098_ = Js({'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_1099_})
        PyJs_Object_1097_ = Js({'visitor':var.get('_babelTraverse').get('visitors').callprop('merge', Js([PyJs_Object_1098_, var.get('destructuring').get('visitor'), var.get('rest').get('visitor'), var.get('def').get('visitor')]))})
        return PyJs_Object_1097_
    PyJs_anonymous_1096_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1096_)
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_destructuring', var.get('require')(Js('./destructuring')))
    var.put('destructuring', var.get('_interopRequireWildcard')(var.get('_destructuring')))
    var.put('_default', var.get('require')(Js('./default')))
    var.put('def', var.get('_interopRequireWildcard')(var.get('_default')))
    var.put('_rest', var.get('require')(Js('./rest')))
    var.put('rest', var.get('_interopRequireWildcard')(var.get('_rest')))
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1095_._set_name('anonymous')
PyJs_Object_1102_ = Js({'./default':Js(77.0),'./destructuring':Js(78.0),'./rest':Js(80.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-traverse':Js(225.0)})
@Js
def PyJs_anonymous_1103_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['restIndexImpure', 'exports', 'optimiseLengthGetter', 'hasRest', '_interopRequireWildcard', 'visitor', 'require', '_babelTypes', '_babelTemplate', 'module', 'restIndex', 'buildRest', '_babelTemplate2', 't', '_interopRequireDefault', 'restLength', '_getIterator2', '_getIterator3', 'optimiseIndexGetter', 'memberExpressionOptimisationVisitor'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1105_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1105_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_optimiseLengthGetter_(path, argsId, offset, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'argsId':argsId, 'offset':offset}, var)
        var.registers(['path', 'argsId', 'offset'])
        if var.get('offset'):
            PyJs_Object_1121_ = Js({'ARGUMENTS':var.get('argsId'),'OFFSET':var.get('t').callprop('numericLiteral', var.get('offset'))})
            var.get('path').get('parentPath').callprop('replaceWith', var.get('restLength')(PyJs_Object_1121_))
        else:
            var.get('path').callprop('replaceWith', var.get('argsId'))
    PyJsHoisted_optimiseLengthGetter_.__name__ = 'optimiseLengthGetter'
    var.put('optimiseLengthGetter', PyJsHoisted_optimiseLengthGetter_)
    @Js
    def PyJsHoisted_optimiseIndexGetter_(path, argsId, offset, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'argsId':argsId, 'offset':offset}, var)
        var.registers(['index', 'temp', 'argsId', 'offset', 'path', 'scope'])
        var.put('index', PyJsComma(Js(0.0), Js(None)))
        if var.get('t').callprop('isNumericLiteral', var.get('path').get('parent').get('property')):
            var.put('index', var.get('t').callprop('numericLiteral', (var.get('path').get('parent').get('property').get('value')+var.get('offset'))))
        else:
            if PyJsStrictEq(var.get('offset'),Js(0.0)):
                var.put('index', var.get('path').get('parent').get('property'))
            else:
                var.put('index', var.get('t').callprop('binaryExpression', Js('+'), var.get('path').get('parent').get('property'), var.get('t').callprop('numericLiteral', var.get('offset'))))
        var.put('scope', var.get('path').get('scope'))
        if var.get('scope').callprop('isPure', var.get('index')).neg():
            var.put('temp', var.get('scope').callprop('generateUidIdentifierBasedOnNode', var.get('index')))
            PyJs_Object_1118_ = Js({'id':var.get('temp'),'kind':Js('var')})
            var.get('scope').callprop('push', PyJs_Object_1118_)
            PyJs_Object_1119_ = Js({'ARGUMENTS':var.get('argsId'),'INDEX':var.get('index'),'REF':var.get('temp')})
            var.get('path').get('parentPath').callprop('replaceWith', var.get('restIndexImpure')(PyJs_Object_1119_))
        else:
            PyJs_Object_1120_ = Js({'ARGUMENTS':var.get('argsId'),'INDEX':var.get('index')})
            var.get('path').get('parentPath').callprop('replaceWith', var.get('restIndex')(PyJs_Object_1120_))
    PyJsHoisted_optimiseIndexGetter_.__name__ = 'optimiseIndexGetter'
    var.put('optimiseIndexGetter', PyJsHoisted_optimiseIndexGetter_)
    @Js
    def PyJsHoisted_hasRest_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return var.get('t').callprop('isRestElement', var.get('node').get('params').get((var.get('node').get('params').get('length')-Js(1.0))))
    PyJsHoisted_hasRest_.__name__ = 'hasRest'
    var.put('hasRest', PyJsHoisted_hasRest_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1104_ = Js({})
            var.put('newObj', PyJs_Object_1104_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('visitor', var.get('undefined'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_babelTemplate', var.get('require')(Js('babel-template')))
    var.put('_babelTemplate2', var.get('_interopRequireDefault')(var.get('_babelTemplate')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('buildRest', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n')))
    var.put('restIndex', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  ARGUMENTS.length <= INDEX ? undefined : ARGUMENTS[INDEX]\n')))
    var.put('restIndexImpure', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  REF = INDEX, ARGUMENTS.length <= REF ? undefined : ARGUMENTS[REF]\n')))
    var.put('restLength', PyJsComma(Js(0.0),var.get('_babelTemplate2').get('default'))(Js('\n  ARGUMENTS.length <= OFFSET ? 0 : ARGUMENTS.length - OFFSET\n')))
    @Js
    def PyJs_Scope_1107_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'Scope':PyJs_Scope_1107_}, var)
        var.registers(['path', 'state'])
        if var.get('path').get('scope').callprop('bindingIdentifierEquals', var.get('state').get('name'), var.get('state').get('outerBinding')).neg():
            var.get('path').callprop('skip')
    PyJs_Scope_1107_._set_name('Scope')
    @Js
    def PyJs_Flow_1108_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Flow':PyJs_Flow_1108_, 'arguments':arguments}, var)
        var.registers(['path'])
        if var.get('path').callprop('isTypeCastExpression'):
            return var.get('undefined')
        var.get('path').callprop('skip')
    PyJs_Flow_1108_._set_name('Flow')
    @Js
    def PyJs_FunctionClassProperty_1109_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'FunctionClassProperty':PyJs_FunctionClassProperty_1109_}, var)
        var.registers(['oldNoOptimise', 'state', 'path'])
        var.put('oldNoOptimise', var.get('state').get('noOptimise'))
        var.get('state').put('noOptimise', var.get('true'))
        var.get('path').callprop('traverse', var.get('memberExpressionOptimisationVisitor'), var.get('state'))
        var.get('state').put('noOptimise', var.get('oldNoOptimise'))
        var.get('path').callprop('skip')
    PyJs_FunctionClassProperty_1109_._set_name('FunctionClassProperty')
    @Js
    def PyJs_ReferencedIdentifier_1110_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_1110_, 'arguments':arguments}, var)
        var.registers(['node', 'grandparentPath', 'argsOptEligible', 'state', 'call', 'parentPath', 'path'])
        var.put('node', var.get('path').get('node'))
        if PyJsStrictEq(var.get('node').get('name'),Js('arguments')):
            var.get('state').put('deopted', var.get('true'))
        if PyJsStrictNeq(var.get('node').get('name'),var.get('state').get('name')):
            return var.get('undefined')
        if var.get('state').get('noOptimise'):
            var.get('state').put('deopted', var.get('true'))
        else:
            var.put('parentPath', var.get('path').get('parentPath'))
            PyJs_Object_1111_ = Js({'object':var.get('node')})
            if var.get('parentPath').callprop('isMemberExpression', PyJs_Object_1111_):
                var.put('grandparentPath', var.get('parentPath').get('parentPath'))
                def PyJs_LONG_1113_(var=var):
                    PyJs_Object_1112_ = Js({'operator':Js('delete')})
                    return (((((var.get('grandparentPath').callprop('isAssignmentExpression') and PyJsStrictEq(var.get('parentPath').get('node'),var.get('grandparentPath').get('node').get('left'))) or var.get('grandparentPath').callprop('isLVal')) or var.get('grandparentPath').callprop('isForXStatement')) or var.get('grandparentPath').callprop('isUpdateExpression')) or var.get('grandparentPath').callprop('isUnaryExpression', PyJs_Object_1112_))
                var.put('argsOptEligible', (var.get('state').get('deopted').neg() and (PyJs_LONG_1113_() or ((var.get('grandparentPath').callprop('isCallExpression') or var.get('grandparentPath').callprop('isNewExpression')) and PyJsStrictEq(var.get('parentPath').get('node'),var.get('grandparentPath').get('node').get('callee')))).neg()))
                if var.get('argsOptEligible'):
                    if var.get('parentPath').get('node').get('computed'):
                        if var.get('parentPath').callprop('get', Js('property')).callprop('isBaseType', Js('number')):
                            PyJs_Object_1114_ = Js({'cause':Js('indexGetter'),'path':var.get('path')})
                            var.get('state').get('candidates').callprop('push', PyJs_Object_1114_)
                            return var.get('undefined')
                    else:
                        if PyJsStrictEq(var.get('parentPath').get('node').get('property').get('name'),Js('length')):
                            PyJs_Object_1115_ = Js({'cause':Js('lengthGetter'),'path':var.get('path')})
                            var.get('state').get('candidates').callprop('push', PyJs_Object_1115_)
                            return var.get('undefined')
            if (PyJsStrictEq(var.get('state').get('offset'),Js(0.0)) and var.get('parentPath').callprop('isSpreadElement')):
                var.put('call', var.get('parentPath').get('parentPath'))
                if (var.get('call').callprop('isCallExpression') and PyJsStrictEq(var.get('call').get('node').get('arguments').get('length'),Js(1.0))):
                    PyJs_Object_1116_ = Js({'cause':Js('argSpread'),'path':var.get('path')})
                    var.get('state').get('candidates').callprop('push', PyJs_Object_1116_)
                    return var.get('undefined')
            var.get('state').get('references').callprop('push', var.get('path'))
    PyJs_ReferencedIdentifier_1110_._set_name('ReferencedIdentifier')
    @Js
    def PyJs_BindingIdentifier_1117_(_ref, state, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'BindingIdentifier':PyJs_BindingIdentifier_1117_, 'state':state, 'arguments':arguments}, var)
        var.registers(['node', '_ref', 'state'])
        var.put('node', var.get('_ref').get('node'))
        if PyJsStrictEq(var.get('node').get('name'),var.get('state').get('name')):
            var.get('state').put('deopted', var.get('true'))
    PyJs_BindingIdentifier_1117_._set_name('BindingIdentifier')
    PyJs_Object_1106_ = Js({'Scope':PyJs_Scope_1107_,'Flow':PyJs_Flow_1108_,'Function|ClassProperty':PyJs_FunctionClassProperty_1109_,'ReferencedIdentifier':PyJs_ReferencedIdentifier_1110_,'BindingIdentifier':PyJs_BindingIdentifier_1117_})
    var.put('memberExpressionOptimisationVisitor', PyJs_Object_1106_)
    pass
    pass
    pass
    @Js
    def PyJs_Function_1123_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_1123_, 'arguments':arguments}, var)
        var.registers(['node', 'arrLen', '_isArray', '_iterator', 'key', 'arrKey', '_ref3', '_ref2', 'argsId', 'len', 'start', 'state', 'rest', '_i', 'target', 'scope', 'path', 'cause', 'loop', '_path'])
        var.put('node', var.get('path').get('node'))
        var.put('scope', var.get('path').get('scope'))
        if var.get('hasRest')(var.get('node')).neg():
            return var.get('undefined')
        var.put('rest', var.get('node').get('params').callprop('pop').get('argument'))
        var.put('argsId', var.get('t').callprop('identifier', Js('arguments')))
        var.get('argsId').put('_shadowedFunctionLiteral', var.get('path'))
        PyJs_Object_1124_ = Js({'references':Js([]),'offset':var.get('node').get('params').get('length'),'argumentsNode':var.get('argsId'),'outerBinding':var.get('scope').callprop('getBindingIdentifier', var.get('rest').get('name')),'candidates':Js([]),'name':var.get('rest').get('name'),'deopted':Js(False)})
        var.put('state', PyJs_Object_1124_)
        var.get('path').callprop('traverse', var.get('memberExpressionOptimisationVisitor'), var.get('state'))
        if (var.get('state').get('deopted').neg() and var.get('state').get('references').get('length').neg()):
            #for JS loop
            var.put('_iterator', var.get('state').get('candidates'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('_ref3', var.get('_ref2'))
                var.put('_path', var.get('_ref3').get('path'))
                var.put('cause', var.get('_ref3').get('cause'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('cause'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('indexGetter')):
                        SWITCHED = True
                        var.get('optimiseIndexGetter')(var.get('_path'), var.get('argsId'), var.get('state').get('offset'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('lengthGetter')):
                        SWITCHED = True
                        var.get('optimiseLengthGetter')(var.get('_path'), var.get('argsId'), var.get('state').get('offset'))
                        break
                    if True:
                        SWITCHED = True
                        var.get('_path').callprop('replaceWith', var.get('argsId'))
                    SWITCHED = True
                    break
            
            return var.get('undefined')
        @Js
        def PyJs_anonymous_1125_(_ref4, this, arguments, var=var):
            var = Scope({'this':this, '_ref4':_ref4, 'arguments':arguments}, var)
            var.registers(['path', '_ref4'])
            var.put('path', var.get('_ref4').get('path'))
            return var.get('path')
        PyJs_anonymous_1125_._set_name('anonymous')
        var.get('state').put('references', var.get('state').get('references').callprop('concat', var.get('state').get('candidates').callprop('map', PyJs_anonymous_1125_)))
        var.get('state').put('deopted', (var.get('state').get('deopted') or var.get('node').get('shadow').neg().neg()))
        var.put('start', var.get('t').callprop('numericLiteral', var.get('node').get('params').get('length')))
        var.put('key', var.get('scope').callprop('generateUidIdentifier', Js('key')))
        var.put('len', var.get('scope').callprop('generateUidIdentifier', Js('len')))
        var.put('arrKey', var.get('key'))
        var.put('arrLen', var.get('len'))
        if var.get('node').get('params').get('length'):
            var.put('arrKey', var.get('t').callprop('binaryExpression', Js('-'), var.get('key'), var.get('start')))
            var.put('arrLen', var.get('t').callprop('conditionalExpression', var.get('t').callprop('binaryExpression', Js('>'), var.get('len'), var.get('start')), var.get('t').callprop('binaryExpression', Js('-'), var.get('len'), var.get('start')), var.get('t').callprop('numericLiteral', Js(0.0))))
        PyJs_Object_1126_ = Js({'ARGUMENTS':var.get('argsId'),'ARRAY_KEY':var.get('arrKey'),'ARRAY_LEN':var.get('arrLen'),'START':var.get('start'),'ARRAY':var.get('rest'),'KEY':var.get('key'),'LEN':var.get('len')})
        var.put('loop', var.get('buildRest')(PyJs_Object_1126_))
        if var.get('state').get('deopted'):
            var.get('loop').put('_blockHoist', (var.get('node').get('params').get('length')+Js(1.0)))
            var.get('node').get('body').get('body').callprop('unshift', var.get('loop'))
        else:
            var.get('loop').put('_blockHoist', Js(1.0))
            var.put('target', var.get('path').callprop('getEarliestCommonAncestorFrom', var.get('state').get('references')).callprop('getStatementParent'))
            @Js
            def PyJs_anonymous_1127_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                if var.get('path').callprop('isLoop'):
                    var.put('target', var.get('path'))
                else:
                    return var.get('path').callprop('isFunction')
            PyJs_anonymous_1127_._set_name('anonymous')
            var.get('target').callprop('findParent', PyJs_anonymous_1127_)
            var.get('target').callprop('insertBefore', var.get('loop'))
    PyJs_Function_1123_._set_name('Function')
    PyJs_Object_1122_ = Js({'Function':PyJs_Function_1123_})
    var.put('visitor', var.get('exports').put('visitor', PyJs_Object_1122_))
PyJs_anonymous_1103_._set_name('anonymous')
PyJs_Object_1128_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-template':Js(221.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1129_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1135_ = Js({})
            var.put('newObj', PyJs_Object_1135_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1130_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_ObjectMethod_1133_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ObjectMethod':PyJs_ObjectMethod_1133_}, var)
            var.registers(['node', 'path', 'func'])
            var.put('node', var.get('path').get('node'))
            if PyJsStrictEq(var.get('node').get('kind'),Js('method')):
                var.put('func', var.get('t').callprop('functionExpression', var.get("null"), var.get('node').get('params'), var.get('node').get('body'), var.get('node').get('generator'), var.get('node').get('async')))
                var.get('func').put('returnType', var.get('node').get('returnType'))
                var.get('path').callprop('replaceWith', var.get('t').callprop('objectProperty', var.get('node').get('key'), var.get('func'), var.get('node').get('computed')))
        PyJs_ObjectMethod_1133_._set_name('ObjectMethod')
        @Js
        def PyJs_ObjectProperty_1134_(_ref, this, arguments, var=var):
            var = Scope({'this':this, '_ref':_ref, 'ObjectProperty':PyJs_ObjectProperty_1134_, 'arguments':arguments}, var)
            var.registers(['node', '_ref'])
            var.put('node', var.get('_ref').get('node'))
            if var.get('node').get('shorthand'):
                var.get('node').put('shorthand', Js(False))
        PyJs_ObjectProperty_1134_._set_name('ObjectProperty')
        PyJs_Object_1132_ = Js({'ObjectMethod':PyJs_ObjectMethod_1133_,'ObjectProperty':PyJs_ObjectProperty_1134_})
        PyJs_Object_1131_ = Js({'visitor':PyJs_Object_1132_})
        return PyJs_Object_1131_
    PyJs_anonymous_1130_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1130_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1129_._set_name('anonymous')
PyJs_Object_1136_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1137_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1146_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1146_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_1138_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'hasSpread', 't', 'getSpreadLiteral', 'build'])
        @Js
        def PyJsHoisted_hasSpread_(nodes, this, arguments, var=var):
            var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
            var.registers(['i', 'nodes'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodes').get('length')):
                try:
                    if var.get('t').callprop('isSpreadElement', var.get('nodes').get(var.get('i'))):
                        return var.get('true')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js(False)
        PyJsHoisted_hasSpread_.__name__ = 'hasSpread'
        var.put('hasSpread', PyJsHoisted_hasSpread_)
        @Js
        def PyJsHoisted_build_(props, scope, state, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'state':state, 'arguments':arguments, 'props':props}, var)
            var.registers(['_isArray', '_iterator', '_ref2', 'prop', 'state', '_props', '_i', 'props', 'push', 'scope', 'nodes'])
            @Js
            def PyJsHoisted_push_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('_props').get('length').neg():
                    return var.get('undefined')
                var.get('nodes').callprop('push', var.get('t').callprop('arrayExpression', var.get('_props')))
                var.put('_props', Js([]))
            PyJsHoisted_push_.__name__ = 'push'
            var.put('push', PyJsHoisted_push_)
            var.put('nodes', Js([]))
            var.put('_props', Js([]))
            pass
            #for JS loop
            var.put('_iterator', var.get('props'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('prop', var.get('_ref2'))
                if var.get('t').callprop('isSpreadElement', var.get('prop')):
                    var.get('push')()
                    var.get('nodes').callprop('push', var.get('getSpreadLiteral')(var.get('prop'), var.get('scope'), var.get('state')))
                else:
                    var.get('_props').callprop('push', var.get('prop'))
            
            var.get('push')()
            return var.get('nodes')
        PyJsHoisted_build_.__name__ = 'build'
        var.put('build', PyJsHoisted_build_)
        @Js
        def PyJsHoisted_getSpreadLiteral_(spread, scope, state, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'state':state, 'spread':spread, 'arguments':arguments}, var)
            var.registers(['scope', 'state', 'spread'])
            PyJs_Object_1139_ = Js({'name':Js('arguments')})
            if (var.get('state').get('opts').get('loose') and var.get('t').callprop('isIdentifier', var.get('spread').get('argument'), PyJs_Object_1139_).neg()):
                return var.get('spread').get('argument')
            else:
                return var.get('scope').callprop('toArray', var.get('spread').get('argument'), var.get('true'))
        PyJsHoisted_getSpreadLiteral_.__name__ = 'getSpreadLiteral'
        var.put('getSpreadLiteral', PyJsHoisted_getSpreadLiteral_)
        var.put('t', var.get('_ref').get('types'))
        pass
        pass
        pass
        @Js
        def PyJs_ArrayExpression_1142_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'ArrayExpression':PyJs_ArrayExpression_1142_}, var)
            var.registers(['node', 'elements', 'state', 'path', 'scope', 'nodes', 'first'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('elements', var.get('node').get('elements'))
            if var.get('hasSpread')(var.get('elements')).neg():
                return var.get('undefined')
            var.put('nodes', var.get('build')(var.get('elements'), var.get('scope'), var.get('state')))
            var.put('first', var.get('nodes').callprop('shift'))
            if var.get('t').callprop('isArrayExpression', var.get('first')).neg():
                var.get('nodes').callprop('unshift', var.get('first'))
                var.put('first', var.get('t').callprop('arrayExpression', Js([])))
            var.get('path').callprop('replaceWith', var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('first'), var.get('t').callprop('identifier', Js('concat'))), var.get('nodes')))
        PyJs_ArrayExpression_1142_._set_name('ArrayExpression')
        @Js
        def PyJs_CallExpression_1143_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'CallExpression':PyJs_CallExpression_1143_}, var)
            var.registers(['node', 'temp', 'contextLiteral', 'args', 'calleePath', 'state', 'path', 'scope', 'nodes', 'callee', 'first'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('args', var.get('node').get('arguments'))
            if var.get('hasSpread')(var.get('args')).neg():
                return var.get('undefined')
            var.put('calleePath', var.get('path').callprop('get', Js('callee')))
            if var.get('calleePath').callprop('isSuper'):
                return var.get('undefined')
            var.put('contextLiteral', var.get('t').callprop('identifier', Js('undefined')))
            var.get('node').put('arguments', Js([]))
            var.put('nodes', PyJsComma(Js(0.0), Js(None)))
            if (PyJsStrictEq(var.get('args').get('length'),Js(1.0)) and PyJsStrictEq(var.get('args').get('0').get('argument').get('name'),Js('arguments'))):
                var.put('nodes', Js([var.get('args').get('0').get('argument')]))
            else:
                var.put('nodes', var.get('build')(var.get('args'), var.get('scope'), var.get('state')))
            var.put('first', var.get('nodes').callprop('shift'))
            if var.get('nodes').get('length'):
                var.get('node').get('arguments').callprop('push', var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('first'), var.get('t').callprop('identifier', Js('concat'))), var.get('nodes')))
            else:
                var.get('node').get('arguments').callprop('push', var.get('first'))
            var.put('callee', var.get('node').get('callee'))
            if var.get('calleePath').callprop('isMemberExpression'):
                var.put('temp', var.get('scope').callprop('maybeGenerateMemoised', var.get('callee').get('object')))
                if var.get('temp'):
                    var.get('callee').put('object', var.get('t').callprop('assignmentExpression', Js('='), var.get('temp'), var.get('callee').get('object')))
                    var.put('contextLiteral', var.get('temp'))
                else:
                    var.put('contextLiteral', var.get('callee').get('object'))
                var.get('t').callprop('appendToMemberExpression', var.get('callee'), var.get('t').callprop('identifier', Js('apply')))
            else:
                var.get('node').put('callee', var.get('t').callprop('memberExpression', var.get('node').get('callee'), var.get('t').callprop('identifier', Js('apply'))))
            if var.get('t').callprop('isSuper', var.get('contextLiteral')):
                var.put('contextLiteral', var.get('t').callprop('thisExpression'))
            var.get('node').get('arguments').callprop('unshift', var.get('contextLiteral'))
        PyJs_CallExpression_1143_._set_name('CallExpression')
        @Js
        def PyJs_NewExpression_1144_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'NewExpression':PyJs_NewExpression_1144_}, var)
            var.registers(['node', 'args', 'state', 'context', 'path', 'scope', 'nodes'])
            var.put('node', var.get('path').get('node'))
            var.put('scope', var.get('path').get('scope'))
            var.put('args', var.get('node').get('arguments'))
            if var.get('hasSpread')(var.get('args')).neg():
                return var.get('undefined')
            var.put('nodes', var.get('build')(var.get('args'), var.get('scope'), var.get('state')))
            var.put('context', var.get('t').callprop('arrayExpression', Js([var.get('t').callprop('nullLiteral')])))
            var.put('args', var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('context'), var.get('t').callprop('identifier', Js('concat'))), var.get('nodes')))
            def PyJs_LONG_1145_(var=var):
                return var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('Function')), var.get('t').callprop('identifier', Js('prototype'))), var.get('t').callprop('identifier', Js('bind'))), var.get('t').callprop('identifier', Js('apply'))), Js([var.get('node').get('callee'), var.get('args')]))
            var.get('path').callprop('replaceWith', var.get('t').callprop('newExpression', PyJs_LONG_1145_(), Js([])))
        PyJs_NewExpression_1144_._set_name('NewExpression')
        PyJs_Object_1141_ = Js({'ArrayExpression':PyJs_ArrayExpression_1142_,'CallExpression':PyJs_CallExpression_1143_,'NewExpression':PyJs_NewExpression_1144_})
        PyJs_Object_1140_ = Js({'visitor':PyJs_Object_1141_})
        return PyJs_Object_1140_
    PyJs_anonymous_1138_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1138_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1137_._set_name('anonymous')
PyJs_Object_1147_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_1148_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['regex', 'exports', '_babelHelperRegex', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1153_ = Js({})
            var.put('newObj', PyJs_Object_1153_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1149_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_RegExpLiteral_1152_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'RegExpLiteral':PyJs_RegExpLiteral_1152_}, var)
            var.registers(['node', 'path'])
            var.put('node', var.get('path').get('node'))
            if var.get('regex').callprop('is', var.get('node'), Js('y')).neg():
                return var.get('undefined')
            var.get('path').callprop('replaceWith', var.get('t').callprop('newExpression', var.get('t').callprop('identifier', Js('RegExp')), Js([var.get('t').callprop('stringLiteral', var.get('node').get('pattern')), var.get('t').callprop('stringLiteral', var.get('node').get('flags'))])))
        PyJs_RegExpLiteral_1152_._set_name('RegExpLiteral')
        PyJs_Object_1151_ = Js({'RegExpLiteral':PyJs_RegExpLiteral_1152_})
        PyJs_Object_1150_ = Js({'visitor':PyJs_Object_1151_})
        return PyJs_Object_1150_
    PyJs_anonymous_1149_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1149_)
    var.put('_babelHelperRegex', var.get('require')(Js('babel-helper-regex')))
    var.put('regex', var.get('_interopRequireWildcard')(var.get('_babelHelperRegex')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1148_._set_name('anonymous')
PyJs_Object_1154_ = Js({'babel-helper-regex':Js(53.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1155_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1163_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1163_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_1156_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['_ref', 'isString', 'buildBinaryExpression', 't'])
        @Js
        def PyJsHoisted_isString_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            return (var.get('t').callprop('isLiteral', var.get('node')) and PyJsStrictEq(var.get('node').get('value').typeof(),Js('string')))
        PyJsHoisted_isString_.__name__ = 'isString'
        var.put('isString', PyJsHoisted_isString_)
        @Js
        def PyJsHoisted_buildBinaryExpression_(left, right, this, arguments, var=var):
            var = Scope({'this':this, 'right':right, 'arguments':arguments, 'left':left}, var)
            var.registers(['right', 'left'])
            return var.get('t').callprop('binaryExpression', Js('+'), var.get('left'), var.get('right'))
        PyJsHoisted_buildBinaryExpression_.__name__ = 'buildBinaryExpression'
        var.put('buildBinaryExpression', PyJsHoisted_buildBinaryExpression_)
        var.put('t', var.get('_ref').get('types'))
        pass
        pass
        @Js
        def PyJs_TaggedTemplateExpression_1159_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'TaggedTemplateExpression':PyJs_TaggedTemplateExpression_1159_, 'arguments':arguments}, var)
            var.registers(['node', '_isArray', '_iterator', 'templateObject', 'templateName', 'args', '_ref2', 'elem', 'raw', 'quasi', 'state', '_i', 'path', 'strings'])
            var.put('node', var.get('path').get('node'))
            var.put('quasi', var.get('node').get('quasi'))
            var.put('args', Js([]))
            var.put('strings', Js([]))
            var.put('raw', Js([]))
            #for JS loop
            var.put('_iterator', var.get('quasi').get('quasis'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref2', var.get('_i').get('value'))
                var.put('elem', var.get('_ref2'))
                var.get('strings').callprop('push', var.get('t').callprop('stringLiteral', var.get('elem').get('value').get('cooked')))
                var.get('raw').callprop('push', var.get('t').callprop('stringLiteral', var.get('elem').get('value').get('raw')))
            
            var.put('strings', var.get('t').callprop('arrayExpression', var.get('strings')))
            var.put('raw', var.get('t').callprop('arrayExpression', var.get('raw')))
            var.put('templateName', Js('taggedTemplateLiteral'))
            if var.get('state').get('opts').get('loose'):
                var.put('templateName', Js('Loose'), '+')
            var.put('templateObject', var.get('state').get('file').callprop('addTemplateObject', var.get('templateName'), var.get('strings'), var.get('raw')))
            var.get('args').callprop('push', var.get('templateObject'))
            var.put('args', var.get('args').callprop('concat', var.get('quasi').get('expressions')))
            var.get('path').callprop('replaceWith', var.get('t').callprop('callExpression', var.get('node').get('tag'), var.get('args')))
        PyJs_TaggedTemplateExpression_1159_._set_name('TaggedTemplateExpression')
        @Js
        def PyJs_TemplateLiteral_1160_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'TemplateLiteral':PyJs_TemplateLiteral_1160_, 'arguments':arguments}, var)
            var.registers(['node', '_ref4', '_isArray3', '_isArray2', 'expr', '_i3', '_ref3', '_i2', 'elem', 'state', 'path', 'nodes', 'root', 'expressions', '_iterator3', '_iterator2'])
            var.put('nodes', Js([]))
            var.put('expressions', var.get('path').callprop('get', Js('expressions')))
            #for JS loop
            var.put('_iterator2', var.get('path').get('node').get('quasis'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref3', var.get('_i2').get('value'))
                var.put('elem', var.get('_ref3'))
                var.get('nodes').callprop('push', var.get('t').callprop('stringLiteral', var.get('elem').get('value').get('cooked')))
                var.put('expr', var.get('expressions').callprop('shift'))
                if var.get('expr'):
                    if ((var.get('state').get('opts').get('spec') and var.get('expr').callprop('isBaseType', Js('string')).neg()) and var.get('expr').callprop('isBaseType', Js('number')).neg()):
                        var.get('nodes').callprop('push', var.get('t').callprop('callExpression', var.get('t').callprop('identifier', Js('String')), Js([var.get('expr').get('node')])))
                    else:
                        var.get('nodes').callprop('push', var.get('expr').get('node'))
            
            @Js
            def PyJs_anonymous_1161_(n, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'n':n}, var)
                var.registers(['n'])
                PyJs_Object_1162_ = Js({'value':Js('')})
                return var.get('t').callprop('isLiteral', var.get('n'), PyJs_Object_1162_).neg()
            PyJs_anonymous_1161_._set_name('anonymous')
            var.put('nodes', var.get('nodes').callprop('filter', PyJs_anonymous_1161_))
            if (var.get('isString')(var.get('nodes').get('0')).neg() and var.get('isString')(var.get('nodes').get('1')).neg()):
                var.get('nodes').callprop('unshift', var.get('t').callprop('stringLiteral', Js('')))
            if (var.get('nodes').get('length')>Js(1.0)):
                var.put('root', var.get('buildBinaryExpression')(var.get('nodes').callprop('shift'), var.get('nodes').callprop('shift')))
                #for JS loop
                var.put('_iterator3', var.get('nodes'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref4', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref4', var.get('_i3').get('value'))
                    var.put('node', var.get('_ref4'))
                    var.put('root', var.get('buildBinaryExpression')(var.get('root'), var.get('node')))
                
                var.get('path').callprop('replaceWith', var.get('root'))
            else:
                var.get('path').callprop('replaceWith', var.get('nodes').get('0'))
        PyJs_TemplateLiteral_1160_._set_name('TemplateLiteral')
        PyJs_Object_1158_ = Js({'TaggedTemplateExpression':PyJs_TaggedTemplateExpression_1159_,'TemplateLiteral':PyJs_TemplateLiteral_1160_})
        PyJs_Object_1157_ = Js({'visitor':PyJs_Object_1158_})
        return PyJs_Object_1157_
    PyJs_anonymous_1156_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1156_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1155_._set_name('anonymous')
PyJs_Object_1164_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_1165_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_symbol2', 'require', 'module', '_symbol', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1172_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1172_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1166_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
        var.registers(['IGNORE', '_ref', 't'])
        var.put('t', var.get('_ref').get('types'))
        var.put('IGNORE', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
        @Js
        def PyJs_Scope_1169_(_ref2, this, arguments, var=var):
            var = Scope({'this':this, 'Scope':PyJs_Scope_1169_, '_ref2':_ref2, 'arguments':arguments}, var)
            var.registers(['scope', '_ref2'])
            var.put('scope', var.get('_ref2').get('scope'))
            if var.get('scope').callprop('getBinding', Js('Symbol')).neg():
                return var.get('undefined')
            var.get('scope').callprop('rename', Js('Symbol'))
        PyJs_Scope_1169_._set_name('Scope')
        @Js
        def PyJs_UnaryExpression_1170_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'UnaryExpression':PyJs_UnaryExpression_1170_, 'arguments':arguments}, var)
            var.registers(['node', 'parent', 'opposite', 'unary', 'call', 'undefLiteral', 'path'])
            var.put('node', var.get('path').get('node'))
            var.put('parent', var.get('path').get('parent'))
            if var.get('node').get(var.get('IGNORE')):
                return var.get('undefined')
            @Js
            def PyJs_anonymous_1171_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return (var.get('path').get('node') and var.get('path').get('node').get('_generated').neg().neg())
            PyJs_anonymous_1171_._set_name('anonymous')
            if var.get('path').callprop('find', PyJs_anonymous_1171_):
                return var.get('undefined')
            if (var.get('path').get('parentPath').callprop('isBinaryExpression') and (var.get('t').get('EQUALITY_BINARY_OPERATORS').callprop('indexOf', var.get('parent').get('operator'))>=Js(0.0))):
                var.put('opposite', var.get('path').callprop('getOpposite'))
                if ((var.get('opposite').callprop('isLiteral') and PyJsStrictNeq(var.get('opposite').get('node').get('value'),Js('symbol'))) and PyJsStrictNeq(var.get('opposite').get('node').get('value'),Js('object'))):
                    return var.get('undefined')
            if PyJsStrictEq(var.get('node').get('operator'),Js('typeof')):
                var.put('call', var.get('t').callprop('callExpression', var.get("this").callprop('addHelper', Js('typeof')), Js([var.get('node').get('argument')])))
                if var.get('path').callprop('get', Js('argument')).callprop('isIdentifier'):
                    var.put('undefLiteral', var.get('t').callprop('stringLiteral', Js('undefined')))
                    var.put('unary', var.get('t').callprop('unaryExpression', Js('typeof'), var.get('node').get('argument')))
                    var.get('unary').put(var.get('IGNORE'), var.get('true'))
                    var.get('path').callprop('replaceWith', var.get('t').callprop('conditionalExpression', var.get('t').callprop('binaryExpression', Js('==='), var.get('unary'), var.get('undefLiteral')), var.get('undefLiteral'), var.get('call')))
                else:
                    var.get('path').callprop('replaceWith', var.get('call'))
        PyJs_UnaryExpression_1170_._set_name('UnaryExpression')
        PyJs_Object_1168_ = Js({'Scope':PyJs_Scope_1169_,'UnaryExpression':PyJs_UnaryExpression_1170_})
        PyJs_Object_1167_ = Js({'visitor':PyJs_Object_1168_})
        return PyJs_Object_1167_
    PyJs_anonymous_1166_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1166_)
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1165_._set_name('anonymous')
PyJs_Object_1173_ = Js({'babel-runtime/core-js/symbol':Js(105.0)})
@Js
def PyJs_anonymous_1174_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_regexpuCore', 'regex', 'exports', '_interopRequireWildcard', 'require', '_babelHelperRegex', 'module', '_interopRequireDefault', '_regexpuCore2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1180_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1180_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1179_ = Js({})
            var.put('newObj', PyJs_Object_1179_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1175_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_RegExpLiteral_1178_(_ref, this, arguments, var=var):
            var = Scope({'this':this, 'RegExpLiteral':PyJs_RegExpLiteral_1178_, '_ref':_ref, 'arguments':arguments}, var)
            var.registers(['node', '_ref'])
            var.put('node', var.get('_ref').get('node'))
            if var.get('regex').callprop('is', var.get('node'), Js('u')).neg():
                return var.get('undefined')
            var.get('node').put('pattern', PyJsComma(Js(0.0),var.get('_regexpuCore2').get('default'))(var.get('node').get('pattern'), var.get('node').get('flags')))
            var.get('regex').callprop('pullFlag', var.get('node'), Js('u'))
        PyJs_RegExpLiteral_1178_._set_name('RegExpLiteral')
        PyJs_Object_1177_ = Js({'RegExpLiteral':PyJs_RegExpLiteral_1178_})
        PyJs_Object_1176_ = Js({'visitor':PyJs_Object_1177_})
        return PyJs_Object_1176_
    PyJs_anonymous_1175_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1175_)
    var.put('_regexpuCore', var.get('require')(Js('regexpu-core')))
    var.put('_regexpuCore2', var.get('_interopRequireDefault')(var.get('_regexpuCore')))
    var.put('_babelHelperRegex', var.get('require')(Js('babel-helper-regex')))
    var.put('regex', var.get('_interopRequireWildcard')(var.get('_babelHelperRegex')))
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1174_._set_name('anonymous')
PyJs_Object_1181_ = Js({'babel-helper-regex':Js(53.0),'regexpu-core':Js(504.0)})
@Js
def PyJs_anonymous_1182_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'meta', '_assert', '_interopRequireDefault', 'loc', '_typeof2', '_typeof3', '_stringify2', 'getDeclError', 'leap', 'Emitter', 'isValidCompletion', 'exports', '_babelTypes', '_interopRequireWildcard', '_assert2', 'catchParamVisitor', '_util', 'util', '_meta', 'require', 'hasOwn', '_stringify', 't', '_leap', 'Ep'])
    @Js
    def PyJsHoisted_loc_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('numericLiteral', (-Js(1.0)))
    PyJsHoisted_loc_.__name__ = 'loc'
    var.put('loc', PyJsHoisted_loc_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1183_ = Js({})
            var.put('newObj', PyJs_Object_1183_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_isValidCompletion_(record, this, arguments, var=var):
        var = Scope({'this':this, 'record':record, 'arguments':arguments}, var)
        var.registers(['record', 'type'])
        var.put('type', var.get('record').get('type'))
        if PyJsStrictEq(var.get('type'),Js('normal')):
            return var.get('hasOwn').callprop('call', var.get('record'), Js('target')).neg()
        if (PyJsStrictEq(var.get('type'),Js('break')) or PyJsStrictEq(var.get('type'),Js('continue'))):
            return (var.get('hasOwn').callprop('call', var.get('record'), Js('value')).neg() and var.get('t').callprop('isLiteral', var.get('record').get('target')))
        if (PyJsStrictEq(var.get('type'),Js('return')) or PyJsStrictEq(var.get('type'),Js('throw'))):
            return (var.get('hasOwn').callprop('call', var.get('record'), Js('value')) and var.get('hasOwn').callprop('call', var.get('record'), Js('target')).neg())
        return Js(False)
    PyJsHoisted_isValidCompletion_.__name__ = 'isValidCompletion'
    var.put('isValidCompletion', PyJsHoisted_isValidCompletion_)
    @Js
    def PyJsHoisted_getDeclError_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return var.get('Error').create(((Js('all declarations should have been transformed into ')+Js('assignments before the Exploder began its work: '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('node'))))
    PyJsHoisted_getDeclError_.__name__ = 'getDeclError'
    var.put('getDeclError', PyJsHoisted_getDeclError_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1184_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1184_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_Emitter_(contextId, this, arguments, var=var):
        var = Scope({'this':this, 'contextId':contextId, 'arguments':arguments}, var)
        var.registers(['contextId'])
        var.get('_assert2').get('default').callprop('ok', var.get("this").instanceof(var.get('Emitter')))
        var.get('t').callprop('assertIdentifier', var.get('contextId'))
        var.get("this").put('nextTempId', Js(0.0))
        var.get("this").put('contextId', var.get('contextId'))
        var.get("this").put('listing', Js([]))
        var.get("this").put('marked', Js([var.get('true')]))
        var.get("this").put('finalLoc', var.get('loc')())
        var.get("this").put('tryEntries', Js([]))
        var.get("this").put('leapManager', var.get('leap').get('LeapManager').create(var.get("this")))
    PyJsHoisted_Emitter_.__name__ = 'Emitter'
    var.put('Emitter', PyJsHoisted_Emitter_)
    Js('use strict')
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.put('_assert', var.get('require')(Js('assert')))
    var.put('_assert2', var.get('_interopRequireDefault')(var.get('_assert')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_leap', var.get('require')(Js('./leap')))
    var.put('leap', var.get('_interopRequireWildcard')(var.get('_leap')))
    var.put('_meta', var.get('require')(Js('./meta')))
    var.put('meta', var.get('_interopRequireWildcard')(var.get('_meta')))
    var.put('_util', var.get('require')(Js('./util')))
    var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
    pass
    pass
    var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
    pass
    var.put('Ep', var.get('Emitter').get('prototype'))
    var.get('exports').put('Emitter', var.get('Emitter'))
    pass
    @Js
    def PyJs_anonymous_1185_(loc, this, arguments, var=var):
        var = Scope({'this':this, 'loc':loc, 'arguments':arguments}, var)
        var.registers(['index', 'loc'])
        var.get('t').callprop('assertLiteral', var.get('loc'))
        var.put('index', var.get("this").get('listing').get('length'))
        if PyJsStrictEq(var.get('loc').get('value'),(-Js(1.0))):
            var.get('loc').put('value', var.get('index'))
        else:
            var.get('_assert2').get('default').callprop('strictEqual', var.get('loc').get('value'), var.get('index'))
        var.get("this").get('marked').put(var.get('index'), var.get('true'))
        return var.get('loc')
    PyJs_anonymous_1185_._set_name('anonymous')
    var.get('Ep').put('mark', PyJs_anonymous_1185_)
    @Js
    def PyJs_anonymous_1186_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isExpression', var.get('node')):
            var.put('node', var.get('t').callprop('expressionStatement', var.get('node')))
        var.get('t').callprop('assertStatement', var.get('node'))
        var.get("this").get('listing').callprop('push', var.get('node'))
    PyJs_anonymous_1186_._set_name('anonymous')
    var.get('Ep').put('emit', PyJs_anonymous_1186_)
    @Js
    def PyJs_anonymous_1187_(lhs, rhs, this, arguments, var=var):
        var = Scope({'this':this, 'rhs':rhs, 'lhs':lhs, 'arguments':arguments}, var)
        var.registers(['rhs', 'lhs'])
        var.get("this").callprop('emit', var.get("this").callprop('assign', var.get('lhs'), var.get('rhs')))
        return var.get('lhs')
    PyJs_anonymous_1187_._set_name('anonymous')
    var.get('Ep').put('emitAssign', PyJs_anonymous_1187_)
    @Js
    def PyJs_anonymous_1188_(lhs, rhs, this, arguments, var=var):
        var = Scope({'this':this, 'rhs':rhs, 'lhs':lhs, 'arguments':arguments}, var)
        var.registers(['rhs', 'lhs'])
        return var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('lhs'), var.get('rhs')))
    PyJs_anonymous_1188_._set_name('anonymous')
    var.get('Ep').put('assign', PyJs_anonymous_1188_)
    @Js
    def PyJs_anonymous_1189_(name, computed, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'name':name, 'computed':computed}, var)
        var.registers(['name', 'computed'])
        return var.get('t').callprop('memberExpression', var.get("this").get('contextId'), (var.get('t').callprop('stringLiteral', var.get('name')) if var.get('computed') else var.get('t').callprop('identifier', var.get('name'))), var.get('computed').neg().neg())
    PyJs_anonymous_1189_._set_name('anonymous')
    var.get('Ep').put('contextProperty', PyJs_anonymous_1189_)
    @Js
    def PyJs_anonymous_1190_(rval, this, arguments, var=var):
        var = Scope({'this':this, 'rval':rval, 'arguments':arguments}, var)
        var.registers(['rval'])
        if var.get('rval'):
            var.get("this").callprop('setReturnValue', var.get('rval'))
        var.get("this").callprop('jump', var.get("this").get('finalLoc'))
    PyJs_anonymous_1190_._set_name('anonymous')
    var.get('Ep').put('stop', PyJs_anonymous_1190_)
    @Js
    def PyJs_anonymous_1191_(valuePath, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'valuePath':valuePath}, var)
        var.registers(['valuePath'])
        var.get('t').callprop('assertExpression', var.get('valuePath').get('value'))
        var.get("this").callprop('emitAssign', var.get("this").callprop('contextProperty', Js('rval')), var.get("this").callprop('explodeExpression', var.get('valuePath')))
    PyJs_anonymous_1191_._set_name('anonymous')
    var.get('Ep').put('setReturnValue', PyJs_anonymous_1191_)
    @Js
    def PyJs_anonymous_1192_(tryLoc, assignee, this, arguments, var=var):
        var = Scope({'this':this, 'assignee':assignee, 'tryLoc':tryLoc, 'arguments':arguments}, var)
        var.registers(['assignee', 'catchCall', 'tryLoc'])
        var.get('t').callprop('assertLiteral', var.get('tryLoc'))
        var.put('catchCall', var.get('t').callprop('callExpression', var.get("this").callprop('contextProperty', Js('catch'), var.get('true')), Js([var.get('tryLoc')])))
        if var.get('assignee'):
            var.get("this").callprop('emitAssign', var.get('assignee'), var.get('catchCall'))
        else:
            var.get("this").callprop('emit', var.get('catchCall'))
    PyJs_anonymous_1192_._set_name('anonymous')
    var.get('Ep').put('clearPendingException', PyJs_anonymous_1192_)
    @Js
    def PyJs_anonymous_1193_(toLoc, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'toLoc':toLoc}, var)
        var.registers(['toLoc'])
        var.get("this").callprop('emitAssign', var.get("this").callprop('contextProperty', Js('next')), var.get('toLoc'))
        var.get("this").callprop('emit', var.get('t').callprop('breakStatement'))
    PyJs_anonymous_1193_._set_name('anonymous')
    var.get('Ep').put('jump', PyJs_anonymous_1193_)
    @Js
    def PyJs_anonymous_1194_(test, toLoc, this, arguments, var=var):
        var = Scope({'test':test, 'this':this, 'arguments':arguments, 'toLoc':toLoc}, var)
        var.registers(['test', 'toLoc'])
        var.get('t').callprop('assertExpression', var.get('test'))
        var.get('t').callprop('assertLiteral', var.get('toLoc'))
        var.get("this").callprop('emit', var.get('t').callprop('ifStatement', var.get('test'), var.get('t').callprop('blockStatement', Js([var.get("this").callprop('assign', var.get("this").callprop('contextProperty', Js('next')), var.get('toLoc')), var.get('t').callprop('breakStatement')]))))
    PyJs_anonymous_1194_._set_name('anonymous')
    var.get('Ep').put('jumpIf', PyJs_anonymous_1194_)
    @Js
    def PyJs_anonymous_1195_(test, toLoc, this, arguments, var=var):
        var = Scope({'test':test, 'this':this, 'arguments':arguments, 'toLoc':toLoc}, var)
        var.registers(['test', 'negatedTest', 'toLoc'])
        var.get('t').callprop('assertExpression', var.get('test'))
        var.get('t').callprop('assertLiteral', var.get('toLoc'))
        var.put('negatedTest', PyJsComma(Js(0.0), Js(None)))
        if (var.get('t').callprop('isUnaryExpression', var.get('test')) and PyJsStrictEq(var.get('test').get('operator'),Js('!'))):
            var.put('negatedTest', var.get('test').get('argument'))
        else:
            var.put('negatedTest', var.get('t').callprop('unaryExpression', Js('!'), var.get('test')))
        var.get("this").callprop('emit', var.get('t').callprop('ifStatement', var.get('negatedTest'), var.get('t').callprop('blockStatement', Js([var.get("this").callprop('assign', var.get("this").callprop('contextProperty', Js('next')), var.get('toLoc')), var.get('t').callprop('breakStatement')]))))
    PyJs_anonymous_1195_._set_name('anonymous')
    var.get('Ep').put('jumpIfNot', PyJs_anonymous_1195_)
    @Js
    def PyJs_anonymous_1196_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('contextProperty', (Js('t')+(var.get("this").put('nextTempId',Js(var.get("this").get('nextTempId').to_number())+Js(1))-Js(1))))
    PyJs_anonymous_1196_._set_name('anonymous')
    var.get('Ep').put('makeTempVar', PyJs_anonymous_1196_)
    @Js
    def PyJs_anonymous_1197_(id, this, arguments, var=var):
        var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
        var.registers(['id'])
        return var.get('t').callprop('functionExpression', (var.get('id') or var.get("null")), Js([var.get("this").get('contextId')]), var.get('t').callprop('blockStatement', Js([var.get("this").callprop('getDispatchLoop')])), Js(False), Js(False))
    PyJs_anonymous_1197_._set_name('anonymous')
    var.get('Ep').put('getContextFunction', PyJs_anonymous_1197_)
    @Js
    def PyJs_anonymous_1198_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['current', 'self', 'alreadyEnded', 'cases'])
        var.put('self', var.get("this"))
        var.put('cases', Js([]))
        var.put('current', PyJsComma(Js(0.0), Js(None)))
        var.put('alreadyEnded', Js(False))
        @Js
        def PyJs_anonymous_1199_(stmt, i, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, 'arguments':arguments, 'stmt':stmt}, var)
            var.registers(['i', 'stmt'])
            if var.get('self').get('marked').callprop('hasOwnProperty', var.get('i')):
                var.get('cases').callprop('push', var.get('t').callprop('switchCase', var.get('t').callprop('numericLiteral', var.get('i')), var.put('current', Js([]))))
                var.put('alreadyEnded', Js(False))
            if var.get('alreadyEnded').neg():
                var.get('current').callprop('push', var.get('stmt'))
                if var.get('t').callprop('isCompletionStatement', var.get('stmt')):
                    var.put('alreadyEnded', var.get('true'))
        PyJs_anonymous_1199_._set_name('anonymous')
        var.get('self').get('listing').callprop('forEach', PyJs_anonymous_1199_)
        var.get("this").get('finalLoc').put('value', var.get("this").get('listing').get('length'))
        var.get('cases').callprop('push', var.get('t').callprop('switchCase', var.get("this").get('finalLoc'), Js([])), var.get('t').callprop('switchCase', var.get('t').callprop('stringLiteral', Js('end')), Js([var.get('t').callprop('returnStatement', var.get('t').callprop('callExpression', var.get("this").callprop('contextProperty', Js('stop')), Js([])))])))
        return var.get('t').callprop('whileStatement', var.get('t').callprop('numericLiteral', Js(1.0)), var.get('t').callprop('switchStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get("this").callprop('contextProperty', Js('prev')), var.get("this").callprop('contextProperty', Js('next'))), var.get('cases')))
    PyJs_anonymous_1198_._set_name('anonymous')
    var.get('Ep').put('getDispatchLoop', PyJs_anonymous_1198_)
    @Js
    def PyJs_anonymous_1200_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['lastLocValue'])
        if PyJsStrictEq(var.get("this").get('tryEntries').get('length'),Js(0.0)):
            return var.get("null")
        var.put('lastLocValue', Js(0.0))
        @Js
        def PyJs_anonymous_1201_(tryEntry, this, arguments, var=var):
            var = Scope({'this':this, 'tryEntry':tryEntry, 'arguments':arguments}, var)
            var.registers(['locs', 'tryEntry', 'thisLocValue', 'ce', 'fe'])
            var.put('thisLocValue', var.get('tryEntry').get('firstLoc').get('value'))
            var.get('_assert2').get('default').callprop('ok', (var.get('thisLocValue')>=var.get('lastLocValue')), Js('try entries out of order'))
            var.put('lastLocValue', var.get('thisLocValue'))
            var.put('ce', var.get('tryEntry').get('catchEntry'))
            var.put('fe', var.get('tryEntry').get('finallyEntry'))
            var.put('locs', Js([var.get('tryEntry').get('firstLoc'), (var.get('ce').get('firstLoc') if var.get('ce') else var.get("null"))]))
            if var.get('fe'):
                var.get('locs').put('2', var.get('fe').get('firstLoc'))
                var.get('locs').put('3', var.get('fe').get('afterLoc'))
            return var.get('t').callprop('arrayExpression', var.get('locs'))
        PyJs_anonymous_1201_._set_name('anonymous')
        return var.get('t').callprop('arrayExpression', var.get("this").get('tryEntries').callprop('map', PyJs_anonymous_1201_))
    PyJs_anonymous_1200_._set_name('anonymous')
    var.get('Ep').put('getTryLocsList', PyJs_anonymous_1200_)
    @Js
    def PyJs_anonymous_1202_(path, ignoreResult, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ignoreResult':ignoreResult, 'arguments':arguments}, var)
        var.registers(['node', 'path', 'self', 'ignoreResult'])
        var.put('node', var.get('path').get('node'))
        var.put('self', var.get("this"))
        var.get('t').callprop('assertNode', var.get('node'))
        if var.get('t').callprop('isDeclaration', var.get('node')):
            PyJsTempException = JsToPyException(var.get('getDeclError')(var.get('node')))
            raise PyJsTempException
        if var.get('t').callprop('isStatement', var.get('node')):
            return var.get('self').callprop('explodeStatement', var.get('path'))
        if var.get('t').callprop('isExpression', var.get('node')):
            return var.get('self').callprop('explodeExpression', var.get('path'), var.get('ignoreResult'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('node').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('Program')):
                SWITCHED = True
                return var.get('path').callprop('get', Js('body')).callprop('map', var.get('self').get('explodeStatement'), var.get('self'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('VariableDeclarator')):
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get('getDeclError')(var.get('node')))
                raise PyJsTempException
            if SWITCHED or PyJsStrictEq(CONDITION, Js('Property')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('SwitchCase')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('CatchClause')):
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get('Error').create((var.get('node').get('type')+Js(' nodes should be handled by their parents'))))
                raise PyJsTempException
            if True:
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown Node of type ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('node').get('type')))))
                raise PyJsTempException
            SWITCHED = True
            break
    PyJs_anonymous_1202_._set_name('anonymous')
    var.get('Ep').put('explode', PyJs_anonymous_1202_)
    pass
    @Js
    def PyJs_anonymous_1203_(path, labelId, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'labelId':labelId}, var)
        var.registers(['head', 'labelId', '_ret', 'self', 'after', 'stmt', 'path', 'before'])
        var.put('stmt', var.get('path').get('node'))
        var.put('self', var.get("this"))
        var.put('before', PyJsComma(Js(0.0), Js(None)))
        var.put('after', PyJsComma(Js(0.0), Js(None)))
        var.put('head', PyJsComma(Js(0.0), Js(None)))
        var.get('t').callprop('assertStatement', var.get('stmt'))
        if var.get('labelId'):
            var.get('t').callprop('assertIdentifier', var.get('labelId'))
        else:
            var.put('labelId', var.get("null"))
        if var.get('t').callprop('isBlockStatement', var.get('stmt')):
            @Js
            def PyJs_anonymous_1204_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                var.get('self').callprop('explodeStatement', var.get('path'))
            PyJs_anonymous_1204_._set_name('anonymous')
            var.get('path').callprop('get', Js('body')).callprop('forEach', PyJs_anonymous_1204_)
            return var.get('undefined')
        if var.get('meta').callprop('containsLeap', var.get('stmt')).neg():
            var.get('self').callprop('emit', var.get('stmt'))
            return var.get('undefined')
        @Js
        def PyJs_anonymous_1205_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['catchLoc', 'catchEntry', 'c', 'tryEntry', 'keyInfoTmpVar', 'discriminant', 'i', 'keyIterNextFn', 'finallyLoc', 'update', 'defaultLoc', 'caseLocs', 'disc', 'test', 'cases', 'finallyEntry', 'elseLoc', 'handler', 'condition', 'first'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('stmt').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ExpressionStatement')):
                    SWITCHED = True
                    var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('expression')), var.get('true'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('LabeledStatement')):
                    SWITCHED = True
                    var.put('after', var.get('loc')())
                    @Js
                    def PyJs_anonymous_1206_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('body')), var.get('stmt').get('label'))
                    PyJs_anonymous_1206_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('LabeledEntry').create(var.get('after'), var.get('stmt').get('label')), PyJs_anonymous_1206_)
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WhileStatement')):
                    SWITCHED = True
                    var.put('before', var.get('loc')())
                    var.put('after', var.get('loc')())
                    var.get('self').callprop('mark', var.get('before'))
                    var.get('self').callprop('jumpIfNot', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('test'))), var.get('after'))
                    @Js
                    def PyJs_anonymous_1207_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('body')))
                    PyJs_anonymous_1207_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('LoopEntry').create(var.get('after'), var.get('before'), var.get('labelId')), PyJs_anonymous_1207_)
                    var.get('self').callprop('jump', var.get('before'))
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('DoWhileStatement')):
                    SWITCHED = True
                    var.put('first', var.get('loc')())
                    var.put('test', var.get('loc')())
                    var.put('after', var.get('loc')())
                    var.get('self').callprop('mark', var.get('first'))
                    @Js
                    def PyJs_anonymous_1208_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explode', var.get('path').callprop('get', Js('body')))
                    PyJs_anonymous_1208_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('LoopEntry').create(var.get('after'), var.get('test'), var.get('labelId')), PyJs_anonymous_1208_)
                    var.get('self').callprop('mark', var.get('test'))
                    var.get('self').callprop('jumpIf', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('test'))), var.get('first'))
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForStatement')):
                    SWITCHED = True
                    var.put('head', var.get('loc')())
                    var.put('update', var.get('loc')())
                    var.put('after', var.get('loc')())
                    if var.get('stmt').get('init'):
                        var.get('self').callprop('explode', var.get('path').callprop('get', Js('init')), var.get('true'))
                    var.get('self').callprop('mark', var.get('head'))
                    if var.get('stmt').get('test'):
                        var.get('self').callprop('jumpIfNot', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('test'))), var.get('after'))
                    else:
                        pass
                    @Js
                    def PyJs_anonymous_1209_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('body')))
                    PyJs_anonymous_1209_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('LoopEntry').create(var.get('after'), var.get('update'), var.get('labelId')), PyJs_anonymous_1209_)
                    var.get('self').callprop('mark', var.get('update'))
                    if var.get('stmt').get('update'):
                        var.get('self').callprop('explode', var.get('path').callprop('get', Js('update')), var.get('true'))
                    var.get('self').callprop('jump', var.get('head'))
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('TypeCastExpression')):
                    SWITCHED = True
                    PyJs_Object_1210_ = Js({'v':var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('expression')))})
                    return PyJs_Object_1210_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForInStatement')):
                    SWITCHED = True
                    var.put('head', var.get('loc')())
                    var.put('after', var.get('loc')())
                    var.put('keyIterNextFn', var.get('self').callprop('makeTempVar'))
                    var.get('self').callprop('emitAssign', var.get('keyIterNextFn'), var.get('t').callprop('callExpression', var.get('util').callprop('runtimeProperty', Js('keys')), Js([var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('right')))])))
                    var.get('self').callprop('mark', var.get('head'))
                    var.put('keyInfoTmpVar', var.get('self').callprop('makeTempVar'))
                    var.get('self').callprop('jumpIf', var.get('t').callprop('memberExpression', var.get('t').callprop('assignmentExpression', Js('='), var.get('keyInfoTmpVar'), var.get('t').callprop('callExpression', var.get('keyIterNextFn'), Js([]))), var.get('t').callprop('identifier', Js('done')), Js(False)), var.get('after'))
                    var.get('self').callprop('emitAssign', var.get('stmt').get('left'), var.get('t').callprop('memberExpression', var.get('keyInfoTmpVar'), var.get('t').callprop('identifier', Js('value')), Js(False)))
                    @Js
                    def PyJs_anonymous_1211_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('body')))
                    PyJs_anonymous_1211_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('LoopEntry').create(var.get('after'), var.get('head'), var.get('labelId')), PyJs_anonymous_1211_)
                    var.get('self').callprop('jump', var.get('head'))
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('BreakStatement')):
                    SWITCHED = True
                    PyJs_Object_1212_ = Js({'type':Js('break'),'target':var.get('self').get('leapManager').callprop('getBreakLoc', var.get('stmt').get('label'))})
                    var.get('self').callprop('emitAbruptCompletion', PyJs_Object_1212_)
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ContinueStatement')):
                    SWITCHED = True
                    PyJs_Object_1213_ = Js({'type':Js('continue'),'target':var.get('self').get('leapManager').callprop('getContinueLoc', var.get('stmt').get('label'))})
                    var.get('self').callprop('emitAbruptCompletion', PyJs_Object_1213_)
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('SwitchStatement')):
                    SWITCHED = True
                    var.put('disc', var.get('self').callprop('emitAssign', var.get('self').callprop('makeTempVar'), var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('discriminant')))))
                    var.put('after', var.get('loc')())
                    var.put('defaultLoc', var.get('loc')())
                    var.put('condition', var.get('defaultLoc'))
                    var.put('caseLocs', Js([]))
                    var.put('cases', (var.get('stmt').get('cases') or Js([])))
                    #for JS loop
                    var.put('i', (var.get('cases').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('c', var.get('cases').get(var.get('i')))
                            var.get('t').callprop('assertSwitchCase', var.get('c'))
                            if var.get('c').get('test'):
                                var.put('condition', var.get('t').callprop('conditionalExpression', var.get('t').callprop('binaryExpression', Js('==='), var.get('disc'), var.get('c').get('test')), var.get('caseLocs').put(var.get('i'), var.get('loc')()), var.get('condition')))
                            else:
                                var.get('caseLocs').put(var.get('i'), var.get('defaultLoc'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    var.put('discriminant', var.get('path').callprop('get', Js('discriminant')))
                    var.get('discriminant').callprop('replaceWith', var.get('condition'))
                    var.get('self').callprop('jump', var.get('self').callprop('explodeExpression', var.get('discriminant')))
                    @Js
                    def PyJs_anonymous_1214_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        @Js
                        def PyJs_anonymous_1215_(casePath, this, arguments, var=var):
                            var = Scope({'this':this, 'casePath':casePath, 'arguments':arguments}, var)
                            var.registers(['i', 'casePath'])
                            var.put('i', var.get('casePath').get('key'))
                            var.get('self').callprop('mark', var.get('caseLocs').get(var.get('i')))
                            @Js
                            def PyJs_anonymous_1216_(path, this, arguments, var=var):
                                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                                var.registers(['path'])
                                var.get('self').callprop('explodeStatement', var.get('path'))
                            PyJs_anonymous_1216_._set_name('anonymous')
                            var.get('casePath').callprop('get', Js('consequent')).callprop('forEach', PyJs_anonymous_1216_)
                        PyJs_anonymous_1215_._set_name('anonymous')
                        var.get('path').callprop('get', Js('cases')).callprop('forEach', PyJs_anonymous_1215_)
                    PyJs_anonymous_1214_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('leap').get('SwitchEntry').create(var.get('after')), PyJs_anonymous_1214_)
                    var.get('self').callprop('mark', var.get('after'))
                    if PyJsStrictEq(var.get('defaultLoc').get('value'),(-Js(1.0))):
                        var.get('self').callprop('mark', var.get('defaultLoc'))
                        var.get('_assert2').get('default').callprop('strictEqual', var.get('after').get('value'), var.get('defaultLoc').get('value'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('IfStatement')):
                    SWITCHED = True
                    var.put('elseLoc', (var.get('stmt').get('alternate') and var.get('loc')()))
                    var.put('after', var.get('loc')())
                    var.get('self').callprop('jumpIfNot', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('test'))), (var.get('elseLoc') or var.get('after')))
                    var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('consequent')))
                    if var.get('elseLoc'):
                        var.get('self').callprop('jump', var.get('after'))
                        var.get('self').callprop('mark', var.get('elseLoc'))
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('alternate')))
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ReturnStatement')):
                    SWITCHED = True
                    PyJs_Object_1217_ = Js({'type':Js('return'),'value':var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('argument')))})
                    var.get('self').callprop('emitAbruptCompletion', PyJs_Object_1217_)
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WithStatement')):
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('WithStatement not supported in generator functions.')))
                    raise PyJsTempException
                if SWITCHED or PyJsStrictEq(CONDITION, Js('TryStatement')):
                    SWITCHED = True
                    var.put('after', var.get('loc')())
                    var.put('handler', var.get('stmt').get('handler'))
                    var.put('catchLoc', (var.get('handler') and var.get('loc')()))
                    var.put('catchEntry', (var.get('catchLoc') and var.get('leap').get('CatchEntry').create(var.get('catchLoc'), var.get('handler').get('param'))))
                    var.put('finallyLoc', (var.get('stmt').get('finalizer') and var.get('loc')()))
                    var.put('finallyEntry', (var.get('finallyLoc') and var.get('leap').get('FinallyEntry').create(var.get('finallyLoc'), var.get('after'))))
                    var.put('tryEntry', var.get('leap').get('TryEntry').create(var.get('self').callprop('getUnmarkedCurrentLoc'), var.get('catchEntry'), var.get('finallyEntry')))
                    var.get('self').get('tryEntries').callprop('push', var.get('tryEntry'))
                    var.get('self').callprop('updateContextPrevLoc', var.get('tryEntry').get('firstLoc'))
                    @Js
                    def PyJs_anonymous_1218_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('block')))
                        if var.get('catchLoc'):
                            @Js
                            def PyJs_anonymous_1219_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers(['bodyPath', 'safeParam'])
                                if var.get('finallyLoc'):
                                    var.get('self').callprop('jump', var.get('finallyLoc'))
                                else:
                                    var.get('self').callprop('jump', var.get('after'))
                                var.get('self').callprop('updateContextPrevLoc', var.get('self').callprop('mark', var.get('catchLoc')))
                                var.put('bodyPath', var.get('path').callprop('get', Js('handler.body')))
                                var.put('safeParam', var.get('self').callprop('makeTempVar'))
                                var.get('self').callprop('clearPendingException', var.get('tryEntry').get('firstLoc'), var.get('safeParam'))
                                PyJs_Object_1220_ = Js({'safeParam':var.get('safeParam'),'catchParamName':var.get('handler').get('param').get('name')})
                                var.get('bodyPath').callprop('traverse', var.get('catchParamVisitor'), PyJs_Object_1220_)
                                @Js
                                def PyJs_anonymous_1221_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.get('self').callprop('explodeStatement', var.get('bodyPath'))
                                PyJs_anonymous_1221_._set_name('anonymous')
                                var.get('self').get('leapManager').callprop('withEntry', var.get('catchEntry'), PyJs_anonymous_1221_)
                            PyJs_anonymous_1219_._set_name('anonymous')
                            PyJs_anonymous_1219_()
                        if var.get('finallyLoc'):
                            var.get('self').callprop('updateContextPrevLoc', var.get('self').callprop('mark', var.get('finallyLoc')))
                            @Js
                            def PyJs_anonymous_1222_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                var.get('self').callprop('explodeStatement', var.get('path').callprop('get', Js('finalizer')))
                            PyJs_anonymous_1222_._set_name('anonymous')
                            var.get('self').get('leapManager').callprop('withEntry', var.get('finallyEntry'), PyJs_anonymous_1222_)
                            var.get('self').callprop('emit', var.get('t').callprop('returnStatement', var.get('t').callprop('callExpression', var.get('self').callprop('contextProperty', Js('finish')), Js([var.get('finallyEntry').get('firstLoc')]))))
                    PyJs_anonymous_1218_._set_name('anonymous')
                    var.get('self').get('leapManager').callprop('withEntry', var.get('tryEntry'), PyJs_anonymous_1218_)
                    var.get('self').callprop('mark', var.get('after'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ThrowStatement')):
                    SWITCHED = True
                    var.get('self').callprop('emit', var.get('t').callprop('throwStatement', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('argument')))))
                    break
                if True:
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown Statement of type ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('stmt').get('type')))))
                    raise PyJsTempException
                SWITCHED = True
                break
        PyJs_anonymous_1205_._set_name('anonymous')
        var.put('_ret', PyJs_anonymous_1205_())
        if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('_ret',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_ret'))),Js('object')):
            return var.get('_ret').get('v')
    PyJs_anonymous_1203_._set_name('anonymous')
    var.get('Ep').put('explodeStatement', PyJs_anonymous_1203_)
    @Js
    def PyJs_Identifier_1224_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'Identifier':PyJs_Identifier_1224_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if (PyJsStrictEq(var.get('path').get('node').get('name'),var.get('state').get('catchParamName')) and var.get('util').callprop('isReference', var.get('path'))):
            var.get('path').callprop('replaceWith', var.get('state').get('safeParam'))
    PyJs_Identifier_1224_._set_name('Identifier')
    @Js
    def PyJs_Scope_1225_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'Scope':PyJs_Scope_1225_}, var)
        var.registers(['path', 'state'])
        if var.get('path').get('scope').callprop('hasOwnBinding', var.get('state').get('catchParamName')):
            var.get('path').callprop('skip')
    PyJs_Scope_1225_._set_name('Scope')
    PyJs_Object_1223_ = Js({'Identifier':PyJs_Identifier_1224_,'Scope':PyJs_Scope_1225_})
    var.put('catchParamVisitor', PyJs_Object_1223_)
    @Js
    def PyJs_anonymous_1226_(record, this, arguments, var=var):
        var = Scope({'this':this, 'record':record, 'arguments':arguments}, var)
        var.registers(['record', 'abruptArgs'])
        if var.get('isValidCompletion')(var.get('record')).neg():
            var.get('_assert2').get('default').callprop('ok', Js(False), (Js('invalid completion record: ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('record'))))
        var.get('_assert2').get('default').callprop('notStrictEqual', var.get('record').get('type'), Js('normal'), Js('normal completions are not abrupt'))
        var.put('abruptArgs', Js([var.get('t').callprop('stringLiteral', var.get('record').get('type'))]))
        if (PyJsStrictEq(var.get('record').get('type'),Js('break')) or PyJsStrictEq(var.get('record').get('type'),Js('continue'))):
            var.get('t').callprop('assertLiteral', var.get('record').get('target'))
            var.get('abruptArgs').put('1', var.get('record').get('target'))
        else:
            if (PyJsStrictEq(var.get('record').get('type'),Js('return')) or PyJsStrictEq(var.get('record').get('type'),Js('throw'))):
                if var.get('record').get('value'):
                    var.get('t').callprop('assertExpression', var.get('record').get('value'))
                    var.get('abruptArgs').put('1', var.get('record').get('value'))
        var.get("this").callprop('emit', var.get('t').callprop('returnStatement', var.get('t').callprop('callExpression', var.get("this").callprop('contextProperty', Js('abrupt')), var.get('abruptArgs'))))
    PyJs_anonymous_1226_._set_name('anonymous')
    var.get('Ep').put('emitAbruptCompletion', PyJs_anonymous_1226_)
    pass
    @Js
    def PyJs_anonymous_1227_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('numericLiteral', var.get("this").get('listing').get('length'))
    PyJs_anonymous_1227_._set_name('anonymous')
    var.get('Ep').put('getUnmarkedCurrentLoc', PyJs_anonymous_1227_)
    @Js
    def PyJs_anonymous_1228_(loc, this, arguments, var=var):
        var = Scope({'this':this, 'loc':loc, 'arguments':arguments}, var)
        var.registers(['loc'])
        if var.get('loc'):
            var.get('t').callprop('assertLiteral', var.get('loc'))
            if PyJsStrictEq(var.get('loc').get('value'),(-Js(1.0))):
                var.get('loc').put('value', var.get("this").get('listing').get('length'))
            else:
                var.get('_assert2').get('default').callprop('strictEqual', var.get('loc').get('value'), var.get("this").get('listing').get('length'))
        else:
            var.put('loc', var.get("this").callprop('getUnmarkedCurrentLoc'))
        var.get("this").callprop('emitAssign', var.get("this").callprop('contextProperty', Js('prev')), var.get('loc'))
    PyJs_anonymous_1228_._set_name('anonymous')
    var.get('Ep').put('updateContextPrevLoc', PyJs_anonymous_1228_)
    @Js
    def PyJs_anonymous_1229_(path, ignoreResult, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ignoreResult':ignoreResult, 'arguments':arguments}, var)
        var.registers(['finish', 'ignoreResult', 'expr', 'self', 'after', '_ret3', 'result', 'hasLeapingChildren', 'path', 'explodeViaTempVar'])
        @Js
        def PyJsHoisted_explodeViaTempVar_(tempVar, childPath, ignoreChildResult, this, arguments, var=var):
            var = Scope({'this':this, 'ignoreChildResult':ignoreChildResult, 'childPath':childPath, 'tempVar':tempVar, 'arguments':arguments}, var)
            var.registers(['childPath', 'ignoreChildResult', 'result', 'tempVar'])
            var.get('_assert2').get('default').callprop('ok', (var.get('ignoreChildResult').neg() or var.get('tempVar').neg()), (Js('Ignoring the result of a child expression but forcing it to ')+Js('be assigned to a temporary variable?')))
            var.put('result', var.get('self').callprop('explodeExpression', var.get('childPath'), var.get('ignoreChildResult')))
            if var.get('ignoreChildResult'):
                pass
            else:
                if (var.get('tempVar') or (var.get('hasLeapingChildren') and var.get('t').callprop('isLiteral', var.get('result')).neg())):
                    var.put('result', var.get('self').callprop('emitAssign', (var.get('tempVar') or var.get('self').callprop('makeTempVar')), var.get('result')))
            return var.get('result')
        PyJsHoisted_explodeViaTempVar_.__name__ = 'explodeViaTempVar'
        var.put('explodeViaTempVar', PyJsHoisted_explodeViaTempVar_)
        @Js
        def PyJsHoisted_finish_(expr, this, arguments, var=var):
            var = Scope({'this':this, 'expr':expr, 'arguments':arguments}, var)
            var.registers(['expr'])
            var.get('t').callprop('assertExpression', var.get('expr'))
            if var.get('ignoreResult'):
                var.get('self').callprop('emit', var.get('expr'))
            else:
                return var.get('expr')
        PyJsHoisted_finish_.__name__ = 'finish'
        var.put('finish', PyJsHoisted_finish_)
        var.put('expr', var.get('path').get('node'))
        if var.get('expr'):
            var.get('t').callprop('assertExpression', var.get('expr'))
        else:
            return var.get('expr')
        var.put('self', var.get("this"))
        var.put('result', PyJsComma(Js(0.0), Js(None)))
        var.put('after', PyJsComma(Js(0.0), Js(None)))
        pass
        if var.get('meta').callprop('containsLeap', var.get('expr')).neg():
            return var.get('finish')(var.get('expr'))
        var.put('hasLeapingChildren', var.get('meta').get('containsLeap').callprop('onlyChildren', var.get('expr')))
        pass
        @Js
        def PyJs_anonymous_1230_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['argsPath', '_result', 'hasLeapingArgs', 'calleePath', 'lastIndex', 'newProperty', 'newObject', 'arg', 'test', 'newCallee', 'newArgs', 'elseLoc', 'left'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('expr').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('MemberExpression')):
                    SWITCHED = True
                    PyJs_Object_1231_ = Js({'v':var.get('finish')(var.get('t').callprop('memberExpression', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('object'))), (var.get('explodeViaTempVar')(var.get("null"), var.get('path').callprop('get', Js('property'))) if var.get('expr').get('computed') else var.get('expr').get('property')), var.get('expr').get('computed')))})
                    return PyJs_Object_1231_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('CallExpression')):
                    SWITCHED = True
                    var.put('calleePath', var.get('path').callprop('get', Js('callee')))
                    var.put('argsPath', var.get('path').callprop('get', Js('arguments')))
                    var.put('newCallee', PyJsComma(Js(0.0), Js(None)))
                    var.put('newArgs', Js([]))
                    var.put('hasLeapingArgs', Js(False))
                    @Js
                    def PyJs_anonymous_1232_(argPath, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'argPath':argPath}, var)
                        var.registers(['argPath'])
                        var.put('hasLeapingArgs', (var.get('hasLeapingArgs') or var.get('meta').callprop('containsLeap', var.get('argPath').get('node'))))
                    PyJs_anonymous_1232_._set_name('anonymous')
                    var.get('argsPath').callprop('forEach', PyJs_anonymous_1232_)
                    if var.get('t').callprop('isMemberExpression', var.get('calleePath').get('node')):
                        if var.get('hasLeapingArgs'):
                            var.put('newObject', var.get('explodeViaTempVar')(var.get('self').callprop('makeTempVar'), var.get('calleePath').callprop('get', Js('object'))))
                            var.put('newProperty', (var.get('explodeViaTempVar')(var.get("null"), var.get('calleePath').callprop('get', Js('property'))) if var.get('calleePath').get('node').get('computed') else var.get('calleePath').get('node').get('property')))
                            var.get('newArgs').callprop('unshift', var.get('newObject'))
                            var.put('newCallee', var.get('t').callprop('memberExpression', var.get('t').callprop('memberExpression', var.get('newObject'), var.get('newProperty'), var.get('calleePath').get('node').get('computed')), var.get('t').callprop('identifier', Js('call')), Js(False)))
                        else:
                            var.put('newCallee', var.get('self').callprop('explodeExpression', var.get('calleePath')))
                    else:
                        var.put('newCallee', var.get('self').callprop('explodeExpression', var.get('calleePath')))
                        if var.get('t').callprop('isMemberExpression', var.get('newCallee')):
                            var.put('newCallee', var.get('t').callprop('sequenceExpression', Js([var.get('t').callprop('numericLiteral', Js(0.0)), var.get('newCallee')])))
                    @Js
                    def PyJs_anonymous_1233_(argPath, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'argPath':argPath}, var)
                        var.registers(['argPath'])
                        var.get('newArgs').callprop('push', var.get('explodeViaTempVar')(var.get("null"), var.get('argPath')))
                    PyJs_anonymous_1233_._set_name('anonymous')
                    var.get('argsPath').callprop('forEach', PyJs_anonymous_1233_)
                    PyJs_Object_1234_ = Js({'v':var.get('finish')(var.get('t').callprop('callExpression', var.get('newCallee'), var.get('newArgs')))})
                    return PyJs_Object_1234_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('NewExpression')):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_1236_(argPath, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'argPath':argPath}, var)
                        var.registers(['argPath'])
                        return var.get('explodeViaTempVar')(var.get("null"), var.get('argPath'))
                    PyJs_anonymous_1236_._set_name('anonymous')
                    PyJs_Object_1235_ = Js({'v':var.get('finish')(var.get('t').callprop('newExpression', var.get('explodeViaTempVar')(var.get("null"), var.get('path').callprop('get', Js('callee'))), var.get('path').callprop('get', Js('arguments')).callprop('map', PyJs_anonymous_1236_)))})
                    return PyJs_Object_1235_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectExpression')):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_1238_(propPath, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'propPath':propPath}, var)
                        var.registers(['propPath'])
                        if var.get('propPath').callprop('isObjectProperty'):
                            return var.get('t').callprop('objectProperty', var.get('propPath').get('node').get('key'), var.get('explodeViaTempVar')(var.get("null"), var.get('propPath').callprop('get', Js('value'))), var.get('propPath').get('node').get('computed'))
                        else:
                            return var.get('propPath').get('node')
                    PyJs_anonymous_1238_._set_name('anonymous')
                    PyJs_Object_1237_ = Js({'v':var.get('finish')(var.get('t').callprop('objectExpression', var.get('path').callprop('get', Js('properties')).callprop('map', PyJs_anonymous_1238_)))})
                    return PyJs_Object_1237_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayExpression')):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_1240_(elemPath, this, arguments, var=var):
                        var = Scope({'this':this, 'elemPath':elemPath, 'arguments':arguments}, var)
                        var.registers(['elemPath'])
                        return var.get('explodeViaTempVar')(var.get("null"), var.get('elemPath'))
                    PyJs_anonymous_1240_._set_name('anonymous')
                    PyJs_Object_1239_ = Js({'v':var.get('finish')(var.get('t').callprop('arrayExpression', var.get('path').callprop('get', Js('elements')).callprop('map', PyJs_anonymous_1240_)))})
                    return PyJs_Object_1239_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('SequenceExpression')):
                    SWITCHED = True
                    var.put('lastIndex', (var.get('expr').get('expressions').get('length')-Js(1.0)))
                    @Js
                    def PyJs_anonymous_1241_(exprPath, this, arguments, var=var):
                        var = Scope({'exprPath':exprPath, 'this':this, 'arguments':arguments}, var)
                        var.registers(['exprPath'])
                        if PyJsStrictEq(var.get('exprPath').get('key'),var.get('lastIndex')):
                            var.put('result', var.get('self').callprop('explodeExpression', var.get('exprPath'), var.get('ignoreResult')))
                        else:
                            var.get('self').callprop('explodeExpression', var.get('exprPath'), var.get('true'))
                    PyJs_anonymous_1241_._set_name('anonymous')
                    var.get('path').callprop('get', Js('expressions')).callprop('forEach', PyJs_anonymous_1241_)
                    PyJs_Object_1242_ = Js({'v':var.get('result')})
                    return PyJs_Object_1242_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('LogicalExpression')):
                    SWITCHED = True
                    var.put('after', var.get('loc')())
                    if var.get('ignoreResult').neg():
                        var.put('result', var.get('self').callprop('makeTempVar'))
                    var.put('left', var.get('explodeViaTempVar')(var.get('result'), var.get('path').callprop('get', Js('left'))))
                    if PyJsStrictEq(var.get('expr').get('operator'),Js('&&')):
                        var.get('self').callprop('jumpIfNot', var.get('left'), var.get('after'))
                    else:
                        var.get('_assert2').get('default').callprop('strictEqual', var.get('expr').get('operator'), Js('||'))
                        var.get('self').callprop('jumpIf', var.get('left'), var.get('after'))
                    var.get('explodeViaTempVar')(var.get('result'), var.get('path').callprop('get', Js('right')), var.get('ignoreResult'))
                    var.get('self').callprop('mark', var.get('after'))
                    PyJs_Object_1243_ = Js({'v':var.get('result')})
                    return PyJs_Object_1243_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ConditionalExpression')):
                    SWITCHED = True
                    var.put('elseLoc', var.get('loc')())
                    var.put('after', var.get('loc')())
                    var.put('test', var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('test'))))
                    var.get('self').callprop('jumpIfNot', var.get('test'), var.get('elseLoc'))
                    if var.get('ignoreResult').neg():
                        var.put('result', var.get('self').callprop('makeTempVar'))
                    var.get('explodeViaTempVar')(var.get('result'), var.get('path').callprop('get', Js('consequent')), var.get('ignoreResult'))
                    var.get('self').callprop('jump', var.get('after'))
                    var.get('self').callprop('mark', var.get('elseLoc'))
                    var.get('explodeViaTempVar')(var.get('result'), var.get('path').callprop('get', Js('alternate')), var.get('ignoreResult'))
                    var.get('self').callprop('mark', var.get('after'))
                    PyJs_Object_1244_ = Js({'v':var.get('result')})
                    return PyJs_Object_1244_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('UnaryExpression')):
                    SWITCHED = True
                    PyJs_Object_1245_ = Js({'v':var.get('finish')(var.get('t').callprop('unaryExpression', var.get('expr').get('operator'), var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('argument'))), var.get('expr').get('prefix').neg().neg()))})
                    return PyJs_Object_1245_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('BinaryExpression')):
                    SWITCHED = True
                    PyJs_Object_1246_ = Js({'v':var.get('finish')(var.get('t').callprop('binaryExpression', var.get('expr').get('operator'), var.get('explodeViaTempVar')(var.get("null"), var.get('path').callprop('get', Js('left'))), var.get('explodeViaTempVar')(var.get("null"), var.get('path').callprop('get', Js('right')))))})
                    return PyJs_Object_1246_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentExpression')):
                    SWITCHED = True
                    PyJs_Object_1247_ = Js({'v':var.get('finish')(var.get('t').callprop('assignmentExpression', var.get('expr').get('operator'), var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('left'))), var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('right')))))})
                    return PyJs_Object_1247_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('UpdateExpression')):
                    SWITCHED = True
                    PyJs_Object_1248_ = Js({'v':var.get('finish')(var.get('t').callprop('updateExpression', var.get('expr').get('operator'), var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('argument'))), var.get('expr').get('prefix')))})
                    return PyJs_Object_1248_
                if SWITCHED or PyJsStrictEq(CONDITION, Js('YieldExpression')):
                    SWITCHED = True
                    var.put('after', var.get('loc')())
                    var.put('arg', (var.get('expr').get('argument') and var.get('self').callprop('explodeExpression', var.get('path').callprop('get', Js('argument')))))
                    if (var.get('arg') and var.get('expr').get('delegate')):
                        var.put('_result', var.get('self').callprop('makeTempVar'))
                        var.get('self').callprop('emit', var.get('t').callprop('returnStatement', var.get('t').callprop('callExpression', var.get('self').callprop('contextProperty', Js('delegateYield')), Js([var.get('arg'), var.get('t').callprop('stringLiteral', var.get('_result').get('property').get('name')), var.get('after')]))))
                        var.get('self').callprop('mark', var.get('after'))
                        PyJs_Object_1249_ = Js({'v':var.get('_result')})
                        return PyJs_Object_1249_
                    var.get('self').callprop('emitAssign', var.get('self').callprop('contextProperty', Js('next')), var.get('after'))
                    var.get('self').callprop('emit', var.get('t').callprop('returnStatement', (var.get('arg') or var.get("null"))))
                    var.get('self').callprop('mark', var.get('after'))
                    PyJs_Object_1250_ = Js({'v':var.get('self').callprop('contextProperty', Js('sent'))})
                    return PyJs_Object_1250_
                if True:
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown Expression of type ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('expr').get('type')))))
                    raise PyJsTempException
                SWITCHED = True
                break
        PyJs_anonymous_1230_._set_name('anonymous')
        var.put('_ret3', PyJs_anonymous_1230_())
        if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('_ret3',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_ret3'))),Js('object')):
            return var.get('_ret3').get('v')
    PyJs_anonymous_1229_._set_name('anonymous')
    var.get('Ep').put('explodeExpression', PyJs_anonymous_1229_)
PyJs_anonymous_1182_._set_name('anonymous')
PyJs_Object_1251_ = Js({'./leap':Js(90.0),'./meta':Js(91.0),'./util':Js(92.0),'assert':Js(524.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/helpers/typeof':Js(114.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1252_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'exports', '_interopRequireWildcard', 'require', '_babelTypes', 'hasOwn', '_keys2', '_keys', 't', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1254_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1254_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1253_ = Js({})
            var.put('newObj', PyJs_Object_1253_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
    @Js
    def PyJs_anonymous_1255_(funPath, this, arguments, var=var):
        var = Scope({'this':this, 'funPath':funPath, 'arguments':arguments}, var)
        var.registers(['varDeclToExpr', 'funPath', 'paramNames', 'declarations', 'vars'])
        @Js
        def PyJsHoisted_varDeclToExpr_(vdec, includeIdentifiers, this, arguments, var=var):
            var = Scope({'this':this, 'vdec':vdec, 'arguments':arguments, 'includeIdentifiers':includeIdentifiers}, var)
            var.registers(['exprs', 'vdec', 'includeIdentifiers'])
            var.get('t').callprop('assertVariableDeclaration', var.get('vdec'))
            var.put('exprs', Js([]))
            @Js
            def PyJs_anonymous_1257_(dec, this, arguments, var=var):
                var = Scope({'this':this, 'dec':dec, 'arguments':arguments}, var)
                var.registers(['dec'])
                var.get('vars').put(var.get('dec').get('id').get('name'), var.get('t').callprop('identifier', var.get('dec').get('id').get('name')))
                if var.get('dec').get('init'):
                    var.get('exprs').callprop('push', var.get('t').callprop('assignmentExpression', Js('='), var.get('dec').get('id'), var.get('dec').get('init')))
                else:
                    if var.get('includeIdentifiers'):
                        var.get('exprs').callprop('push', var.get('dec').get('id'))
            PyJs_anonymous_1257_._set_name('anonymous')
            var.get('vdec').get('declarations').callprop('forEach', PyJs_anonymous_1257_)
            if PyJsStrictEq(var.get('exprs').get('length'),Js(0.0)):
                return var.get("null")
            if PyJsStrictEq(var.get('exprs').get('length'),Js(1.0)):
                return var.get('exprs').get('0')
            return var.get('t').callprop('sequenceExpression', var.get('exprs'))
        PyJsHoisted_varDeclToExpr_.__name__ = 'varDeclToExpr'
        var.put('varDeclToExpr', PyJsHoisted_varDeclToExpr_)
        var.get('t').callprop('assertFunction', var.get('funPath').get('node'))
        PyJs_Object_1256_ = Js({})
        var.put('vars', PyJs_Object_1256_)
        pass
        @Js
        def PyJs_exit_1260_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_1260_, 'arguments':arguments}, var)
            var.registers(['expr', 'path'])
            var.put('expr', var.get('varDeclToExpr')(var.get('path').get('node'), Js(False)))
            if PyJsStrictEq(var.get('expr'),var.get("null")):
                var.get('path').callprop('remove')
            else:
                var.get('path').callprop('replaceWith', var.get('t').callprop('expressionStatement', var.get('expr')))
            var.get('path').callprop('skip')
        PyJs_exit_1260_._set_name('exit')
        PyJs_Object_1259_ = Js({'exit':PyJs_exit_1260_})
        @Js
        def PyJs_ForStatement_1261_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ForStatement':PyJs_ForStatement_1261_}, var)
            var.registers(['path', 'init'])
            var.put('init', var.get('path').get('node').get('init'))
            if var.get('t').callprop('isVariableDeclaration', var.get('init')):
                var.get('path').callprop('get', Js('init')).callprop('replaceWith', var.get('varDeclToExpr')(var.get('init'), Js(False)))
        PyJs_ForStatement_1261_._set_name('ForStatement')
        @Js
        def PyJs_ForXStatement_1262_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'ForXStatement':PyJs_ForXStatement_1262_}, var)
            var.registers(['path', 'left'])
            var.put('left', var.get('path').callprop('get', Js('left')))
            if var.get('left').callprop('isVariableDeclaration'):
                var.get('left').callprop('replaceWith', var.get('varDeclToExpr')(var.get('left').get('node'), var.get('true')))
        PyJs_ForXStatement_1262_._set_name('ForXStatement')
        @Js
        def PyJs_FunctionDeclaration_1263_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'FunctionDeclaration':PyJs_FunctionDeclaration_1263_}, var)
            var.registers(['node', 'assignment', 'path'])
            var.put('node', var.get('path').get('node'))
            var.get('vars').put(var.get('node').get('id').get('name'), var.get('node').get('id'))
            var.put('assignment', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('node').get('id'), var.get('t').callprop('functionExpression', var.get('node').get('id'), var.get('node').get('params'), var.get('node').get('body'), var.get('node').get('generator'), var.get('node').get('expression')))))
            if var.get('path').get('parentPath').callprop('isBlockStatement'):
                var.get('path').get('parentPath').callprop('unshiftContainer', Js('body'), var.get('assignment'))
                var.get('path').callprop('remove')
            else:
                var.get('path').callprop('replaceWith', var.get('assignment'))
            var.get('path').callprop('skip')
        PyJs_FunctionDeclaration_1263_._set_name('FunctionDeclaration')
        @Js
        def PyJs_FunctionExpression_1264_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'FunctionExpression':PyJs_FunctionExpression_1264_, 'arguments':arguments}, var)
            var.registers(['path'])
            var.get('path').callprop('skip')
        PyJs_FunctionExpression_1264_._set_name('FunctionExpression')
        PyJs_Object_1258_ = Js({'VariableDeclaration':PyJs_Object_1259_,'ForStatement':PyJs_ForStatement_1261_,'ForXStatement':PyJs_ForXStatement_1262_,'FunctionDeclaration':PyJs_FunctionDeclaration_1263_,'FunctionExpression':PyJs_FunctionExpression_1264_})
        var.get('funPath').callprop('get', Js('body')).callprop('traverse', PyJs_Object_1258_)
        PyJs_Object_1265_ = Js({})
        var.put('paramNames', PyJs_Object_1265_)
        @Js
        def PyJs_anonymous_1266_(paramPath, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'paramPath':paramPath}, var)
            var.registers(['param', 'paramPath'])
            var.put('param', var.get('paramPath').get('node'))
            if var.get('t').callprop('isIdentifier', var.get('param')):
                var.get('paramNames').put(var.get('param').get('name'), var.get('param'))
            else:
                pass
        PyJs_anonymous_1266_._set_name('anonymous')
        var.get('funPath').callprop('get', Js('params')).callprop('forEach', PyJs_anonymous_1266_)
        var.put('declarations', Js([]))
        @Js
        def PyJs_anonymous_1267_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            if var.get('hasOwn').callprop('call', var.get('paramNames'), var.get('name')).neg():
                var.get('declarations').callprop('push', var.get('t').callprop('variableDeclarator', var.get('vars').get(var.get('name')), var.get("null")))
        PyJs_anonymous_1267_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('vars')).callprop('forEach', PyJs_anonymous_1267_)
        if PyJsStrictEq(var.get('declarations').get('length'),Js(0.0)):
            return var.get("null")
        return var.get('t').callprop('variableDeclaration', Js('var'), var.get('declarations'))
    PyJs_anonymous_1255_._set_name('anonymous')
    var.get('exports').put('hoist', PyJs_anonymous_1255_)
PyJs_anonymous_1252_._set_name('anonymous')
PyJs_Object_1268_ = Js({'babel-runtime/core-js/object/keys':Js(103.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1269_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1270_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('require')(Js('./visit'))
    PyJs_anonymous_1270_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1270_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1269_._set_name('anonymous')
PyJs_Object_1271_ = Js({'./visit':Js(93.0)})
@Js
def PyJs_anonymous_1272_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['CatchEntry', 'LabeledEntry', 'SwitchEntry', 'module', 'TryEntry', '_interopRequireWildcard', 'LMp', '_assert2', 'require', '_babelTypes', 'exports', '_util', 'LeapManager', 't', '_assert', 'FunctionEntry', '_interopRequireDefault', 'Entry', 'LoopEntry', 'FinallyEntry'])
    @Js
    def PyJsHoisted_CatchEntry_(firstLoc, paramId, this, arguments, var=var):
        var = Scope({'firstLoc':firstLoc, 'this':this, 'paramId':paramId, 'arguments':arguments}, var)
        var.registers(['firstLoc', 'paramId'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('firstLoc'))
        var.get('t').callprop('assertIdentifier', var.get('paramId'))
        var.get("this").put('firstLoc', var.get('firstLoc'))
        var.get("this").put('paramId', var.get('paramId'))
    PyJsHoisted_CatchEntry_.__name__ = 'CatchEntry'
    var.put('CatchEntry', PyJsHoisted_CatchEntry_)
    @Js
    def PyJsHoisted_LabeledEntry_(breakLoc, label, this, arguments, var=var):
        var = Scope({'this':this, 'breakLoc':breakLoc, 'arguments':arguments, 'label':label}, var)
        var.registers(['breakLoc', 'label'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('breakLoc'))
        var.get('t').callprop('assertIdentifier', var.get('label'))
        var.get("this").put('breakLoc', var.get('breakLoc'))
        var.get("this").put('label', var.get('label'))
    PyJsHoisted_LabeledEntry_.__name__ = 'LabeledEntry'
    var.put('LabeledEntry', PyJsHoisted_LabeledEntry_)
    @Js
    def PyJsHoisted_SwitchEntry_(breakLoc, this, arguments, var=var):
        var = Scope({'this':this, 'breakLoc':breakLoc, 'arguments':arguments}, var)
        var.registers(['breakLoc'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('breakLoc'))
        var.get("this").put('breakLoc', var.get('breakLoc'))
    PyJsHoisted_SwitchEntry_.__name__ = 'SwitchEntry'
    var.put('SwitchEntry', PyJsHoisted_SwitchEntry_)
    @Js
    def PyJsHoisted_TryEntry_(firstLoc, catchEntry, finallyEntry, this, arguments, var=var):
        var = Scope({'firstLoc':firstLoc, 'catchEntry':catchEntry, 'this':this, 'arguments':arguments, 'finallyEntry':finallyEntry}, var)
        var.registers(['firstLoc', 'catchEntry', 'finallyEntry'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('firstLoc'))
        if var.get('catchEntry'):
            var.get('_assert2').get('default').callprop('ok', var.get('catchEntry').instanceof(var.get('CatchEntry')))
        else:
            var.put('catchEntry', var.get("null"))
        if var.get('finallyEntry'):
            var.get('_assert2').get('default').callprop('ok', var.get('finallyEntry').instanceof(var.get('FinallyEntry')))
        else:
            var.put('finallyEntry', var.get("null"))
        var.get('_assert2').get('default').callprop('ok', (var.get('catchEntry') or var.get('finallyEntry')))
        var.get("this").put('firstLoc', var.get('firstLoc'))
        var.get("this").put('catchEntry', var.get('catchEntry'))
        var.get("this").put('finallyEntry', var.get('finallyEntry'))
    PyJsHoisted_TryEntry_.__name__ = 'TryEntry'
    var.put('TryEntry', PyJsHoisted_TryEntry_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1273_ = Js({})
            var.put('newObj', PyJs_Object_1273_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_LeapManager_(emitter, this, arguments, var=var):
        var = Scope({'this':this, 'emitter':emitter, 'arguments':arguments}, var)
        var.registers(['Emitter', 'emitter'])
        var.get('_assert2').get('default').callprop('ok', var.get("this").instanceof(var.get('LeapManager')))
        var.put('Emitter', var.get('require')(Js('./emit')).get('Emitter'))
        var.get('_assert2').get('default').callprop('ok', var.get('emitter').instanceof(var.get('Emitter')))
        var.get("this").put('emitter', var.get('emitter'))
        var.get("this").put('entryStack', Js([var.get('FunctionEntry').create(var.get('emitter').get('finalLoc'))]))
    PyJsHoisted_LeapManager_.__name__ = 'LeapManager'
    var.put('LeapManager', PyJsHoisted_LeapManager_)
    @Js
    def PyJsHoisted_FunctionEntry_(returnLoc, this, arguments, var=var):
        var = Scope({'this':this, 'returnLoc':returnLoc, 'arguments':arguments}, var)
        var.registers(['returnLoc'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('returnLoc'))
        var.get("this").put('returnLoc', var.get('returnLoc'))
    PyJsHoisted_FunctionEntry_.__name__ = 'FunctionEntry'
    var.put('FunctionEntry', PyJsHoisted_FunctionEntry_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1274_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1274_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_Entry_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get('_assert2').get('default').callprop('ok', var.get("this").instanceof(var.get('Entry')))
    PyJsHoisted_Entry_.__name__ = 'Entry'
    var.put('Entry', PyJsHoisted_Entry_)
    @Js
    def PyJsHoisted_LoopEntry_(breakLoc, continueLoc, label, this, arguments, var=var):
        var = Scope({'continueLoc':continueLoc, 'breakLoc':breakLoc, 'this':this, 'arguments':arguments, 'label':label}, var)
        var.registers(['continueLoc', 'breakLoc', 'label'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('breakLoc'))
        var.get('t').callprop('assertLiteral', var.get('continueLoc'))
        if var.get('label'):
            var.get('t').callprop('assertIdentifier', var.get('label'))
        else:
            var.put('label', var.get("null"))
        var.get("this").put('breakLoc', var.get('breakLoc'))
        var.get("this").put('continueLoc', var.get('continueLoc'))
        var.get("this").put('label', var.get('label'))
    PyJsHoisted_LoopEntry_.__name__ = 'LoopEntry'
    var.put('LoopEntry', PyJsHoisted_LoopEntry_)
    @Js
    def PyJsHoisted_FinallyEntry_(firstLoc, afterLoc, this, arguments, var=var):
        var = Scope({'firstLoc':firstLoc, 'this':this, 'afterLoc':afterLoc, 'arguments':arguments}, var)
        var.registers(['firstLoc', 'afterLoc'])
        var.get('Entry').callprop('call', var.get("this"))
        var.get('t').callprop('assertLiteral', var.get('firstLoc'))
        var.get('t').callprop('assertLiteral', var.get('afterLoc'))
        var.get("this").put('firstLoc', var.get('firstLoc'))
        var.get("this").put('afterLoc', var.get('afterLoc'))
    PyJsHoisted_FinallyEntry_.__name__ = 'FinallyEntry'
    var.put('FinallyEntry', PyJsHoisted_FinallyEntry_)
    Js('use strict')
    var.put('_assert', var.get('require')(Js('assert')))
    var.put('_assert2', var.get('_interopRequireDefault')(var.get('_assert')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_util', var.get('require')(Js('util')))
    pass
    pass
    pass
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('FunctionEntry'), var.get('Entry'))
    var.get('exports').put('FunctionEntry', var.get('FunctionEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('LoopEntry'), var.get('Entry'))
    var.get('exports').put('LoopEntry', var.get('LoopEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('SwitchEntry'), var.get('Entry'))
    var.get('exports').put('SwitchEntry', var.get('SwitchEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('TryEntry'), var.get('Entry'))
    var.get('exports').put('TryEntry', var.get('TryEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('CatchEntry'), var.get('Entry'))
    var.get('exports').put('CatchEntry', var.get('CatchEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('FinallyEntry'), var.get('Entry'))
    var.get('exports').put('FinallyEntry', var.get('FinallyEntry'))
    pass
    PyJsComma(Js(0.0),var.get('_util').get('inherits'))(var.get('LabeledEntry'), var.get('Entry'))
    var.get('exports').put('LabeledEntry', var.get('LabeledEntry'))
    pass
    var.put('LMp', var.get('LeapManager').get('prototype'))
    var.get('exports').put('LeapManager', var.get('LeapManager'))
    @Js
    def PyJs_anonymous_1275_(entry, callback, this, arguments, var=var):
        var = Scope({'this':this, 'entry':entry, 'arguments':arguments, 'callback':callback}, var)
        var.registers(['entry', 'popped', 'callback'])
        var.get('_assert2').get('default').callprop('ok', var.get('entry').instanceof(var.get('Entry')))
        var.get("this").get('entryStack').callprop('push', var.get('entry'))
        try:
            var.get('callback').callprop('call', var.get("this").get('emitter'))
        finally:
            var.put('popped', var.get("this").get('entryStack').callprop('pop'))
            var.get('_assert2').get('default').callprop('strictEqual', var.get('popped'), var.get('entry'))
    PyJs_anonymous_1275_._set_name('anonymous')
    var.get('LMp').put('withEntry', PyJs_anonymous_1275_)
    @Js
    def PyJs_anonymous_1276_(property, label, this, arguments, var=var):
        var = Scope({'this':this, 'property':property, 'arguments':arguments, 'label':label}, var)
        var.registers(['i', 'entry', 'property', 'label', 'loc'])
        #for JS loop
        var.put('i', (var.get("this").get('entryStack').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                var.put('entry', var.get("this").get('entryStack').get(var.get('i')))
                var.put('loc', var.get('entry').get(var.get('property')))
                if var.get('loc'):
                    if var.get('label'):
                        if (var.get('entry').get('label') and PyJsStrictEq(var.get('entry').get('label').get('name'),var.get('label').get('name'))):
                            return var.get('loc')
                    else:
                        if var.get('entry').instanceof(var.get('LabeledEntry')):
                            pass
                        else:
                            return var.get('loc')
            finally:
                    var.put('i',Js(var.get('i').to_number())-Js(1))
        return var.get("null")
    PyJs_anonymous_1276_._set_name('anonymous')
    var.get('LMp').put('_findLeapLocation', PyJs_anonymous_1276_)
    @Js
    def PyJs_anonymous_1277_(label, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'label':label}, var)
        var.registers(['label'])
        return var.get("this").callprop('_findLeapLocation', Js('breakLoc'), var.get('label'))
    PyJs_anonymous_1277_._set_name('anonymous')
    var.get('LMp').put('getBreakLoc', PyJs_anonymous_1277_)
    @Js
    def PyJs_anonymous_1278_(label, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'label':label}, var)
        var.registers(['label'])
        return var.get("this").callprop('_findLeapLocation', Js('continueLoc'), var.get('label'))
    PyJs_anonymous_1278_._set_name('anonymous')
    var.get('LMp').put('getContinueLoc', PyJs_anonymous_1278_)
PyJs_anonymous_1272_._set_name('anonymous')
PyJs_Object_1279_ = Js({'./emit':Js(87.0),'assert':Js(524.0),'babel-types':Js(258.0),'util':Js(534.0)})
@Js
def PyJs_anonymous_1280_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'sideEffectTypes', 'opaqueTypes', '_interopRequireWildcard', 'leapTypes', '_assert2', 'require', '_babelTypes', 'm', 'exports', 'hasOwn', 'makePredicate', 't', '_assert', '_interopRequireDefault', 'type'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1282_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1282_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_makePredicate_(propertyName, knownTypes, this, arguments, var=var):
        var = Scope({'this':this, 'propertyName':propertyName, 'arguments':arguments, 'knownTypes':knownTypes}, var)
        var.registers(['predicate', 'onlyChildren', 'propertyName', 'knownTypes'])
        @Js
        def PyJsHoisted_predicate_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', 'meta'])
            var.get('t').callprop('assertNode', var.get('node'))
            var.put('meta', var.get('m')(var.get('node')))
            if var.get('hasOwn').callprop('call', var.get('meta'), var.get('propertyName')):
                return var.get('meta').get(var.get('propertyName'))
            if var.get('hasOwn').callprop('call', var.get('opaqueTypes'), var.get('node').get('type')):
                return var.get('meta').put(var.get('propertyName'), Js(False))
            if var.get('hasOwn').callprop('call', var.get('knownTypes'), var.get('node').get('type')):
                return var.get('meta').put(var.get('propertyName'), var.get('true'))
            return var.get('meta').put(var.get('propertyName'), var.get('onlyChildren')(var.get('node')))
        PyJsHoisted_predicate_.__name__ = 'predicate'
        var.put('predicate', PyJsHoisted_predicate_)
        @Js
        def PyJsHoisted_onlyChildren_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node', 'keys', 'i', 'result', 'key', 'child', 'check'])
            @Js
            def PyJsHoisted_check_(child, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'child':child}, var)
                var.registers(['child'])
                if var.get('result'):
                    pass
                else:
                    if var.get('Array').callprop('isArray', var.get('child')):
                        var.get('child').callprop('some', var.get('check'))
                    else:
                        if var.get('t').callprop('isNode', var.get('child')):
                            var.get('_assert2').get('default').callprop('strictEqual', var.get('result'), Js(False))
                            var.put('result', var.get('predicate')(var.get('child')))
                return var.get('result')
            PyJsHoisted_check_.__name__ = 'check'
            var.put('check', PyJsHoisted_check_)
            var.get('t').callprop('assertNode', var.get('node'))
            var.put('result', Js(False))
            pass
            var.put('keys', var.get('t').get('VISITOR_KEYS').get(var.get('node').get('type')))
            if var.get('keys'):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('keys').get('length')):
                    try:
                        var.put('key', var.get('keys').get(var.get('i')))
                        var.put('child', var.get('node').get(var.get('key')))
                        var.get('check')(var.get('child'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('result')
        PyJsHoisted_onlyChildren_.__name__ = 'onlyChildren'
        var.put('onlyChildren', PyJsHoisted_onlyChildren_)
        pass
        pass
        var.get('predicate').put('onlyChildren', var.get('onlyChildren'))
        return var.get('predicate')
    PyJsHoisted_makePredicate_.__name__ = 'makePredicate'
    var.put('makePredicate', PyJsHoisted_makePredicate_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1281_ = Js({})
            var.put('newObj', PyJs_Object_1281_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.put('_assert', var.get('require')(Js('assert')))
    var.put('_assert2', var.get('_interopRequireDefault')(var.get('_assert')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('m', var.get('require')(Js('private')).callprop('makeAccessor'))
    var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
    pass
    PyJs_Object_1283_ = Js({'FunctionExpression':var.get('true')})
    var.put('opaqueTypes', PyJs_Object_1283_)
    PyJs_Object_1284_ = Js({'CallExpression':var.get('true'),'ForInStatement':var.get('true'),'UnaryExpression':var.get('true'),'BinaryExpression':var.get('true'),'AssignmentExpression':var.get('true'),'UpdateExpression':var.get('true'),'NewExpression':var.get('true')})
    var.put('sideEffectTypes', PyJs_Object_1284_)
    PyJs_Object_1285_ = Js({'YieldExpression':var.get('true'),'BreakStatement':var.get('true'),'ContinueStatement':var.get('true'),'ReturnStatement':var.get('true'),'ThrowStatement':var.get('true')})
    var.put('leapTypes', PyJs_Object_1285_)
    for PyJsTemp in var.get('leapTypes'):
        var.put('type', PyJsTemp)
        if var.get('hasOwn').callprop('call', var.get('leapTypes'), var.get('type')):
            var.get('sideEffectTypes').put(var.get('type'), var.get('leapTypes').get(var.get('type')))
    var.get('exports').put('hasSideEffects', var.get('makePredicate')(Js('hasSideEffects'), var.get('sideEffectTypes')))
    var.get('exports').put('containsLeap', var.get('makePredicate')(Js('containsLeap'), var.get('leapTypes')))
PyJs_anonymous_1280_._set_name('anonymous')
PyJs_Object_1286_ = Js({'assert':Js(524.0),'babel-types':Js(258.0),'private':Js(500.0)})
@Js
def PyJs_anonymous_1287_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'runtimeProperty', 'require', '_babelTypes', 'module', 't', 'isReference'])
    @Js
    def PyJsHoisted_runtimeProperty_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('regeneratorRuntime')), var.get('t').callprop('identifier', var.get('name')), Js(False))
    PyJsHoisted_runtimeProperty_.__name__ = 'runtimeProperty'
    var.put('runtimeProperty', PyJsHoisted_runtimeProperty_)
    @Js
    def PyJsHoisted_isReference_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path'])
        PyJs_Object_1289_ = Js({'left':var.get('path').get('node')})
        return (var.get('path').callprop('isReferenced') or var.get('path').get('parentPath').callprop('isAssignmentExpression', PyJs_Object_1289_))
    PyJsHoisted_isReference_.__name__ = 'isReference'
    var.put('isReference', PyJsHoisted_isReference_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1288_ = Js({})
            var.put('newObj', PyJs_Object_1288_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('runtimeProperty', var.get('runtimeProperty'))
    var.get('exports').put('isReference', var.get('isReference'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
PyJs_anonymous_1287_._set_name('anonymous')
PyJs_Object_1290_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1291_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'exports', '_emit', 'awaitVisitor', '_interopRequireWildcard', '_assert2', 'require', '_babelTypes', 'getMarkInfo', '_util', 'functionSentVisitor', 'util', 'renameArguments', 'getOuterFnExpr', 't', '_assert', 'getRuntimeMarkDecl', '_interopRequireDefault', '_hoist', 'argumentsVisitor'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1293_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1293_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getRuntimeMarkDecl_(blockPath, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'blockPath':blockPath}, var)
        var.registers(['info', 'block', 'blockPath'])
        var.put('block', var.get('blockPath').get('node'))
        var.get('_assert2').get('default').callprop('ok', var.get('Array').callprop('isArray', var.get('block').get('body')))
        var.put('info', var.get('getMarkInfo')(var.get('block')))
        if var.get('info').get('decl'):
            return var.get('info').get('decl')
        def PyJs_LONG_1300_(var=var):
            return var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('blockPath').get('scope').callprop('generateUidIdentifier', Js('marked')), var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('arrayExpression', Js([])), var.get('t').callprop('identifier', Js('map')), Js(False)), Js([var.get('util').callprop('runtimeProperty', Js('mark'))])))]))
        var.get('info').put('decl', PyJs_LONG_1300_())
        var.get('blockPath').callprop('unshiftContainer', Js('body'), var.get('info').get('decl'))
        return var.get('info').get('decl')
    PyJsHoisted_getRuntimeMarkDecl_.__name__ = 'getRuntimeMarkDecl'
    var.put('getRuntimeMarkDecl', PyJsHoisted_getRuntimeMarkDecl_)
    @Js
    def PyJsHoisted_getOuterFnExpr_(funPath, this, arguments, var=var):
        var = Scope({'this':this, 'funPath':funPath, 'arguments':arguments}, var)
        var.registers(['node', 'index', 'pp', 'markedArray', 'funDeclIdArray', 'markDecl', 'funPath'])
        var.put('node', var.get('funPath').get('node'))
        var.get('t').callprop('assertFunction', var.get('node'))
        if var.get('node').get('id').neg():
            var.get('node').put('id', var.get('funPath').get('scope').get('parent').callprop('generateUidIdentifier', Js('callee')))
        if (var.get('node').get('generator') and var.get('t').callprop('isFunctionDeclaration', var.get('node'))):
            @Js
            def PyJs_anonymous_1299_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return (var.get('path').callprop('isProgram') or var.get('path').callprop('isBlockStatement'))
            PyJs_anonymous_1299_._set_name('anonymous')
            var.put('pp', var.get('funPath').callprop('findParent', PyJs_anonymous_1299_))
            if var.get('pp').neg():
                return var.get('node').get('id')
            var.put('markDecl', var.get('getRuntimeMarkDecl')(var.get('pp')))
            var.put('markedArray', var.get('markDecl').get('declarations').get('0').get('id'))
            var.put('funDeclIdArray', var.get('markDecl').get('declarations').get('0').get('init').get('callee').get('object'))
            var.get('t').callprop('assertArrayExpression', var.get('funDeclIdArray'))
            var.put('index', var.get('funDeclIdArray').get('elements').get('length'))
            var.get('funDeclIdArray').get('elements').callprop('push', var.get('node').get('id'))
            return var.get('t').callprop('memberExpression', var.get('markedArray'), var.get('t').callprop('numericLiteral', var.get('index')), var.get('true'))
        return var.get('node').get('id')
    PyJsHoisted_getOuterFnExpr_.__name__ = 'getOuterFnExpr'
    var.put('getOuterFnExpr', PyJsHoisted_getOuterFnExpr_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1292_ = Js({})
            var.put('newObj', PyJs_Object_1292_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_renameArguments_(funcPath, argsId, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'argsId':argsId, 'funcPath':funcPath}, var)
        var.registers(['state', 'argsId', 'funcPath'])
        PyJs_Object_1301_ = Js({'didRenameArguments':Js(False),'argsId':var.get('argsId')})
        var.put('state', PyJs_Object_1301_)
        var.get('funcPath').callprop('traverse', var.get('argumentsVisitor'), var.get('state'))
        return var.get('state').get('didRenameArguments')
    PyJsHoisted_renameArguments_.__name__ = 'renameArguments'
    var.put('renameArguments', PyJsHoisted_renameArguments_)
    Js('use strict')
    var.put('_assert', var.get('require')(Js('assert')))
    var.put('_assert2', var.get('_interopRequireDefault')(var.get('_assert')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_hoist', var.get('require')(Js('./hoist')))
    var.put('_emit', var.get('require')(Js('./emit')))
    var.put('_util', var.get('require')(Js('./util')))
    var.put('util', var.get('_interopRequireWildcard')(var.get('_util')))
    pass
    pass
    var.put('getMarkInfo', var.get('require')(Js('private')).callprop('makeAccessor'))
    @Js
    def PyJs_exit_1296_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'exit':PyJs_exit_1296_, 'arguments':arguments}, var)
        var.registers(['node', 'contextId', 'wrapCall', 'vars', 'state', 'innerFnId', 'didRenameArguments', 'argsId', 'bodyBlockPath', 'outerBody', 'emitter', 'outerFnExpr', 'tryLocsList', 'path', 'wrapArgs', 'innerBody', 'wasGeneratorFunction'])
        var.put('node', var.get('path').get('node'))
        if var.get('node').get('generator'):
            if var.get('node').get('async'):
                if PyJsStrictEq(var.get('state').get('opts').get('asyncGenerators'),Js(False)):
                    return var.get('undefined')
            else:
                if PyJsStrictEq(var.get('state').get('opts').get('generators'),Js(False)):
                    return var.get('undefined')
        else:
            if var.get('node').get('async'):
                if PyJsStrictEq(var.get('state').get('opts').get('async'),Js(False)):
                    return var.get('undefined')
            else:
                return var.get('undefined')
        var.put('contextId', var.get('path').get('scope').callprop('generateUidIdentifier', Js('context')))
        var.put('argsId', var.get('path').get('scope').callprop('generateUidIdentifier', Js('args')))
        var.get('path').callprop('ensureBlock')
        var.put('bodyBlockPath', var.get('path').callprop('get', Js('body')))
        if var.get('node').get('async'):
            var.get('bodyBlockPath').callprop('traverse', var.get('awaitVisitor'))
        PyJs_Object_1297_ = Js({'context':var.get('contextId')})
        var.get('bodyBlockPath').callprop('traverse', var.get('functionSentVisitor'), PyJs_Object_1297_)
        var.put('outerBody', Js([]))
        var.put('innerBody', Js([]))
        @Js
        def PyJs_anonymous_1298_(childPath, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'childPath':childPath}, var)
            var.registers(['node', 'childPath'])
            var.put('node', var.get('childPath').get('node'))
            if (var.get('node') and (var.get('node').get('_blockHoist')!=var.get("null"))):
                var.get('outerBody').callprop('push', var.get('node'))
            else:
                var.get('innerBody').callprop('push', var.get('node'))
        PyJs_anonymous_1298_._set_name('anonymous')
        var.get('bodyBlockPath').callprop('get', Js('body')).callprop('forEach', PyJs_anonymous_1298_)
        if (var.get('outerBody').get('length')>Js(0.0)):
            var.get('bodyBlockPath').get('node').put('body', var.get('innerBody'))
        var.put('outerFnExpr', var.get('getOuterFnExpr')(var.get('path')))
        var.get('t').callprop('assertIdentifier', var.get('node').get('id'))
        var.put('innerFnId', var.get('t').callprop('identifier', (var.get('node').get('id').get('name')+Js('$'))))
        var.put('vars', PyJsComma(Js(0.0),var.get('_hoist').get('hoist'))(var.get('path')))
        var.put('didRenameArguments', var.get('renameArguments')(var.get('path'), var.get('argsId')))
        if var.get('didRenameArguments'):
            var.put('vars', (var.get('vars') or var.get('t').callprop('variableDeclaration', Js('var'), Js([]))))
            var.get('vars').get('declarations').callprop('push', var.get('t').callprop('variableDeclarator', var.get('argsId'), var.get('t').callprop('identifier', Js('arguments'))))
        var.put('emitter', var.get('_emit').get('Emitter').create(var.get('contextId')))
        var.get('emitter').callprop('explode', var.get('path').callprop('get', Js('body')))
        if (var.get('vars') and (var.get('vars').get('declarations').get('length')>Js(0.0))):
            var.get('outerBody').callprop('push', var.get('vars'))
        var.put('wrapArgs', Js([var.get('emitter').callprop('getContextFunction', var.get('innerFnId')), (var.get('outerFnExpr') if var.get('node').get('generator') else var.get('t').callprop('nullLiteral')), var.get('t').callprop('thisExpression')]))
        var.put('tryLocsList', var.get('emitter').callprop('getTryLocsList'))
        if var.get('tryLocsList'):
            var.get('wrapArgs').callprop('push', var.get('tryLocsList'))
        var.put('wrapCall', var.get('t').callprop('callExpression', var.get('util').callprop('runtimeProperty', (Js('async') if var.get('node').get('async') else Js('wrap'))), var.get('wrapArgs')))
        var.get('outerBody').callprop('push', var.get('t').callprop('returnStatement', var.get('wrapCall')))
        var.get('node').put('body', var.get('t').callprop('blockStatement', var.get('outerBody')))
        var.put('wasGeneratorFunction', var.get('node').get('generator'))
        if var.get('wasGeneratorFunction'):
            var.get('node').put('generator', Js(False))
        if var.get('node').get('async'):
            var.get('node').put('async', Js(False))
        if (var.get('wasGeneratorFunction') and var.get('t').callprop('isExpression', var.get('node'))):
            var.get('path').callprop('replaceWith', var.get('t').callprop('callExpression', var.get('util').callprop('runtimeProperty', Js('mark')), Js([var.get('node')])))
        var.get('path').callprop('requeue')
    PyJs_exit_1296_._set_name('exit')
    PyJs_Object_1295_ = Js({'exit':PyJs_exit_1296_})
    PyJs_Object_1294_ = Js({'Function':PyJs_Object_1295_})
    var.get('exports').put('visitor', PyJs_Object_1294_)
    pass
    pass
    pass
    @Js
    def PyJs_FunctionExpressionFunctionDeclaration_1303_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'FunctionExpressionFunctionDeclaration':PyJs_FunctionExpressionFunctionDeclaration_1303_}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_FunctionExpressionFunctionDeclaration_1303_._set_name('FunctionExpressionFunctionDeclaration')
    @Js
    def PyJs_Identifier_1304_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'Identifier':PyJs_Identifier_1304_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if (PyJsStrictEq(var.get('path').get('node').get('name'),Js('arguments')) and var.get('util').callprop('isReference', var.get('path'))):
            var.get('path').callprop('replaceWith', var.get('state').get('argsId'))
            var.get('state').put('didRenameArguments', var.get('true'))
    PyJs_Identifier_1304_._set_name('Identifier')
    PyJs_Object_1302_ = Js({'FunctionExpression|FunctionDeclaration':PyJs_FunctionExpressionFunctionDeclaration_1303_,'Identifier':PyJs_Identifier_1304_})
    var.put('argumentsVisitor', PyJs_Object_1302_)
    @Js
    def PyJs_MetaProperty_1306_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'MetaProperty':PyJs_MetaProperty_1306_, 'arguments':arguments}, var)
        var.registers(['node', 'path'])
        var.put('node', var.get('path').get('node'))
        if (PyJsStrictEq(var.get('node').get('meta').get('name'),Js('function')) and PyJsStrictEq(var.get('node').get('property').get('name'),Js('sent'))):
            var.get('path').callprop('replaceWith', var.get('t').callprop('memberExpression', var.get("this").get('context'), var.get('t').callprop('identifier', Js('_sent'))))
    PyJs_MetaProperty_1306_._set_name('MetaProperty')
    PyJs_Object_1305_ = Js({'MetaProperty':PyJs_MetaProperty_1306_})
    var.put('functionSentVisitor', PyJs_Object_1305_)
    @Js
    def PyJs_Function_1308_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_1308_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Function_1308_._set_name('Function')
    @Js
    def PyJs_AwaitExpression_1309_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'AwaitExpression':PyJs_AwaitExpression_1309_}, var)
        var.registers(['path', 'argument'])
        var.put('argument', var.get('path').get('node').get('argument'))
        var.get('path').callprop('replaceWith', var.get('t').callprop('yieldExpression', var.get('t').callprop('callExpression', var.get('util').callprop('runtimeProperty', Js('awrap')), Js([var.get('argument')])), Js(False)))
    PyJs_AwaitExpression_1309_._set_name('AwaitExpression')
    PyJs_Object_1307_ = Js({'Function':PyJs_Function_1308_,'AwaitExpression':PyJs_AwaitExpression_1309_})
    var.put('awaitVisitor', PyJs_Object_1307_)
PyJs_anonymous_1291_._set_name('anonymous')
PyJs_Object_1310_ = Js({'./emit':Js(87.0),'./hoist':Js(88.0),'./util':Js(92.0),'assert':Js(524.0),'babel-types':Js(258.0),'private':Js(500.0)})
@Js
def PyJs_anonymous_1311_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1317_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1317_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1316_ = Js({})
            var.put('newObj', PyJs_Object_1316_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_1312_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_Program_1315_(path, state, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'state':state, 'Program':PyJs_Program_1315_, 'arguments':arguments}, var)
            var.registers(['node', '_isArray', '_iterator', 'directive', 'state', '_i', 'path', '_ref'])
            if (PyJsStrictEq(var.get('state').get('opts').get('strict'),Js(False)) or PyJsStrictEq(var.get('state').get('opts').get('strictMode'),Js(False))):
                return var.get('undefined')
            var.put('node', var.get('path').get('node'))
            #for JS loop
            var.put('_iterator', var.get('node').get('directives'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('directive', var.get('_ref'))
                if PyJsStrictEq(var.get('directive').get('value').get('value'),Js('use strict')):
                    return var.get('undefined')
            
            var.get('path').callprop('unshiftContainer', Js('directives'), var.get('t').callprop('directive', var.get('t').callprop('directiveLiteral', Js('use strict'))))
        PyJs_Program_1315_._set_name('Program')
        PyJs_Object_1314_ = Js({'Program':PyJs_Program_1315_})
        PyJs_Object_1313_ = Js({'visitor':PyJs_Object_1314_})
        return PyJs_Object_1313_
    PyJs_anonymous_1312_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1312_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1311_._set_name('anonymous')
PyJs_Object_1318_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1319_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_babelPluginTransformEs2015ModulesCommonjs', '_babelPluginTransformEs2015ComputedProperties', '_babelPluginTransformEs2015BlockScopedFunctions2', '_babelPluginTransformEs2015ForOf2', '_babelPluginTransformEs2015ModulesUmd', '_babelPluginTransformEs2015ArrowFunctions', '_babelPluginTransformEs2015TypeofSymbol', 'exports', 'module', '_interopRequireDefault', '_babelPluginTransformEs2015ForOf', '_babelPluginTransformEs2015BlockScoping', '_babelPluginTransformEs2015Parameters2', '_babelPluginTransformEs2015TemplateLiterals', '_babelPluginTransformEs2015ComputedProperties2', '_babelPluginTransformEs2015Spread', '_babelPluginCheckEs2015Constants', '_babelPluginTransformEs2015Destructuring', '_babelPluginTransformEs2015DuplicateKeys2', '_babelPluginTransformEs2015ModulesCommonjs2', '_babelPluginTransformEs2015TemplateLiterals2', '_babelPluginTransformEs2015Parameters', '_babelPluginCheckEs2015Constants2', '_babelPluginTransformEs2015StickyRegex2', '_babelPluginTransformEs2015BlockScopedFunctions', '_babelPluginTransformEs2015ShorthandProperties2', '_babelPluginTransformRegenerator', '_babelPluginTransformEs2015ModulesSystemjs', '_babelPluginTransformEs2015DuplicateKeys', '_babelPluginTransformEs2015ModulesAmd2', '_babelPluginTransformEs2015FunctionName', '_babelPluginTransformEs2015ObjectSuper2', '_babelPluginTransformEs2015Destructuring2', '_babelPluginTransformEs2015ShorthandProperties', '_babelPluginTransformEs2015StickyRegex', '_babelPluginTransformEs2015ModulesAmd', '_babelPluginTransformEs2015ModulesUmd2', '_babelPluginTransformEs2015Classes2', 'preset', '_babelPluginTransformEs2015ObjectSuper', '_babelPluginTransformEs2015TypeofSymbol2', '_babelPluginTransformEs2015UnicodeRegex', '_babelPluginTransformEs2015Classes', '_babelPluginTransformEs2015Literals2', '_babelPluginTransformEs2015ModulesSystemjs2', '_babelPluginTransformEs2015Literals', '_babelPluginTransformEs2015UnicodeRegex2', '_babelPluginTransformEs2015FunctionName2', '_babelPluginTransformEs2015BlockScoping2', '_babelPluginTransformRegenerator2', 'oldConfig', '_babelPluginTransformEs2015Spread2', 'require', '_babelPluginTransformEs2015ArrowFunctions2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1320_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1320_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_preset_(context, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'context':context}, var)
        var.registers(['optsLoose', 'moduleTypes', 'loose', 'modules', 'context', 'spec', 'opts'])
        PyJs_Object_1321_ = Js({})
        var.put('opts', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_1321_))
        var.put('moduleTypes', Js([Js('commonjs'), Js('amd'), Js('umd'), Js('systemjs')]))
        var.put('loose', Js(False))
        var.put('modules', Js('commonjs'))
        var.put('spec', Js(False))
        if PyJsStrictNeq(var.get('opts'),var.get('undefined')):
            if PyJsStrictNeq(var.get('opts').get('loose'),var.get('undefined')):
                var.put('loose', var.get('opts').get('loose'))
            if PyJsStrictNeq(var.get('opts').get('modules'),var.get('undefined')):
                var.put('modules', var.get('opts').get('modules'))
            if PyJsStrictNeq(var.get('opts').get('spec'),var.get('undefined')):
                var.put('spec', var.get('opts').get('spec'))
        if PyJsStrictNeq(var.get('loose',throw=False).typeof(),Js('boolean')):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("Preset es2015 'loose' option must be a boolean.")))
            raise PyJsTempException
        if PyJsStrictNeq(var.get('spec',throw=False).typeof(),Js('boolean')):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("Preset es2015 'spec' option must be a boolean.")))
            raise PyJsTempException
        if (PyJsStrictNeq(var.get('modules'),Js(False)) and PyJsStrictEq(var.get('moduleTypes').callprop('indexOf', var.get('modules')),(-Js(1.0)))):
            PyJsTempException = JsToPyException(var.get('Error').create((Js("Preset es2015 'modules' option must be 'false' to indicate no modules\n")+Js("or a module type which be be one of: 'commonjs' (default), 'amd', 'umd', 'systemjs'"))))
            raise PyJsTempException
        PyJs_Object_1322_ = Js({'loose':var.get('loose')})
        var.put('optsLoose', PyJs_Object_1322_)
        def PyJs_LONG_1327_(var=var):
            PyJs_Object_1324_ = Js({'loose':var.get('loose'),'spec':var.get('spec')})
            PyJs_Object_1325_ = Js({'spec':var.get('spec')})
            PyJs_Object_1326_ = Js({'async':Js(False),'asyncGenerators':Js(False)})
            return Js([Js([var.get('_babelPluginTransformEs2015TemplateLiterals2').get('default'), PyJs_Object_1324_]), var.get('_babelPluginTransformEs2015Literals2').get('default'), var.get('_babelPluginTransformEs2015FunctionName2').get('default'), Js([var.get('_babelPluginTransformEs2015ArrowFunctions2').get('default'), PyJs_Object_1325_]), var.get('_babelPluginTransformEs2015BlockScopedFunctions2').get('default'), Js([var.get('_babelPluginTransformEs2015Classes2').get('default'), var.get('optsLoose')]), var.get('_babelPluginTransformEs2015ObjectSuper2').get('default'), var.get('_babelPluginTransformEs2015ShorthandProperties2').get('default'), var.get('_babelPluginTransformEs2015DuplicateKeys2').get('default'), Js([var.get('_babelPluginTransformEs2015ComputedProperties2').get('default'), var.get('optsLoose')]), Js([var.get('_babelPluginTransformEs2015ForOf2').get('default'), var.get('optsLoose')]), var.get('_babelPluginTransformEs2015StickyRegex2').get('default'), var.get('_babelPluginTransformEs2015UnicodeRegex2').get('default'), var.get('_babelPluginCheckEs2015Constants2').get('default'), Js([var.get('_babelPluginTransformEs2015Spread2').get('default'), var.get('optsLoose')]), var.get('_babelPluginTransformEs2015Parameters2').get('default'), Js([var.get('_babelPluginTransformEs2015Destructuring2').get('default'), var.get('optsLoose')]), var.get('_babelPluginTransformEs2015BlockScoping2').get('default'), var.get('_babelPluginTransformEs2015TypeofSymbol2').get('default'), (PyJsStrictEq(var.get('modules'),Js('commonjs')) and Js([var.get('_babelPluginTransformEs2015ModulesCommonjs2').get('default'), var.get('optsLoose')])), (PyJsStrictEq(var.get('modules'),Js('systemjs')) and Js([var.get('_babelPluginTransformEs2015ModulesSystemjs2').get('default'), var.get('optsLoose')])), (PyJsStrictEq(var.get('modules'),Js('amd')) and Js([var.get('_babelPluginTransformEs2015ModulesAmd2').get('default'), var.get('optsLoose')])), (PyJsStrictEq(var.get('modules'),Js('umd')) and Js([var.get('_babelPluginTransformEs2015ModulesUmd2').get('default'), var.get('optsLoose')])), Js([var.get('_babelPluginTransformRegenerator2').get('default'), PyJs_Object_1326_])]).callprop('filter', var.get('Boolean'))
        PyJs_Object_1323_ = Js({'plugins':PyJs_LONG_1327_()})
        return PyJs_Object_1323_
    PyJsHoisted_preset_.__name__ = 'preset'
    var.put('preset', PyJsHoisted_preset_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_babelPluginTransformEs2015TemplateLiterals', var.get('require')(Js('babel-plugin-transform-es2015-template-literals')))
    var.put('_babelPluginTransformEs2015TemplateLiterals2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015TemplateLiterals')))
    var.put('_babelPluginTransformEs2015Literals', var.get('require')(Js('babel-plugin-transform-es2015-literals')))
    var.put('_babelPluginTransformEs2015Literals2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015Literals')))
    var.put('_babelPluginTransformEs2015FunctionName', var.get('require')(Js('babel-plugin-transform-es2015-function-name')))
    var.put('_babelPluginTransformEs2015FunctionName2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015FunctionName')))
    var.put('_babelPluginTransformEs2015ArrowFunctions', var.get('require')(Js('babel-plugin-transform-es2015-arrow-functions')))
    var.put('_babelPluginTransformEs2015ArrowFunctions2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ArrowFunctions')))
    var.put('_babelPluginTransformEs2015BlockScopedFunctions', var.get('require')(Js('babel-plugin-transform-es2015-block-scoped-functions')))
    var.put('_babelPluginTransformEs2015BlockScopedFunctions2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015BlockScopedFunctions')))
    var.put('_babelPluginTransformEs2015Classes', var.get('require')(Js('babel-plugin-transform-es2015-classes')))
    var.put('_babelPluginTransformEs2015Classes2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015Classes')))
    var.put('_babelPluginTransformEs2015ObjectSuper', var.get('require')(Js('babel-plugin-transform-es2015-object-super')))
    var.put('_babelPluginTransformEs2015ObjectSuper2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ObjectSuper')))
    var.put('_babelPluginTransformEs2015ShorthandProperties', var.get('require')(Js('babel-plugin-transform-es2015-shorthand-properties')))
    var.put('_babelPluginTransformEs2015ShorthandProperties2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ShorthandProperties')))
    var.put('_babelPluginTransformEs2015DuplicateKeys', var.get('require')(Js('babel-plugin-transform-es2015-duplicate-keys')))
    var.put('_babelPluginTransformEs2015DuplicateKeys2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015DuplicateKeys')))
    var.put('_babelPluginTransformEs2015ComputedProperties', var.get('require')(Js('babel-plugin-transform-es2015-computed-properties')))
    var.put('_babelPluginTransformEs2015ComputedProperties2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ComputedProperties')))
    var.put('_babelPluginTransformEs2015ForOf', var.get('require')(Js('babel-plugin-transform-es2015-for-of')))
    var.put('_babelPluginTransformEs2015ForOf2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ForOf')))
    var.put('_babelPluginTransformEs2015StickyRegex', var.get('require')(Js('babel-plugin-transform-es2015-sticky-regex')))
    var.put('_babelPluginTransformEs2015StickyRegex2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015StickyRegex')))
    var.put('_babelPluginTransformEs2015UnicodeRegex', var.get('require')(Js('babel-plugin-transform-es2015-unicode-regex')))
    var.put('_babelPluginTransformEs2015UnicodeRegex2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015UnicodeRegex')))
    var.put('_babelPluginCheckEs2015Constants', var.get('require')(Js('babel-plugin-check-es2015-constants')))
    var.put('_babelPluginCheckEs2015Constants2', var.get('_interopRequireDefault')(var.get('_babelPluginCheckEs2015Constants')))
    var.put('_babelPluginTransformEs2015Spread', var.get('require')(Js('babel-plugin-transform-es2015-spread')))
    var.put('_babelPluginTransformEs2015Spread2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015Spread')))
    var.put('_babelPluginTransformEs2015Parameters', var.get('require')(Js('babel-plugin-transform-es2015-parameters')))
    var.put('_babelPluginTransformEs2015Parameters2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015Parameters')))
    var.put('_babelPluginTransformEs2015Destructuring', var.get('require')(Js('babel-plugin-transform-es2015-destructuring')))
    var.put('_babelPluginTransformEs2015Destructuring2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015Destructuring')))
    var.put('_babelPluginTransformEs2015BlockScoping', var.get('require')(Js('babel-plugin-transform-es2015-block-scoping')))
    var.put('_babelPluginTransformEs2015BlockScoping2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015BlockScoping')))
    var.put('_babelPluginTransformEs2015TypeofSymbol', var.get('require')(Js('babel-plugin-transform-es2015-typeof-symbol')))
    var.put('_babelPluginTransformEs2015TypeofSymbol2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015TypeofSymbol')))
    var.put('_babelPluginTransformEs2015ModulesCommonjs', var.get('require')(Js('babel-plugin-transform-es2015-modules-commonjs')))
    var.put('_babelPluginTransformEs2015ModulesCommonjs2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ModulesCommonjs')))
    var.put('_babelPluginTransformEs2015ModulesSystemjs', var.get('require')(Js('babel-plugin-transform-es2015-modules-systemjs')))
    var.put('_babelPluginTransformEs2015ModulesSystemjs2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ModulesSystemjs')))
    var.put('_babelPluginTransformEs2015ModulesAmd', var.get('require')(Js('babel-plugin-transform-es2015-modules-amd')))
    var.put('_babelPluginTransformEs2015ModulesAmd2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ModulesAmd')))
    var.put('_babelPluginTransformEs2015ModulesUmd', var.get('require')(Js('babel-plugin-transform-es2015-modules-umd')))
    var.put('_babelPluginTransformEs2015ModulesUmd2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformEs2015ModulesUmd')))
    var.put('_babelPluginTransformRegenerator', var.get('require')(Js('babel-plugin-transform-regenerator')))
    var.put('_babelPluginTransformRegenerator2', var.get('_interopRequireDefault')(var.get('_babelPluginTransformRegenerator')))
    pass
    pass
    PyJs_Object_1328_ = Js({})
    var.put('oldConfig', var.get('preset')(PyJs_Object_1328_))
    var.get('exports').put('default', var.get('oldConfig'))
    PyJs_Object_1329_ = Js({'configurable':var.get('true'),'writable':var.get('true'),'enumerable':Js(False),'value':var.get('preset')})
    var.get('Object').callprop('defineProperty', var.get('oldConfig'), Js('buildPreset'), PyJs_Object_1329_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1319_._set_name('anonymous')
PyJs_Object_1330_ = Js({'babel-plugin-check-es2015-constants':Js(58.0),'babel-plugin-transform-es2015-arrow-functions':Js(59.0),'babel-plugin-transform-es2015-block-scoped-functions':Js(60.0),'babel-plugin-transform-es2015-block-scoping':Js(61.0),'babel-plugin-transform-es2015-classes':Js(63.0),'babel-plugin-transform-es2015-computed-properties':Js(66.0),'babel-plugin-transform-es2015-destructuring':Js(67.0),'babel-plugin-transform-es2015-duplicate-keys':Js(68.0),'babel-plugin-transform-es2015-for-of':Js(69.0),'babel-plugin-transform-es2015-function-name':Js(70.0),'babel-plugin-transform-es2015-literals':Js(71.0),'babel-plugin-transform-es2015-modules-amd':Js(72.0),'babel-plugin-transform-es2015-modules-commonjs':Js(73.0),'babel-plugin-transform-es2015-modules-systemjs':Js(74.0),'babel-plugin-transform-es2015-modules-umd':Js(75.0),'babel-plugin-transform-es2015-object-super':Js(76.0),'babel-plugin-transform-es2015-parameters':Js(79.0),'babel-plugin-transform-es2015-shorthand-properties':Js(81.0),'babel-plugin-transform-es2015-spread':Js(82.0),'babel-plugin-transform-es2015-sticky-regex':Js(83.0),'babel-plugin-transform-es2015-template-literals':Js(84.0),'babel-plugin-transform-es2015-typeof-symbol':Js(85.0),'babel-plugin-transform-es2015-unicode-regex':Js(86.0),'babel-plugin-transform-regenerator':Js(89.0)})
@Js
def PyJs_anonymous_1331_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1332_ = Js({'default':var.get('require')(Js('core-js/library/fn/get-iterator')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1332_)
PyJs_anonymous_1331_._set_name('anonymous')
PyJs_Object_1333_ = Js({'core-js/library/fn/get-iterator':Js(115.0)})
@Js
def PyJs_anonymous_1334_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1335_ = Js({'default':var.get('require')(Js('core-js/library/fn/json/stringify')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1335_)
PyJs_anonymous_1334_._set_name('anonymous')
PyJs_Object_1336_ = Js({'core-js/library/fn/json/stringify':Js(116.0)})
@Js
def PyJs_anonymous_1337_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1338_ = Js({'default':var.get('require')(Js('core-js/library/fn/map')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1338_)
PyJs_anonymous_1337_._set_name('anonymous')
PyJs_Object_1339_ = Js({'core-js/library/fn/map':Js(117.0)})
@Js
def PyJs_anonymous_1340_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1341_ = Js({'default':var.get('require')(Js('core-js/library/fn/number/max-safe-integer')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1341_)
PyJs_anonymous_1340_._set_name('anonymous')
PyJs_Object_1342_ = Js({'core-js/library/fn/number/max-safe-integer':Js(118.0)})
@Js
def PyJs_anonymous_1343_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1344_ = Js({'default':var.get('require')(Js('core-js/library/fn/object/assign')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1344_)
PyJs_anonymous_1343_._set_name('anonymous')
PyJs_Object_1345_ = Js({'core-js/library/fn/object/assign':Js(119.0)})
@Js
def PyJs_anonymous_1346_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1347_ = Js({'default':var.get('require')(Js('core-js/library/fn/object/create')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1347_)
PyJs_anonymous_1346_._set_name('anonymous')
PyJs_Object_1348_ = Js({'core-js/library/fn/object/create':Js(120.0)})
@Js
def PyJs_anonymous_1349_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1350_ = Js({'default':var.get('require')(Js('core-js/library/fn/object/get-own-property-symbols')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1350_)
PyJs_anonymous_1349_._set_name('anonymous')
PyJs_Object_1351_ = Js({'core-js/library/fn/object/get-own-property-symbols':Js(121.0)})
@Js
def PyJs_anonymous_1352_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1353_ = Js({'default':var.get('require')(Js('core-js/library/fn/object/keys')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1353_)
PyJs_anonymous_1352_._set_name('anonymous')
PyJs_Object_1354_ = Js({'core-js/library/fn/object/keys':Js(122.0)})
@Js
def PyJs_anonymous_1355_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1356_ = Js({'default':var.get('require')(Js('core-js/library/fn/object/set-prototype-of')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1356_)
PyJs_anonymous_1355_._set_name('anonymous')
PyJs_Object_1357_ = Js({'core-js/library/fn/object/set-prototype-of':Js(123.0)})
@Js
def PyJs_anonymous_1358_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1359_ = Js({'default':var.get('require')(Js('core-js/library/fn/symbol')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1359_)
PyJs_anonymous_1358_._set_name('anonymous')
PyJs_Object_1360_ = Js({'core-js/library/fn/symbol':Js(125.0)})
@Js
def PyJs_anonymous_1361_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1362_ = Js({'default':var.get('require')(Js('core-js/library/fn/symbol/for')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1362_)
PyJs_anonymous_1361_._set_name('anonymous')
PyJs_Object_1363_ = Js({'core-js/library/fn/symbol/for':Js(124.0)})
@Js
def PyJs_anonymous_1364_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1365_ = Js({'default':var.get('require')(Js('core-js/library/fn/symbol/iterator')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1365_)
PyJs_anonymous_1364_._set_name('anonymous')
PyJs_Object_1366_ = Js({'core-js/library/fn/symbol/iterator':Js(126.0)})
@Js
def PyJs_anonymous_1367_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1368_ = Js({'default':var.get('require')(Js('core-js/library/fn/weak-map')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1368_)
PyJs_anonymous_1367_._set_name('anonymous')
PyJs_Object_1369_ = Js({'core-js/library/fn/weak-map':Js(127.0)})
@Js
def PyJs_anonymous_1370_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1371_ = Js({'default':var.get('require')(Js('core-js/library/fn/weak-set')),'__esModule':var.get('true')})
    var.get('module').put('exports', PyJs_Object_1371_)
PyJs_anonymous_1370_._set_name('anonymous')
PyJs_Object_1372_ = Js({'core-js/library/fn/weak-set':Js(128.0)})
@Js
def PyJs_anonymous_1373_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1374_(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJs_anonymous_1374_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1374_)
PyJs_anonymous_1373_._set_name('anonymous')
PyJs_Object_1375_ = Js({})
@Js
def PyJs_anonymous_1376_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', '_typeof2', '_typeof3', '_setPrototypeOf', 'require', 'exports', 'module', '_create2', '_setPrototypeOf2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1377_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1377_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_setPrototypeOf', var.get('require')(Js('../core-js/object/set-prototype-of')))
    var.put('_setPrototypeOf2', var.get('_interopRequireDefault')(var.get('_setPrototypeOf')))
    var.put('_create', var.get('require')(Js('../core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.put('_typeof2', var.get('require')(Js('../helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    pass
    @Js
    def PyJs_anonymous_1378_(subClass, superClass, this, arguments, var=var):
        var = Scope({'this':this, 'superClass':superClass, 'subClass':subClass, 'arguments':arguments}, var)
        var.registers(['superClass', 'subClass'])
        if (PyJsStrictNeq(var.get('superClass',throw=False).typeof(),Js('function')) and PyJsStrictNeq(var.get('superClass'),var.get("null"))):
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Super expression must either be null or a function, not ')+(Js('undefined') if PyJsStrictEq(var.get('superClass',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('superClass'))))))
            raise PyJsTempException
        PyJs_Object_1380_ = Js({'value':var.get('subClass'),'enumerable':Js(False),'writable':var.get('true'),'configurable':var.get('true')})
        PyJs_Object_1379_ = Js({'constructor':PyJs_Object_1380_})
        var.get('subClass').put('prototype', PyJsComma(Js(0.0),var.get('_create2').get('default'))((var.get('superClass') and var.get('superClass').get('prototype')), PyJs_Object_1379_))
        if var.get('superClass'):
            (PyJsComma(Js(0.0),var.get('_setPrototypeOf2').get('default'))(var.get('subClass'), var.get('superClass')) if var.get('_setPrototypeOf2').get('default') else var.get('subClass').put('__proto__', var.get('superClass')))
    PyJs_anonymous_1378_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1378_)
PyJs_anonymous_1376_._set_name('anonymous')
PyJs_Object_1381_ = Js({'../core-js/object/create':Js(101.0),'../core-js/object/set-prototype-of':Js(104.0),'../helpers/typeof':Js(114.0)})
@Js
def PyJs_anonymous_1382_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_1383_(obj, keys, this, arguments, var=var):
        var = Scope({'keys':keys, 'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['i', 'keys', 'obj', 'target'])
        PyJs_Object_1384_ = Js({})
        var.put('target', PyJs_Object_1384_)
        for PyJsTemp in var.get('obj'):
            var.put('i', PyJsTemp)
            if (var.get('keys').callprop('indexOf', var.get('i'))>=Js(0.0)):
                continue
            if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('i')).neg():
                continue
            var.get('target').put(var.get('i'), var.get('obj').get(var.get('i')))
        return var.get('target')
    PyJs_anonymous_1383_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1383_)
PyJs_anonymous_1382_._set_name('anonymous')
PyJs_Object_1385_ = Js({})
@Js
def PyJs_anonymous_1386_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_typeof2', '_typeof3', 'require', 'exports', 'module', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1387_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1387_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_typeof2', var.get('require')(Js('../helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    pass
    @Js
    def PyJs_anonymous_1388_(self, call, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'call':call, 'arguments':arguments}, var)
        var.registers(['self', 'call'])
        if var.get('self').neg():
            PyJsTempException = JsToPyException(var.get('ReferenceError').create(Js("this hasn't been initialised - super() hasn't been called")))
            raise PyJsTempException
        return (var.get('call') if (var.get('call') and (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('call',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('call'))),Js('object')) or PyJsStrictEq(var.get('call',throw=False).typeof(),Js('function')))) else var.get('self'))
    PyJs_anonymous_1388_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1388_)
PyJs_anonymous_1386_._set_name('anonymous')
PyJs_Object_1389_ = Js({'../helpers/typeof':Js(114.0)})
@Js
def PyJs_anonymous_1390_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_symbol2', '_iterator', 'require', 'module', '_typeof', '_symbol', '_interopRequireDefault', '_iterator2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1393_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1393_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_iterator', var.get('require')(Js('../core-js/symbol/iterator')))
    var.put('_iterator2', var.get('_interopRequireDefault')(var.get('_iterator')))
    var.put('_symbol', var.get('require')(Js('../core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1391_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        return var.get('obj',throw=False).typeof()
    PyJs_anonymous_1391_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1392_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('_symbol2').get('default').typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('_symbol2').get('default'))) and PyJsStrictNeq(var.get('obj'),var.get('_symbol2').get('default').get('prototype'))) else var.get('obj',throw=False).typeof())
    PyJs_anonymous_1392_._set_name('anonymous')
    var.put('_typeof', (PyJs_anonymous_1391_ if (PyJsStrictEq(var.get('_symbol2').get('default').typeof(),Js('function')) and PyJsStrictEq(var.get('_iterator2').get('default').typeof(),Js('symbol'))) else PyJs_anonymous_1392_))
    pass
    @Js
    def PyJs_anonymous_1394_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        return (Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('obj')))
    PyJs_anonymous_1394_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1395_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        def PyJs_LONG_1396_(var=var):
            return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('_symbol2').get('default').typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('_symbol2').get('default'))) and PyJsStrictNeq(var.get('obj'),var.get('_symbol2').get('default').get('prototype'))) else (Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('obj'))))
        return PyJs_LONG_1396_()
    PyJs_anonymous_1395_._set_name('anonymous')
    var.get('exports').put('default', (PyJs_anonymous_1394_ if (PyJsStrictEq(var.get('_symbol2').get('default').typeof(),Js('function')) and PyJsStrictEq(var.get('_typeof')(var.get('_iterator2').get('default')),Js('symbol'))) else PyJs_anonymous_1395_))
PyJs_anonymous_1390_._set_name('anonymous')
PyJs_Object_1397_ = Js({'../core-js/symbol':Js(105.0),'../core-js/symbol/iterator':Js(107.0)})
@Js
def PyJs_anonymous_1398_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../modules/web.dom.iterable'))
    var.get('require')(Js('../modules/es6.string.iterator'))
    var.get('module').put('exports', var.get('require')(Js('../modules/core.get-iterator')))
PyJs_anonymous_1398_._set_name('anonymous')
PyJs_Object_1399_ = Js({'../modules/core.get-iterator':Js(204.0),'../modules/es6.string.iterator':Js(213.0),'../modules/web.dom.iterable':Js(220.0)})
@Js
def PyJs_anonymous_1400_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'require', 'exports', 'module', '$JSON'])
    var.put('core', var.get('require')(Js('../../modules/_core')))
    PyJs_Object_1401_ = Js({'stringify':var.get('JSON').get('stringify')})
    var.put('$JSON', (var.get('core').get('JSON') or var.get('core').put('JSON', PyJs_Object_1401_)))
    @Js
    def PyJs_stringify_1402_(it, this, arguments, var=var):
        var = Scope({'this':this, 'stringify':PyJs_stringify_1402_, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return var.get('$JSON').get('stringify').callprop('apply', var.get('$JSON'), var.get('arguments'))
    PyJs_stringify_1402_._set_name('stringify')
    var.get('module').put('exports', PyJs_stringify_1402_)
PyJs_anonymous_1400_._set_name('anonymous')
PyJs_Object_1403_ = Js({'../../modules/_core':Js(144.0)})
@Js
def PyJs_anonymous_1404_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../modules/es6.object.to-string'))
    var.get('require')(Js('../modules/es6.string.iterator'))
    var.get('require')(Js('../modules/web.dom.iterable'))
    var.get('require')(Js('../modules/es6.map'))
    var.get('require')(Js('../modules/es7.map.to-json'))
    var.get('module').put('exports', var.get('require')(Js('../modules/_core')).get('Map'))
PyJs_anonymous_1404_._set_name('anonymous')
PyJs_Object_1405_ = Js({'../modules/_core':Js(144.0),'../modules/es6.map':Js(206.0),'../modules/es6.object.to-string':Js(212.0),'../modules/es6.string.iterator':Js(213.0),'../modules/es7.map.to-json':Js(217.0),'../modules/web.dom.iterable':Js(220.0)})
@Js
def PyJs_anonymous_1406_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.number.max-safe-integer'))
    var.get('module').put('exports', Js(9007199254740991))
PyJs_anonymous_1406_._set_name('anonymous')
PyJs_Object_1407_ = Js({'../../modules/es6.number.max-safe-integer':Js(207.0)})
@Js
def PyJs_anonymous_1408_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.object.assign'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Object').get('assign'))
PyJs_anonymous_1408_._set_name('anonymous')
PyJs_Object_1409_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.object.assign':Js(208.0)})
@Js
def PyJs_anonymous_1410_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', '$Object'])
    var.get('require')(Js('../../modules/es6.object.create'))
    var.put('$Object', var.get('require')(Js('../../modules/_core')).get('Object'))
    @Js
    def PyJs_create_1411_(P, D, this, arguments, var=var):
        var = Scope({'this':this, 'P':P, 'create':PyJs_create_1411_, 'D':D, 'arguments':arguments}, var)
        var.registers(['P', 'D'])
        return var.get('$Object').callprop('create', var.get('P'), var.get('D'))
    PyJs_create_1411_._set_name('create')
    var.get('module').put('exports', PyJs_create_1411_)
PyJs_anonymous_1410_._set_name('anonymous')
PyJs_Object_1412_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.object.create':Js(209.0)})
@Js
def PyJs_anonymous_1413_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.symbol'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Object').get('getOwnPropertySymbols'))
PyJs_anonymous_1413_._set_name('anonymous')
PyJs_Object_1414_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.symbol':Js(214.0)})
@Js
def PyJs_anonymous_1415_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.object.keys'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Object').get('keys'))
PyJs_anonymous_1415_._set_name('anonymous')
PyJs_Object_1416_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.object.keys':Js(210.0)})
@Js
def PyJs_anonymous_1417_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.object.set-prototype-of'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Object').get('setPrototypeOf'))
PyJs_anonymous_1417_._set_name('anonymous')
PyJs_Object_1418_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.object.set-prototype-of':Js(211.0)})
@Js
def PyJs_anonymous_1419_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.symbol'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Symbol').get('for'))
PyJs_anonymous_1419_._set_name('anonymous')
PyJs_Object_1420_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.symbol':Js(214.0)})
@Js
def PyJs_anonymous_1421_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.symbol'))
    var.get('require')(Js('../../modules/es6.object.to-string'))
    var.get('require')(Js('../../modules/es7.symbol.async-iterator'))
    var.get('require')(Js('../../modules/es7.symbol.observable'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('Symbol'))
PyJs_anonymous_1421_._set_name('anonymous')
PyJs_Object_1422_ = Js({'../../modules/_core':Js(144.0),'../../modules/es6.object.to-string':Js(212.0),'../../modules/es6.symbol':Js(214.0),'../../modules/es7.symbol.async-iterator':Js(218.0),'../../modules/es7.symbol.observable':Js(219.0)})
@Js
def PyJs_anonymous_1423_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../../modules/es6.string.iterator'))
    var.get('require')(Js('../../modules/web.dom.iterable'))
    var.get('module').put('exports', var.get('require')(Js('../../modules/_wks-ext')).callprop('f', Js('iterator')))
PyJs_anonymous_1423_._set_name('anonymous')
PyJs_Object_1424_ = Js({'../../modules/_wks-ext':Js(201.0),'../../modules/es6.string.iterator':Js(213.0),'../../modules/web.dom.iterable':Js(220.0)})
@Js
def PyJs_anonymous_1425_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../modules/es6.object.to-string'))
    var.get('require')(Js('../modules/web.dom.iterable'))
    var.get('require')(Js('../modules/es6.weak-map'))
    var.get('module').put('exports', var.get('require')(Js('../modules/_core')).get('WeakMap'))
PyJs_anonymous_1425_._set_name('anonymous')
PyJs_Object_1426_ = Js({'../modules/_core':Js(144.0),'../modules/es6.object.to-string':Js(212.0),'../modules/es6.weak-map':Js(215.0),'../modules/web.dom.iterable':Js(220.0)})
@Js
def PyJs_anonymous_1427_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('../modules/es6.object.to-string'))
    var.get('require')(Js('../modules/web.dom.iterable'))
    var.get('require')(Js('../modules/es6.weak-set'))
    var.get('module').put('exports', var.get('require')(Js('../modules/_core')).get('WeakSet'))
PyJs_anonymous_1427_._set_name('anonymous')
PyJs_Object_1428_ = Js({'../modules/_core':Js(144.0),'../modules/es6.object.to-string':Js(212.0),'../modules/es6.weak-set':Js(216.0),'../modules/web.dom.iterable':Js(220.0)})
@Js
def PyJs_anonymous_1429_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1430_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        if (var.get('it',throw=False).typeof()!=Js('function')):
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a function!'))))
            raise PyJsTempException
        return var.get('it')
    PyJs_anonymous_1430_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1430_)
PyJs_anonymous_1429_._set_name('anonymous')
PyJs_Object_1431_ = Js({})
@Js
def PyJs_anonymous_1432_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1433_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJs_anonymous_1433_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1433_)
PyJs_anonymous_1432_._set_name('anonymous')
PyJs_Object_1434_ = Js({})
@Js
def PyJs_anonymous_1435_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1436_(it, Constructor, name, forbiddenField, this, arguments, var=var):
        var = Scope({'name':name, 'Constructor':Constructor, 'this':this, 'arguments':arguments, 'it':it, 'forbiddenField':forbiddenField}, var)
        var.registers(['forbiddenField', 'it', 'name', 'Constructor'])
        if (var.get('it').instanceof(var.get('Constructor')).neg() or (PyJsStrictNeq(var.get('forbiddenField'),var.get('undefined')) and var.get('it').contains(var.get('forbiddenField')))):
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('name')+Js(': incorrect invocation!'))))
            raise PyJsTempException
        return var.get('it')
    PyJs_anonymous_1436_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1436_)
PyJs_anonymous_1435_._set_name('anonymous')
PyJs_Object_1437_ = Js({})
@Js
def PyJs_anonymous_1438_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'isObject', 'module'])
    var.put('isObject', var.get('require')(Js('./_is-object')))
    @Js
    def PyJs_anonymous_1439_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        if var.get('isObject')(var.get('it')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not an object!'))))
            raise PyJsTempException
        return var.get('it')
    PyJs_anonymous_1439_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1439_)
PyJs_anonymous_1438_._set_name('anonymous')
PyJs_Object_1440_ = Js({'./_is-object':Js(162.0)})
@Js
def PyJs_anonymous_1441_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'forOf', 'exports', 'module'])
    var.put('forOf', var.get('require')(Js('./_for-of')))
    @Js
    def PyJs_anonymous_1442_(iter, ITERATOR, this, arguments, var=var):
        var = Scope({'this':this, 'ITERATOR':ITERATOR, 'iter':iter, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'result', 'iter'])
        var.put('result', Js([]))
        var.get('forOf')(var.get('iter'), Js(False), var.get('result').get('push'), var.get('result'), var.get('ITERATOR'))
        return var.get('result')
    PyJs_anonymous_1442_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1442_)
PyJs_anonymous_1441_._set_name('anonymous')
PyJs_Object_1443_ = Js({'./_for-of':Js(153.0)})
@Js
def PyJs_anonymous_1444_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'toLength', 'require', 'toIndex', 'module', 'toIObject'])
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    var.put('toLength', var.get('require')(Js('./_to-length')))
    var.put('toIndex', var.get('require')(Js('./_to-index')))
    @Js
    def PyJs_anonymous_1445_(IS_INCLUDES, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'IS_INCLUDES':IS_INCLUDES}, var)
        var.registers(['IS_INCLUDES'])
        @Js
        def PyJs_anonymous_1446_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
            var = Scope({'this':this, 'el':el, '$this':PyJsArg_2474686973_, 'arguments':arguments, 'fromIndex':fromIndex}, var)
            var.registers(['el', 'index', '$this', 'value', 'fromIndex', 'length', 'O'])
            var.put('O', var.get('toIObject')(var.get('$this')))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', var.get('toIndex')(var.get('fromIndex'), var.get('length')))
            if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                while (var.get('length')>var.get('index')):
                    var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                    if (var.get('value')!=var.get('value')):
                        return var.get('true')
            else:
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))):
                            if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('el')):
                                return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
        PyJs_anonymous_1446_._set_name('anonymous')
        return PyJs_anonymous_1446_
    PyJs_anonymous_1445_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1445_)
PyJs_anonymous_1444_._set_name('anonymous')
PyJs_Object_1447_ = Js({'./_to-index':Js(193.0),'./_to-iobject':Js(195.0),'./_to-length':Js(196.0)})
@Js
def PyJs_anonymous_1448_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'toLength', 'IObject', 'toObject', 'ctx', 'module', 'asc', 'require'])
    var.put('ctx', var.get('require')(Js('./_ctx')))
    var.put('IObject', var.get('require')(Js('./_iobject')))
    var.put('toObject', var.get('require')(Js('./_to-object')))
    var.put('toLength', var.get('require')(Js('./_to-length')))
    var.put('asc', var.get('require')(Js('./_array-species-create')))
    @Js
    def PyJs_anonymous_1449_(TYPE, PyJsArg_24637265617465_, this, arguments, var=var):
        var = Scope({'this':this, 'TYPE':TYPE, 'arguments':arguments, '$create':PyJsArg_24637265617465_}, var)
        var.registers(['IS_FIND_INDEX', 'IS_SOME', 'IS_MAP', '$create', 'NO_HOLES', 'IS_EVERY', 'IS_FILTER', 'TYPE', 'create'])
        var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
        var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
        var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
        var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
        var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
        var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
        var.put('create', (var.get('$create') or var.get('asc')))
        @Js
        def PyJs_anonymous_1450_(PyJsArg_2474686973_, callbackfn, that, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'callbackfn':callbackfn, '$this':PyJsArg_2474686973_, 'that':that}, var)
            var.registers(['index', 'callbackfn', 'val', 'f', 'res', 'self', 'that', '$this', 'O', 'length', 'result'])
            var.put('O', var.get('toObject')(var.get('$this')))
            var.put('self', var.get('IObject')(var.get('O')))
            var.put('f', var.get('ctx')(var.get('callbackfn'), var.get('that'), Js(3.0)))
            var.put('length', var.get('toLength')(var.get('self').get('length')))
            var.put('index', Js(0.0))
            var.put('result', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if var.get('IS_FILTER') else var.get('undefined'))))
            #for JS loop
            
            while (var.get('length')>var.get('index')):
                try:
                    if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                        var.put('val', var.get('self').get(var.get('index')))
                        var.put('res', var.get('f')(var.get('val'), var.get('index'), var.get('O')))
                        if var.get('TYPE'):
                            if var.get('IS_MAP'):
                                var.get('result').put(var.get('index'), var.get('res'))
                            else:
                                if var.get('res'):
                                    while 1:
                                        SWITCHED = False
                                        CONDITION = (var.get('TYPE'))
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                            SWITCHED = True
                                            return var.get('true')
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                            SWITCHED = True
                                            return var.get('val')
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                            SWITCHED = True
                                            return var.get('index')
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                            SWITCHED = True
                                            var.get('result').callprop('push', var.get('val'))
                                        SWITCHED = True
                                        break
                                else:
                                    if var.get('IS_EVERY'):
                                        return Js(False)
                finally:
                        (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('result')))
        PyJs_anonymous_1450_._set_name('anonymous')
        return PyJs_anonymous_1450_
    PyJs_anonymous_1449_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1449_)
PyJs_anonymous_1448_._set_name('anonymous')
PyJs_Object_1451_ = Js({'./_array-species-create':Js(137.0),'./_ctx':Js(145.0),'./_iobject':Js(159.0),'./_to-length':Js(196.0),'./_to-object':Js(197.0)})
@Js
def PyJs_anonymous_1452_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'require', 'module', 'SPECIES', 'isObject'])
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('isArray', var.get('require')(Js('./_is-array')))
    var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
    @Js
    def PyJs_anonymous_1453_(original, this, arguments, var=var):
        var = Scope({'this':this, 'original':original, 'arguments':arguments}, var)
        var.registers(['C', 'original'])
        pass
        if var.get('isArray')(var.get('original')):
            var.put('C', var.get('original').get('constructor'))
            if ((var.get('C',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                var.put('C', var.get('undefined'))
            if var.get('isObject')(var.get('C')):
                var.put('C', var.get('C').get(var.get('SPECIES')))
                if PyJsStrictEq(var.get('C'),var.get("null")):
                    var.put('C', var.get('undefined'))
        return (var.get('Array') if PyJsStrictEq(var.get('C'),var.get('undefined')) else var.get('C'))
    PyJs_anonymous_1453_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1453_)
PyJs_anonymous_1452_._set_name('anonymous')
PyJs_Object_1454_ = Js({'./_is-array':Js(161.0),'./_is-object':Js(162.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1455_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['speciesConstructor', 'require', 'exports', 'module'])
    var.put('speciesConstructor', var.get('require')(Js('./_array-species-constructor')))
    @Js
    def PyJs_anonymous_1456_(original, length, this, arguments, var=var):
        var = Scope({'this':this, 'length':length, 'original':original, 'arguments':arguments}, var)
        var.registers(['length', 'original'])
        return var.get('speciesConstructor')(var.get('original')).create(var.get('length'))
    PyJs_anonymous_1456_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1456_)
PyJs_anonymous_1455_._set_name('anonymous')
PyJs_Object_1457_ = Js({'./_array-species-constructor':Js(136.0)})
@Js
def PyJs_anonymous_1458_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'cof', 'module', 'tryGet', 'TAG', 'ARG'])
    var.put('cof', var.get('require')(Js('./_cof')))
    var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
    @Js
    def PyJs_anonymous_1459_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('arguments')
    PyJs_anonymous_1459_._set_name('anonymous')
    var.put('ARG', (var.get('cof')(PyJs_anonymous_1459_())==Js('Arguments')))
    @Js
    def PyJs_anonymous_1460_(it, key, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'key':key, 'arguments':arguments}, var)
        var.registers(['it', 'key'])
        try:
            return var.get('it').get(var.get('key'))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_48759406 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_48759406 is not None:
                    var.own['e'] = PyJsHolder_65_48759406
                else:
                    del var.own['e']
                del PyJsHolder_65_48759406
    PyJs_anonymous_1460_._set_name('anonymous')
    var.put('tryGet', PyJs_anonymous_1460_)
    @Js
    def PyJs_anonymous_1461_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['B', 'T', 'O', 'it'])
        pass
        def PyJs_LONG_1462_(var=var):
            return (Js('Null') if PyJsStrictEq(var.get('it'),var.get("null")) else (var.get('T') if (var.put('T', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TAG'))).typeof()==Js('string')) else (var.get('cof')(var.get('O')) if var.get('ARG') else (Js('Arguments') if ((var.put('B', var.get('cof')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('B')))))
        return (Js('Undefined') if PyJsStrictEq(var.get('it'),var.get('undefined')) else PyJs_LONG_1462_())
    PyJs_anonymous_1461_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1461_)
PyJs_anonymous_1458_._set_name('anonymous')
PyJs_Object_1463_ = Js({'./_cof':Js(139.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1464_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'toString', 'exports', 'module'])
    PyJs_Object_1465_ = Js({})
    var.put('toString', PyJs_Object_1465_.get('toString'))
    @Js
    def PyJs_anonymous_1466_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
    PyJs_anonymous_1466_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1466_)
PyJs_anonymous_1464_._set_name('anonymous')
PyJs_Object_1467_ = Js({})
@Js
def PyJs_anonymous_1468_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['fastKey', 'exports', 'forOf', 'anInstance', 'defined', '$iterDefine', 'create', 'ctx', 'module', 'setSpecies', 'getEntry', 'step', 'redefineAll', 'DESCRIPTORS', 'require', 'dP', 'SIZE'])
    Js('use strict')
    var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
    var.put('create', var.get('require')(Js('./_object-create')))
    var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
    var.put('ctx', var.get('require')(Js('./_ctx')))
    var.put('anInstance', var.get('require')(Js('./_an-instance')))
    var.put('defined', var.get('require')(Js('./_defined')))
    var.put('forOf', var.get('require')(Js('./_for-of')))
    var.put('$iterDefine', var.get('require')(Js('./_iter-define')))
    var.put('step', var.get('require')(Js('./_iter-step')))
    var.put('setSpecies', var.get('require')(Js('./_set-species')))
    var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
    var.put('fastKey', var.get('require')(Js('./_meta')).get('fastKey'))
    var.put('SIZE', (Js('_s') if var.get('DESCRIPTORS') else Js('size')))
    @Js
    def PyJs_anonymous_1469_(that, key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key, 'that':that}, var)
        var.registers(['index', 'that', 'key', 'entry'])
        var.put('index', var.get('fastKey')(var.get('key')))
        if PyJsStrictNeq(var.get('index'),Js('F')):
            return var.get('that').get('_i').get(var.get('index'))
        #for JS loop
        var.put('entry', var.get('that').get('_f'))
        while var.get('entry'):
            try:
                if (var.get('entry').get('k')==var.get('key')):
                    return var.get('entry')
            finally:
                    var.put('entry', var.get('entry').get('n'))
    PyJs_anonymous_1469_._set_name('anonymous')
    var.put('getEntry', PyJs_anonymous_1469_)
    @Js
    def PyJs_anonymous_1471_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
        var = Scope({'ADDER':ADDER, 'this':this, 'arguments':arguments, 'IS_MAP':IS_MAP, 'wrapper':wrapper, 'NAME':NAME}, var)
        var.registers(['ADDER', 'C', 'NAME', 'wrapper', 'IS_MAP'])
        @Js
        def PyJs_anonymous_1472_(that, iterable, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'iterable':iterable, 'that':that}, var)
            var.registers(['iterable', 'that'])
            var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
            var.get('that').put('_i', var.get('create')(var.get("null")))
            var.get('that').put('_f', var.get('undefined'))
            var.get('that').put('_l', var.get('undefined'))
            var.get('that').put(var.get('SIZE'), Js(0.0))
            if (var.get('iterable')!=var.get('undefined')):
                var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
        PyJs_anonymous_1472_._set_name('anonymous')
        var.put('C', var.get('wrapper')(PyJs_anonymous_1472_))
        @Js
        def PyJs_clear_1474_(this, arguments, var=var):
            var = Scope({'this':this, 'clear':PyJs_clear_1474_, 'arguments':arguments}, var)
            var.registers(['entry', 'data', 'that'])
            #for JS loop
            var.put('that', var.get("this"))
            var.put('data', var.get('that').get('_i'))
            var.put('entry', var.get('that').get('_f'))
            while var.get('entry'):
                try:
                    var.get('entry').put('r', var.get('true'))
                    if var.get('entry').get('p'):
                        var.get('entry').put('p', var.get('entry').get('p').put('n', var.get('undefined')))
                    var.get('data').delete(var.get('entry').get('i'))
                finally:
                        var.put('entry', var.get('entry').get('n'))
            var.get('that').put('_f', var.get('that').put('_l', var.get('undefined')))
            var.get('that').put(var.get('SIZE'), Js(0.0))
        PyJs_clear_1474_._set_name('clear')
        @Js
        def PyJs_anonymous_1475_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['prev', 'entry', 'next', 'key', 'that'])
            var.put('that', var.get("this"))
            var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
            if var.get('entry'):
                var.put('next', var.get('entry').get('n'))
                var.put('prev', var.get('entry').get('p'))
                var.get('that').get('_i').delete(var.get('entry').get('i'))
                var.get('entry').put('r', var.get('true'))
                if var.get('prev'):
                    var.get('prev').put('n', var.get('next'))
                if var.get('next'):
                    var.get('next').put('p', var.get('prev'))
                if (var.get('that').get('_f')==var.get('entry')):
                    var.get('that').put('_f', var.get('next'))
                if (var.get('that').get('_l')==var.get('entry')):
                    var.get('that').put('_l', var.get('prev'))
                (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())-Js(1))+Js(1))
            return var.get('entry').neg().neg()
        PyJs_anonymous_1475_._set_name('anonymous')
        @Js
        def PyJs_forEach_1476_(callbackfn, this, arguments, var=var):
            var = Scope({'this':this, 'callbackfn':callbackfn, 'arguments':arguments, 'forEach':PyJs_forEach_1476_}, var)
            var.registers(['entry', 'callbackfn', 'f'])
            var.get('anInstance')(var.get("this"), var.get('C'), Js('forEach'))
            var.put('f', var.get('ctx')(var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(3.0)))
            while var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get("this").get('_f'))):
                var.get('f')(var.get('entry').get('v'), var.get('entry').get('k'), var.get("this"))
                while (var.get('entry') and var.get('entry').get('r')):
                    var.put('entry', var.get('entry').get('p'))
        PyJs_forEach_1476_._set_name('forEach')
        @Js
        def PyJs_has_1477_(key, this, arguments, var=var):
            var = Scope({'this':this, 'has':PyJs_has_1477_, 'arguments':arguments, 'key':key}, var)
            var.registers(['key'])
            return var.get('getEntry')(var.get("this"), var.get('key')).neg().neg()
        PyJs_has_1477_._set_name('has')
        PyJs_Object_1473_ = Js({'clear':PyJs_clear_1474_,'delete':PyJs_anonymous_1475_,'forEach':PyJs_forEach_1476_,'has':PyJs_has_1477_})
        var.get('redefineAll')(var.get('C').get('prototype'), PyJs_Object_1473_)
        if var.get('DESCRIPTORS'):
            @Js
            def PyJs_anonymous_1479_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('defined')(var.get("this").get(var.get('SIZE')))
            PyJs_anonymous_1479_._set_name('anonymous')
            PyJs_Object_1478_ = Js({'get':PyJs_anonymous_1479_})
            var.get('dP')(var.get('C').get('prototype'), Js('size'), PyJs_Object_1478_)
        return var.get('C')
    PyJs_anonymous_1471_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1480_(that, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value, 'key':key, 'that':that}, var)
        var.registers(['index', 'that', 'value', 'key', 'entry', 'prev'])
        var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
        if var.get('entry'):
            var.get('entry').put('v', var.get('value'))
        else:
            PyJs_Object_1481_ = Js({'i':var.put('index', var.get('fastKey')(var.get('key'), var.get('true'))),'k':var.get('key'),'v':var.get('value'),'p':var.put('prev', var.get('that').get('_l')),'n':var.get('undefined'),'r':Js(False)})
            var.get('that').put('_l', var.put('entry', PyJs_Object_1481_))
            if var.get('that').get('_f').neg():
                var.get('that').put('_f', var.get('entry'))
            if var.get('prev'):
                var.get('prev').put('n', var.get('entry'))
            (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())+Js(1))-Js(1))
            if PyJsStrictNeq(var.get('index'),Js('F')):
                var.get('that').get('_i').put(var.get('index'), var.get('entry'))
        return var.get('that')
    PyJs_anonymous_1480_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1482_(C, NAME, IS_MAP, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'C':C, 'NAME':NAME, 'IS_MAP':IS_MAP}, var)
        var.registers(['C', 'NAME', 'IS_MAP'])
        @Js
        def PyJs_anonymous_1483_(iterated, kind, this, arguments, var=var):
            var = Scope({'this':this, 'kind':kind, 'arguments':arguments, 'iterated':iterated}, var)
            var.registers(['kind', 'iterated'])
            var.get("this").put('_t', var.get('iterated'))
            var.get("this").put('_k', var.get('kind'))
            var.get("this").put('_l', var.get('undefined'))
        PyJs_anonymous_1483_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1484_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['entry', 'kind', 'that'])
            var.put('that', var.get("this"))
            var.put('kind', var.get('that').get('_k'))
            var.put('entry', var.get('that').get('_l'))
            while (var.get('entry') and var.get('entry').get('r')):
                var.put('entry', var.get('entry').get('p'))
            if (var.get('that').get('_t').neg() or var.get('that').put('_l', var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get('that').get('_t').get('_f')))).neg()):
                var.get('that').put('_t', var.get('undefined'))
                return var.get('step')(Js(1.0))
            if (var.get('kind')==Js('keys')):
                return var.get('step')(Js(0.0), var.get('entry').get('k'))
            if (var.get('kind')==Js('values')):
                return var.get('step')(Js(0.0), var.get('entry').get('v'))
            return var.get('step')(Js(0.0), Js([var.get('entry').get('k'), var.get('entry').get('v')]))
        PyJs_anonymous_1484_._set_name('anonymous')
        var.get('$iterDefine')(var.get('C'), var.get('NAME'), PyJs_anonymous_1483_, PyJs_anonymous_1484_, (Js('entries') if var.get('IS_MAP') else Js('values')), var.get('IS_MAP').neg(), var.get('true'))
        var.get('setSpecies')(var.get('NAME'))
    PyJs_anonymous_1482_._set_name('anonymous')
    PyJs_Object_1470_ = Js({'getConstructor':PyJs_anonymous_1471_,'def':PyJs_anonymous_1480_,'getEntry':var.get('getEntry'),'setStrong':PyJs_anonymous_1482_})
    var.get('module').put('exports', PyJs_Object_1470_)
PyJs_anonymous_1468_._set_name('anonymous')
PyJs_Object_1485_ = Js({'./_an-instance':Js(131.0),'./_ctx':Js(145.0),'./_defined':Js(146.0),'./_descriptors':Js(147.0),'./_for-of':Js(153.0),'./_iter-define':Js(165.0),'./_iter-step':Js(166.0),'./_meta':Js(170.0),'./_object-create':Js(172.0),'./_object-dp':Js(173.0),'./_redefine-all':Js(185.0),'./_set-species':Js(188.0)})
@Js
def PyJs_anonymous_1486_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['from', 'require', 'classof', 'exports', 'module'])
    var.put('classof', var.get('require')(Js('./_classof')))
    var.put('from', var.get('require')(Js('./_array-from-iterable')))
    @Js
    def PyJs_anonymous_1487_(NAME, this, arguments, var=var):
        var = Scope({'this':this, 'NAME':NAME, 'arguments':arguments}, var)
        var.registers(['NAME'])
        @Js
        def PyJs_toJSON_1488_(this, arguments, var=var):
            var = Scope({'this':this, 'toJSON':PyJs_toJSON_1488_, 'arguments':arguments}, var)
            var.registers([])
            if (var.get('classof')(var.get("this"))!=var.get('NAME')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('NAME')+Js("#toJSON isn't generic"))))
                raise PyJsTempException
            return var.get('from')(var.get("this"))
        PyJs_toJSON_1488_._set_name('toJSON')
        return PyJs_toJSON_1488_
    PyJs_anonymous_1487_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1487_)
PyJs_anonymous_1486_._set_name('anonymous')
PyJs_Object_1489_ = Js({'./_array-from-iterable':Js(133.0),'./_classof':Js(138.0)})
@Js
def PyJs_anonymous_1490_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'forOf', 'findUncaughtFrozen', 'createArrayMethod', 'anInstance', 'require', 'arrayFindIndex', 'module', 'id', '$has', 'anObject', 'uncaughtFrozenStore', 'UncaughtFrozenStore', 'redefineAll', 'getWeak', 'isObject', 'arrayFind'])
    Js('use strict')
    var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
    var.put('getWeak', var.get('require')(Js('./_meta')).get('getWeak'))
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('anInstance', var.get('require')(Js('./_an-instance')))
    var.put('forOf', var.get('require')(Js('./_for-of')))
    var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
    var.put('$has', var.get('require')(Js('./_has')))
    var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
    var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
    var.put('id', Js(0.0))
    @Js
    def PyJs_anonymous_1491_(that, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'that':that}, var)
        var.registers(['that'])
        return (var.get('that').get('_l') or var.get('that').put('_l', var.get('UncaughtFrozenStore').create()))
    PyJs_anonymous_1491_._set_name('anonymous')
    var.put('uncaughtFrozenStore', PyJs_anonymous_1491_)
    @Js
    def PyJs_anonymous_1492_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('a', Js([]))
    PyJs_anonymous_1492_._set_name('anonymous')
    var.put('UncaughtFrozenStore', PyJs_anonymous_1492_)
    @Js
    def PyJs_anonymous_1493_(store, key, this, arguments, var=var):
        var = Scope({'this':this, 'key':key, 'store':store, 'arguments':arguments}, var)
        var.registers(['key', 'store'])
        @Js
        def PyJs_anonymous_1494_(it, this, arguments, var=var):
            var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
            var.registers(['it'])
            return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
        PyJs_anonymous_1494_._set_name('anonymous')
        return var.get('arrayFind')(var.get('store').get('a'), PyJs_anonymous_1494_)
    PyJs_anonymous_1493_._set_name('anonymous')
    var.put('findUncaughtFrozen', PyJs_anonymous_1493_)
    @Js
    def PyJs_anonymous_1496_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['entry', 'key'])
        var.put('entry', var.get('findUncaughtFrozen')(var.get("this"), var.get('key')))
        if var.get('entry'):
            return var.get('entry').get('1')
    PyJs_anonymous_1496_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1497_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get('findUncaughtFrozen')(var.get("this"), var.get('key')).neg().neg()
    PyJs_anonymous_1497_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1498_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['entry', 'value', 'key'])
        var.put('entry', var.get('findUncaughtFrozen')(var.get("this"), var.get('key')))
        if var.get('entry'):
            var.get('entry').put('1', var.get('value'))
        else:
            var.get("this").get('a').callprop('push', Js([var.get('key'), var.get('value')]))
    PyJs_anonymous_1498_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1499_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['index', 'key'])
        @Js
        def PyJs_anonymous_1500_(it, this, arguments, var=var):
            var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
            var.registers(['it'])
            return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
        PyJs_anonymous_1500_._set_name('anonymous')
        var.put('index', var.get('arrayFindIndex')(var.get("this").get('a'), PyJs_anonymous_1500_))
        if (~var.get('index')):
            var.get("this").get('a').callprop('splice', var.get('index'), Js(1.0))
        return (~var.get('index')).neg().neg()
    PyJs_anonymous_1499_._set_name('anonymous')
    PyJs_Object_1495_ = Js({'get':PyJs_anonymous_1496_,'has':PyJs_anonymous_1497_,'set':PyJs_anonymous_1498_,'delete':PyJs_anonymous_1499_})
    var.get('UncaughtFrozenStore').put('prototype', PyJs_Object_1495_)
    @Js
    def PyJs_anonymous_1502_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
        var = Scope({'ADDER':ADDER, 'this':this, 'arguments':arguments, 'IS_MAP':IS_MAP, 'wrapper':wrapper, 'NAME':NAME}, var)
        var.registers(['ADDER', 'C', 'NAME', 'wrapper', 'IS_MAP'])
        @Js
        def PyJs_anonymous_1503_(that, iterable, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'iterable':iterable, 'that':that}, var)
            var.registers(['iterable', 'that'])
            var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
            var.get('that').put('_i', (var.put('id',Js(var.get('id').to_number())+Js(1))-Js(1)))
            var.get('that').put('_l', var.get('undefined'))
            if (var.get('iterable')!=var.get('undefined')):
                var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
        PyJs_anonymous_1503_._set_name('anonymous')
        var.put('C', var.get('wrapper')(PyJs_anonymous_1503_))
        @Js
        def PyJs_anonymous_1505_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['data', 'key'])
            if var.get('isObject')(var.get('key')).neg():
                return Js(False)
            var.put('data', var.get('getWeak')(var.get('key')))
            if PyJsStrictEq(var.get('data'),var.get('true')):
                return var.get('uncaughtFrozenStore')(var.get("this")).callprop('delete', var.get('key'))
            return ((var.get('data') and var.get('$has')(var.get('data'), var.get("this").get('_i'))) and var.get('data').delete(var.get("this").get('_i')))
        PyJs_anonymous_1505_._set_name('anonymous')
        @Js
        def PyJs_has_1506_(key, this, arguments, var=var):
            var = Scope({'this':this, 'has':PyJs_has_1506_, 'arguments':arguments, 'key':key}, var)
            var.registers(['data', 'key'])
            if var.get('isObject')(var.get('key')).neg():
                return Js(False)
            var.put('data', var.get('getWeak')(var.get('key')))
            if PyJsStrictEq(var.get('data'),var.get('true')):
                return var.get('uncaughtFrozenStore')(var.get("this")).callprop('has', var.get('key'))
            return (var.get('data') and var.get('$has')(var.get('data'), var.get("this").get('_i')))
        PyJs_has_1506_._set_name('has')
        PyJs_Object_1504_ = Js({'delete':PyJs_anonymous_1505_,'has':PyJs_has_1506_})
        var.get('redefineAll')(var.get('C').get('prototype'), PyJs_Object_1504_)
        return var.get('C')
    PyJs_anonymous_1502_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1507_(that, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value, 'key':key, 'that':that}, var)
        var.registers(['data', 'value', 'key', 'that'])
        var.put('data', var.get('getWeak')(var.get('anObject')(var.get('key')), var.get('true')))
        if PyJsStrictEq(var.get('data'),var.get('true')):
            var.get('uncaughtFrozenStore')(var.get('that')).callprop('set', var.get('key'), var.get('value'))
        else:
            var.get('data').put(var.get('that').get('_i'), var.get('value'))
        return var.get('that')
    PyJs_anonymous_1507_._set_name('anonymous')
    PyJs_Object_1501_ = Js({'getConstructor':PyJs_anonymous_1502_,'def':PyJs_anonymous_1507_,'ufstore':var.get('uncaughtFrozenStore')})
    var.get('module').put('exports', PyJs_Object_1501_)
PyJs_anonymous_1490_._set_name('anonymous')
PyJs_Object_1508_ = Js({'./_an-instance':Js(131.0),'./_an-object':Js(132.0),'./_array-methods':Js(135.0),'./_for-of':Js(153.0),'./_has':Js(155.0),'./_is-object':Js(162.0),'./_meta':Js(170.0),'./_redefine-all':Js(185.0)})
@Js
def PyJs_anonymous_1509_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'fails', 'forOf', 'hide', 'anInstance', '$export', 'setToStringTag', 'global', 'require', 'module', 'DESCRIPTORS', 'meta', 'redefineAll', 'each', 'isObject', 'dP'])
    Js('use strict')
    var.put('global', var.get('require')(Js('./_global')))
    var.put('$export', var.get('require')(Js('./_export')))
    var.put('meta', var.get('require')(Js('./_meta')))
    var.put('fails', var.get('require')(Js('./_fails')))
    var.put('hide', var.get('require')(Js('./_hide')))
    var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
    var.put('forOf', var.get('require')(Js('./_for-of')))
    var.put('anInstance', var.get('require')(Js('./_an-instance')))
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
    var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
    var.put('each', var.get('require')(Js('./_array-methods'))(Js(0.0)))
    var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
    @Js
    def PyJs_anonymous_1510_(NAME, wrapper, methods, common, IS_MAP, IS_WEAK, this, arguments, var=var):
        var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments, 'IS_MAP':IS_MAP, 'wrapper':wrapper, 'IS_WEAK':IS_WEAK, 'common':common, 'methods':methods}, var)
        var.registers(['C', 'wrapper', 'NAME', 'proto', 'IS_MAP', 'O', 'common', 'Base', 'IS_WEAK', 'ADDER', 'methods'])
        var.put('Base', var.get('global').get(var.get('NAME')))
        var.put('C', var.get('Base'))
        var.put('ADDER', (Js('set') if var.get('IS_MAP') else Js('add')))
        var.put('proto', (var.get('C') and var.get('C').get('prototype')))
        PyJs_Object_1511_ = Js({})
        var.put('O', PyJs_Object_1511_)
        @Js
        def PyJs_anonymous_1512_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('C').create().callprop('entries').callprop('next')
        PyJs_anonymous_1512_._set_name('anonymous')
        if ((var.get('DESCRIPTORS').neg() or (var.get('C',throw=False).typeof()!=Js('function'))) or (var.get('IS_WEAK') or (var.get('proto').get('forEach') and var.get('fails')(PyJs_anonymous_1512_).neg())).neg()):
            var.put('C', var.get('common').callprop('getConstructor', var.get('wrapper'), var.get('NAME'), var.get('IS_MAP'), var.get('ADDER')))
            var.get('redefineAll')(var.get('C').get('prototype'), var.get('methods'))
            var.get('meta').put('NEED', var.get('true'))
        else:
            @Js
            def PyJs_anonymous_1513_(target, iterable, this, arguments, var=var):
                var = Scope({'this':this, 'target':target, 'iterable':iterable, 'arguments':arguments}, var)
                var.registers(['target', 'iterable'])
                var.get('anInstance')(var.get('target'), var.get('C'), var.get('NAME'), Js('_c'))
                var.get('target').put('_c', var.get('Base').create())
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('target').get(var.get('ADDER')), var.get('target'))
            PyJs_anonymous_1513_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_1513_))
            @Js
            def PyJs_anonymous_1514_(KEY, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'KEY':KEY}, var)
                var.registers(['IS_ADDER', 'KEY'])
                var.put('IS_ADDER', ((var.get('KEY')==Js('add')) or (var.get('KEY')==Js('set'))))
                if (var.get('proto').contains(var.get('KEY')) and (var.get('IS_WEAK') and (var.get('KEY')==Js('clear'))).neg()):
                    @Js
                    def PyJs_anonymous_1515_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
                        var.registers(['a', 'b', 'result'])
                        var.get('anInstance')(var.get("this"), var.get('C'), var.get('KEY'))
                        if ((var.get('IS_ADDER').neg() and var.get('IS_WEAK')) and var.get('isObject')(var.get('a')).neg()):
                            return (var.get('undefined') if (var.get('KEY')==Js('get')) else Js(False))
                        var.put('result', var.get("this").get('_c').callprop(var.get('KEY'), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')), var.get('b')))
                        return (var.get("this") if var.get('IS_ADDER') else var.get('result'))
                    PyJs_anonymous_1515_._set_name('anonymous')
                    var.get('hide')(var.get('C').get('prototype'), var.get('KEY'), PyJs_anonymous_1515_)
            PyJs_anonymous_1514_._set_name('anonymous')
            var.get('each')(Js('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON').callprop('split', Js(',')), PyJs_anonymous_1514_)
            if var.get('proto').contains(Js('size')):
                @Js
                def PyJs_anonymous_1517_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get("this").get('_c').get('size')
                PyJs_anonymous_1517_._set_name('anonymous')
                PyJs_Object_1516_ = Js({'get':PyJs_anonymous_1517_})
                var.get('dP')(var.get('C').get('prototype'), Js('size'), PyJs_Object_1516_)
        var.get('setToStringTag')(var.get('C'), var.get('NAME'))
        var.get('O').put(var.get('NAME'), var.get('C'))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+var.get('$export').get('F')), var.get('O'))
        if var.get('IS_WEAK').neg():
            var.get('common').callprop('setStrong', var.get('C'), var.get('NAME'), var.get('IS_MAP'))
        return var.get('C')
    PyJs_anonymous_1510_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1510_)
PyJs_anonymous_1509_._set_name('anonymous')
PyJs_Object_1518_ = Js({'./_an-instance':Js(131.0),'./_array-methods':Js(135.0),'./_descriptors':Js(147.0),'./_export':Js(151.0),'./_fails':Js(152.0),'./_for-of':Js(153.0),'./_global':Js(154.0),'./_hide':Js(156.0),'./_is-object':Js(162.0),'./_meta':Js(170.0),'./_object-dp':Js(173.0),'./_redefine-all':Js(185.0),'./_set-to-string-tag':Js(189.0)})
@Js
def PyJs_anonymous_1519_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'require', 'exports', 'module'])
    PyJs_Object_1520_ = Js({'version':Js('2.4.0')})
    var.put('core', var.get('module').put('exports', PyJs_Object_1520_))
    if (var.get('__e',throw=False).typeof()==Js('number')):
        var.put('__e', var.get('core'))
PyJs_anonymous_1519_._set_name('anonymous')
PyJs_Object_1521_ = Js({})
@Js
def PyJs_anonymous_1522_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['aFunction', 'require', 'exports', 'module'])
    var.put('aFunction', var.get('require')(Js('./_a-function')))
    @Js
    def PyJs_anonymous_1523_(fn, that, length, this, arguments, var=var):
        var = Scope({'this':this, 'length':length, 'arguments':arguments, 'fn':fn, 'that':that}, var)
        var.registers(['length', 'fn', 'that'])
        var.get('aFunction')(var.get('fn'))
        if PyJsStrictEq(var.get('that'),var.get('undefined')):
            return var.get('fn')
        while 1:
            SWITCHED = False
            CONDITION = (var.get('length'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                SWITCHED = True
                @Js
                def PyJs_anonymous_1524_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a'])
                    return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                PyJs_anonymous_1524_._set_name('anonymous')
                return PyJs_anonymous_1524_
            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                SWITCHED = True
                @Js
                def PyJs_anonymous_1525_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
                    var.registers(['a', 'b'])
                    return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                PyJs_anonymous_1525_._set_name('anonymous')
                return PyJs_anonymous_1525_
            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                SWITCHED = True
                @Js
                def PyJs_anonymous_1526_(a, b, c, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'c':c, 'b':b, 'arguments':arguments}, var)
                    var.registers(['a', 'c', 'b'])
                    return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                PyJs_anonymous_1526_._set_name('anonymous')
                return PyJs_anonymous_1526_
            SWITCHED = True
            break
        @Js
        def PyJs_anonymous_1527_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
        PyJs_anonymous_1527_._set_name('anonymous')
        return PyJs_anonymous_1527_
    PyJs_anonymous_1523_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1523_)
PyJs_anonymous_1522_._set_name('anonymous')
PyJs_Object_1528_ = Js({'./_a-function':Js(129.0)})
@Js
def PyJs_anonymous_1529_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1530_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        if (var.get('it')==var.get('undefined')):
            PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on  ")+var.get('it'))))
            raise PyJsTempException
        return var.get('it')
    PyJs_anonymous_1530_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1530_)
PyJs_anonymous_1529_._set_name('anonymous')
PyJs_Object_1531_ = Js({})
@Js
def PyJs_anonymous_1532_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1533_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_1534_ = Js({})
        @Js
        def PyJs_anonymous_1536_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(7.0)
        PyJs_anonymous_1536_._set_name('anonymous')
        PyJs_Object_1535_ = Js({'get':PyJs_anonymous_1536_})
        return (var.get('Object').callprop('defineProperty', PyJs_Object_1534_, Js('a'), PyJs_Object_1535_).get('a')!=Js(7.0))
    PyJs_anonymous_1533_._set_name('anonymous')
    var.get('module').put('exports', var.get('require')(Js('./_fails'))(PyJs_anonymous_1533_).neg())
PyJs_anonymous_1532_._set_name('anonymous')
PyJs_Object_1537_ = Js({'./_fails':Js(152.0)})
@Js
def PyJs_anonymous_1538_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'is', 'module', 'isObject', 'document', 'require'])
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('document', var.get('require')(Js('./_global')).get('document'))
    var.put('is', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
    @Js
    def PyJs_anonymous_1539_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        PyJs_Object_1540_ = Js({})
        return (var.get('document').callprop('createElement', var.get('it')) if var.get('is') else PyJs_Object_1540_)
    PyJs_anonymous_1539_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1539_)
PyJs_anonymous_1538_._set_name('anonymous')
PyJs_Object_1541_ = Js({'./_global':Js(154.0),'./_is-object':Js(162.0)})
@Js
def PyJs_anonymous_1542_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', Js('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').callprop('split', Js(',')))
PyJs_anonymous_1542_._set_name('anonymous')
PyJs_Object_1543_ = Js({})
@Js
def PyJs_anonymous_1544_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'pIE', 'module', 'gOPS', 'getKeys'])
    var.put('getKeys', var.get('require')(Js('./_object-keys')))
    var.put('gOPS', var.get('require')(Js('./_object-gops')))
    var.put('pIE', var.get('require')(Js('./_object-pie')))
    @Js
    def PyJs_anonymous_1545_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['getSymbols', 'i', 'it', 'symbols', 'isEnum', 'result', 'key'])
        var.put('result', var.get('getKeys')(var.get('it')))
        var.put('getSymbols', var.get('gOPS').get('f'))
        if var.get('getSymbols'):
            var.put('symbols', var.get('getSymbols')(var.get('it')))
            var.put('isEnum', var.get('pIE').get('f'))
            var.put('i', Js(0.0))
            while (var.get('symbols').get('length')>var.get('i')):
                if var.get('isEnum').callprop('call', var.get('it'), var.put('key', var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    var.get('result').callprop('push', var.get('key'))
        return var.get('result')
    PyJs_anonymous_1545_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1545_)
PyJs_anonymous_1544_._set_name('anonymous')
PyJs_Object_1546_ = Js({'./_object-gops':Js(178.0),'./_object-keys':Js(181.0),'./_object-pie':Js(182.0)})
@Js
def PyJs_anonymous_1547_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'exports', 'hide', '$export', 'require', 'global', 'ctx', 'module', 'PROTOTYPE'])
    var.put('global', var.get('require')(Js('./_global')))
    var.put('core', var.get('require')(Js('./_core')))
    var.put('ctx', var.get('require')(Js('./_ctx')))
    var.put('hide', var.get('require')(Js('./_hide')))
    var.put('PROTOTYPE', Js('prototype'))
    @Js
    def PyJs_anonymous_1548_(type, name, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'type':type, 'name':name, 'arguments':arguments}, var)
        var.registers(['IS_STATIC', 'IS_WRAP', 'exports', 'IS_GLOBAL', 'target', 'expProto', 'name', 'source', 'IS_PROTO', 'key', 'own', 'IS_FORCED', 'type', 'IS_BIND', 'out'])
        var.put('IS_FORCED', (var.get('type')&var.get('$export').get('F')))
        var.put('IS_GLOBAL', (var.get('type')&var.get('$export').get('G')))
        var.put('IS_STATIC', (var.get('type')&var.get('$export').get('S')))
        var.put('IS_PROTO', (var.get('type')&var.get('$export').get('P')))
        var.put('IS_BIND', (var.get('type')&var.get('$export').get('B')))
        var.put('IS_WRAP', (var.get('type')&var.get('$export').get('W')))
        PyJs_Object_1549_ = Js({})
        var.put('exports', (var.get('core') if var.get('IS_GLOBAL') else (var.get('core').get(var.get('name')) or var.get('core').put(var.get('name'), PyJs_Object_1549_))))
        var.put('expProto', var.get('exports').get(var.get('PROTOTYPE')))
        PyJs_Object_1550_ = Js({})
        var.put('target', (var.get('global') if var.get('IS_GLOBAL') else (var.get('global').get(var.get('name')) if var.get('IS_STATIC') else (var.get('global').get(var.get('name')) or PyJs_Object_1550_).get(var.get('PROTOTYPE')))))
        if var.get('IS_GLOBAL'):
            var.put('source', var.get('name'))
        for PyJsTemp in var.get('source'):
            var.put('key', PyJsTemp)
            var.put('own', ((var.get('IS_FORCED').neg() and var.get('target')) and PyJsStrictNeq(var.get('target').get(var.get('key')),var.get('undefined'))))
            if (var.get('own') and var.get('exports').contains(var.get('key'))):
                continue
            var.put('out', (var.get('target').get(var.get('key')) if var.get('own') else var.get('source').get(var.get('key'))))
            def PyJs_LONG_1553_(var=var):
                @Js
                def PyJs_anonymous_1551_(C, this, arguments, var=var):
                    var = Scope({'this':this, 'C':C, 'arguments':arguments}, var)
                    var.registers(['C', 'F'])
                    @Js
                    def PyJs_anonymous_1552_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'c':c, 'b':b, 'arguments':arguments}, var)
                        var.registers(['a', 'c', 'b'])
                        if var.get("this").instanceof(var.get('C')):
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('arguments').get('length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    return var.get('C').create()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    return var.get('C').create(var.get('a'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    return var.get('C').create(var.get('a'), var.get('b'))
                                SWITCHED = True
                                break
                            return var.get('C').create(var.get('a'), var.get('b'), var.get('c'))
                        return var.get('C').callprop('apply', var.get("this"), var.get('arguments'))
                    PyJs_anonymous_1552_._set_name('anonymous')
                    var.put('F', PyJs_anonymous_1552_)
                    var.get('F').put(var.get('PROTOTYPE'), var.get('C').get(var.get('PROTOTYPE')))
                    return var.get('F')
                PyJs_anonymous_1551_._set_name('anonymous')
                return (var.get('ctx')(var.get('out'), var.get('global')) if (var.get('IS_BIND') and var.get('own')) else (PyJs_anonymous_1551_(var.get('out')) if (var.get('IS_WRAP') and (var.get('target').get(var.get('key'))==var.get('out'))) else (var.get('ctx')(var.get('Function').get('call'), var.get('out')) if (var.get('IS_PROTO') and (var.get('out',throw=False).typeof()==Js('function'))) else var.get('out'))))
            var.get('exports').put(var.get('key'), (var.get('source').get(var.get('key')) if (var.get('IS_GLOBAL') and (var.get('target').get(var.get('key')).typeof()!=Js('function'))) else PyJs_LONG_1553_()))
            if var.get('IS_PROTO'):
                PyJs_Object_1554_ = Js({})
                (var.get('exports').get('virtual') or var.get('exports').put('virtual', PyJs_Object_1554_)).put(var.get('key'), var.get('out'))
                if (((var.get('type')&var.get('$export').get('R')) and var.get('expProto')) and var.get('expProto').get(var.get('key')).neg()):
                    var.get('hide')(var.get('expProto'), var.get('key'), var.get('out'))
    PyJs_anonymous_1548_._set_name('anonymous')
    var.put('$export', PyJs_anonymous_1548_)
    var.get('$export').put('F', Js(1.0))
    var.get('$export').put('G', Js(2.0))
    var.get('$export').put('S', Js(4.0))
    var.get('$export').put('P', Js(8.0))
    var.get('$export').put('B', Js(16.0))
    var.get('$export').put('W', Js(32.0))
    var.get('$export').put('U', Js(64.0))
    var.get('$export').put('R', Js(128.0))
    var.get('module').put('exports', var.get('$export'))
PyJs_anonymous_1547_._set_name('anonymous')
PyJs_Object_1555_ = Js({'./_core':Js(144.0),'./_ctx':Js(145.0),'./_global':Js(154.0),'./_hide':Js(156.0)})
@Js
def PyJs_anonymous_1556_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1557_(PyJsArg_65786563_, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'exec':PyJsArg_65786563_}, var)
        var.registers(['exec'])
        try:
            return var.get('exec')().neg().neg()
        except PyJsException as PyJsTempException:
            PyJsHolder_65_66067223 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                return var.get('true')
            finally:
                if PyJsHolder_65_66067223 is not None:
                    var.own['e'] = PyJsHolder_65_66067223
                else:
                    del var.own['e']
                del PyJsHolder_65_66067223
    PyJs_anonymous_1557_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1557_)
PyJs_anonymous_1556_._set_name('anonymous')
PyJs_Object_1558_ = Js({})
@Js
def PyJs_anonymous_1559_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'getIterFn', 'RETURN', 'require', 'ctx', 'module', 'BREAK', 'toLength', 'call', 'isArrayIter', 'anObject'])
    var.put('ctx', var.get('require')(Js('./_ctx')))
    var.put('call', var.get('require')(Js('./_iter-call')))
    var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('toLength', var.get('require')(Js('./_to-length')))
    var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
    PyJs_Object_1560_ = Js({})
    var.put('BREAK', PyJs_Object_1560_)
    PyJs_Object_1561_ = Js({})
    var.put('RETURN', PyJs_Object_1561_)
    @Js
    def PyJs_anonymous_1562_(iterable, entries, fn, that, ITERATOR, this, arguments, var=var):
        var = Scope({'iterable':iterable, 'ITERATOR':ITERATOR, 'that':that, 'this':this, 'entries':entries, 'fn':fn, 'arguments':arguments}, var)
        var.registers(['iterFn', 'index', 'ITERATOR', 'iterator', 'f', 'that', 'step', 'length', 'result', 'entries', 'fn', 'iterable'])
        @Js
        def PyJs_anonymous_1563_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('iterable')
        PyJs_anonymous_1563_._set_name('anonymous')
        var.put('iterFn', (PyJs_anonymous_1563_ if var.get('ITERATOR') else var.get('getIterFn')(var.get('iterable'))))
        var.put('f', var.get('ctx')(var.get('fn'), var.get('that'), (Js(2.0) if var.get('entries') else Js(1.0))))
        var.put('index', Js(0.0))
        if (var.get('iterFn',throw=False).typeof()!=Js('function')):
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('iterable')+Js(' is not iterable!'))))
            raise PyJsTempException
        if var.get('isArrayIter')(var.get('iterFn')):
            #for JS loop
            var.put('length', var.get('toLength')(var.get('iterable').get('length')))
            while (var.get('length')>var.get('index')):
                try:
                    var.put('result', (var.get('f')(var.get('anObject')(var.put('step', var.get('iterable').get(var.get('index')))).get('0'), var.get('step').get('1')) if var.get('entries') else var.get('f')(var.get('iterable').get(var.get('index')))))
                    if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                        return var.get('result')
                finally:
                        (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
        else:
            #for JS loop
            var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
            while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                var.put('result', var.get('call')(var.get('iterator'), var.get('f'), var.get('step').get('value'), var.get('entries')))
                if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                    return var.get('result')
            
    PyJs_anonymous_1562_._set_name('anonymous')
    var.put('exports', var.get('module').put('exports', PyJs_anonymous_1562_))
    var.get('exports').put('BREAK', var.get('BREAK'))
    var.get('exports').put('RETURN', var.get('RETURN'))
PyJs_anonymous_1559_._set_name('anonymous')
PyJs_Object_1564_ = Js({'./_an-object':Js(132.0),'./_ctx':Js(145.0),'./_is-array-iter':Js(160.0),'./_iter-call':Js(163.0),'./_to-length':Js(196.0),'./core.get-iterator-method':Js(203.0)})
@Js
def PyJs_anonymous_1565_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'global', 'exports', 'module'])
    var.put('global', var.get('module').put('exports', (var.get('window') if ((var.get('window',throw=False).typeof()!=Js('undefined')) and (var.get('window').get('Math')==var.get('Math'))) else (var.get('self') if ((var.get('self',throw=False).typeof()!=Js('undefined')) and (var.get('self').get('Math')==var.get('Math'))) else var.get('Function')(Js('return this'))()))))
    if (var.get('__g',throw=False).typeof()==Js('number')):
        var.put('__g', var.get('global'))
PyJs_anonymous_1565_._set_name('anonymous')
PyJs_Object_1566_ = Js({})
@Js
def PyJs_anonymous_1567_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'hasOwnProperty', 'module'])
    PyJs_Object_1568_ = Js({})
    var.put('hasOwnProperty', PyJs_Object_1568_.get('hasOwnProperty'))
    @Js
    def PyJs_anonymous_1569_(it, key, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'key':key, 'arguments':arguments}, var)
        var.registers(['it', 'key'])
        return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
    PyJs_anonymous_1569_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1569_)
PyJs_anonymous_1567_._set_name('anonymous')
PyJs_Object_1570_ = Js({})
@Js
def PyJs_anonymous_1571_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'require', 'exports', 'createDesc', 'dP'])
    var.put('dP', var.get('require')(Js('./_object-dp')))
    var.put('createDesc', var.get('require')(Js('./_property-desc')))
    @Js
    def PyJs_anonymous_1572_(object, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['object', 'value', 'key'])
        return var.get('dP').callprop('f', var.get('object'), var.get('key'), var.get('createDesc')(Js(1.0), var.get('value')))
    PyJs_anonymous_1572_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1573_(object, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['object', 'value', 'key'])
        var.get('object').put(var.get('key'), var.get('value'))
        return var.get('object')
    PyJs_anonymous_1573_._set_name('anonymous')
    var.get('module').put('exports', (PyJs_anonymous_1572_ if var.get('require')(Js('./_descriptors')) else PyJs_anonymous_1573_))
PyJs_anonymous_1571_._set_name('anonymous')
PyJs_Object_1574_ = Js({'./_descriptors':Js(147.0),'./_object-dp':Js(173.0),'./_property-desc':Js(184.0)})
@Js
def PyJs_anonymous_1575_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', (var.get('require')(Js('./_global')).get('document') and var.get('document').get('documentElement')))
PyJs_anonymous_1575_._set_name('anonymous')
PyJs_Object_1576_ = Js({'./_global':Js(154.0)})
@Js
def PyJs_anonymous_1577_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1578_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1580_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(7.0)
        PyJs_anonymous_1580_._set_name('anonymous')
        PyJs_Object_1579_ = Js({'get':PyJs_anonymous_1580_})
        return (var.get('Object').callprop('defineProperty', var.get('require')(Js('./_dom-create'))(Js('div')), Js('a'), PyJs_Object_1579_).get('a')!=Js(7.0))
    PyJs_anonymous_1578_._set_name('anonymous')
    var.get('module').put('exports', (var.get('require')(Js('./_descriptors')).neg() and var.get('require')(Js('./_fails'))(PyJs_anonymous_1578_).neg()))
PyJs_anonymous_1577_._set_name('anonymous')
PyJs_Object_1581_ = Js({'./_descriptors':Js(147.0),'./_dom-create':Js(148.0),'./_fails':Js(152.0)})
@Js
def PyJs_anonymous_1582_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'cof'])
    var.put('cof', var.get('require')(Js('./_cof')))
    @Js
    def PyJs_anonymous_1583_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (var.get('it').callprop('split', Js('')) if (var.get('cof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
    PyJs_anonymous_1583_._set_name('anonymous')
    var.get('module').put('exports', (var.get('Object') if var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)) else PyJs_anonymous_1583_))
PyJs_anonymous_1582_._set_name('anonymous')
PyJs_Object_1584_ = Js({'./_cof':Js(139.0)})
@Js
def PyJs_anonymous_1585_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ITERATOR', 'ArrayProto', 'require', 'module', 'Iterators'])
    var.put('Iterators', var.get('require')(Js('./_iterators')))
    var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
    var.put('ArrayProto', var.get('Array').get('prototype'))
    @Js
    def PyJs_anonymous_1586_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (PyJsStrictEq(var.get('Iterators').get('Array'),var.get('it')) or PyJsStrictEq(var.get('ArrayProto').get(var.get('ITERATOR')),var.get('it'))))
    PyJs_anonymous_1586_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1586_)
PyJs_anonymous_1585_._set_name('anonymous')
PyJs_Object_1587_ = Js({'./_iterators':Js(167.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1588_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'cof'])
    var.put('cof', var.get('require')(Js('./_cof')))
    @Js
    def PyJs_isArray_1589_(arg, this, arguments, var=var):
        var = Scope({'this':this, 'isArray':PyJs_isArray_1589_, 'arguments':arguments, 'arg':arg}, var)
        var.registers(['arg'])
        return (var.get('cof')(var.get('arg'))==Js('Array'))
    PyJs_isArray_1589_._set_name('isArray')
    var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_1589_))
PyJs_anonymous_1588_._set_name('anonymous')
PyJs_Object_1590_ = Js({'./_cof':Js(139.0)})
@Js
def PyJs_anonymous_1591_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1592_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (PyJsStrictNeq(var.get('it'),var.get("null")) if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('object')) else PyJsStrictEq(var.get('it',throw=False).typeof(),Js('function')))
    PyJs_anonymous_1592_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1592_)
PyJs_anonymous_1591_._set_name('anonymous')
PyJs_Object_1593_ = Js({})
@Js
def PyJs_anonymous_1594_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'anObject', 'exports', 'module'])
    var.put('anObject', var.get('require')(Js('./_an-object')))
    @Js
    def PyJs_anonymous_1595_(iterator, fn, value, entries, this, arguments, var=var):
        var = Scope({'fn':fn, 'iterator':iterator, 'entries':entries, 'this':this, 'value':value, 'arguments':arguments}, var)
        var.registers(['fn', 'value', 'iterator', 'ret', 'entries'])
        try:
            return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('entries') else var.get('fn')(var.get('value')))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_64523188 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                var.put('ret', var.get('iterator').get('return'))
                if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                    var.get('anObject')(var.get('ret').callprop('call', var.get('iterator')))
                PyJsTempException = JsToPyException(var.get('e'))
                raise PyJsTempException
            finally:
                if PyJsHolder_65_64523188 is not None:
                    var.own['e'] = PyJsHolder_65_64523188
                else:
                    del var.own['e']
                del PyJsHolder_65_64523188
    PyJs_anonymous_1595_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1595_)
PyJs_anonymous_1594_._set_name('anonymous')
PyJs_Object_1596_ = Js({'./_an-object':Js(132.0)})
@Js
def PyJs_anonymous_1597_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['setToStringTag', 'exports', 'IteratorPrototype', 'create', 'module', 'descriptor', 'require'])
    Js('use strict')
    var.put('create', var.get('require')(Js('./_object-create')))
    var.put('descriptor', var.get('require')(Js('./_property-desc')))
    var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
    PyJs_Object_1598_ = Js({})
    var.put('IteratorPrototype', PyJs_Object_1598_)
    @Js
    def PyJs_anonymous_1599_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this")
    PyJs_anonymous_1599_._set_name('anonymous')
    var.get('require')(Js('./_hide'))(var.get('IteratorPrototype'), var.get('require')(Js('./_wks'))(Js('iterator')), PyJs_anonymous_1599_)
    @Js
    def PyJs_anonymous_1600_(Constructor, NAME, next, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'next':next, 'NAME':NAME, 'Constructor':Constructor}, var)
        var.registers(['next', 'NAME', 'Constructor'])
        PyJs_Object_1601_ = Js({'next':var.get('descriptor')(Js(1.0), var.get('next'))})
        var.get('Constructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), PyJs_Object_1601_))
        var.get('setToStringTag')(var.get('Constructor'), (var.get('NAME')+Js(' Iterator')))
    PyJs_anonymous_1600_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1600_)
PyJs_anonymous_1597_._set_name('anonymous')
PyJs_Object_1602_ = Js({'./_hide':Js(156.0),'./_object-create':Js(172.0),'./_property-desc':Js(184.0),'./_set-to-string-tag':Js(189.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1603_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['returnThis', '$iterCreate', 'redefine', 'hide', 'ITERATOR', 'KEYS', '$export', 'setToStringTag', 'BUGGY', 'require', 'LIBRARY', 'getPrototypeOf', 'Iterators', 'VALUES', 'module', 'has', 'FF_ITERATOR', 'exports'])
    Js('use strict')
    var.put('LIBRARY', var.get('require')(Js('./_library')))
    var.put('$export', var.get('require')(Js('./_export')))
    var.put('redefine', var.get('require')(Js('./_redefine')))
    var.put('hide', var.get('require')(Js('./_hide')))
    var.put('has', var.get('require')(Js('./_has')))
    var.put('Iterators', var.get('require')(Js('./_iterators')))
    var.put('$iterCreate', var.get('require')(Js('./_iter-create')))
    var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
    var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
    var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
    var.put('BUGGY', (Js([]).get('keys') and Js([]).callprop('keys').contains(Js('next'))).neg())
    var.put('FF_ITERATOR', Js('@@iterator'))
    var.put('KEYS', Js('keys'))
    var.put('VALUES', Js('values'))
    @Js
    def PyJs_anonymous_1604_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this")
    PyJs_anonymous_1604_._set_name('anonymous')
    var.put('returnThis', PyJs_anonymous_1604_)
    @Js
    def PyJs_anonymous_1605_(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
        var = Scope({'FORCED':FORCED, 'NAME':NAME, 'DEFAULT':DEFAULT, 'Constructor':Constructor, 'next':next, 'this':this, 'Base':Base, 'arguments':arguments, 'IS_SET':IS_SET}, var)
        var.registers(['DEF_VALUES', 'Base', '$entries', 'methods', '$default', 'proto', 'DEFAULT', 'IteratorPrototype', 'Constructor', 'getMethod', 'next', 'IS_SET', '$anyNative', 'TAG', 'key', 'VALUES_BUG', '$native', 'FORCED', 'NAME'])
        var.get('$iterCreate')(var.get('Constructor'), var.get('NAME'), var.get('next'))
        @Js
        def PyJs_anonymous_1606_(kind, this, arguments, var=var):
            var = Scope({'this':this, 'kind':kind, 'arguments':arguments}, var)
            var.registers(['kind'])
            if (var.get('BUGGY').neg() and var.get('proto').contains(var.get('kind'))):
                return var.get('proto').get(var.get('kind'))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('kind'))
                if SWITCHED or PyJsStrictEq(CONDITION, var.get('KEYS')):
                    SWITCHED = True
                    @Js
                    def PyJs_keys_1607_(this, arguments, var=var):
                        var = Scope({'this':this, 'keys':PyJs_keys_1607_, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('Constructor').create(var.get("this"), var.get('kind'))
                    PyJs_keys_1607_._set_name('keys')
                    return PyJs_keys_1607_
                if SWITCHED or PyJsStrictEq(CONDITION, var.get('VALUES')):
                    SWITCHED = True
                    @Js
                    def PyJs_values_1608_(this, arguments, var=var):
                        var = Scope({'this':this, 'values':PyJs_values_1608_, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('Constructor').create(var.get("this"), var.get('kind'))
                    PyJs_values_1608_._set_name('values')
                    return PyJs_values_1608_
                SWITCHED = True
                break
            @Js
            def PyJs_entries_1609_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_1609_}, var)
                var.registers([])
                return var.get('Constructor').create(var.get("this"), var.get('kind'))
            PyJs_entries_1609_._set_name('entries')
            return PyJs_entries_1609_
        PyJs_anonymous_1606_._set_name('anonymous')
        var.put('getMethod', PyJs_anonymous_1606_)
        var.put('TAG', (var.get('NAME')+Js(' Iterator')))
        var.put('DEF_VALUES', (var.get('DEFAULT')==var.get('VALUES')))
        var.put('VALUES_BUG', Js(False))
        var.put('proto', var.get('Base').get('prototype'))
        var.put('$native', ((var.get('proto').get(var.get('ITERATOR')) or var.get('proto').get(var.get('FF_ITERATOR'))) or (var.get('DEFAULT') and var.get('proto').get(var.get('DEFAULT')))))
        var.put('$default', (var.get('$native') or var.get('getMethod')(var.get('DEFAULT'))))
        var.put('$entries', ((var.get('$default') if var.get('DEF_VALUES').neg() else var.get('getMethod')(Js('entries'))) if var.get('DEFAULT') else var.get('undefined')))
        var.put('$anyNative', ((var.get('proto').get('entries') or var.get('$native')) if (var.get('NAME')==Js('Array')) else var.get('$native')))
        if var.get('$anyNative'):
            var.put('IteratorPrototype', var.get('getPrototypeOf')(var.get('$anyNative').callprop('call', var.get('Base').create())))
            if PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')):
                var.get('setToStringTag')(var.get('IteratorPrototype'), var.get('TAG'), var.get('true'))
                if (var.get('LIBRARY').neg() and var.get('has')(var.get('IteratorPrototype'), var.get('ITERATOR')).neg()):
                    var.get('hide')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
        if ((var.get('DEF_VALUES') and var.get('$native')) and PyJsStrictNeq(var.get('$native').get('name'),var.get('VALUES'))):
            var.put('VALUES_BUG', var.get('true'))
            @Js
            def PyJs_values_1610_(this, arguments, var=var):
                var = Scope({'this':this, 'values':PyJs_values_1610_, 'arguments':arguments}, var)
                var.registers([])
                return var.get('$native').callprop('call', var.get("this"))
            PyJs_values_1610_._set_name('values')
            var.put('$default', PyJs_values_1610_)
        if ((var.get('LIBRARY').neg() or var.get('FORCED')) and ((var.get('BUGGY') or var.get('VALUES_BUG')) or var.get('proto').get(var.get('ITERATOR')).neg())):
            var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('$default'))
        var.get('Iterators').put(var.get('NAME'), var.get('$default'))
        var.get('Iterators').put(var.get('TAG'), var.get('returnThis'))
        if var.get('DEFAULT'):
            PyJs_Object_1611_ = Js({'values':(var.get('$default') if var.get('DEF_VALUES') else var.get('getMethod')(var.get('VALUES'))),'keys':(var.get('$default') if var.get('IS_SET') else var.get('getMethod')(var.get('KEYS'))),'entries':var.get('$entries')})
            var.put('methods', PyJs_Object_1611_)
            if var.get('FORCED'):
                for PyJsTemp in var.get('methods'):
                    var.put('key', PyJsTemp)
                    if var.get('proto').contains(var.get('key')).neg():
                        var.get('redefine')(var.get('proto'), var.get('key'), var.get('methods').get(var.get('key')))
            else:
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('BUGGY') or var.get('VALUES_BUG')))), var.get('NAME'), var.get('methods'))
        return var.get('methods')
    PyJs_anonymous_1605_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1605_)
PyJs_anonymous_1603_._set_name('anonymous')
PyJs_Object_1612_ = Js({'./_export':Js(151.0),'./_has':Js(155.0),'./_hide':Js(156.0),'./_iter-create':Js(164.0),'./_iterators':Js(167.0),'./_library':Js(169.0),'./_object-gpo':Js(179.0),'./_redefine':Js(186.0),'./_set-to-string-tag':Js(189.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1613_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1614_(done, value, this, arguments, var=var):
        var = Scope({'this':this, 'done':done, 'arguments':arguments, 'value':value}, var)
        var.registers(['done', 'value'])
        PyJs_Object_1615_ = Js({'value':var.get('value'),'done':var.get('done').neg().neg()})
        return PyJs_Object_1615_
    PyJs_anonymous_1614_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1614_)
PyJs_anonymous_1613_._set_name('anonymous')
PyJs_Object_1616_ = Js({})
@Js
def PyJs_anonymous_1617_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1618_ = Js({})
    var.get('module').put('exports', PyJs_Object_1618_)
PyJs_anonymous_1617_._set_name('anonymous')
PyJs_Object_1619_ = Js({})
@Js
def PyJs_anonymous_1620_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'toIObject', 'exports', 'module', 'getKeys'])
    var.put('getKeys', var.get('require')(Js('./_object-keys')))
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    @Js
    def PyJs_anonymous_1621_(object, el, this, arguments, var=var):
        var = Scope({'this':this, 'el':el, 'object':object, 'arguments':arguments}, var)
        var.registers(['index', 'el', 'keys', 'object', 'O', 'length', 'key'])
        var.put('O', var.get('toIObject')(var.get('object')))
        var.put('keys', var.get('getKeys')(var.get('O')))
        var.put('length', var.get('keys').get('length'))
        var.put('index', Js(0.0))
        while (var.get('length')>var.get('index')):
            if PyJsStrictEq(var.get('O').get(var.put('key', var.get('keys').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))),var.get('el')):
                return var.get('key')
    PyJs_anonymous_1621_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1621_)
PyJs_anonymous_1620_._set_name('anonymous')
PyJs_Object_1622_ = Js({'./_object-keys':Js(181.0),'./_to-iobject':Js(195.0)})
@Js
def PyJs_anonymous_1623_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('true'))
PyJs_anonymous_1623_._set_name('anonymous')
PyJs_Object_1624_ = Js({})
@Js
def PyJs_anonymous_1625_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['fastKey', 'FREEZE', 'getWeak', 'require', 'isExtensible', 'exports', 'module', 'id', 'setMeta', 'META', 'meta', 'onFreeze', 'has', 'setDesc', 'isObject'])
    var.put('META', var.get('require')(Js('./_uid'))(Js('meta')))
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('has', var.get('require')(Js('./_has')))
    var.put('setDesc', var.get('require')(Js('./_object-dp')).get('f'))
    var.put('id', Js(0.0))
    @Js
    def PyJs_anonymous_1626_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('true')
    PyJs_anonymous_1626_._set_name('anonymous')
    var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_1626_))
    @Js
    def PyJs_anonymous_1627_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_1628_ = Js({})
        return var.get('isExtensible')(var.get('Object').callprop('preventExtensions', PyJs_Object_1628_))
    PyJs_anonymous_1627_._set_name('anonymous')
    var.put('FREEZE', var.get('require')(Js('./_fails'))(PyJs_anonymous_1627_).neg())
    @Js
    def PyJs_anonymous_1629_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        PyJs_Object_1632_ = Js({})
        PyJs_Object_1631_ = Js({'i':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'w':PyJs_Object_1632_})
        PyJs_Object_1630_ = Js({'value':PyJs_Object_1631_})
        var.get('setDesc')(var.get('it'), var.get('META'), PyJs_Object_1630_)
    PyJs_anonymous_1629_._set_name('anonymous')
    var.put('setMeta', PyJs_anonymous_1629_)
    @Js
    def PyJs_anonymous_1633_(it, create, this, arguments, var=var):
        var = Scope({'this':this, 'create':create, 'it':it, 'arguments':arguments}, var)
        var.registers(['create', 'it'])
        if var.get('isObject')(var.get('it')).neg():
            return (var.get('it') if (var.get('it',throw=False).typeof()==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
        if var.get('has')(var.get('it'), var.get('META')).neg():
            if var.get('isExtensible')(var.get('it')).neg():
                return Js('F')
            if var.get('create').neg():
                return Js('E')
            var.get('setMeta')(var.get('it'))
        return var.get('it').get(var.get('META')).get('i')
    PyJs_anonymous_1633_._set_name('anonymous')
    var.put('fastKey', PyJs_anonymous_1633_)
    @Js
    def PyJs_anonymous_1634_(it, create, this, arguments, var=var):
        var = Scope({'this':this, 'create':create, 'it':it, 'arguments':arguments}, var)
        var.registers(['create', 'it'])
        if var.get('has')(var.get('it'), var.get('META')).neg():
            if var.get('isExtensible')(var.get('it')).neg():
                return var.get('true')
            if var.get('create').neg():
                return Js(False)
            var.get('setMeta')(var.get('it'))
        return var.get('it').get(var.get('META')).get('w')
    PyJs_anonymous_1634_._set_name('anonymous')
    var.put('getWeak', PyJs_anonymous_1634_)
    @Js
    def PyJs_anonymous_1635_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        if (((var.get('FREEZE') and var.get('meta').get('NEED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('META')).neg()):
            var.get('setMeta')(var.get('it'))
        return var.get('it')
    PyJs_anonymous_1635_._set_name('anonymous')
    var.put('onFreeze', PyJs_anonymous_1635_)
    PyJs_Object_1636_ = Js({'KEY':var.get('META'),'NEED':Js(False),'fastKey':var.get('fastKey'),'getWeak':var.get('getWeak'),'onFreeze':var.get('onFreeze')})
    var.put('meta', var.get('module').put('exports', PyJs_Object_1636_))
PyJs_anonymous_1625_._set_name('anonymous')
PyJs_Object_1637_ = Js({'./_fails':Js(152.0),'./_has':Js(155.0),'./_is-object':Js(162.0),'./_object-dp':Js(173.0),'./_uid':Js(199.0)})
@Js
def PyJs_anonymous_1638_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'IObject', '$assign', 'toObject', 'pIE', 'module', 'gOPS', 'getKeys', 'require'])
    Js('use strict')
    var.put('getKeys', var.get('require')(Js('./_object-keys')))
    var.put('gOPS', var.get('require')(Js('./_object-gops')))
    var.put('pIE', var.get('require')(Js('./_object-pie')))
    var.put('toObject', var.get('require')(Js('./_to-object')))
    var.put('IObject', var.get('require')(Js('./_iobject')))
    var.put('$assign', var.get('Object').get('assign'))
    @Js
    def PyJs_assign_1639_(target, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'assign':PyJs_assign_1639_, 'target':target, 'arguments':arguments}, var)
        var.registers(['index', 'target', 'getSymbols', 'keys', 'j', 'S', 'isEnum', 'aLen', 'T', 'key', 'length', 'source'])
        var.put('T', var.get('toObject')(var.get('target')))
        var.put('aLen', var.get('arguments').get('length'))
        var.put('index', Js(1.0))
        var.put('getSymbols', var.get('gOPS').get('f'))
        var.put('isEnum', var.get('pIE').get('f'))
        while (var.get('aLen')>var.get('index')):
            var.put('S', var.get('IObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
            var.put('keys', (var.get('getKeys')(var.get('S')).callprop('concat', var.get('getSymbols')(var.get('S'))) if var.get('getSymbols') else var.get('getKeys')(var.get('S'))))
            var.put('length', var.get('keys').get('length'))
            var.put('j', Js(0.0))
            while (var.get('length')>var.get('j')):
                if var.get('isEnum').callprop('call', var.get('S'), var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))):
                    var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
        return var.get('T')
    PyJs_assign_1639_._set_name('assign')
    @Js
    def PyJs_anonymous_1640_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['A', 'S', 'B', 'K'])
        PyJs_Object_1641_ = Js({})
        var.put('A', PyJs_Object_1641_)
        PyJs_Object_1642_ = Js({})
        var.put('B', PyJs_Object_1642_)
        var.put('S', var.get('Symbol')())
        var.put('K', Js('abcdefghijklmnopqrst'))
        var.get('A').put(var.get('S'), Js(7.0))
        @Js
        def PyJs_anonymous_1643_(k, this, arguments, var=var):
            var = Scope({'this':this, 'k':k, 'arguments':arguments}, var)
            var.registers(['k'])
            var.get('B').put(var.get('k'), var.get('k'))
        PyJs_anonymous_1643_._set_name('anonymous')
        var.get('K').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_1643_)
        PyJs_Object_1644_ = Js({})
        PyJs_Object_1645_ = Js({})
        return ((var.get('$assign')(PyJs_Object_1644_, var.get('A')).get(var.get('S'))!=Js(7.0)) or (var.get('Object').callprop('keys', var.get('$assign')(PyJs_Object_1645_, var.get('B'))).callprop('join', Js(''))!=var.get('K')))
    PyJs_anonymous_1640_._set_name('anonymous')
    var.get('module').put('exports', (PyJs_assign_1639_ if (var.get('$assign').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_1640_)) else var.get('$assign')))
PyJs_anonymous_1638_._set_name('anonymous')
PyJs_Object_1646_ = Js({'./_fails':Js(152.0),'./_iobject':Js(159.0),'./_object-gops':Js(178.0),'./_object-keys':Js(181.0),'./_object-pie':Js(182.0),'./_to-object':Js(197.0)})
@Js
def PyJs_anonymous_1647_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'dPs', 'require', 'enumBugKeys', 'module', 'IE_PROTO', 'anObject', 'createDict', 'PROTOTYPE', 'Empty'])
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('dPs', var.get('require')(Js('./_object-dps')))
    var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
    var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
    @Js
    def PyJs_anonymous_1648_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJs_anonymous_1648_._set_name('anonymous')
    var.put('Empty', PyJs_anonymous_1648_)
    var.put('PROTOTYPE', Js('prototype'))
    @Js
    def PyJs_anonymous_1649_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'lt', 'gt', 'iframeDocument', 'iframe'])
        var.put('iframe', var.get('require')(Js('./_dom-create'))(Js('iframe')))
        var.put('i', var.get('enumBugKeys').get('length'))
        var.put('lt', Js('<'))
        var.put('gt', Js('>'))
        var.get('iframe').get('style').put('display', Js('none'))
        var.get('require')(Js('./_html')).callprop('appendChild', var.get('iframe'))
        var.get('iframe').put('src', Js('javascript:'))
        var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
        var.get('iframeDocument').callprop('open')
        var.get('iframeDocument').callprop('write', ((((((var.get('lt')+Js('script'))+var.get('gt'))+Js('document.F=Object'))+var.get('lt'))+Js('/script'))+var.get('gt')))
        var.get('iframeDocument').callprop('close')
        var.put('createDict', var.get('iframeDocument').get('F'))
        while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
            var.get('createDict').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('i')))
        return var.get('createDict')()
    PyJs_anonymous_1649_._set_name('anonymous')
    var.put('createDict', PyJs_anonymous_1649_)
    @Js
    def PyJs_create_1650_(O, Properties, this, arguments, var=var):
        var = Scope({'this':this, 'create':PyJs_create_1650_, 'Properties':Properties, 'O':O, 'arguments':arguments}, var)
        var.registers(['result', 'O', 'Properties'])
        pass
        if PyJsStrictNeq(var.get('O'),var.get("null")):
            var.get('Empty').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
            var.put('result', var.get('Empty').create())
            var.get('Empty').put(var.get('PROTOTYPE'), var.get("null"))
            var.get('result').put(var.get('IE_PROTO'), var.get('O'))
        else:
            var.put('result', var.get('createDict')())
        return (var.get('result') if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('dPs')(var.get('result'), var.get('Properties')))
    PyJs_create_1650_._set_name('create')
    var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_1650_))
PyJs_anonymous_1647_._set_name('anonymous')
PyJs_Object_1651_ = Js({'./_an-object':Js(132.0),'./_dom-create':Js(148.0),'./_enum-bug-keys':Js(149.0),'./_html':Js(157.0),'./_object-dps':Js(174.0),'./_shared-key':Js(190.0)})
@Js
def PyJs_anonymous_1652_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'toPrimitive', 'module', 'anObject', 'IE8_DOM_DEFINE', 'dP'])
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
    var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
    var.put('dP', var.get('Object').get('defineProperty'))
    @Js
    def PyJs_defineProperty_1653_(O, P, Attributes, this, arguments, var=var):
        var = Scope({'this':this, 'O':O, 'P':P, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1653_, 'Attributes':Attributes}, var)
        var.registers(['P', 'O', 'Attributes'])
        var.get('anObject')(var.get('O'))
        var.put('P', var.get('toPrimitive')(var.get('P'), var.get('true')))
        var.get('anObject')(var.get('Attributes'))
        if var.get('IE8_DOM_DEFINE'):
            try:
                return var.get('dP')(var.get('O'), var.get('P'), var.get('Attributes'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_75205354 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_75205354 is not None:
                        var.own['e'] = PyJsHolder_65_75205354
                    else:
                        del var.own['e']
                    del PyJsHolder_65_75205354
        if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
            PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported!')))
            raise PyJsTempException
        if var.get('Attributes').contains(Js('value')):
            var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
        return var.get('O')
    PyJs_defineProperty_1653_._set_name('defineProperty')
    var.get('exports').put('f', (var.get('Object').get('defineProperty') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperty_1653_))
PyJs_anonymous_1652_._set_name('anonymous')
PyJs_Object_1654_ = Js({'./_an-object':Js(132.0),'./_descriptors':Js(147.0),'./_ie8-dom-define':Js(158.0),'./_to-primitive':Js(198.0)})
@Js
def PyJs_anonymous_1655_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'getKeys', 'anObject', 'dP'])
    var.put('dP', var.get('require')(Js('./_object-dp')))
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('getKeys', var.get('require')(Js('./_object-keys')))
    @Js
    def PyJs_defineProperties_1656_(O, Properties, this, arguments, var=var):
        var = Scope({'this':this, 'defineProperties':PyJs_defineProperties_1656_, 'Properties':Properties, 'O':O, 'arguments':arguments}, var)
        var.registers(['P', 'keys', 'O', 'i', 'length', 'Properties'])
        var.get('anObject')(var.get('O'))
        var.put('keys', var.get('getKeys')(var.get('Properties')))
        var.put('length', var.get('keys').get('length'))
        var.put('i', Js(0.0))
        while (var.get('length')>var.get('i')):
            var.get('dP').callprop('f', var.get('O'), var.put('P', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('P')))
        return var.get('O')
    PyJs_defineProperties_1656_._set_name('defineProperties')
    var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperties_1656_))
PyJs_anonymous_1655_._set_name('anonymous')
PyJs_Object_1657_ = Js({'./_an-object':Js(132.0),'./_descriptors':Js(147.0),'./_object-dp':Js(173.0),'./_object-keys':Js(181.0)})
@Js
def PyJs_anonymous_1658_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'toPrimitive', 'module', 'pIE', 'toIObject', 'IE8_DOM_DEFINE', 'gOPD', 'has', 'createDesc'])
    var.put('pIE', var.get('require')(Js('./_object-pie')))
    var.put('createDesc', var.get('require')(Js('./_property-desc')))
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
    var.put('has', var.get('require')(Js('./_has')))
    var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
    var.put('gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
    @Js
    def PyJs_getOwnPropertyDescriptor_1659_(O, P, this, arguments, var=var):
        var = Scope({'this':this, 'P':P, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1659_, 'arguments':arguments, 'O':O}, var)
        var.registers(['P', 'O'])
        var.put('O', var.get('toIObject')(var.get('O')))
        var.put('P', var.get('toPrimitive')(var.get('P'), var.get('true')))
        if var.get('IE8_DOM_DEFINE'):
            try:
                return var.get('gOPD')(var.get('O'), var.get('P'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_6934147 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_6934147 is not None:
                        var.own['e'] = PyJsHolder_65_6934147
                    else:
                        del var.own['e']
                    del PyJsHolder_65_6934147
        if var.get('has')(var.get('O'), var.get('P')):
            return var.get('createDesc')(var.get('pIE').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
    PyJs_getOwnPropertyDescriptor_1659_._set_name('getOwnPropertyDescriptor')
    var.get('exports').put('f', (var.get('gOPD') if var.get('require')(Js('./_descriptors')) else PyJs_getOwnPropertyDescriptor_1659_))
PyJs_anonymous_1658_._set_name('anonymous')
PyJs_Object_1660_ = Js({'./_descriptors':Js(147.0),'./_has':Js(155.0),'./_ie8-dom-define':Js(158.0),'./_object-pie':Js(182.0),'./_property-desc':Js(184.0),'./_to-iobject':Js(195.0),'./_to-primitive':Js(198.0)})
@Js
def PyJs_anonymous_1661_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'getWindowNames', 'windowNames', 'gOPN', 'toString', 'module', 'toIObject'])
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
    PyJs_Object_1662_ = Js({})
    var.put('toString', PyJs_Object_1662_.get('toString'))
    var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if (((var.get('window',throw=False).typeof()==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
    @Js
    def PyJs_anonymous_1663_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        try:
            return var.get('gOPN')(var.get('it'))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_72290655 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                return var.get('windowNames').callprop('slice')
            finally:
                if PyJsHolder_65_72290655 is not None:
                    var.own['e'] = PyJsHolder_65_72290655
                else:
                    del var.own['e']
                del PyJsHolder_65_72290655
    PyJs_anonymous_1663_._set_name('anonymous')
    var.put('getWindowNames', PyJs_anonymous_1663_)
    @Js
    def PyJs_getOwnPropertyNames_1664_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1664_, 'arguments':arguments}, var)
        var.registers(['it'])
        return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('gOPN')(var.get('toIObject')(var.get('it'))))
    PyJs_getOwnPropertyNames_1664_._set_name('getOwnPropertyNames')
    var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_1664_)
PyJs_anonymous_1661_._set_name('anonymous')
PyJs_Object_1665_ = Js({'./_object-gopn':Js(177.0),'./_to-iobject':Js(195.0)})
@Js
def PyJs_anonymous_1666_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'hiddenKeys', 'require', '$keys', 'module'])
    var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
    var.put('hiddenKeys', var.get('require')(Js('./_enum-bug-keys')).callprop('concat', Js('length'), Js('prototype')))
    @Js
    def PyJs_getOwnPropertyNames_1667_(O, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'O':O, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1667_}, var)
        var.registers(['O'])
        return var.get('$keys')(var.get('O'), var.get('hiddenKeys'))
    PyJs_getOwnPropertyNames_1667_._set_name('getOwnPropertyNames')
    var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_1667_))
PyJs_anonymous_1666_._set_name('anonymous')
PyJs_Object_1668_ = Js({'./_enum-bug-keys':Js(149.0),'./_object-keys-internal':Js(180.0)})
@Js
def PyJs_anonymous_1669_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
PyJs_anonymous_1669_._set_name('anonymous')
PyJs_Object_1670_ = Js({})
@Js
def PyJs_anonymous_1671_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'toObject', 'module', 'IE_PROTO', 'ObjectProto', 'has', 'require'])
    var.put('has', var.get('require')(Js('./_has')))
    var.put('toObject', var.get('require')(Js('./_to-object')))
    var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
    var.put('ObjectProto', var.get('Object').get('prototype'))
    @Js
    def PyJs_anonymous_1672_(O, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'O':O}, var)
        var.registers(['O'])
        var.put('O', var.get('toObject')(var.get('O')))
        if var.get('has')(var.get('O'), var.get('IE_PROTO')):
            return var.get('O').get(var.get('IE_PROTO'))
        if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
            return var.get('O').get('constructor').get('prototype')
        return (var.get('ObjectProto') if var.get('O').instanceof(var.get('Object')) else var.get("null"))
    PyJs_anonymous_1672_._set_name('anonymous')
    var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_1672_))
PyJs_anonymous_1671_._set_name('anonymous')
PyJs_Object_1673_ = Js({'./_has':Js(155.0),'./_shared-key':Js(190.0),'./_to-object':Js(197.0)})
@Js
def PyJs_anonymous_1674_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'IE_PROTO', 'toIObject', 'arrayIndexOf', 'has'])
    var.put('has', var.get('require')(Js('./_has')))
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    var.put('arrayIndexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
    var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
    @Js
    def PyJs_anonymous_1675_(object, names, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'names':names, 'arguments':arguments}, var)
        var.registers(['i', 'object', 'O', 'result', 'key', 'names'])
        var.put('O', var.get('toIObject')(var.get('object')))
        var.put('i', Js(0.0))
        var.put('result', Js([]))
        for PyJsTemp in var.get('O'):
            var.put('key', PyJsTemp)
            if (var.get('key')!=var.get('IE_PROTO')):
                (var.get('has')(var.get('O'), var.get('key')) and var.get('result').callprop('push', var.get('key')))
        while (var.get('names').get('length')>var.get('i')):
            if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                ((~var.get('arrayIndexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
        return var.get('result')
    PyJs_anonymous_1675_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1675_)
PyJs_anonymous_1674_._set_name('anonymous')
PyJs_Object_1676_ = Js({'./_array-includes':Js(134.0),'./_has':Js(155.0),'./_shared-key':Js(190.0),'./_to-iobject':Js(195.0)})
@Js
def PyJs_anonymous_1677_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'enumBugKeys', '$keys', 'module'])
    var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
    var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
    @Js
    def PyJs_keys_1678_(O, this, arguments, var=var):
        var = Scope({'this':this, 'keys':PyJs_keys_1678_, 'arguments':arguments, 'O':O}, var)
        var.registers(['O'])
        return var.get('$keys')(var.get('O'), var.get('enumBugKeys'))
    PyJs_keys_1678_._set_name('keys')
    var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_1678_))
PyJs_anonymous_1677_._set_name('anonymous')
PyJs_Object_1679_ = Js({'./_enum-bug-keys':Js(149.0),'./_object-keys-internal':Js(180.0)})
@Js
def PyJs_anonymous_1680_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1681_ = Js({})
    var.get('exports').put('f', PyJs_Object_1681_.get('propertyIsEnumerable'))
PyJs_anonymous_1680_._set_name('anonymous')
PyJs_Object_1682_ = Js({})
@Js
def PyJs_anonymous_1683_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'fails', '$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    var.put('core', var.get('require')(Js('./_core')))
    var.put('fails', var.get('require')(Js('./_fails')))
    @Js
    def PyJs_anonymous_1684_(KEY, PyJsArg_65786563_, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'KEY':KEY, 'exec':PyJsArg_65786563_}, var)
        var.registers(['KEY', 'exp', 'fn', 'exec'])
        PyJs_Object_1685_ = Js({})
        var.put('fn', ((var.get('core').get('Object') or PyJs_Object_1685_).get(var.get('KEY')) or var.get('Object').get(var.get('KEY'))))
        PyJs_Object_1686_ = Js({})
        var.put('exp', PyJs_Object_1686_)
        var.get('exp').put(var.get('KEY'), var.get('exec')(var.get('fn')))
        @Js
        def PyJs_anonymous_1687_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('fn')(Js(1.0))
        PyJs_anonymous_1687_._set_name('anonymous')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1687_))), Js('Object'), var.get('exp'))
    PyJs_anonymous_1684_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1684_)
PyJs_anonymous_1683_._set_name('anonymous')
PyJs_Object_1688_ = Js({'./_core':Js(144.0),'./_export':Js(151.0),'./_fails':Js(152.0)})
@Js
def PyJs_anonymous_1689_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1690_(bitmap, value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value, 'bitmap':bitmap}, var)
        var.registers(['value', 'bitmap'])
        PyJs_Object_1691_ = Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        return PyJs_Object_1691_
    PyJs_anonymous_1690_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1690_)
PyJs_anonymous_1689_._set_name('anonymous')
PyJs_Object_1692_ = Js({})
@Js
def PyJs_anonymous_1693_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'hide', 'exports', 'module'])
    var.put('hide', var.get('require')(Js('./_hide')))
    @Js
    def PyJs_anonymous_1694_(target, src, safe, this, arguments, var=var):
        var = Scope({'this':this, 'src':src, 'safe':safe, 'target':target, 'arguments':arguments}, var)
        var.registers(['src', 'safe', 'target', 'key'])
        for PyJsTemp in var.get('src'):
            var.put('key', PyJsTemp)
            if (var.get('safe') and var.get('target').get(var.get('key'))):
                var.get('target').put(var.get('key'), var.get('src').get(var.get('key')))
            else:
                var.get('hide')(var.get('target'), var.get('key'), var.get('src').get(var.get('key')))
        return var.get('target')
    PyJs_anonymous_1694_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1694_)
PyJs_anonymous_1693_._set_name('anonymous')
PyJs_Object_1695_ = Js({'./_hide':Js(156.0)})
@Js
def PyJs_anonymous_1696_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('require')(Js('./_hide')))
PyJs_anonymous_1696_._set_name('anonymous')
PyJs_Object_1697_ = Js({'./_hide':Js(156.0)})
@Js
def PyJs_anonymous_1698_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'check', 'anObject', 'isObject'])
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('anObject', var.get('require')(Js('./_an-object')))
    @Js
    def PyJs_anonymous_1699_(O, proto, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'O':O, 'proto':proto}, var)
        var.registers(['O', 'proto'])
        var.get('anObject')(var.get('O'))
        if (var.get('isObject')(var.get('proto')).neg() and PyJsStrictNeq(var.get('proto'),var.get("null"))):
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('proto')+Js(": can't set as prototype!"))))
            raise PyJsTempException
    PyJs_anonymous_1699_._set_name('anonymous')
    var.put('check', PyJs_anonymous_1699_)
    PyJs_Object_1701_ = Js({})
    @Js
    def PyJs_anonymous_1702_(test, buggy, set, this, arguments, var=var):
        var = Scope({'test':test, 'this':this, 'buggy':buggy, 'set':set, 'arguments':arguments}, var)
        var.registers(['test', 'buggy', 'set'])
        try:
            var.put('set', var.get('require')(Js('./_ctx'))(var.get('Function').get('call'), var.get('require')(Js('./_object-gopd')).callprop('f', var.get('Object').get('prototype'), Js('__proto__')).get('set'), Js(2.0)))
            var.get('set')(var.get('test'), Js([]))
            var.put('buggy', var.get('test').instanceof(var.get('Array')).neg())
        except PyJsException as PyJsTempException:
            PyJsHolder_65_30361003 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                var.put('buggy', var.get('true'))
            finally:
                if PyJsHolder_65_30361003 is not None:
                    var.own['e'] = PyJsHolder_65_30361003
                else:
                    del var.own['e']
                del PyJsHolder_65_30361003
        @Js
        def PyJs_setPrototypeOf_1703_(O, proto, this, arguments, var=var):
            var = Scope({'this':this, 'setPrototypeOf':PyJs_setPrototypeOf_1703_, 'arguments':arguments, 'O':O, 'proto':proto}, var)
            var.registers(['O', 'proto'])
            var.get('check')(var.get('O'), var.get('proto'))
            if var.get('buggy'):
                var.get('O').put('__proto__', var.get('proto'))
            else:
                var.get('set')(var.get('O'), var.get('proto'))
            return var.get('O')
        PyJs_setPrototypeOf_1703_._set_name('setPrototypeOf')
        return PyJs_setPrototypeOf_1703_
    PyJs_anonymous_1702_._set_name('anonymous')
    PyJs_Object_1704_ = Js({})
    PyJs_Object_1700_ = Js({'set':(var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_1702_(PyJs_Object_1701_, Js(False)) if PyJs_Object_1704_.contains(Js('__proto__')) else var.get('undefined'))),'check':var.get('check')})
    var.get('module').put('exports', PyJs_Object_1700_)
PyJs_anonymous_1698_._set_name('anonymous')
PyJs_Object_1705_ = Js({'./_an-object':Js(132.0),'./_ctx':Js(145.0),'./_is-object':Js(162.0),'./_object-gopd':Js(175.0)})
@Js
def PyJs_anonymous_1706_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'exports', 'DESCRIPTORS', 'require', 'global', 'module', 'SPECIES', 'dP'])
    Js('use strict')
    var.put('global', var.get('require')(Js('./_global')))
    var.put('core', var.get('require')(Js('./_core')))
    var.put('dP', var.get('require')(Js('./_object-dp')))
    var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
    var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
    @Js
    def PyJs_anonymous_1707_(KEY, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'KEY':KEY}, var)
        var.registers(['C', 'KEY'])
        var.put('C', (var.get('core').get(var.get('KEY')) if (var.get('core').get(var.get('KEY')).typeof()==Js('function')) else var.get('global').get(var.get('KEY'))))
        if ((var.get('DESCRIPTORS') and var.get('C')) and var.get('C').get(var.get('SPECIES')).neg()):
            @Js
            def PyJs_anonymous_1709_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get("this")
            PyJs_anonymous_1709_._set_name('anonymous')
            PyJs_Object_1708_ = Js({'configurable':var.get('true'),'get':PyJs_anonymous_1709_})
            var.get('dP').callprop('f', var.get('C'), var.get('SPECIES'), PyJs_Object_1708_)
    PyJs_anonymous_1707_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1707_)
PyJs_anonymous_1706_._set_name('anonymous')
PyJs_Object_1710_ = Js({'./_core':Js(144.0),'./_descriptors':Js(147.0),'./_global':Js(154.0),'./_object-dp':Js(173.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1711_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'TAG', 'has', 'def'])
    var.put('def', var.get('require')(Js('./_object-dp')).get('f'))
    var.put('has', var.get('require')(Js('./_has')))
    var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
    @Js
    def PyJs_anonymous_1712_(it, tag, stat, this, arguments, var=var):
        var = Scope({'this':this, 'stat':stat, 'tag':tag, 'it':it, 'arguments':arguments}, var)
        var.registers(['stat', 'tag', 'it'])
        if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('stat') else var.get('it').get('prototype'))), var.get('TAG')).neg()):
            PyJs_Object_1713_ = Js({'configurable':var.get('true'),'value':var.get('tag')})
            var.get('def')(var.get('it'), var.get('TAG'), PyJs_Object_1713_)
    PyJs_anonymous_1712_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1712_)
PyJs_anonymous_1711_._set_name('anonymous')
PyJs_Object_1714_ = Js({'./_has':Js(155.0),'./_object-dp':Js(173.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1715_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['shared', 'require', 'exports', 'uid', 'module'])
    var.put('shared', var.get('require')(Js('./_shared'))(Js('keys')))
    var.put('uid', var.get('require')(Js('./_uid')))
    @Js
    def PyJs_anonymous_1716_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return (var.get('shared').get(var.get('key')) or var.get('shared').put(var.get('key'), var.get('uid')(var.get('key'))))
    PyJs_anonymous_1716_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1716_)
PyJs_anonymous_1715_._set_name('anonymous')
PyJs_Object_1717_ = Js({'./_shared':Js(191.0),'./_uid':Js(199.0)})
@Js
def PyJs_anonymous_1718_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'global', 'module', 'SHARED', 'store'])
    var.put('global', var.get('require')(Js('./_global')))
    var.put('SHARED', Js('__core-js_shared__'))
    PyJs_Object_1719_ = Js({})
    var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('global').put(var.get('SHARED'), PyJs_Object_1719_)))
    @Js
    def PyJs_anonymous_1720_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        PyJs_Object_1721_ = Js({})
        return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), PyJs_Object_1721_))
    PyJs_anonymous_1720_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1720_)
PyJs_anonymous_1718_._set_name('anonymous')
PyJs_Object_1722_ = Js({'./_global':Js(154.0)})
@Js
def PyJs_anonymous_1723_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['defined', 'toInteger', 'exports', 'require', 'module'])
    var.put('toInteger', var.get('require')(Js('./_to-integer')))
    var.put('defined', var.get('require')(Js('./_defined')))
    @Js
    def PyJs_anonymous_1724_(TO_STRING, this, arguments, var=var):
        var = Scope({'TO_STRING':TO_STRING, 'this':this, 'arguments':arguments}, var)
        var.registers(['TO_STRING'])
        @Js
        def PyJs_anonymous_1725_(that, pos, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'pos':pos, 'that':that}, var)
            var.registers(['a', 'b', 'that', 'i', 'l', 'pos', 's'])
            var.put('s', var.get('String')(var.get('defined')(var.get('that'))))
            var.put('i', var.get('toInteger')(var.get('pos')))
            var.put('l', var.get('s').get('length'))
            if ((var.get('i')<Js(0.0)) or (var.get('i')>=var.get('l'))):
                return (Js('') if var.get('TO_STRING') else var.get('undefined'))
            var.put('a', var.get('s').callprop('charCodeAt', var.get('i')))
            def PyJs_LONG_1726_(var=var):
                return ((var.get('s').callprop('charAt', var.get('i')) if var.get('TO_STRING') else var.get('a')) if (((((var.get('a')<Js(55296)) or (var.get('a')>Js(56319))) or PyJsStrictEq((var.get('i')+Js(1.0)),var.get('l'))) or (var.put('b', var.get('s').callprop('charCodeAt', (var.get('i')+Js(1.0))))<Js(56320))) or (var.get('b')>Js(57343))) else (var.get('s').callprop('slice', var.get('i'), (var.get('i')+Js(2.0))) if var.get('TO_STRING') else ((((var.get('a')-Js(55296))<<Js(10.0))+(var.get('b')-Js(56320)))+Js(65536))))
            return PyJs_LONG_1726_()
        PyJs_anonymous_1725_._set_name('anonymous')
        return PyJs_anonymous_1725_
    PyJs_anonymous_1724_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1724_)
PyJs_anonymous_1723_._set_name('anonymous')
PyJs_Object_1727_ = Js({'./_defined':Js(146.0),'./_to-integer':Js(194.0)})
@Js
def PyJs_anonymous_1728_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'min', 'max', 'toInteger', 'module', 'require'])
    var.put('toInteger', var.get('require')(Js('./_to-integer')))
    var.put('max', var.get('Math').get('max'))
    var.put('min', var.get('Math').get('min'))
    @Js
    def PyJs_anonymous_1729_(index, length, this, arguments, var=var):
        var = Scope({'this':this, 'index':index, 'length':length, 'arguments':arguments}, var)
        var.registers(['index', 'length'])
        var.put('index', var.get('toInteger')(var.get('index')))
        return (var.get('max')((var.get('index')+var.get('length')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('min')(var.get('index'), var.get('length')))
    PyJs_anonymous_1729_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1729_)
PyJs_anonymous_1728_._set_name('anonymous')
PyJs_Object_1730_ = Js({'./_to-integer':Js(194.0)})
@Js
def PyJs_anonymous_1731_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'floor', 'exports', 'module', 'ceil'])
    var.put('ceil', var.get('Math').get('ceil'))
    var.put('floor', var.get('Math').get('floor'))
    @Js
    def PyJs_anonymous_1732_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (Js(0.0) if var.get('isNaN')(var.put('it', (+var.get('it')))) else (var.get('floor') if (var.get('it')>Js(0.0)) else var.get('ceil'))(var.get('it')))
    PyJs_anonymous_1732_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1732_)
PyJs_anonymous_1731_._set_name('anonymous')
PyJs_Object_1733_ = Js({})
@Js
def PyJs_anonymous_1734_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['defined', 'require', 'exports', 'module', 'IObject'])
    var.put('IObject', var.get('require')(Js('./_iobject')))
    var.put('defined', var.get('require')(Js('./_defined')))
    @Js
    def PyJs_anonymous_1735_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return var.get('IObject')(var.get('defined')(var.get('it')))
    PyJs_anonymous_1735_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1735_)
PyJs_anonymous_1734_._set_name('anonymous')
PyJs_Object_1736_ = Js({'./_defined':Js(146.0),'./_iobject':Js(159.0)})
@Js
def PyJs_anonymous_1737_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['toInteger', 'exports', 'require', 'module', 'min'])
    var.put('toInteger', var.get('require')(Js('./_to-integer')))
    var.put('min', var.get('Math').get('min'))
    @Js
    def PyJs_anonymous_1738_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (var.get('min')(var.get('toInteger')(var.get('it')), Js(9007199254740991)) if (var.get('it')>Js(0.0)) else Js(0.0))
    PyJs_anonymous_1738_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1738_)
PyJs_anonymous_1737_._set_name('anonymous')
PyJs_Object_1739_ = Js({'./_to-integer':Js(194.0)})
@Js
def PyJs_anonymous_1740_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['defined', 'require', 'exports', 'module'])
    var.put('defined', var.get('require')(Js('./_defined')))
    @Js
    def PyJs_anonymous_1741_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return var.get('Object')(var.get('defined')(var.get('it')))
    PyJs_anonymous_1741_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1741_)
PyJs_anonymous_1740_._set_name('anonymous')
PyJs_Object_1742_ = Js({'./_defined':Js(146.0)})
@Js
def PyJs_anonymous_1743_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'isObject', 'module'])
    var.put('isObject', var.get('require')(Js('./_is-object')))
    @Js
    def PyJs_anonymous_1744_(it, S, this, arguments, var=var):
        var = Scope({'this':this, 'S':S, 'it':it, 'arguments':arguments}, var)
        var.registers(['S', 'val', 'fn', 'it'])
        if var.get('isObject')(var.get('it')).neg():
            return var.get('it')
        pass
        if ((var.get('S') and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
            return var.get('val')
        if ((var.put('fn', var.get('it').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
            return var.get('val')
        if ((var.get('S').neg() and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
            return var.get('val')
        PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
        raise PyJsTempException
    PyJs_anonymous_1744_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1744_)
PyJs_anonymous_1743_._set_name('anonymous')
PyJs_Object_1745_ = Js({'./_is-object':Js(162.0)})
@Js
def PyJs_anonymous_1746_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'px', 'require', 'id', 'module'])
    var.put('id', Js(0.0))
    var.put('px', var.get('Math').callprop('random'))
    @Js
    def PyJs_anonymous_1747_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return Js('Symbol(').callprop('concat', (Js('') if PyJsStrictEq(var.get('key'),var.get('undefined')) else var.get('key')), Js(')_'), (var.put('id',Js(var.get('id').to_number())+Js(1))+var.get('px')).callprop('toString', Js(36.0)))
    PyJs_anonymous_1747_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1747_)
PyJs_anonymous_1746_._set_name('anonymous')
PyJs_Object_1748_ = Js({})
@Js
def PyJs_anonymous_1749_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['core', 'exports', 'wksExt', 'require', 'global', 'LIBRARY', 'module', 'defineProperty'])
    var.put('global', var.get('require')(Js('./_global')))
    var.put('core', var.get('require')(Js('./_core')))
    var.put('LIBRARY', var.get('require')(Js('./_library')))
    var.put('wksExt', var.get('require')(Js('./_wks-ext')))
    var.put('defineProperty', var.get('require')(Js('./_object-dp')).get('f'))
    @Js
    def PyJs_anonymous_1750_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name', '$Symbol'])
        PyJs_Object_1751_ = Js({})
        PyJs_Object_1752_ = Js({})
        var.put('$Symbol', (var.get('core').get('Symbol') or var.get('core').put('Symbol', (PyJs_Object_1751_ if var.get('LIBRARY') else (var.get('global').get('Symbol') or PyJs_Object_1752_)))))
        if ((var.get('name').callprop('charAt', Js(0.0))!=Js('_')) and var.get('$Symbol').contains(var.get('name')).neg()):
            PyJs_Object_1753_ = Js({'value':var.get('wksExt').callprop('f', var.get('name'))})
            var.get('defineProperty')(var.get('$Symbol'), var.get('name'), PyJs_Object_1753_)
    PyJs_anonymous_1750_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_1750_)
PyJs_anonymous_1749_._set_name('anonymous')
PyJs_Object_1754_ = Js({'./_core':Js(144.0),'./_global':Js(154.0),'./_library':Js(169.0),'./_object-dp':Js(173.0),'./_wks-ext':Js(201.0)})
@Js
def PyJs_anonymous_1755_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('exports').put('f', var.get('require')(Js('./_wks')))
PyJs_anonymous_1755_._set_name('anonymous')
PyJs_Object_1756_ = Js({'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1757_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'uid', 'Symbol', 'module', '$exports', 'require', 'store', 'USE_SYMBOL'])
    var.put('store', var.get('require')(Js('./_shared'))(Js('wks')))
    var.put('uid', var.get('require')(Js('./_uid')))
    var.put('Symbol', var.get('require')(Js('./_global')).get('Symbol'))
    var.put('USE_SYMBOL', (var.get('Symbol',throw=False).typeof()==Js('function')))
    @Js
    def PyJs_anonymous_1758_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return (var.get('store').get(var.get('name')) or var.get('store').put(var.get('name'), ((var.get('USE_SYMBOL') and var.get('Symbol').get(var.get('name'))) or (var.get('Symbol') if var.get('USE_SYMBOL') else var.get('uid'))((Js('Symbol.')+var.get('name'))))))
    PyJs_anonymous_1758_._set_name('anonymous')
    var.put('$exports', var.get('module').put('exports', PyJs_anonymous_1758_))
    var.get('$exports').put('store', var.get('store'))
PyJs_anonymous_1757_._set_name('anonymous')
PyJs_Object_1759_ = Js({'./_global':Js(154.0),'./_shared':Js(191.0),'./_uid':Js(199.0)})
@Js
def PyJs_anonymous_1760_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'ITERATOR', 'require', 'module', 'Iterators', 'classof'])
    var.put('classof', var.get('require')(Js('./_classof')))
    var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
    var.put('Iterators', var.get('require')(Js('./_iterators')))
    @Js
    def PyJs_anonymous_1761_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        if (var.get('it')!=var.get('undefined')):
            return ((var.get('it').get(var.get('ITERATOR')) or var.get('it').get('@@iterator')) or var.get('Iterators').get(var.get('classof')(var.get('it'))))
    PyJs_anonymous_1761_._set_name('anonymous')
    var.get('module').put('exports', var.get('require')(Js('./_core')).put('getIteratorMethod', PyJs_anonymous_1761_))
PyJs_anonymous_1760_._set_name('anonymous')
PyJs_Object_1762_ = Js({'./_classof':Js(138.0),'./_core':Js(144.0),'./_iterators':Js(167.0),'./_wks':Js(202.0)})
@Js
def PyJs_anonymous_1763_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'anObject', 'exports', 'module', 'get'])
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('get', var.get('require')(Js('./core.get-iterator-method')))
    @Js
    def PyJs_anonymous_1764_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['iterFn', 'it'])
        var.put('iterFn', var.get('get')(var.get('it')))
        if (var.get('iterFn',throw=False).typeof()!=Js('function')):
            PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not iterable!'))))
            raise PyJsTempException
        return var.get('anObject')(var.get('iterFn').callprop('call', var.get('it')))
    PyJs_anonymous_1764_._set_name('anonymous')
    var.get('module').put('exports', var.get('require')(Js('./_core')).put('getIterator', PyJs_anonymous_1764_))
PyJs_anonymous_1763_._set_name('anonymous')
PyJs_Object_1765_ = Js({'./_an-object':Js(132.0),'./_core':Js(144.0),'./core.get-iterator-method':Js(203.0)})
@Js
def PyJs_anonymous_1766_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'addToUnscopables', 'Iterators', 'step', 'toIObject'])
    Js('use strict')
    var.put('addToUnscopables', var.get('require')(Js('./_add-to-unscopables')))
    var.put('step', var.get('require')(Js('./_iter-step')))
    var.put('Iterators', var.get('require')(Js('./_iterators')))
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    @Js
    def PyJs_anonymous_1767_(iterated, kind, this, arguments, var=var):
        var = Scope({'this':this, 'kind':kind, 'arguments':arguments, 'iterated':iterated}, var)
        var.registers(['kind', 'iterated'])
        var.get("this").put('_t', var.get('toIObject')(var.get('iterated')))
        var.get("this").put('_i', Js(0.0))
        var.get("this").put('_k', var.get('kind'))
    PyJs_anonymous_1767_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1768_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['index', 'kind', 'O'])
        var.put('O', var.get("this").get('_t'))
        var.put('kind', var.get("this").get('_k'))
        var.put('index', (var.get("this").put('_i',Js(var.get("this").get('_i').to_number())+Js(1))-Js(1)))
        if (var.get('O').neg() or (var.get('index')>=var.get('O').get('length'))):
            var.get("this").put('_t', var.get('undefined'))
            return var.get('step')(Js(1.0))
        if (var.get('kind')==Js('keys')):
            return var.get('step')(Js(0.0), var.get('index'))
        if (var.get('kind')==Js('values')):
            return var.get('step')(Js(0.0), var.get('O').get(var.get('index')))
        return var.get('step')(Js(0.0), Js([var.get('index'), var.get('O').get(var.get('index'))]))
    PyJs_anonymous_1768_._set_name('anonymous')
    var.get('module').put('exports', var.get('require')(Js('./_iter-define'))(var.get('Array'), Js('Array'), PyJs_anonymous_1767_, PyJs_anonymous_1768_, Js('values')))
    var.get('Iterators').put('Arguments', var.get('Iterators').get('Array'))
    var.get('addToUnscopables')(Js('keys'))
    var.get('addToUnscopables')(Js('values'))
    var.get('addToUnscopables')(Js('entries'))
PyJs_anonymous_1766_._set_name('anonymous')
PyJs_Object_1769_ = Js({'./_add-to-unscopables':Js(130.0),'./_iter-define':Js(165.0),'./_iter-step':Js(166.0),'./_iterators':Js(167.0),'./_to-iobject':Js(195.0)})
@Js
def PyJs_anonymous_1770_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'strong', 'exports', 'module'])
    Js('use strict')
    var.put('strong', var.get('require')(Js('./_collection-strong')))
    @Js
    def PyJs_anonymous_1771_(get, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':get}, var)
        var.registers(['get'])
        @Js
        def PyJs_Map_1772_(this, arguments, var=var):
            var = Scope({'this':this, 'Map':PyJs_Map_1772_, 'arguments':arguments}, var)
            var.registers([])
            return var.get('get')(var.get("this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
        PyJs_Map_1772_._set_name('Map')
        return PyJs_Map_1772_
    PyJs_anonymous_1771_._set_name('anonymous')
    @Js
    def PyJs_get_1774_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key, 'get':PyJs_get_1774_}, var)
        var.registers(['entry', 'key'])
        var.put('entry', var.get('strong').callprop('getEntry', var.get("this"), var.get('key')))
        return (var.get('entry') and var.get('entry').get('v'))
    PyJs_get_1774_._set_name('get')
    @Js
    def PyJs_set_1775_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'set':PyJs_set_1775_, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'key'])
        return var.get('strong').callprop('def', var.get("this"), (Js(0.0) if PyJsStrictEq(var.get('key'),Js(0.0)) else var.get('key')), var.get('value'))
    PyJs_set_1775_._set_name('set')
    PyJs_Object_1773_ = Js({'get':PyJs_get_1774_,'set':PyJs_set_1775_})
    var.get('module').put('exports', var.get('require')(Js('./_collection'))(Js('Map'), PyJs_anonymous_1771_, PyJs_Object_1773_, var.get('strong'), var.get('true')))
PyJs_anonymous_1770_._set_name('anonymous')
PyJs_Object_1776_ = Js({'./_collection':Js(143.0),'./_collection-strong':Js(140.0)})
@Js
def PyJs_anonymous_1777_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    PyJs_Object_1778_ = Js({'MAX_SAFE_INTEGER':Js(9007199254740991)})
    var.get('$export')(var.get('$export').get('S'), Js('Number'), PyJs_Object_1778_)
PyJs_anonymous_1777_._set_name('anonymous')
PyJs_Object_1779_ = Js({'./_export':Js(151.0)})
@Js
def PyJs_anonymous_1780_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    PyJs_Object_1781_ = Js({'assign':var.get('require')(Js('./_object-assign'))})
    var.get('$export')((var.get('$export').get('S')+var.get('$export').get('F')), Js('Object'), PyJs_Object_1781_)
PyJs_anonymous_1780_._set_name('anonymous')
PyJs_Object_1782_ = Js({'./_export':Js(151.0),'./_object-assign':Js(171.0)})
@Js
def PyJs_anonymous_1783_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    PyJs_Object_1784_ = Js({'create':var.get('require')(Js('./_object-create'))})
    var.get('$export')(var.get('$export').get('S'), Js('Object'), PyJs_Object_1784_)
PyJs_anonymous_1783_._set_name('anonymous')
PyJs_Object_1785_ = Js({'./_export':Js(151.0),'./_object-create':Js(172.0)})
@Js
def PyJs_anonymous_1786_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'toObject', 'require', '$keys', 'module'])
    var.put('toObject', var.get('require')(Js('./_to-object')))
    var.put('$keys', var.get('require')(Js('./_object-keys')))
    @Js
    def PyJs_anonymous_1787_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_keys_1788_(it, this, arguments, var=var):
            var = Scope({'this':this, 'keys':PyJs_keys_1788_, 'it':it, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('$keys')(var.get('toObject')(var.get('it')))
        PyJs_keys_1788_._set_name('keys')
        return PyJs_keys_1788_
    PyJs_anonymous_1787_._set_name('anonymous')
    var.get('require')(Js('./_object-sap'))(Js('keys'), PyJs_anonymous_1787_)
PyJs_anonymous_1786_._set_name('anonymous')
PyJs_Object_1789_ = Js({'./_object-keys':Js(181.0),'./_object-sap':Js(183.0),'./_to-object':Js(197.0)})
@Js
def PyJs_anonymous_1790_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    PyJs_Object_1791_ = Js({'setPrototypeOf':var.get('require')(Js('./_set-proto')).get('set')})
    var.get('$export')(var.get('$export').get('S'), Js('Object'), PyJs_Object_1791_)
PyJs_anonymous_1790_._set_name('anonymous')
PyJs_Object_1792_ = Js({'./_export':Js(151.0),'./_set-proto':Js(187.0)})
@Js
def PyJs_anonymous_1793_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    pass
PyJs_anonymous_1793_._set_name('anonymous')
PyJs_Object_1794_ = Js({})
@Js
def PyJs_anonymous_1795_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$at', 'require', 'exports', 'module'])
    Js('use strict')
    var.put('$at', var.get('require')(Js('./_string-at'))(var.get('true')))
    @Js
    def PyJs_anonymous_1796_(iterated, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'iterated':iterated}, var)
        var.registers(['iterated'])
        var.get("this").put('_t', var.get('String')(var.get('iterated')))
        var.get("this").put('_i', Js(0.0))
    PyJs_anonymous_1796_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1797_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['index', 'O', 'point'])
        var.put('O', var.get("this").get('_t'))
        var.put('index', var.get("this").get('_i'))
        if (var.get('index')>=var.get('O').get('length')):
            PyJs_Object_1798_ = Js({'value':var.get('undefined'),'done':var.get('true')})
            return PyJs_Object_1798_
        var.put('point', var.get('$at')(var.get('O'), var.get('index')))
        var.get("this").put('_i', var.get('point').get('length'), '+')
        PyJs_Object_1799_ = Js({'value':var.get('point'),'done':Js(False)})
        return PyJs_Object_1799_
    PyJs_anonymous_1797_._set_name('anonymous')
    var.get('require')(Js('./_iter-define'))(var.get('String'), Js('String'), PyJs_anonymous_1796_, PyJs_anonymous_1797_)
PyJs_anonymous_1795_._set_name('anonymous')
PyJs_Object_1800_ = Js({'./_iter-define':Js(165.0),'./_string-at':Js(192.0)})
@Js
def PyJs_anonymous_1801_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', 'redefine', 'uid', 'setter', 'global', '$keys', '$create', '$JSON', '$getOwnPropertySymbols', 'META', 'toIObject', '$defineProperty', 'wrap', 'wks', 'PROTOTYPE', '$propertyIsEnumerable', 'ObjectProto', 'OPSymbols', '$export', 'gOPNExt', '$DP', 'toPrimitive', '$GOPD', 'gOPN', 'isEnum', 'keyOf', 'shared', 'gOPD', 'has', 'isArray', 'exports', 'wksExt', '$fails', 'TO_PRIMITIVE', 'setToStringTag', 'enumKeys', 'SymbolRegistry', '$defineProperties', 'anObject', 'module', '$getOwnPropertyDescriptor', 'AllSymbols', 'USE_NATIVE', 'symbols', 'setSymbolDesc', 'i', 'DESCRIPTORS', 'require', '$getOwnPropertyNames', '$Symbol', '_stringify', 'wksDefine', 'HIDDEN', 'isSymbol', 'createDesc', 'dP', 'QObject'])
    Js('use strict')
    var.put('global', var.get('require')(Js('./_global')))
    var.put('has', var.get('require')(Js('./_has')))
    var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
    var.put('$export', var.get('require')(Js('./_export')))
    var.put('redefine', var.get('require')(Js('./_redefine')))
    var.put('META', var.get('require')(Js('./_meta')).get('KEY'))
    var.put('$fails', var.get('require')(Js('./_fails')))
    var.put('shared', var.get('require')(Js('./_shared')))
    var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
    var.put('uid', var.get('require')(Js('./_uid')))
    var.put('wks', var.get('require')(Js('./_wks')))
    var.put('wksExt', var.get('require')(Js('./_wks-ext')))
    var.put('wksDefine', var.get('require')(Js('./_wks-define')))
    var.put('keyOf', var.get('require')(Js('./_keyof')))
    var.put('enumKeys', var.get('require')(Js('./_enum-keys')))
    var.put('isArray', var.get('require')(Js('./_is-array')))
    var.put('anObject', var.get('require')(Js('./_an-object')))
    var.put('toIObject', var.get('require')(Js('./_to-iobject')))
    var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
    var.put('createDesc', var.get('require')(Js('./_property-desc')))
    var.put('_create', var.get('require')(Js('./_object-create')))
    var.put('gOPNExt', var.get('require')(Js('./_object-gopn-ext')))
    var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
    var.put('$DP', var.get('require')(Js('./_object-dp')))
    var.put('$keys', var.get('require')(Js('./_object-keys')))
    var.put('gOPD', var.get('$GOPD').get('f'))
    var.put('dP', var.get('$DP').get('f'))
    var.put('gOPN', var.get('gOPNExt').get('f'))
    var.put('$Symbol', var.get('global').get('Symbol'))
    var.put('$JSON', var.get('global').get('JSON'))
    var.put('_stringify', (var.get('$JSON') and var.get('$JSON').get('stringify')))
    var.put('PROTOTYPE', Js('prototype'))
    var.put('HIDDEN', var.get('wks')(Js('_hidden')))
    var.put('TO_PRIMITIVE', var.get('wks')(Js('toPrimitive')))
    PyJs_Object_1802_ = Js({})
    var.put('isEnum', PyJs_Object_1802_.get('propertyIsEnumerable'))
    var.put('SymbolRegistry', var.get('shared')(Js('symbol-registry')))
    var.put('AllSymbols', var.get('shared')(Js('symbols')))
    var.put('OPSymbols', var.get('shared')(Js('op-symbols')))
    var.put('ObjectProto', var.get('Object').get(var.get('PROTOTYPE')))
    var.put('USE_NATIVE', (var.get('$Symbol',throw=False).typeof()==Js('function')))
    var.put('QObject', var.get('global').get('QObject'))
    var.put('setter', ((var.get('QObject').neg() or var.get('QObject').get(var.get('PROTOTYPE')).neg()) or var.get('QObject').get(var.get('PROTOTYPE')).get('findChild').neg()))
    @Js
    def PyJs_anonymous_1803_(it, key, D, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'it':it, 'key':key, 'D':D}, var)
        var.registers(['protoDesc', 'it', 'key', 'D'])
        var.put('protoDesc', var.get('gOPD')(var.get('ObjectProto'), var.get('key')))
        if var.get('protoDesc'):
            var.get('ObjectProto').delete(var.get('key'))
        var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
        if (var.get('protoDesc') and PyJsStrictNeq(var.get('it'),var.get('ObjectProto'))):
            var.get('dP')(var.get('ObjectProto'), var.get('key'), var.get('protoDesc'))
    PyJs_anonymous_1803_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1804_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_1805_ = Js({})
        @Js
        def PyJs_anonymous_1807_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_1808_ = Js({'value':Js(7.0)})
            return var.get('dP')(var.get("this"), Js('a'), PyJs_Object_1808_).get('a')
        PyJs_anonymous_1807_._set_name('anonymous')
        PyJs_Object_1806_ = Js({'get':PyJs_anonymous_1807_})
        return (var.get('_create')(var.get('dP')(PyJs_Object_1805_, Js('a'), PyJs_Object_1806_)).get('a')!=Js(7.0))
    PyJs_anonymous_1804_._set_name('anonymous')
    var.put('setSymbolDesc', (PyJs_anonymous_1803_ if (var.get('DESCRIPTORS') and var.get('$fails')(PyJs_anonymous_1804_)) else var.get('dP')))
    @Js
    def PyJs_anonymous_1809_(tag, this, arguments, var=var):
        var = Scope({'this':this, 'tag':tag, 'arguments':arguments}, var)
        var.registers(['tag', 'sym'])
        var.put('sym', var.get('AllSymbols').put(var.get('tag'), var.get('_create')(var.get('$Symbol').get(var.get('PROTOTYPE')))))
        var.get('sym').put('_k', var.get('tag'))
        return var.get('sym')
    PyJs_anonymous_1809_._set_name('anonymous')
    var.put('wrap', PyJs_anonymous_1809_)
    @Js
    def PyJs_anonymous_1810_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return (var.get('it',throw=False).typeof()==Js('symbol'))
    PyJs_anonymous_1810_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1811_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'arguments':arguments}, var)
        var.registers(['it'])
        return var.get('it').instanceof(var.get('$Symbol'))
    PyJs_anonymous_1811_._set_name('anonymous')
    var.put('isSymbol', (PyJs_anonymous_1810_ if (var.get('USE_NATIVE') and (var.get('$Symbol').get('iterator').typeof()==Js('symbol'))) else PyJs_anonymous_1811_))
    @Js
    def PyJs_defineProperty_1812_(it, key, D, this, arguments, var=var):
        var = Scope({'D':D, 'this':this, 'it':it, 'arguments':arguments, 'key':key, 'defineProperty':PyJs_defineProperty_1812_}, var)
        var.registers(['it', 'key', 'D'])
        if PyJsStrictEq(var.get('it'),var.get('ObjectProto')):
            var.get('$defineProperty')(var.get('OPSymbols'), var.get('key'), var.get('D'))
        var.get('anObject')(var.get('it'))
        var.put('key', var.get('toPrimitive')(var.get('key'), var.get('true')))
        var.get('anObject')(var.get('D'))
        if var.get('has')(var.get('AllSymbols'), var.get('key')):
            if var.get('D').get('enumerable').neg():
                if var.get('has')(var.get('it'), var.get('HIDDEN')).neg():
                    PyJs_Object_1813_ = Js({})
                    var.get('dP')(var.get('it'), var.get('HIDDEN'), var.get('createDesc')(Js(1.0), PyJs_Object_1813_))
                var.get('it').get(var.get('HIDDEN')).put(var.get('key'), var.get('true'))
            else:
                if (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))):
                    var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(False))
                PyJs_Object_1814_ = Js({'enumerable':var.get('createDesc')(Js(0.0), Js(False))})
                var.put('D', var.get('_create')(var.get('D'), PyJs_Object_1814_))
            return var.get('setSymbolDesc')(var.get('it'), var.get('key'), var.get('D'))
        return var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
    PyJs_defineProperty_1812_._set_name('defineProperty')
    var.put('$defineProperty', PyJs_defineProperty_1812_)
    @Js
    def PyJs_defineProperties_1815_(it, P, this, arguments, var=var):
        var = Scope({'this':this, 'P':P, 'it':it, 'defineProperties':PyJs_defineProperties_1815_, 'arguments':arguments}, var)
        var.registers(['P', 'keys', 'l', 'it', 'i', 'key'])
        var.get('anObject')(var.get('it'))
        var.put('keys', var.get('enumKeys')(var.put('P', var.get('toIObject')(var.get('P')))))
        var.put('i', Js(0.0))
        var.put('l', var.get('keys').get('length'))
        while (var.get('l')>var.get('i')):
            var.get('$defineProperty')(var.get('it'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('P').get(var.get('key')))
        return var.get('it')
    PyJs_defineProperties_1815_._set_name('defineProperties')
    var.put('$defineProperties', PyJs_defineProperties_1815_)
    @Js
    def PyJs_create_1816_(it, P, this, arguments, var=var):
        var = Scope({'this':this, 'P':P, 'create':PyJs_create_1816_, 'it':it, 'arguments':arguments}, var)
        var.registers(['P', 'it'])
        return (var.get('_create')(var.get('it')) if PyJsStrictEq(var.get('P'),var.get('undefined')) else var.get('$defineProperties')(var.get('_create')(var.get('it')), var.get('P')))
    PyJs_create_1816_._set_name('create')
    var.put('$create', PyJs_create_1816_)
    @Js
    def PyJs_propertyIsEnumerable_1817_(key, this, arguments, var=var):
        var = Scope({'this':this, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_1817_, 'arguments':arguments, 'key':key}, var)
        var.registers(['E', 'key'])
        var.put('E', var.get('isEnum').callprop('call', var.get("this"), var.put('key', var.get('toPrimitive')(var.get('key'), var.get('true')))))
        if ((PyJsStrictEq(var.get("this"),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
            return Js(False)
        return (var.get('E') if (((var.get('E') or var.get('has')(var.get("this"), var.get('key')).neg()) or var.get('has')(var.get('AllSymbols'), var.get('key')).neg()) or (var.get('has')(var.get("this"), var.get('HIDDEN')) and var.get("this").get(var.get('HIDDEN')).get(var.get('key')))) else var.get('true'))
    PyJs_propertyIsEnumerable_1817_._set_name('propertyIsEnumerable')
    var.put('$propertyIsEnumerable', PyJs_propertyIsEnumerable_1817_)
    @Js
    def PyJs_getOwnPropertyDescriptor_1818_(it, key, this, arguments, var=var):
        var = Scope({'this':this, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1818_, 'it':it, 'key':key, 'arguments':arguments}, var)
        var.registers(['D', 'key', 'it'])
        var.put('it', var.get('toIObject')(var.get('it')))
        var.put('key', var.get('toPrimitive')(var.get('key'), var.get('true')))
        if ((PyJsStrictEq(var.get('it'),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
            return var.get('undefined')
        var.put('D', var.get('gOPD')(var.get('it'), var.get('key')))
        if ((var.get('D') and var.get('has')(var.get('AllSymbols'), var.get('key'))) and (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))).neg()):
            var.get('D').put('enumerable', var.get('true'))
        return var.get('D')
    PyJs_getOwnPropertyDescriptor_1818_._set_name('getOwnPropertyDescriptor')
    var.put('$getOwnPropertyDescriptor', PyJs_getOwnPropertyDescriptor_1818_)
    @Js
    def PyJs_getOwnPropertyNames_1819_(it, this, arguments, var=var):
        var = Scope({'this':this, 'it':it, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1819_, 'arguments':arguments}, var)
        var.registers(['i', 'it', 'names', 'key', 'result'])
        var.put('names', var.get('gOPN')(var.get('toIObject')(var.get('it'))))
        var.put('result', Js([]))
        var.put('i', Js(0.0))
        while (var.get('names').get('length')>var.get('i')):
            if ((var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))).neg() and (var.get('key')!=var.get('HIDDEN'))) and (var.get('key')!=var.get('META'))):
                var.get('result').callprop('push', var.get('key'))
        return var.get('result')
    PyJs_getOwnPropertyNames_1819_._set_name('getOwnPropertyNames')
    var.put('$getOwnPropertyNames', PyJs_getOwnPropertyNames_1819_)
    @Js
    def PyJs_getOwnPropertySymbols_1820_(it, this, arguments, var=var):
        var = Scope({'this':this, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1820_, 'it':it, 'arguments':arguments}, var)
        var.registers(['i', 'it', 'names', 'key', 'IS_OP', 'result'])
        var.put('IS_OP', PyJsStrictEq(var.get('it'),var.get('ObjectProto')))
        var.put('names', var.get('gOPN')((var.get('OPSymbols') if var.get('IS_OP') else var.get('toIObject')(var.get('it')))))
        var.put('result', Js([]))
        var.put('i', Js(0.0))
        while (var.get('names').get('length')>var.get('i')):
            if (var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))) and (var.get('has')(var.get('ObjectProto'), var.get('key')) if var.get('IS_OP') else var.get('true'))):
                var.get('result').callprop('push', var.get('AllSymbols').get(var.get('key')))
        return var.get('result')
    PyJs_getOwnPropertySymbols_1820_._set_name('getOwnPropertySymbols')
    var.put('$getOwnPropertySymbols', PyJs_getOwnPropertySymbols_1820_)
    if var.get('USE_NATIVE').neg():
        @Js
        def PyJs_Symbol_1821_(this, arguments, var=var):
            var = Scope({'this':this, 'Symbol':PyJs_Symbol_1821_, 'arguments':arguments}, var)
            var.registers(['$set', 'tag'])
            if var.get("this").instanceof(var.get('$Symbol')):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Symbol is not a constructor!')))
                raise PyJsTempException
            var.put('tag', var.get('uid')((var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined'))))
            @Js
            def PyJs_anonymous_1822_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                if PyJsStrictEq(var.get("this"),var.get('ObjectProto')):
                    var.get('$set').callprop('call', var.get('OPSymbols'), var.get('value'))
                if (var.get('has')(var.get("this"), var.get('HIDDEN')) and var.get('has')(var.get("this").get(var.get('HIDDEN')), var.get('tag'))):
                    var.get("this").get(var.get('HIDDEN')).put(var.get('tag'), Js(False))
                var.get('setSymbolDesc')(var.get("this"), var.get('tag'), var.get('createDesc')(Js(1.0), var.get('value')))
            PyJs_anonymous_1822_._set_name('anonymous')
            var.put('$set', PyJs_anonymous_1822_)
            if (var.get('DESCRIPTORS') and var.get('setter')):
                PyJs_Object_1823_ = Js({'configurable':var.get('true'),'set':var.get('$set')})
                var.get('setSymbolDesc')(var.get('ObjectProto'), var.get('tag'), PyJs_Object_1823_)
            return var.get('wrap')(var.get('tag'))
        PyJs_Symbol_1821_._set_name('Symbol')
        var.put('$Symbol', PyJs_Symbol_1821_)
        @Js
        def PyJs_toString_1824_(this, arguments, var=var):
            var = Scope({'this':this, 'toString':PyJs_toString_1824_, 'arguments':arguments}, var)
            var.registers([])
            return var.get("this").get('_k')
        PyJs_toString_1824_._set_name('toString')
        var.get('redefine')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('toString'), PyJs_toString_1824_)
        var.get('$GOPD').put('f', var.get('$getOwnPropertyDescriptor'))
        var.get('$DP').put('f', var.get('$defineProperty'))
        var.get('require')(Js('./_object-gopn')).put('f', var.get('gOPNExt').put('f', var.get('$getOwnPropertyNames')))
        var.get('require')(Js('./_object-pie')).put('f', var.get('$propertyIsEnumerable'))
        var.get('require')(Js('./_object-gops')).put('f', var.get('$getOwnPropertySymbols'))
        if (var.get('DESCRIPTORS') and var.get('require')(Js('./_library')).neg()):
            var.get('redefine')(var.get('ObjectProto'), Js('propertyIsEnumerable'), var.get('$propertyIsEnumerable'), var.get('true'))
        @Js
        def PyJs_anonymous_1825_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            return var.get('wrap')(var.get('wks')(var.get('name')))
        PyJs_anonymous_1825_._set_name('anonymous')
        var.get('wksExt').put('f', PyJs_anonymous_1825_)
    PyJs_Object_1826_ = Js({'Symbol':var.get('$Symbol')})
    var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), PyJs_Object_1826_)
    #for JS loop
    var.put('symbols', Js('hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').callprop('split', Js(',')))
    var.put('i', Js(0.0))
    while (var.get('symbols').get('length')>var.get('i')):
        var.get('wks')(var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
    
    #for JS loop
    var.put('symbols', var.get('$keys')(var.get('wks').get('store')))
    var.put('i', Js(0.0))
    while (var.get('symbols').get('length')>var.get('i')):
        var.get('wksDefine')(var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
    
    @Js
    def PyJs_anonymous_1828_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return (var.get('SymbolRegistry').get(var.get('key')) if var.get('has')(var.get('SymbolRegistry'), var.put('key', Js(''), '+')) else var.get('SymbolRegistry').put(var.get('key'), var.get('$Symbol')(var.get('key'))))
    PyJs_anonymous_1828_._set_name('anonymous')
    @Js
    def PyJs_keyFor_1829_(key, this, arguments, var=var):
        var = Scope({'this':this, 'keyFor':PyJs_keyFor_1829_, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        if var.get('isSymbol')(var.get('key')):
            return var.get('keyOf')(var.get('SymbolRegistry'), var.get('key'))
        PyJsTempException = JsToPyException(var.get('TypeError')((var.get('key')+Js(' is not a symbol!'))))
        raise PyJsTempException
    PyJs_keyFor_1829_._set_name('keyFor')
    @Js
    def PyJs_anonymous_1830_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.put('setter', var.get('true'))
    PyJs_anonymous_1830_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1831_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.put('setter', Js(False))
    PyJs_anonymous_1831_._set_name('anonymous')
    PyJs_Object_1827_ = Js({'for':PyJs_anonymous_1828_,'keyFor':PyJs_keyFor_1829_,'useSetter':PyJs_anonymous_1830_,'useSimple':PyJs_anonymous_1831_})
    var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Symbol'), PyJs_Object_1827_)
    PyJs_Object_1832_ = Js({'create':var.get('$create'),'defineProperty':var.get('$defineProperty'),'defineProperties':var.get('$defineProperties'),'getOwnPropertyDescriptor':var.get('$getOwnPropertyDescriptor'),'getOwnPropertyNames':var.get('$getOwnPropertyNames'),'getOwnPropertySymbols':var.get('$getOwnPropertySymbols')})
    var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Object'), PyJs_Object_1832_)
    @Js
    def PyJs_anonymous_1833_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['S'])
        var.put('S', var.get('$Symbol')())
        PyJs_Object_1834_ = Js({'a':var.get('S')})
        return (((var.get('_stringify')(Js([var.get('S')]))!=Js('[null]')) or (var.get('_stringify')(PyJs_Object_1834_)!=Js('{}'))) or (var.get('_stringify')(var.get('Object')(var.get('S')))!=Js('{}')))
    PyJs_anonymous_1833_._set_name('anonymous')
    @Js
    def PyJs_stringify_1836_(it, this, arguments, var=var):
        var = Scope({'this':this, 'stringify':PyJs_stringify_1836_, 'it':it, 'arguments':arguments}, var)
        var.registers(['i', 'replacer', 'args', 'it', '$replacer'])
        if (PyJsStrictEq(var.get('it'),var.get('undefined')) or var.get('isSymbol')(var.get('it'))):
            return var.get('undefined')
        var.put('args', Js([var.get('it')]))
        var.put('i', Js(1.0))
        while (var.get('arguments').get('length')>var.get('i')):
            var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
        var.put('replacer', var.get('args').get('1'))
        if (var.get('replacer',throw=False).typeof()==Js('function')):
            var.put('$replacer', var.get('replacer'))
        if (var.get('$replacer') or var.get('isArray')(var.get('replacer')).neg()):
            @Js
            def PyJs_anonymous_1837_(key, value, this, arguments, var=var):
                var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
                var.registers(['value', 'key'])
                if var.get('$replacer'):
                    var.put('value', var.get('$replacer').callprop('call', var.get("this"), var.get('key'), var.get('value')))
                if var.get('isSymbol')(var.get('value')).neg():
                    return var.get('value')
            PyJs_anonymous_1837_._set_name('anonymous')
            var.put('replacer', PyJs_anonymous_1837_)
        var.get('args').put('1', var.get('replacer'))
        return var.get('_stringify').callprop('apply', var.get('$JSON'), var.get('args'))
    PyJs_stringify_1836_._set_name('stringify')
    PyJs_Object_1835_ = Js({'stringify':PyJs_stringify_1836_})
    (var.get('$JSON') and var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE').neg() or var.get('$fails')(PyJs_anonymous_1833_)))), Js('JSON'), PyJs_Object_1835_))
    (var.get('$Symbol').get(var.get('PROTOTYPE')).get(var.get('TO_PRIMITIVE')) or var.get('require')(Js('./_hide'))(var.get('$Symbol').get(var.get('PROTOTYPE')), var.get('TO_PRIMITIVE'), var.get('$Symbol').get(var.get('PROTOTYPE')).get('valueOf')))
    var.get('setToStringTag')(var.get('$Symbol'), Js('Symbol'))
    var.get('setToStringTag')(var.get('Math'), Js('Math'), var.get('true'))
    var.get('setToStringTag')(var.get('global').get('JSON'), Js('JSON'), var.get('true'))
PyJs_anonymous_1801_._set_name('anonymous')
PyJs_Object_1838_ = Js({'./_an-object':Js(132.0),'./_descriptors':Js(147.0),'./_enum-keys':Js(150.0),'./_export':Js(151.0),'./_fails':Js(152.0),'./_global':Js(154.0),'./_has':Js(155.0),'./_hide':Js(156.0),'./_is-array':Js(161.0),'./_keyof':Js(168.0),'./_library':Js(169.0),'./_meta':Js(170.0),'./_object-create':Js(172.0),'./_object-dp':Js(173.0),'./_object-gopd':Js(175.0),'./_object-gopn':Js(177.0),'./_object-gopn-ext':Js(176.0),'./_object-gops':Js(178.0),'./_object-keys':Js(181.0),'./_object-pie':Js(182.0),'./_property-desc':Js(184.0),'./_redefine':Js(186.0),'./_set-to-string-tag':Js(189.0),'./_shared':Js(191.0),'./_to-iobject':Js(195.0),'./_to-primitive':Js(198.0),'./_uid':Js(199.0),'./_wks':Js(202.0),'./_wks-define':Js(200.0),'./_wks-ext':Js(201.0)})
@Js
def PyJs_anonymous_1839_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['tmp', 'redefine', 'InternalMap', 'methods', '$WeakMap', 'require', 'isExtensible', 'weak', 'exports', 'wrapper', 'isObject', 'meta', 'module', 'each', 'uncaughtFrozenStore', 'getWeak', 'assign'])
    Js('use strict')
    var.put('each', var.get('require')(Js('./_array-methods'))(Js(0.0)))
    var.put('redefine', var.get('require')(Js('./_redefine')))
    var.put('meta', var.get('require')(Js('./_meta')))
    var.put('assign', var.get('require')(Js('./_object-assign')))
    var.put('weak', var.get('require')(Js('./_collection-weak')))
    var.put('isObject', var.get('require')(Js('./_is-object')))
    var.put('getWeak', var.get('meta').get('getWeak'))
    var.put('isExtensible', var.get('Object').get('isExtensible'))
    var.put('uncaughtFrozenStore', var.get('weak').get('ufstore'))
    PyJs_Object_1840_ = Js({})
    var.put('tmp', PyJs_Object_1840_)
    @Js
    def PyJs_anonymous_1841_(get, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':get}, var)
        var.registers(['get'])
        @Js
        def PyJs_WeakMap_1842_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'WeakMap':PyJs_WeakMap_1842_}, var)
            var.registers([])
            return var.get('get')(var.get("this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
        PyJs_WeakMap_1842_._set_name('WeakMap')
        return PyJs_WeakMap_1842_
    PyJs_anonymous_1841_._set_name('anonymous')
    var.put('wrapper', PyJs_anonymous_1841_)
    @Js
    def PyJs_get_1844_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key, 'get':PyJs_get_1844_}, var)
        var.registers(['data', 'key'])
        if var.get('isObject')(var.get('key')):
            var.put('data', var.get('getWeak')(var.get('key')))
            if PyJsStrictEq(var.get('data'),var.get('true')):
                return var.get('uncaughtFrozenStore')(var.get("this")).callprop('get', var.get('key'))
            return (var.get('data').get(var.get("this").get('_i')) if var.get('data') else var.get('undefined'))
    PyJs_get_1844_._set_name('get')
    @Js
    def PyJs_set_1845_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'set':PyJs_set_1845_, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'key'])
        return var.get('weak').callprop('def', var.get("this"), var.get('key'), var.get('value'))
    PyJs_set_1845_._set_name('set')
    PyJs_Object_1843_ = Js({'get':PyJs_get_1844_,'set':PyJs_set_1845_})
    var.put('methods', PyJs_Object_1843_)
    var.put('$WeakMap', var.get('module').put('exports', var.get('require')(Js('./_collection'))(Js('WeakMap'), var.get('wrapper'), var.get('methods'), var.get('weak'), var.get('true'), var.get('true'))))
    if (var.get('$WeakMap').create().callprop('set', (var.get('Object').get('freeze') or var.get('Object'))(var.get('tmp')), Js(7.0)).callprop('get', var.get('tmp'))!=Js(7.0)):
        var.put('InternalMap', var.get('weak').callprop('getConstructor', var.get('wrapper')))
        var.get('assign')(var.get('InternalMap').get('prototype'), var.get('methods'))
        var.get('meta').put('NEED', var.get('true'))
        @Js
        def PyJs_anonymous_1846_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['method', 'key', 'proto'])
            var.put('proto', var.get('$WeakMap').get('prototype'))
            var.put('method', var.get('proto').get(var.get('key')))
            @Js
            def PyJs_anonymous_1847_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
                var.registers(['a', 'b', 'result'])
                if (var.get('isObject')(var.get('a')) and var.get('isExtensible')(var.get('a')).neg()):
                    if var.get("this").get('_f').neg():
                        var.get("this").put('_f', var.get('InternalMap').create())
                    var.put('result', var.get("this").get('_f').callprop(var.get('key'), var.get('a'), var.get('b')))
                    return (var.get("this") if (var.get('key')==Js('set')) else var.get('result'))
                return var.get('method').callprop('call', var.get("this"), var.get('a'), var.get('b'))
            PyJs_anonymous_1847_._set_name('anonymous')
            var.get('redefine')(var.get('proto'), var.get('key'), PyJs_anonymous_1847_)
        PyJs_anonymous_1846_._set_name('anonymous')
        var.get('each')(Js([Js('delete'), Js('has'), Js('get'), Js('set')]), PyJs_anonymous_1846_)
PyJs_anonymous_1839_._set_name('anonymous')
PyJs_Object_1848_ = Js({'./_array-methods':Js(135.0),'./_collection':Js(143.0),'./_collection-weak':Js(142.0),'./_is-object':Js(162.0),'./_meta':Js(170.0),'./_object-assign':Js(171.0),'./_redefine':Js(186.0)})
@Js
def PyJs_anonymous_1849_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'weak', 'exports', 'module'])
    Js('use strict')
    var.put('weak', var.get('require')(Js('./_collection-weak')))
    @Js
    def PyJs_anonymous_1850_(get, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':get}, var)
        var.registers(['get'])
        @Js
        def PyJs_WeakSet_1851_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'WeakSet':PyJs_WeakSet_1851_}, var)
            var.registers([])
            return var.get('get')(var.get("this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
        PyJs_WeakSet_1851_._set_name('WeakSet')
        return PyJs_WeakSet_1851_
    PyJs_anonymous_1850_._set_name('anonymous')
    @Js
    def PyJs_add_1853_(value, this, arguments, var=var):
        var = Scope({'this':this, 'add':PyJs_add_1853_, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('weak').callprop('def', var.get("this"), var.get('value'), var.get('true'))
    PyJs_add_1853_._set_name('add')
    PyJs_Object_1852_ = Js({'add':PyJs_add_1853_})
    var.get('require')(Js('./_collection'))(Js('WeakSet'), PyJs_anonymous_1850_, PyJs_Object_1852_, var.get('weak'), Js(False), var.get('true'))
PyJs_anonymous_1849_._set_name('anonymous')
PyJs_Object_1854_ = Js({'./_collection':Js(143.0),'./_collection-weak':Js(142.0)})
@Js
def PyJs_anonymous_1855_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['$export', 'require', 'exports', 'module'])
    var.put('$export', var.get('require')(Js('./_export')))
    PyJs_Object_1856_ = Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Map'))})
    var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Map'), PyJs_Object_1856_)
PyJs_anonymous_1855_._set_name('anonymous')
PyJs_Object_1857_ = Js({'./_collection-to-json':Js(141.0),'./_export':Js(151.0)})
@Js
def PyJs_anonymous_1858_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('./_wks-define'))(Js('asyncIterator'))
PyJs_anonymous_1858_._set_name('anonymous')
PyJs_Object_1859_ = Js({'./_wks-define':Js(200.0)})
@Js
def PyJs_anonymous_1860_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('require')(Js('./_wks-define'))(Js('observable'))
PyJs_anonymous_1860_._set_name('anonymous')
PyJs_Object_1861_ = Js({'./_wks-define':Js(200.0)})
@Js
def PyJs_anonymous_1862_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['TO_STRING_TAG', 'exports', 'hide', 'NAME', 'proto', 'i', 'require', 'global', 'Collection', 'Iterators', 'collections', 'module'])
    var.get('require')(Js('./es6.array.iterator'))
    var.put('global', var.get('require')(Js('./_global')))
    var.put('hide', var.get('require')(Js('./_hide')))
    var.put('Iterators', var.get('require')(Js('./_iterators')))
    var.put('TO_STRING_TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
    #for JS loop
    var.put('collections', Js([Js('NodeList'), Js('DOMTokenList'), Js('MediaList'), Js('StyleSheetList'), Js('CSSRuleList')]))
    var.put('i', Js(0.0))
    while (var.get('i')<Js(5.0)):
        try:
            var.put('NAME', var.get('collections').get(var.get('i')))
            var.put('Collection', var.get('global').get(var.get('NAME')))
            var.put('proto', (var.get('Collection') and var.get('Collection').get('prototype')))
            if (var.get('proto') and var.get('proto').get(var.get('TO_STRING_TAG')).neg()):
                var.get('hide')(var.get('proto'), var.get('TO_STRING_TAG'), var.get('NAME'))
            var.get('Iterators').put(var.get('NAME'), var.get('Iterators').get('Array'))
        finally:
                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
PyJs_anonymous_1862_._set_name('anonymous')
PyJs_Object_1863_ = Js({'./_global':Js(154.0),'./_hide':Js(156.0),'./_iterators':Js(167.0),'./_wks':Js(202.0),'./es6.array.iterator':Js(205.0)})
@Js
def PyJs_anonymous_1864_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_symbol2', 'module', '_cloneDeep2', '_interopRequireDefault', '_babelTraverse', '_has2', '_babylon', '_cloneDeep', 'templateVisitor', 'babylon', 'TEMPLATE_SKIP', 'exports', '_assign', '_babelTraverse2', '_interopRequireWildcard', '_babelTypes', '_has', '_symbol', '_assign2', 'useTemplate', 'require', 't', 'FROM_TEMPLATE'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1873_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1873_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_useTemplate_(ast, nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments, 'ast':ast}, var)
        var.registers(['nodes', 'program', '_ast', 'ast'])
        var.put('ast', PyJsComma(Js(0.0),var.get('_cloneDeep2').get('default'))(var.get('ast')))
        var.put('_ast', var.get('ast'))
        var.put('program', var.get('_ast').get('program'))
        if var.get('nodes').get('length'):
            PyJsComma(Js(0.0),var.get('_babelTraverse2').get('default'))(var.get('ast'), var.get('templateVisitor'), var.get("null"), var.get('nodes'))
        if (var.get('program').get('body').get('length')>Js(1.0)):
            return var.get('program').get('body')
        else:
            return var.get('program').get('body').get('0')
    PyJsHoisted_useTemplate_.__name__ = 'useTemplate'
    var.put('useTemplate', PyJsHoisted_useTemplate_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1872_ = Js({})
            var.put('newObj', PyJs_Object_1872_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_symbol', var.get('require')(Js('babel-runtime/core-js/symbol')))
    var.put('_symbol2', var.get('_interopRequireDefault')(var.get('_symbol')))
    @Js
    def PyJs_anonymous_1865_(code, opts, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['_getAst', 'code', 'stack', 'opts'])
        var.put('stack', PyJsComma(Js(0.0), Js(None)))
        try:
            PyJsTempException = JsToPyException(var.get('Error').create())
            raise PyJsTempException
        except PyJsException as PyJsTempException:
            PyJsHolder_6572726f72_58122749 = var.own.get('error')
            var.force_own_put('error', PyExceptionToJs(PyJsTempException))
            try:
                if var.get('error').get('stack'):
                    var.put('stack', var.get('error').get('stack').callprop('split', Js('\n')).callprop('slice', Js(1.0)).callprop('join', Js('\n')))
            finally:
                if PyJsHolder_6572726f72_58122749 is not None:
                    var.own['error'] = PyJsHolder_6572726f72_58122749
                else:
                    del var.own['error']
                del PyJsHolder_6572726f72_58122749
        PyJs_Object_1866_ = Js({'allowReturnOutsideFunction':var.get('true'),'allowSuperOutsideMethod':var.get('true'),'preserveComments':Js(False)})
        var.put('opts', PyJsComma(Js(0.0),var.get('_assign2').get('default'))(PyJs_Object_1866_, var.get('opts')))
        @Js
        def PyJs_getAst_1867_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getAst':PyJs_getAst_1867_}, var)
            var.registers(['ast'])
            var.put('ast', PyJsComma(Js(0.0), Js(None)))
            try:
                var.put('ast', var.get('babylon').callprop('parse', var.get('code'), var.get('opts')))
                PyJs_Object_1868_ = Js({'preserveComments':var.get('opts').get('preserveComments')})
                var.put('ast', var.get('_babelTraverse2').get('default').callprop('removeProperties', var.get('ast'), PyJs_Object_1868_))
                @Js
                def PyJs_anonymous_1869_(node, this, arguments, var=var):
                    var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                    var.registers(['node'])
                    var.get('node').put(var.get('FROM_TEMPLATE'), var.get('true'))
                PyJs_anonymous_1869_._set_name('anonymous')
                var.get('_babelTraverse2').get('default').callprop('cheap', var.get('ast'), PyJs_anonymous_1869_)
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_43794349 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('err').put('stack', ((var.get('err').get('stack')+Js('from\n'))+var.get('stack')))
                    PyJsTempException = JsToPyException(var.get('err'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_657272_43794349 is not None:
                        var.own['err'] = PyJsHolder_657272_43794349
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_43794349
            @Js
            def PyJs_getAst_1870_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'getAst':PyJs_getAst_1870_}, var)
                var.registers([])
                return var.get('ast')
            PyJs_getAst_1870_._set_name('getAst')
            var.put('_getAst', PyJs_getAst_1870_)
            return var.get('ast')
        PyJs_getAst_1867_._set_name('getAst')
        var.put('_getAst', PyJs_getAst_1867_)
        @Js
        def PyJs_anonymous_1871_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_len', '_key', 'args'])
            #for JS loop
            var.put('_len', var.get('arguments').get('length'))
            var.put('args', var.get('Array')(var.get('_len')))
            var.put('_key', Js(0.0))
            while (var.get('_key')<var.get('_len')):
                try:
                    var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                finally:
                        (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
            return var.get('useTemplate')(var.get('_getAst')(), var.get('args'))
        PyJs_anonymous_1871_._set_name('anonymous')
        return PyJs_anonymous_1871_
    PyJs_anonymous_1865_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1865_)
    var.put('_cloneDeep', var.get('require')(Js('lodash/cloneDeep')))
    var.put('_cloneDeep2', var.get('_interopRequireDefault')(var.get('_cloneDeep')))
    var.put('_assign', var.get('require')(Js('lodash/assign')))
    var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
    var.put('_has', var.get('require')(Js('lodash/has')))
    var.put('_has2', var.get('_interopRequireDefault')(var.get('_has')))
    var.put('_babelTraverse', var.get('require')(Js('babel-traverse')))
    var.put('_babelTraverse2', var.get('_interopRequireDefault')(var.get('_babelTraverse')))
    var.put('_babylon', var.get('require')(Js('babylon')))
    var.put('babylon', var.get('_interopRequireWildcard')(var.get('_babylon')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    var.put('FROM_TEMPLATE', Js('_fromTemplate'))
    var.put('TEMPLATE_SKIP', PyJsComma(Js(0.0),var.get('_symbol2').get('default'))())
    pass
    @Js
    def PyJs_enter_1875_(path, args, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'args':args, 'arguments':arguments, 'enter':PyJs_enter_1875_}, var)
        var.registers(['node', 'i', 'path', 'args', 'replacement'])
        var.put('node', var.get('path').get('node'))
        if var.get('node').get(var.get('TEMPLATE_SKIP')):
            return var.get('path').callprop('skip')
        if var.get('t').callprop('isExpressionStatement', var.get('node')):
            var.put('node', var.get('node').get('expression'))
        var.put('replacement', PyJsComma(Js(0.0), Js(None)))
        if (var.get('t').callprop('isIdentifier', var.get('node')) and var.get('node').get(var.get('FROM_TEMPLATE'))):
            if PyJsComma(Js(0.0),var.get('_has2').get('default'))(var.get('args').get('0'), var.get('node').get('name')):
                var.put('replacement', var.get('args').get('0').get(var.get('node').get('name')))
            else:
                if PyJsStrictEq(var.get('node').get('name').get('0'),Js('$')):
                    var.put('i', (+var.get('node').get('name').callprop('slice', Js(1.0))))
                    if var.get('args').get(var.get('i')):
                        var.put('replacement', var.get('args').get(var.get('i')))
        if PyJsStrictEq(var.get('replacement'),var.get("null")):
            var.get('path').callprop('remove')
        if var.get('replacement'):
            var.get('replacement').put(var.get('TEMPLATE_SKIP'), var.get('true'))
            var.get('path').callprop('replaceInline', var.get('replacement'))
    PyJs_enter_1875_._set_name('enter')
    @Js
    def PyJs_exit_1876_(_ref, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'exit':PyJs_exit_1876_, 'arguments':arguments}, var)
        var.registers(['node', '_ref'])
        var.put('node', var.get('_ref').get('node'))
        if var.get('node').get('loc').neg():
            var.get('_babelTraverse2').get('default').callprop('clearNode', var.get('node'))
    PyJs_exit_1876_._set_name('exit')
    PyJs_Object_1874_ = Js({'noScope':var.get('true'),'enter':PyJs_enter_1875_,'exit':PyJs_exit_1876_})
    var.put('templateVisitor', PyJs_Object_1874_)
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1864_._set_name('anonymous')
PyJs_Object_1877_ = Js({'babel-runtime/core-js/symbol':Js(105.0),'babel-traverse':Js(225.0),'babel-types':Js(258.0),'babylon':Js(262.0),'lodash/assign':Js(435.0),'lodash/cloneDeep':Js(439.0),'lodash/has':Js(453.0)})
@Js
def PyJs_anonymous_1878_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_weakMap', 'clear', 'module', '_weakMap2', 'scope', '_interopRequireDefault', 'path', 'require'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1879_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1879_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_clear_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get('exports').put('path', var.put('path', var.get('_weakMap2').get('default').create()))
        var.get('exports').put('scope', var.put('scope', var.get('_weakMap2').get('default').create()))
    PyJsHoisted_clear_.__name__ = 'clear'
    var.put('clear', PyJsHoisted_clear_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('scope', var.get('exports').put('path', var.get('undefined')))
    var.put('_weakMap', var.get('require')(Js('babel-runtime/core-js/weak-map')))
    var.put('_weakMap2', var.get('_interopRequireDefault')(var.get('_weakMap')))
    var.get('exports').put('clear', var.get('clear'))
    pass
    var.put('path', var.get('exports').put('path', var.get('_weakMap2').get('default').create()))
    var.put('scope', var.get('exports').put('scope', var.get('_weakMap2').get('default').create()))
    pass
PyJs_anonymous_1878_._set_name('anonymous')
PyJs_Object_1880_ = Js({'babel-runtime/core-js/weak-map':Js(108.0)})
@Js
def PyJs_anonymous_1881_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_1882_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['_babelTypes', '_classCallCheck2', '_interopRequireWildcard', 'process', '_classCallCheck3', 'TraversalContext', '_getIterator3', 'testing', 't', '_interopRequireDefault', '_getIterator2', '_path3', '_path2'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_1884_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1884_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        @Js
        def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj', 'key', 'newObj'])
            if (var.get('obj') and var.get('obj').get('__esModule')):
                return var.get('obj')
            else:
                PyJs_Object_1883_ = Js({})
                var.put('newObj', PyJs_Object_1883_)
                if (var.get('obj')!=var.get("null")):
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                            var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
                var.get('newObj').put('default', var.get('obj'))
                return var.get('newObj')
        PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
        var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
        var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
        var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
        var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
        var.put('_path2', var.get('require')(Js('./path')))
        var.put('_path3', var.get('_interopRequireDefault')(var.get('_path2')))
        var.put('_babelTypes', var.get('require')(Js('babel-types')))
        var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
        pass
        pass
        var.put('testing', PyJsStrictEq(var.get('process').get('env').get('NODE_ENV'),Js('test')))
        @Js
        def PyJs_anonymous_1885_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['TraversalContext'])
            @Js
            def PyJsHoisted_TraversalContext_(scope, opts, state, parentPath, this, arguments, var=var):
                var = Scope({'state':state, 'arguments':arguments, 'parentPath':parentPath, 'this':this, 'scope':scope, 'opts':opts}, var)
                var.registers(['scope', 'state', 'opts', 'parentPath'])
                PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('TraversalContext'))
                var.get("this").put('queue', var.get("null"))
                var.get("this").put('parentPath', var.get('parentPath'))
                var.get("this").put('scope', var.get('scope'))
                var.get("this").put('state', var.get('state'))
                var.get("this").put('opts', var.get('opts'))
            PyJsHoisted_TraversalContext_.__name__ = 'TraversalContext'
            var.put('TraversalContext', PyJsHoisted_TraversalContext_)
            pass
            @Js
            def PyJs_shouldVisit_1886_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments, 'shouldVisit':PyJs_shouldVisit_1886_}, var)
                var.registers(['node', '_isArray', '_iterator', 'key', 'keys', '_i', '_ref', 'opts'])
                var.put('opts', var.get("this").get('opts'))
                if (var.get('opts').get('enter') or var.get('opts').get('exit')):
                    return var.get('true')
                if var.get('opts').get(var.get('node').get('type')):
                    return var.get('true')
                var.put('keys', var.get('t').get('VISITOR_KEYS').get(var.get('node').get('type')))
                if (var.get('keys').neg() or var.get('keys').get('length').neg()):
                    return Js(False)
                #for JS loop
                var.put('_iterator', var.get('keys'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('key', var.get('_ref'))
                    if var.get('node').get(var.get('key')):
                        return var.get('true')
                
                return Js(False)
            PyJs_shouldVisit_1886_._set_name('shouldVisit')
            var.get('TraversalContext').get('prototype').put('shouldVisit', PyJs_shouldVisit_1886_)
            @Js
            def PyJs_create_1887_(node, obj, key, listKey, this, arguments, var=var):
                var = Scope({'node':node, 'obj':obj, 'arguments':arguments, 'key':key, 'this':this, 'listKey':listKey, 'create':PyJs_create_1887_}, var)
                var.registers(['node', 'listKey', 'obj', 'key'])
                PyJs_Object_1888_ = Js({'parentPath':var.get("this").get('parentPath'),'parent':var.get('node'),'container':var.get('obj'),'key':var.get('key'),'listKey':var.get('listKey')})
                return var.get('_path3').get('default').callprop('get', PyJs_Object_1888_)
            PyJs_create_1887_._set_name('create')
            var.get('TraversalContext').get('prototype').put('create', PyJs_create_1887_)
            @Js
            def PyJs_maybeQueue_1889_(path, notPriority, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'maybeQueue':PyJs_maybeQueue_1889_, 'notPriority':notPriority, 'arguments':arguments}, var)
                var.registers(['path', 'notPriority'])
                if var.get("this").get('trap'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Infinite cycle detected')))
                    raise PyJsTempException
                if var.get("this").get('queue'):
                    if var.get('notPriority'):
                        var.get("this").get('queue').callprop('push', var.get('path'))
                    else:
                        var.get("this").get('priorityQueue').callprop('push', var.get('path'))
            PyJs_maybeQueue_1889_._set_name('maybeQueue')
            var.get('TraversalContext').get('prototype').put('maybeQueue', PyJs_maybeQueue_1889_)
            @Js
            def PyJs_visitMultiple_1890_(container, parent, listKey, this, arguments, var=var):
                var = Scope({'visitMultiple':PyJs_visitMultiple_1890_, 'container':container, 'parent':parent, 'this':this, 'listKey':listKey, 'arguments':arguments}, var)
                var.registers(['node', 'container', 'parent', 'listKey', 'queue', 'key'])
                if PyJsStrictEq(var.get('container').get('length'),Js(0.0)):
                    return Js(False)
                var.put('queue', Js([]))
                #for JS loop
                var.put('key', Js(0.0))
                while (var.get('key')<var.get('container').get('length')):
                    try:
                        var.put('node', var.get('container').get(var.get('key')))
                        if (var.get('node') and var.get("this").callprop('shouldVisit', var.get('node'))):
                            var.get('queue').callprop('push', var.get("this").callprop('create', var.get('parent'), var.get('container'), var.get('key'), var.get('listKey')))
                    finally:
                            (var.put('key',Js(var.get('key').to_number())+Js(1))-Js(1))
                return var.get("this").callprop('visitQueue', var.get('queue'))
            PyJs_visitMultiple_1890_._set_name('visitMultiple')
            var.get('TraversalContext').get('prototype').put('visitMultiple', PyJs_visitMultiple_1890_)
            @Js
            def PyJs_visitSingle_1891_(node, key, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'visitSingle':PyJs_visitSingle_1891_, 'arguments':arguments, 'key':key}, var)
                var.registers(['node', 'key'])
                if var.get("this").callprop('shouldVisit', var.get('node').get(var.get('key'))):
                    return var.get("this").callprop('visitQueue', Js([var.get("this").callprop('create', var.get('node'), var.get('node'), var.get('key'))]))
                else:
                    return Js(False)
            PyJs_visitSingle_1891_._set_name('visitSingle')
            var.get('TraversalContext').get('prototype').put('visitSingle', PyJs_visitSingle_1891_)
            @Js
            def PyJs_visitQueue_1892_(queue, this, arguments, var=var):
                var = Scope({'queue':queue, 'this':this, 'visitQueue':PyJs_visitQueue_1892_, 'arguments':arguments}, var)
                var.registers(['_isArray3', '_isArray2', '_i3', 'stop', '_ref2', '_i2', 'queue', 'path', 'visited', '_path', '_ref3', '_iterator3', '_iterator2'])
                var.get("this").put('queue', var.get('queue'))
                var.get("this").put('priorityQueue', Js([]))
                var.put('visited', Js([]))
                var.put('stop', Js(False))
                #for JS loop
                var.put('_iterator2', var.get('queue'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('path', var.get('_ref2'))
                    var.get('path').callprop('resync')
                    if (PyJsStrictEq(var.get('path').get('contexts').get('length'),Js(0.0)) or PyJsStrictNeq(var.get('path').get('contexts').get((var.get('path').get('contexts').get('length')-Js(1.0))),var.get("this"))):
                        var.get('path').callprop('pushContext', var.get("this"))
                    if PyJsStrictEq(var.get('path').get('key'),var.get("null")):
                        continue
                    if (var.get('testing') and (var.get('queue').get('length')>=Js(10000.0))):
                        var.get("this").put('trap', var.get('true'))
                    if (var.get('visited').callprop('indexOf', var.get('path').get('node'))>=Js(0.0)):
                        continue
                    var.get('visited').callprop('push', var.get('path').get('node'))
                    if var.get('path').callprop('visit'):
                        var.put('stop', var.get('true'))
                        break
                    if var.get("this").get('priorityQueue').get('length'):
                        var.put('stop', var.get("this").callprop('visitQueue', var.get("this").get('priorityQueue')))
                        var.get("this").put('priorityQueue', Js([]))
                        var.get("this").put('queue', var.get('queue'))
                        if var.get('stop'):
                            break
                
                #for JS loop
                var.put('_iterator3', var.get('queue'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref3', var.get('_i3').get('value'))
                    var.put('_path', var.get('_ref3'))
                    var.get('_path').callprop('popContext')
                
                var.get("this").put('queue', var.get("null"))
                return var.get('stop')
            PyJs_visitQueue_1892_._set_name('visitQueue')
            var.get('TraversalContext').get('prototype').put('visitQueue', PyJs_visitQueue_1892_)
            @Js
            def PyJs_visit_1893_(node, key, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'visit':PyJs_visit_1893_, 'arguments':arguments, 'key':key}, var)
                var.registers(['node', 'nodes', 'key'])
                var.put('nodes', var.get('node').get(var.get('key')))
                if var.get('nodes').neg():
                    return Js(False)
                if var.get('Array').callprop('isArray', var.get('nodes')):
                    return var.get("this").callprop('visitMultiple', var.get('nodes'), var.get('node'), var.get('key'))
                else:
                    return var.get("this").callprop('visitSingle', var.get('node'), var.get('key'))
            PyJs_visit_1893_._set_name('visit')
            var.get('TraversalContext').get('prototype').put('visit', PyJs_visit_1893_)
            return var.get('TraversalContext')
        PyJs_anonymous_1885_._set_name('anonymous')
        var.put('TraversalContext', PyJs_anonymous_1885_())
        var.get('exports').put('default', var.get('TraversalContext'))
        var.get('module').put('exports', var.get('exports').get('default'))
    PyJs_anonymous_1882_._set_name('anonymous')
    PyJs_anonymous_1882_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_1881_._set_name('anonymous')
PyJs_Object_1894_ = Js({'./path':Js(232.0),'_process':Js(531.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1895_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Hub', 'require', 'module', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1896_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1896_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    pass
    @Js
    def PyJs_Hub_1897_(file, options, this, arguments, var=var):
        var = Scope({'this':this, 'Hub':PyJs_Hub_1897_, 'options':options, 'file':file, 'arguments':arguments}, var)
        var.registers(['options', 'file'])
        PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Hub'))
        var.get("this").put('file', var.get('file'))
        var.get("this").put('options', var.get('options'))
    PyJs_Hub_1897_._set_name('Hub')
    var.put('Hub', PyJs_Hub_1897_)
    var.get('exports').put('default', var.get('Hub'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1895_._set_name('anonymous')
PyJs_Object_1898_ = Js({'babel-runtime/helpers/classCallCheck':Js(110.0)})
@Js
def PyJs_anonymous_1899_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['traverse', '_context', '_scope', 'module', '_hub', '_interopRequireDefault', '_cache', '_getIterator2', '_getIterator3', '_context2', '_visitors', 'cache', 'hasBlacklistedType', '_babelMessages', 'exports', '_interopRequireWildcard', '_babelTypes', '_includes2', 'visitors', '_includes', 'require', 'messages', 't', '_path'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1907_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1907_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_traverse_(parent, opts, scope, state, parentPath, this, arguments, var=var):
        var = Scope({'state':state, 'arguments':arguments, 'parent':parent, 'parentPath':parentPath, 'this':this, 'scope':scope, 'opts':opts}, var)
        var.registers(['scope', 'state', 'opts', 'parent', 'parentPath'])
        if var.get('parent').neg():
            return var.get('undefined')
        if var.get('opts').neg():
            PyJs_Object_1908_ = Js({})
            var.put('opts', PyJs_Object_1908_)
        if (var.get('opts').get('noScope').neg() and var.get('scope').neg()):
            if (PyJsStrictNeq(var.get('parent').get('type'),Js('Program')) and PyJsStrictNeq(var.get('parent').get('type'),Js('File'))):
                PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('traverseNeedsParent'), var.get('parent').get('type'))))
                raise PyJsTempException
        var.get('visitors').callprop('explode', var.get('opts'))
        var.get('traverse').callprop('node', var.get('parent'), var.get('opts'), var.get('scope'), var.get('state'), var.get('parentPath'))
    PyJsHoisted_traverse_.__name__ = 'traverse'
    var.put('traverse', PyJsHoisted_traverse_)
    @Js
    def PyJsHoisted_hasBlacklistedType_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if PyJsStrictEq(var.get('path').get('node').get('type'),var.get('state').get('type')):
            var.get('state').put('has', var.get('true'))
            var.get('path').callprop('stop')
    PyJsHoisted_hasBlacklistedType_.__name__ = 'hasBlacklistedType'
    var.put('hasBlacklistedType', PyJsHoisted_hasBlacklistedType_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1906_ = Js({})
            var.put('newObj', PyJs_Object_1906_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('visitors', var.get('exports').put('Hub', var.get('exports').put('Scope', var.get('exports').put('NodePath', var.get('undefined')))))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_path', var.get('require')(Js('./path')))
    @Js
    def PyJs_get_1901_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1901_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_path')).get('default')
    PyJs_get_1901_._set_name('get')
    PyJs_Object_1900_ = Js({'enumerable':var.get('true'),'get':PyJs_get_1901_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('NodePath'), PyJs_Object_1900_)
    var.put('_scope', var.get('require')(Js('./scope')))
    @Js
    def PyJs_get_1903_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1903_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_scope')).get('default')
    PyJs_get_1903_._set_name('get')
    PyJs_Object_1902_ = Js({'enumerable':var.get('true'),'get':PyJs_get_1903_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('Scope'), PyJs_Object_1902_)
    var.put('_hub', var.get('require')(Js('./hub')))
    @Js
    def PyJs_get_1905_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1905_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_hub')).get('default')
    PyJs_get_1905_._set_name('get')
    PyJs_Object_1904_ = Js({'enumerable':var.get('true'),'get':PyJs_get_1905_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('Hub'), PyJs_Object_1904_)
    var.get('exports').put('default', var.get('traverse'))
    var.put('_context', var.get('require')(Js('./context')))
    var.put('_context2', var.get('_interopRequireDefault')(var.get('_context')))
    var.put('_visitors', var.get('require')(Js('./visitors')))
    var.put('visitors', var.get('_interopRequireWildcard')(var.get('_visitors')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_includes', var.get('require')(Js('lodash/includes')))
    var.put('_includes2', var.get('_interopRequireDefault')(var.get('_includes')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_cache', var.get('require')(Js('./cache')))
    var.put('cache', var.get('_interopRequireWildcard')(var.get('_cache')))
    pass
    pass
    var.get('exports').put('visitors', var.get('visitors'))
    pass
    var.get('traverse').put('visitors', var.get('visitors'))
    var.get('traverse').put('verify', var.get('visitors').get('verify'))
    var.get('traverse').put('explode', var.get('visitors').get('explode'))
    var.get('traverse').put('NodePath', var.get('require')(Js('./path')))
    var.get('traverse').put('Scope', var.get('require')(Js('./scope')))
    var.get('traverse').put('Hub', var.get('require')(Js('./hub')))
    @Js
    def PyJs_anonymous_1909_(node, enter, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'enter':enter}, var)
        var.registers(['node', 'enter'])
        return var.get('t').callprop('traverseFast', var.get('node'), var.get('enter'))
    PyJs_anonymous_1909_._set_name('anonymous')
    var.get('traverse').put('cheap', PyJs_anonymous_1909_)
    @Js
    def PyJs_anonymous_1910_(node, opts, scope, state, parentPath, skipKeys, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'state':state, 'skipKeys':skipKeys, 'parentPath':parentPath, 'scope':scope, 'opts':opts, 'arguments':arguments}, var)
        var.registers(['key', 'node', '_isArray', '_iterator', 'context', 'keys', 'state', 'skipKeys', '_i', 'parentPath', 'scope', '_ref', 'opts'])
        var.put('keys', var.get('t').get('VISITOR_KEYS').get(var.get('node').get('type')))
        if var.get('keys').neg():
            return var.get('undefined')
        var.put('context', var.get('_context2').get('default').create(var.get('scope'), var.get('opts'), var.get('state'), var.get('parentPath')))
        #for JS loop
        var.put('_iterator', var.get('keys'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('key', var.get('_ref'))
            if (var.get('skipKeys') and var.get('skipKeys').get(var.get('key'))):
                continue
            if var.get('context').callprop('visit', var.get('node'), var.get('key')):
                return var.get('undefined')
        
    PyJs_anonymous_1910_._set_name('anonymous')
    var.get('traverse').put('node', PyJs_anonymous_1910_)
    @Js
    def PyJs_anonymous_1911_(node, opts, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['node', 'opts'])
        var.get('t').callprop('removeProperties', var.get('node'), var.get('opts'))
        var.get('cache').get('path').callprop('delete', var.get('node'))
    PyJs_anonymous_1911_._set_name('anonymous')
    var.get('traverse').put('clearNode', PyJs_anonymous_1911_)
    @Js
    def PyJs_anonymous_1912_(tree, opts, this, arguments, var=var):
        var = Scope({'this':this, 'tree':tree, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['tree', 'opts'])
        var.get('t').callprop('traverseFast', var.get('tree'), var.get('traverse').get('clearNode'), var.get('opts'))
        return var.get('tree')
    PyJs_anonymous_1912_._set_name('anonymous')
    var.get('traverse').put('removeProperties', PyJs_anonymous_1912_)
    pass
    @Js
    def PyJs_anonymous_1913_(tree, scope, type, blacklistTypes, this, arguments, var=var):
        var = Scope({'arguments':arguments, 'type':type, 'this':this, 'scope':scope, 'tree':tree, 'blacklistTypes':blacklistTypes}, var)
        var.registers(['scope', 'state', 'tree', 'blacklistTypes', 'type'])
        if PyJsComma(Js(0.0),var.get('_includes2').get('default'))(var.get('blacklistTypes'), var.get('tree').get('type')):
            return Js(False)
        if PyJsStrictEq(var.get('tree').get('type'),var.get('type')):
            return var.get('true')
        PyJs_Object_1914_ = Js({'has':Js(False),'type':var.get('type')})
        var.put('state', PyJs_Object_1914_)
        PyJs_Object_1915_ = Js({'blacklist':var.get('blacklistTypes'),'enter':var.get('hasBlacklistedType')})
        var.get('traverse')(var.get('tree'), PyJs_Object_1915_, var.get('scope'), var.get('state'))
        return var.get('state').get('has')
    PyJs_anonymous_1913_._set_name('anonymous')
    var.get('traverse').put('hasType', PyJs_anonymous_1913_)
    @Js
    def PyJs_anonymous_1916_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get('cache').callprop('clear')
    PyJs_anonymous_1916_._set_name('anonymous')
    var.get('traverse').put('clearCache', PyJs_anonymous_1916_)
    @Js
    def PyJs_anonymous_1917_(source, destination, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'destination':destination, 'arguments':arguments}, var)
        var.registers(['source', 'destination'])
        if var.get('cache').get('path').callprop('has', var.get('source')):
            var.get('cache').get('path').callprop('set', var.get('destination'), var.get('cache').get('path').callprop('get', var.get('source')))
    PyJs_anonymous_1917_._set_name('anonymous')
    var.get('traverse').put('copyCache', PyJs_anonymous_1917_)
PyJs_anonymous_1899_._set_name('anonymous')
PyJs_Object_1918_ = Js({'./cache':Js(222.0),'./context':Js(223.0),'./hub':Js(224.0),'./path':Js(232.0),'./scope':Js(244.0),'./visitors':Js(246.0),'babel-messages':Js(57.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0),'lodash/includes':Js(456.0)})
@Js
def PyJs_anonymous_1919_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'findParent', '_interopRequireWildcard', '_index', 'require', '_babelTypes', 'getAncestry', 'inShadow', 'module', 'inType', 'getStatementParent', 'getEarliestCommonAncestorFrom', 't', '_index2', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'find', 'getDeepestCommonAncestorFrom', 'getFunctionParent'])
    @Js
    def PyJsHoisted_inType_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['_isArray3', '_ref3', '_i3', 'path', 'type', '_iterator3'])
        var.put('path', var.get("this"))
        while var.get('path'):
            #for JS loop
            var.put('_iterator3', var.get('arguments'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref3', var.get('_i3').get('value'))
                var.put('type', var.get('_ref3'))
                if PyJsStrictEq(var.get('path').get('node').get('type'),var.get('type')):
                    return var.get('true')
            
            var.put('path', var.get('path').get('parentPath'))
        return Js(False)
    PyJsHoisted_inType_.__name__ = 'inType'
    var.put('inType', PyJsHoisted_inType_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1920_ = Js({})
            var.put('newObj', PyJs_Object_1920_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_findParent_(callback, this, arguments, var=var):
        var = Scope({'this':this, 'callback':callback, 'arguments':arguments}, var)
        var.registers(['path', 'callback'])
        var.put('path', var.get("this"))
        while var.put('path', var.get('path').get('parentPath')):
            if var.get('callback')(var.get('path')):
                return var.get('path')
        return var.get("null")
    PyJsHoisted_findParent_.__name__ = 'findParent'
    var.put('findParent', PyJsHoisted_findParent_)
    @Js
    def PyJsHoisted_getAncestry_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['path', 'paths'])
        var.put('path', var.get("this"))
        var.put('paths', Js([]))
        while 1:
            var.get('paths').callprop('push', var.get('path'))
            if not var.put('path', var.get('path').get('parentPath')):
                break
        return var.get('paths')
    PyJsHoisted_getAncestry_.__name__ = 'getAncestry'
    var.put('getAncestry', PyJsHoisted_getAncestry_)
    @Js
    def PyJsHoisted_getStatementParent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['path'])
        var.put('path', var.get("this"))
        while 1:
            if var.get('Array').callprop('isArray', var.get('path').get('container')):
                return var.get('path')
            if not var.put('path', var.get('path').get('parentPath')):
                break
    PyJsHoisted_getStatementParent_.__name__ = 'getStatementParent'
    var.put('getStatementParent', PyJsHoisted_getStatementParent_)
    @Js
    def PyJsHoisted_getEarliestCommonAncestorFrom_(paths, this, arguments, var=var):
        var = Scope({'this':this, 'paths':paths, 'arguments':arguments}, var)
        var.registers(['paths'])
        @Js
        def PyJs_anonymous_1923_(deepest, i, ancestries, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, 'deepest':deepest, 'arguments':arguments, 'ancestries':ancestries}, var)
            var.registers(['_isArray', '_iterator', 'keys', 'i', 'ancestry', 'earliestKeyIndex', 'deepest', '_i', 'currentKeyIndex', 'path', '_ref', 'earliest', 'ancestries'])
            var.put('earliest', PyJsComma(Js(0.0), Js(None)))
            var.put('keys', var.get('t').get('VISITOR_KEYS').get(var.get('deepest').get('type')))
            #for JS loop
            var.put('_iterator', var.get('ancestries'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('ancestry', var.get('_ref'))
                var.put('path', var.get('ancestry').get((var.get('i')+Js(1.0))))
                if var.get('earliest').neg():
                    var.put('earliest', var.get('path'))
                    continue
                if (var.get('path').get('listKey') and PyJsStrictEq(var.get('earliest').get('listKey'),var.get('path').get('listKey'))):
                    if (var.get('path').get('key')<var.get('earliest').get('key')):
                        var.put('earliest', var.get('path'))
                        continue
                var.put('earliestKeyIndex', var.get('keys').callprop('indexOf', var.get('earliest').get('parentKey')))
                var.put('currentKeyIndex', var.get('keys').callprop('indexOf', var.get('path').get('parentKey')))
                if (var.get('earliestKeyIndex')>var.get('currentKeyIndex')):
                    var.put('earliest', var.get('path'))
            
            return var.get('earliest')
        PyJs_anonymous_1923_._set_name('anonymous')
        return var.get("this").callprop('getDeepestCommonAncestorFrom', var.get('paths'), PyJs_anonymous_1923_)
    PyJsHoisted_getEarliestCommonAncestorFrom_.__name__ = 'getEarliestCommonAncestorFrom'
    var.put('getEarliestCommonAncestorFrom', PyJsHoisted_getEarliestCommonAncestorFrom_)
    @Js
    def PyJsHoisted_getFunctionParent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1922_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path'])
            return (var.get('path').callprop('isFunction') or var.get('path').callprop('isProgram'))
        PyJs_anonymous_1922_._set_name('anonymous')
        return var.get("this").callprop('findParent', PyJs_anonymous_1922_)
    PyJsHoisted_getFunctionParent_.__name__ = 'getFunctionParent'
    var.put('getFunctionParent', PyJsHoisted_getFunctionParent_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1921_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1921_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_find_(callback, this, arguments, var=var):
        var = Scope({'this':this, 'callback':callback, 'arguments':arguments}, var)
        var.registers(['path', 'callback'])
        var.put('path', var.get("this"))
        while 1:
            if var.get('callback')(var.get('path')):
                return var.get('path')
            if not var.put('path', var.get('path').get('parentPath')):
                break
        return var.get("null")
    PyJsHoisted_find_.__name__ = 'find'
    var.put('find', PyJsHoisted_find_)
    @Js
    def PyJsHoisted_getDeepestCommonAncestorFrom_(paths, filter, this, arguments, var=var):
        var = Scope({'filter':filter, 'paths':paths, 'this':this, 'arguments':arguments}, var)
        var.registers(['paths', 'minDepth', '_isArray2', '_this', 'i', 'lastCommonIndex', '_i2', '_ref2', 'filter', 'ancestry', 'ancestries', 'lastCommon', 'shouldMatch', '_iterator2', 'first'])
        var.put('_this', var.get("this"))
        if var.get('paths').get('length').neg():
            return var.get("this")
        if PyJsStrictEq(var.get('paths').get('length'),Js(1.0)):
            return var.get('paths').get('0')
        var.put('minDepth', var.get('Infinity'))
        var.put('lastCommonIndex', PyJsComma(Js(0.0), Js(None)))
        var.put('lastCommon', PyJsComma(Js(0.0), Js(None)))
        @Js
        def PyJs_anonymous_1924_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path', 'ancestry'])
            var.put('ancestry', Js([]))
            while 1:
                var.get('ancestry').callprop('unshift', var.get('path'))
                if not (var.put('path', var.get('path').get('parentPath')) and PyJsStrictNeq(var.get('path'),var.get('_this'))):
                    break
            if (var.get('ancestry').get('length')<var.get('minDepth')):
                var.put('minDepth', var.get('ancestry').get('length'))
            return var.get('ancestry')
        PyJs_anonymous_1924_._set_name('anonymous')
        var.put('ancestries', var.get('paths').callprop('map', PyJs_anonymous_1924_))
        var.put('first', var.get('ancestries').get('0'))
        class JS_CONTINUE_LABEL_64657074684c6f6f70(Exception): pass
        class JS_BREAK_LABEL_64657074684c6f6f70(Exception): pass
        try:
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('minDepth')):
                try:
                    try:
                        var.put('shouldMatch', var.get('first').get(var.get('i')))
                        #for JS loop
                        var.put('_iterator2', var.get('ancestries'))
                        var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                        var.put('_i2', Js(0.0))
                        var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                        while 1:
                            pass
                            if var.get('_isArray2'):
                                if (var.get('_i2')>=var.get('_iterator2').get('length')):
                                    break
                                var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                            else:
                                var.put('_i2', var.get('_iterator2').callprop('next'))
                                if var.get('_i2').get('done'):
                                    break
                                var.put('_ref2', var.get('_i2').get('value'))
                            var.put('ancestry', var.get('_ref2'))
                            if PyJsStrictNeq(var.get('ancestry').get(var.get('i')),var.get('shouldMatch')):
                                raise JS_BREAK_LABEL_64657074684c6f6f70("Breaked")
                        
                        var.put('lastCommonIndex', var.get('i'))
                        var.put('lastCommon', var.get('shouldMatch'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                except JS_CONTINUE_LABEL_64657074684c6f6f70:
                    pass
        except JS_BREAK_LABEL_64657074684c6f6f70:
            pass
        if var.get('lastCommon'):
            if var.get('filter'):
                return var.get('filter')(var.get('lastCommon'), var.get('lastCommonIndex'), var.get('ancestries'))
            else:
                return var.get('lastCommon')
        else:
            PyJsTempException = JsToPyException(var.get('Error').create(Js("Couldn't find intersection")))
            raise PyJsTempException
    PyJsHoisted_getDeepestCommonAncestorFrom_.__name__ = 'getDeepestCommonAncestorFrom'
    var.put('getDeepestCommonAncestorFrom', PyJsHoisted_getDeepestCommonAncestorFrom_)
    @Js
    def PyJsHoisted_inShadow_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['shadow', 'parentFn', 'key'])
        @Js
        def PyJs_anonymous_1925_(p, this, arguments, var=var):
            var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
            var.registers(['p'])
            return var.get('p').callprop('isFunction')
        PyJs_anonymous_1925_._set_name('anonymous')
        var.put('parentFn', (var.get("this") if var.get("this").callprop('isFunction') else var.get("this").callprop('findParent', PyJs_anonymous_1925_)))
        if var.get('parentFn').neg():
            return var.get('undefined')
        if (var.get('parentFn').callprop('isFunctionExpression') or var.get('parentFn').callprop('isFunctionDeclaration')):
            var.put('shadow', var.get('parentFn').get('node').get('shadow'))
            if (var.get('shadow') and (var.get('key').neg() or PyJsStrictNeq(var.get('shadow').get(var.get('key')),Js(False)))):
                return var.get('parentFn')
        else:
            if var.get('parentFn').callprop('isArrowFunctionExpression'):
                return var.get('parentFn')
        return var.get("null")
    PyJsHoisted_inShadow_.__name__ = 'inShadow'
    var.put('inShadow', PyJsHoisted_inShadow_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('findParent', var.get('findParent'))
    var.get('exports').put('find', var.get('find'))
    var.get('exports').put('getFunctionParent', var.get('getFunctionParent'))
    var.get('exports').put('getStatementParent', var.get('getStatementParent'))
    var.get('exports').put('getEarliestCommonAncestorFrom', var.get('getEarliestCommonAncestorFrom'))
    var.get('exports').put('getDeepestCommonAncestorFrom', var.get('getDeepestCommonAncestorFrom'))
    var.get('exports').put('getAncestry', var.get('getAncestry'))
    var.get('exports').put('inType', var.get('inType'))
    var.get('exports').put('inShadow', var.get('inShadow'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_1919_._set_name('anonymous')
PyJs_Object_1926_ = Js({'./index':Js(232.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1927_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'addComments', 'module', 'shareCommentsWithSiblings', 'addComment'])
    @Js
    def PyJsHoisted_addComments_(type, comments, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments, 'comments':comments}, var)
        var.registers(['node', 'type', 'comments', 'key'])
        if var.get('comments').neg():
            return var.get('undefined')
        var.put('node', var.get("this").get('node'))
        if var.get('node').neg():
            return var.get('undefined')
        var.put('key', (var.get('type')+Js('Comments')))
        if var.get('node').get(var.get('key')):
            var.get('node').put(var.get('key'), var.get('node').get(var.get('key')).callprop('concat', var.get('comments')))
        else:
            var.get('node').put(var.get('key'), var.get('comments'))
    PyJsHoisted_addComments_.__name__ = 'addComments'
    var.put('addComments', PyJsHoisted_addComments_)
    @Js
    def PyJsHoisted_addComment_(type, content, line, this, arguments, var=var):
        var = Scope({'content':content, 'this':this, 'line':line, 'type':type, 'arguments':arguments}, var)
        var.registers(['content', 'line', 'type'])
        PyJs_Object_1928_ = Js({'type':(Js('CommentLine') if var.get('line') else Js('CommentBlock')),'value':var.get('content')})
        var.get("this").callprop('addComments', var.get('type'), Js([PyJs_Object_1928_]))
    PyJsHoisted_addComment_.__name__ = 'addComment'
    var.put('addComment', PyJsHoisted_addComment_)
    @Js
    def PyJsHoisted_shareCommentsWithSiblings_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'leading', 'prev', 'trailing', 'next'])
        var.put('node', var.get("this").get('node'))
        if var.get('node').neg():
            return var.get('undefined')
        var.put('trailing', var.get('node').get('trailingComments'))
        var.put('leading', var.get('node').get('leadingComments'))
        if (var.get('trailing').neg() and var.get('leading').neg()):
            return var.get('undefined')
        var.put('prev', var.get("this").callprop('getSibling', (var.get("this").get('key')-Js(1.0))))
        var.put('next', var.get("this").callprop('getSibling', (var.get("this").get('key')+Js(1.0))))
        if var.get('prev').get('node').neg():
            var.put('prev', var.get('next'))
        if var.get('next').get('node').neg():
            var.put('next', var.get('prev'))
        var.get('prev').callprop('addComments', Js('trailing'), var.get('leading'))
        var.get('next').callprop('addComments', Js('leading'), var.get('trailing'))
    PyJsHoisted_shareCommentsWithSiblings_.__name__ = 'shareCommentsWithSiblings'
    var.put('shareCommentsWithSiblings', PyJsHoisted_shareCommentsWithSiblings_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('shareCommentsWithSiblings', var.get('shareCommentsWithSiblings'))
    var.get('exports').put('addComment', var.get('addComment'))
    var.get('exports').put('addComments', var.get('addComments'))
    pass
    pass
    pass
PyJs_anonymous_1927_._set_name('anonymous')
PyJs_Object_1929_ = Js({})
@Js
def PyJs_anonymous_1930_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_getQueueContexts', 'pushContext', 'skip', 'module', 'resync', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'skipKey', '_call', 'popContext', 'visit', 'setKey', 'call', 'exports', '_resyncParent', '_resyncRemoved', 'isBlacklisted', 'stop', '_resyncList', '_resyncKey', '_index2', 'setContext', '_index', 'setup', 'setScope', 'requeue', 'require'])
    @Js
    def PyJsHoisted_popContext_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").get('contexts').callprop('pop')
        var.get("this").callprop('setContext', var.get("this").get('contexts').get((var.get("this").get('contexts').get('length')-Js(1.0))))
    PyJsHoisted_popContext_.__name__ = 'popContext'
    var.put('popContext', PyJsHoisted_popContext_)
    @Js
    def PyJsHoisted_setup_(parentPath, container, listKey, key, this, arguments, var=var):
        var = Scope({'container':container, 'arguments':arguments, 'key':key, 'parentPath':parentPath, 'this':this, 'listKey':listKey}, var)
        var.registers(['listKey', 'container', 'key', 'parentPath'])
        var.get("this").put('inList', var.get('listKey').neg().neg())
        var.get("this").put('listKey', var.get('listKey'))
        var.get("this").put('parentKey', (var.get('listKey') or var.get('key')))
        var.get("this").put('container', var.get('container'))
        var.get("this").put('parentPath', (var.get('parentPath') or var.get("this").get('parentPath')))
        var.get("this").callprop('setKey', var.get('key'))
    PyJsHoisted_setup_.__name__ = 'setup'
    var.put('setup', PyJsHoisted_setup_)
    @Js
    def PyJsHoisted_requeue_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['_isArray2', 'contexts', '_i2', '_ref2', 'context', 'pathToQueue', '_iterator2'])
        var.put('pathToQueue', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else var.get("this")))
        if var.get('pathToQueue').get('removed'):
            return var.get('undefined')
        var.put('contexts', var.get("this").get('contexts'))
        #for JS loop
        var.put('_iterator2', var.get('contexts'))
        var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
        var.put('_i2', Js(0.0))
        var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
        while 1:
            pass
            if var.get('_isArray2'):
                if (var.get('_i2')>=var.get('_iterator2').get('length')):
                    break
                var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i2', var.get('_iterator2').callprop('next'))
                if var.get('_i2').get('done'):
                    break
                var.put('_ref2', var.get('_i2').get('value'))
            var.put('context', var.get('_ref2'))
            var.get('context').callprop('maybeQueue', var.get('pathToQueue'))
        
    PyJsHoisted_requeue_.__name__ = 'requeue'
    var.put('requeue', PyJsHoisted_requeue_)
    @Js
    def PyJsHoisted__resyncParent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('parentPath'):
            var.get("this").put('parent', var.get("this").get('parentPath').get('node'))
    PyJsHoisted__resyncParent_.__name__ = '_resyncParent'
    var.put('_resyncParent', PyJsHoisted__resyncParent_)
    @Js
    def PyJsHoisted__resyncRemoved_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if (((var.get("this").get('key')==var.get("null")) or var.get("this").get('container').neg()) or PyJsStrictNeq(var.get("this").get('container').get(var.get("this").get('key')),var.get("this").get('node'))):
            var.get("this").callprop('_markRemoved')
    PyJsHoisted__resyncRemoved_.__name__ = '_resyncRemoved'
    var.put('_resyncRemoved', PyJsHoisted__resyncRemoved_)
    @Js
    def PyJsHoisted_skip_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('shouldSkip', var.get('true'))
    PyJsHoisted_skip_.__name__ = 'skip'
    var.put('skip', PyJsHoisted_skip_)
    @Js
    def PyJsHoisted_resync_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('removed'):
            return var.get('undefined')
        var.get("this").callprop('_resyncParent')
        var.get("this").callprop('_resyncList')
        var.get("this").callprop('_resyncKey')
    PyJsHoisted_resync_.__name__ = 'resync'
    var.put('resync', PyJsHoisted_resync_)
    @Js
    def PyJsHoisted_isBlacklisted_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['blacklist'])
        var.put('blacklist', var.get("this").get('opts').get('blacklist'))
        return (var.get('blacklist') and (var.get('blacklist').callprop('indexOf', var.get("this").get('node').get('type'))>(-Js(1.0))))
    PyJsHoisted_isBlacklisted_.__name__ = 'isBlacklisted'
    var.put('isBlacklisted', PyJsHoisted_isBlacklisted_)
    @Js
    def PyJsHoisted_visit_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('node').neg():
            return Js(False)
        if var.get("this").callprop('isBlacklisted'):
            return Js(False)
        if (var.get("this").get('opts').get('shouldSkip') and var.get("this").get('opts').callprop('shouldSkip', var.get("this"))):
            return Js(False)
        if (var.get("this").callprop('call', Js('enter')) or var.get("this").get('shouldSkip')):
            @Js
            def PyJs_anonymous_1933_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js('Skip...')
            PyJs_anonymous_1933_._set_name('anonymous')
            var.get("this").callprop('debug', PyJs_anonymous_1933_)
            return var.get("this").get('shouldStop')
        @Js
        def PyJs_anonymous_1934_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('Recursing into...')
        PyJs_anonymous_1934_._set_name('anonymous')
        var.get("this").callprop('debug', PyJs_anonymous_1934_)
        var.get('_index2').get('default').callprop('node', var.get("this").get('node'), var.get("this").get('opts'), var.get("this").get('scope'), var.get("this").get('state'), var.get("this"), var.get("this").get('skipKeys'))
        var.get("this").callprop('call', Js('exit'))
        return var.get("this").get('shouldStop')
    PyJsHoisted_visit_.__name__ = 'visit'
    var.put('visit', PyJsHoisted_visit_)
    @Js
    def PyJsHoisted__resyncList_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['newContainer'])
        if (var.get("this").get('parent').neg() or var.get("this").get('inList').neg()):
            return var.get('undefined')
        var.put('newContainer', var.get("this").get('parent').get(var.get("this").get('listKey')))
        if PyJsStrictEq(var.get("this").get('container'),var.get('newContainer')):
            return var.get('undefined')
        var.get("this").put('container', (var.get('newContainer') or var.get("null")))
    PyJsHoisted__resyncList_.__name__ = '_resyncList'
    var.put('_resyncList', PyJsHoisted__resyncList_)
    @Js
    def PyJsHoisted_stop_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('shouldStop', var.get('true'))
        var.get("this").put('shouldSkip', var.get('true'))
    PyJsHoisted_stop_.__name__ = 'stop'
    var.put('stop', PyJsHoisted_stop_)
    @Js
    def PyJsHoisted__resyncKey_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'key'])
        if var.get("this").get('container').neg():
            return var.get('undefined')
        if PyJsStrictEq(var.get("this").get('node'),var.get("this").get('container').get(var.get("this").get('key'))):
            return var.get('undefined')
        if var.get('Array').callprop('isArray', var.get("this").get('container')):
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get("this").get('container').get('length')):
                try:
                    if PyJsStrictEq(var.get("this").get('container').get(var.get('i')),var.get("this").get('node')):
                        return var.get("this").callprop('setKey', var.get('i'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        else:
            for PyJsTemp in var.get("this").get('container'):
                var.put('key', PyJsTemp)
                if PyJsStrictEq(var.get("this").get('container').get(var.get('key')),var.get("this").get('node')):
                    return var.get("this").callprop('setKey', var.get('key'))
        var.get("this").put('key', var.get("null"))
    PyJsHoisted__resyncKey_.__name__ = '_resyncKey'
    var.put('_resyncKey', PyJsHoisted__resyncKey_)
    @Js
    def PyJsHoisted_setKey_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        var.get("this").put('key', var.get('key'))
        var.get("this").put('node', var.get("this").get('container').get(var.get("this").get('key')))
        var.get("this").put('type', (var.get("this").get('node') and var.get("this").get('node').get('type')))
    PyJsHoisted_setKey_.__name__ = 'setKey'
    var.put('setKey', PyJsHoisted_setKey_)
    @Js
    def PyJsHoisted_call_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key', 'opts'])
        var.put('opts', var.get("this").get('opts'))
        @Js
        def PyJs_anonymous_1932_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('key')
        PyJs_anonymous_1932_._set_name('anonymous')
        var.get("this").callprop('debug', PyJs_anonymous_1932_)
        if var.get("this").get('node'):
            if var.get("this").callprop('_call', var.get('opts').get(var.get('key'))):
                return var.get('true')
        if var.get("this").get('node'):
            return var.get("this").callprop('_call', (var.get('opts').get(var.get("this").get('node').get('type')) and var.get('opts').get(var.get("this").get('node').get('type')).get(var.get('key'))))
        return Js(False)
    PyJsHoisted_call_.__name__ = 'call'
    var.put('call', PyJsHoisted_call_)
    @Js
    def PyJsHoisted_pushContext_(context, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'context':context}, var)
        var.registers(['context'])
        var.get("this").get('contexts').callprop('push', var.get('context'))
        var.get("this").callprop('setContext', var.get('context'))
    PyJsHoisted_pushContext_.__name__ = 'pushContext'
    var.put('pushContext', PyJsHoisted_pushContext_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1931_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1931_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_setScope_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['path', 'target'])
        if (var.get("this").get('opts') and var.get("this").get('opts').get('noScope')):
            return var.get('undefined')
        var.put('target', (var.get("this").get('context') and var.get("this").get('context').get('scope')))
        if var.get('target').neg():
            var.put('path', var.get("this").get('parentPath'))
            while (var.get('path') and var.get('target').neg()):
                if (var.get('path').get('opts') and var.get('path').get('opts').get('noScope')):
                    return var.get('undefined')
                var.put('target', var.get('path').get('scope'))
                var.put('path', var.get('path').get('parentPath'))
        var.get("this").put('scope', var.get("this").callprop('getScope', var.get('target')))
        if var.get("this").get('scope'):
            var.get("this").get('scope').callprop('init')
    PyJsHoisted_setScope_.__name__ = 'setScope'
    var.put('setScope', PyJsHoisted_setScope_)
    @Js
    def PyJsHoisted_setContext_(context, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'context':context}, var)
        var.registers(['context'])
        var.get("this").put('shouldSkip', Js(False))
        var.get("this").put('shouldStop', Js(False))
        var.get("this").put('removed', Js(False))
        PyJs_Object_1935_ = Js({})
        var.get("this").put('skipKeys', PyJs_Object_1935_)
        if var.get('context'):
            var.get("this").put('context', var.get('context'))
            var.get("this").put('state', var.get('context').get('state'))
            var.get("this").put('opts', var.get('context').get('opts'))
        var.get("this").callprop('setScope')
        return var.get("this")
    PyJsHoisted_setContext_.__name__ = 'setContext'
    var.put('setContext', PyJsHoisted_setContext_)
    @Js
    def PyJsHoisted__getQueueContexts_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['contexts', 'path'])
        var.put('path', var.get("this"))
        var.put('contexts', var.get("this").get('contexts'))
        while var.get('contexts').get('length').neg():
            var.put('path', var.get('path').get('parentPath'))
            var.put('contexts', var.get('path').get('contexts'))
        return var.get('contexts')
    PyJsHoisted__getQueueContexts_.__name__ = '_getQueueContexts'
    var.put('_getQueueContexts', PyJsHoisted__getQueueContexts_)
    @Js
    def PyJsHoisted_skipKey_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        var.get("this").get('skipKeys').put(var.get('key'), var.get('true'))
    PyJsHoisted_skipKey_.__name__ = 'skipKey'
    var.put('skipKey', PyJsHoisted_skipKey_)
    @Js
    def PyJsHoisted__call_(fns, this, arguments, var=var):
        var = Scope({'this':this, 'fns':fns, 'arguments':arguments}, var)
        var.registers(['node', '_isArray', '_iterator', 'ret', '_i', 'fns', '_ref', 'fn'])
        if var.get('fns').neg():
            return Js(False)
        #for JS loop
        var.put('_iterator', var.get('fns'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('fn', var.get('_ref'))
            if var.get('fn').neg():
                continue
            var.put('node', var.get("this").get('node'))
            if var.get('node').neg():
                return var.get('true')
            var.put('ret', var.get('fn').callprop('call', var.get("this").get('state'), var.get("this"), var.get("this").get('state')))
            if var.get('ret'):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unexpected return value from visitor method ')+var.get('fn'))))
                raise PyJsTempException
            if PyJsStrictNeq(var.get("this").get('node'),var.get('node')):
                return var.get('true')
            if ((var.get("this").get('shouldStop') or var.get("this").get('shouldSkip')) or var.get("this").get('removed')):
                return var.get('true')
        
        return Js(False)
    PyJsHoisted__call_.__name__ = '_call'
    var.put('_call', PyJsHoisted__call_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('call', var.get('call'))
    var.get('exports').put('_call', var.get('_call'))
    var.get('exports').put('isBlacklisted', var.get('isBlacklisted'))
    var.get('exports').put('visit', var.get('visit'))
    var.get('exports').put('skip', var.get('skip'))
    var.get('exports').put('skipKey', var.get('skipKey'))
    var.get('exports').put('stop', var.get('stop'))
    var.get('exports').put('setScope', var.get('setScope'))
    var.get('exports').put('setContext', var.get('setContext'))
    var.get('exports').put('resync', var.get('resync'))
    var.get('exports').put('_resyncParent', var.get('_resyncParent'))
    var.get('exports').put('_resyncKey', var.get('_resyncKey'))
    var.get('exports').put('_resyncList', var.get('_resyncList'))
    var.get('exports').put('_resyncRemoved', var.get('_resyncRemoved'))
    var.get('exports').put('popContext', var.get('popContext'))
    var.get('exports').put('pushContext', var.get('pushContext'))
    var.get('exports').put('setup', var.get('setup'))
    var.get('exports').put('setKey', var.get('setKey'))
    var.get('exports').put('requeue', var.get('requeue'))
    var.get('exports').put('_getQueueContexts', var.get('_getQueueContexts'))
    var.put('_index', var.get('require')(Js('../index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_1930_._set_name('anonymous')
PyJs_Object_1936_ = Js({'../index':Js(225.0),'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_1937_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'arrowFunctionToShadowed', '_interopRequireWildcard', 'toComputedKey', '_babelTypes', 'module', 't', 'ensureBlock', 'require'])
    @Js
    def PyJsHoisted_toComputedKey_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'key'])
        var.put('node', var.get("this").get('node'))
        var.put('key', PyJsComma(Js(0.0), Js(None)))
        if var.get("this").callprop('isMemberExpression'):
            var.put('key', var.get('node').get('property'))
        else:
            if (var.get("this").callprop('isProperty') or var.get("this").callprop('isMethod')):
                var.put('key', var.get('node').get('key'))
            else:
                PyJsTempException = JsToPyException(var.get('ReferenceError').create(Js('todo')))
                raise PyJsTempException
        if var.get('node').get('computed').neg():
            if var.get('t').callprop('isIdentifier', var.get('key')):
                var.put('key', var.get('t').callprop('stringLiteral', var.get('key').get('name')))
        return var.get('key')
    PyJsHoisted_toComputedKey_.__name__ = 'toComputedKey'
    var.put('toComputedKey', PyJsHoisted_toComputedKey_)
    @Js
    def PyJsHoisted_arrowFunctionToShadowed_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('isArrowFunctionExpression').neg():
            return var.get('undefined')
        var.get("this").callprop('ensureBlock')
        var.put('node', var.get("this").get('node'))
        var.get('node').put('expression', Js(False))
        var.get('node').put('type', Js('FunctionExpression'))
        var.get('node').put('shadow', (var.get('node').get('shadow') or var.get('true')))
    PyJsHoisted_arrowFunctionToShadowed_.__name__ = 'arrowFunctionToShadowed'
    var.put('arrowFunctionToShadowed', PyJsHoisted_arrowFunctionToShadowed_)
    @Js
    def PyJsHoisted_ensureBlock_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('ensureBlock', var.get("this").get('node'))
    PyJsHoisted_ensureBlock_.__name__ = 'ensureBlock'
    var.put('ensureBlock', PyJsHoisted_ensureBlock_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1938_ = Js({})
            var.put('newObj', PyJs_Object_1938_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('toComputedKey', var.get('toComputedKey'))
    var.get('exports').put('ensureBlock', var.get('ensureBlock'))
    var.get('exports').put('arrowFunctionToShadowed', var.get('arrowFunctionToShadowed'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
PyJs_anonymous_1937_._set_name('anonymous')
PyJs_Object_1939_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1940_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_1941_ = Js({})
    @Js
    def PyJs_anonymous_1942_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['_typeof2', '_typeof3', '_map', 'INVALID_METHODS', 'VALID_CALLEES', 'evaluateTruthy', 'global', 'evaluate', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_map2'])
        @Js
        def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            PyJs_Object_1943_ = Js({'default':var.get('obj')})
            return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1943_)
        PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
        var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
        @Js
        def PyJsHoisted_evaluate_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['deoptPath', 'evaluate', 'value', '_evaluate', 'confident', 'deopt', 'seen'])
            @Js
            def PyJsHoisted_evaluate_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['node', 'item', 'path', 'val', 'existing'])
                var.put('node', var.get('path').get('node'))
                if var.get('seen').callprop('has', var.get('node')):
                    var.put('existing', var.get('seen').callprop('get', var.get('node')))
                    if var.get('existing').get('resolved'):
                        return var.get('existing').get('value')
                    else:
                        var.get('deopt')(var.get('path'))
                        return var.get('undefined')
                else:
                    PyJs_Object_1945_ = Js({'resolved':Js(False)})
                    var.put('item', PyJs_Object_1945_)
                    var.get('seen').callprop('set', var.get('node'), var.get('item'))
                    var.put('val', var.get('_evaluate')(var.get('path')))
                    if var.get('confident'):
                        var.get('item').put('resolved', var.get('true'))
                        var.get('item').put('value', var.get('val'))
                    return var.get('val')
            PyJsHoisted_evaluate_.__name__ = 'evaluate'
            var.put('evaluate', PyJsHoisted_evaluate_)
            @Js
            def PyJsHoisted_deopt_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                if var.get('confident').neg():
                    return var.get('undefined')
                var.put('deoptPath', var.get('path'))
                var.put('confident', Js(False))
            PyJsHoisted_deopt_.__name__ = 'deopt'
            var.put('deopt', PyJsHoisted_deopt_)
            @Js
            def PyJsHoisted__evaluate_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['resolved', 'arr', 'right', '_isArray3', '_isArray2', 'leftConfident', 'binding', 'argument', '_ref2', '_object', '_value2', 'arg', '_ref', '_exprs', '_iterator', '_right', '_i3', '_i2', 'prop', '_i', 'props', 'wasConfident', 'type', '_left', 'node', '_type', 'args', 'func', 'testResult', 'object', 'elems', '_value', '_elem', 'key', 'path', '_isArray', 'context', 'obj', 'left', 'valuePath', 'i', 'expr', 'keyPath', '_ref3', 'elem', 'rightConfident', 'exprs', 'str', '_property', 'property', 'callee', '_iterator3', '_iterator2'])
                if var.get('confident').neg():
                    return var.get('undefined')
                var.put('node', var.get('path').get('node'))
                if var.get('path').callprop('isSequenceExpression'):
                    var.put('exprs', var.get('path').callprop('get', Js('expressions')))
                    return var.get('evaluate')(var.get('exprs').get((var.get('exprs').get('length')-Js(1.0))))
                if ((var.get('path').callprop('isStringLiteral') or var.get('path').callprop('isNumericLiteral')) or var.get('path').callprop('isBooleanLiteral')):
                    return var.get('node').get('value')
                if var.get('path').callprop('isNullLiteral'):
                    return var.get("null")
                if var.get('path').callprop('isTemplateLiteral'):
                    var.put('str', Js(''))
                    var.put('i', Js(0.0))
                    var.put('_exprs', var.get('path').callprop('get', Js('expressions')))
                    #for JS loop
                    var.put('_iterator', var.get('node').get('quasis'))
                    var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                    var.put('_i', Js(0.0))
                    var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                    while 1:
                        pass
                        if var.get('_isArray'):
                            if (var.get('_i')>=var.get('_iterator').get('length')):
                                break
                            var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i', var.get('_iterator').callprop('next'))
                            if var.get('_i').get('done'):
                                break
                            var.put('_ref', var.get('_i').get('value'))
                        var.put('elem', var.get('_ref'))
                        if var.get('confident').neg():
                            break
                        var.put('str', var.get('elem').get('value').get('cooked'), '+')
                        var.put('expr', var.get('_exprs').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                        if var.get('expr'):
                            var.put('str', var.get('String')(var.get('evaluate')(var.get('expr'))), '+')
                    
                    if var.get('confident').neg():
                        return var.get('undefined')
                    return var.get('str')
                if var.get('path').callprop('isConditionalExpression'):
                    var.put('testResult', var.get('evaluate')(var.get('path').callprop('get', Js('test'))))
                    if var.get('confident').neg():
                        return var.get('undefined')
                    if var.get('testResult'):
                        return var.get('evaluate')(var.get('path').callprop('get', Js('consequent')))
                    else:
                        return var.get('evaluate')(var.get('path').callprop('get', Js('alternate')))
                if var.get('path').callprop('isExpressionWrapper'):
                    return var.get('evaluate')(var.get('path').callprop('get', Js('expression')))
                PyJs_Object_1946_ = Js({'callee':var.get('node')})
                if (var.get('path').callprop('isMemberExpression') and var.get('path').get('parentPath').callprop('isCallExpression', PyJs_Object_1946_).neg()):
                    var.put('property', var.get('path').callprop('get', Js('property')))
                    var.put('object', var.get('path').callprop('get', Js('object')))
                    if (var.get('object').callprop('isLiteral') and var.get('property').callprop('isIdentifier')):
                        var.put('_value', var.get('object').get('node').get('value'))
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('_value',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_value'))))
                        if (PyJsStrictEq(var.get('type'),Js('number')) or PyJsStrictEq(var.get('type'),Js('string'))):
                            return var.get('_value').get(var.get('property').get('node').get('name'))
                if var.get('path').callprop('isReferencedIdentifier'):
                    var.put('binding', var.get('path').get('scope').callprop('getBinding', var.get('node').get('name')))
                    if (var.get('binding') and (var.get('binding').get('constantViolations').get('length')>Js(0.0))):
                        return var.get('deopt')(var.get('binding').get('path'))
                    if (var.get('binding') and var.get('binding').get('hasValue')):
                        return var.get('binding').get('value')
                    else:
                        if PyJsStrictEq(var.get('node').get('name'),Js('undefined')):
                            return var.get('undefined')
                        else:
                            if PyJsStrictEq(var.get('node').get('name'),Js('Infinity')):
                                return var.get('Infinity')
                            else:
                                if PyJsStrictEq(var.get('node').get('name'),Js('NaN')):
                                    return var.get('NaN')
                        var.put('resolved', var.get('path').callprop('resolve'))
                        if PyJsStrictEq(var.get('resolved'),var.get('path')):
                            return var.get('deopt')(var.get('path'))
                        else:
                            return var.get('evaluate')(var.get('resolved'))
                PyJs_Object_1947_ = Js({'prefix':var.get('true')})
                if var.get('path').callprop('isUnaryExpression', PyJs_Object_1947_):
                    if PyJsStrictEq(var.get('node').get('operator'),Js('void')):
                        return var.get('undefined')
                    var.put('argument', var.get('path').callprop('get', Js('argument')))
                    if (PyJsStrictEq(var.get('node').get('operator'),Js('typeof')) and (var.get('argument').callprop('isFunction') or var.get('argument').callprop('isClass'))):
                        return Js('function')
                    var.put('arg', var.get('evaluate')(var.get('argument')))
                    if var.get('confident').neg():
                        return var.get('undefined')
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('node').get('operator'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('!')):
                            SWITCHED = True
                            return var.get('arg').neg()
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('+')):
                            SWITCHED = True
                            return (+var.get('arg'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('-')):
                            SWITCHED = True
                            return (-var.get('arg'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('~')):
                            SWITCHED = True
                            return (~var.get('arg'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('typeof')):
                            SWITCHED = True
                            return (Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('arg')))
                        SWITCHED = True
                        break
                if var.get('path').callprop('isArrayExpression'):
                    var.put('arr', Js([]))
                    var.put('elems', var.get('path').callprop('get', Js('elements')))
                    #for JS loop
                    var.put('_iterator2', var.get('elems'))
                    var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                    var.put('_i2', Js(0.0))
                    var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                    while 1:
                        pass
                        if var.get('_isArray2'):
                            if (var.get('_i2')>=var.get('_iterator2').get('length')):
                                break
                            var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i2', var.get('_iterator2').callprop('next'))
                            if var.get('_i2').get('done'):
                                break
                            var.put('_ref2', var.get('_i2').get('value'))
                        var.put('_elem', var.get('_ref2'))
                        var.put('_elem', var.get('_elem').callprop('evaluate'))
                        if var.get('_elem').get('confident'):
                            var.get('arr').callprop('push', var.get('_elem').get('value'))
                        else:
                            return var.get('deopt')(var.get('_elem'))
                    
                    return var.get('arr')
                if var.get('path').callprop('isObjectExpression'):
                    PyJs_Object_1948_ = Js({})
                    var.put('obj', PyJs_Object_1948_)
                    var.put('props', var.get('path').callprop('get', Js('properties')))
                    #for JS loop
                    var.put('_iterator3', var.get('props'))
                    var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                    var.put('_i3', Js(0.0))
                    var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                    while 1:
                        pass
                        if var.get('_isArray3'):
                            if (var.get('_i3')>=var.get('_iterator3').get('length')):
                                break
                            var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i3', var.get('_iterator3').callprop('next'))
                            if var.get('_i3').get('done'):
                                break
                            var.put('_ref3', var.get('_i3').get('value'))
                        var.put('prop', var.get('_ref3'))
                        if (var.get('prop').callprop('isObjectMethod') or var.get('prop').callprop('isSpreadProperty')):
                            return var.get('deopt')(var.get('prop'))
                        var.put('keyPath', var.get('prop').callprop('get', Js('key')))
                        var.put('key', var.get('keyPath'))
                        if var.get('prop').get('node').get('computed'):
                            var.put('key', var.get('key').callprop('evaluate'))
                            if var.get('key').get('confident').neg():
                                return var.get('deopt')(var.get('keyPath'))
                            var.put('key', var.get('key').get('value'))
                        else:
                            if var.get('key').callprop('isIdentifier'):
                                var.put('key', var.get('key').get('node').get('name'))
                            else:
                                var.put('key', var.get('key').get('node').get('value'))
                        var.put('valuePath', var.get('prop').callprop('get', Js('value')))
                        var.put('_value2', var.get('valuePath').callprop('evaluate'))
                        if var.get('_value2').get('confident').neg():
                            return var.get('deopt')(var.get('valuePath'))
                        var.put('_value2', var.get('_value2').get('value'))
                        var.get('obj').put(var.get('key'), var.get('_value2'))
                    
                    return var.get('obj')
                if var.get('path').callprop('isLogicalExpression'):
                    var.put('wasConfident', var.get('confident'))
                    var.put('left', var.get('evaluate')(var.get('path').callprop('get', Js('left'))))
                    var.put('leftConfident', var.get('confident'))
                    var.put('confident', var.get('wasConfident'))
                    var.put('right', var.get('evaluate')(var.get('path').callprop('get', Js('right'))))
                    var.put('rightConfident', var.get('confident'))
                    var.put('confident', (var.get('leftConfident') and var.get('rightConfident')))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('node').get('operator'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('||')):
                            SWITCHED = True
                            if (var.get('left') and var.get('leftConfident')):
                                var.put('confident', var.get('true'))
                                return var.get('left')
                            if var.get('confident').neg():
                                return var.get('undefined')
                            return (var.get('left') or var.get('right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('&&')):
                            SWITCHED = True
                            if ((var.get('left').neg() and var.get('leftConfident')) or (var.get('right').neg() and var.get('rightConfident'))):
                                var.put('confident', var.get('true'))
                            if var.get('confident').neg():
                                return var.get('undefined')
                            return (var.get('left') and var.get('right'))
                        SWITCHED = True
                        break
                if var.get('path').callprop('isBinaryExpression'):
                    var.put('_left', var.get('evaluate')(var.get('path').callprop('get', Js('left'))))
                    if var.get('confident').neg():
                        return var.get('undefined')
                    var.put('_right', var.get('evaluate')(var.get('path').callprop('get', Js('right'))))
                    if var.get('confident').neg():
                        return var.get('undefined')
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('node').get('operator'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('-')):
                            SWITCHED = True
                            return (var.get('_left')-var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('+')):
                            SWITCHED = True
                            return (var.get('_left')+var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('/')):
                            SWITCHED = True
                            return (var.get('_left')/var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('*')):
                            SWITCHED = True
                            return (var.get('_left')*var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('%')):
                            SWITCHED = True
                            return (var.get('_left')%var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('**')):
                            SWITCHED = True
                            return var.get('Math').callprop('pow', var.get('_left'), var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('<')):
                            SWITCHED = True
                            return (var.get('_left')<var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('>')):
                            SWITCHED = True
                            return (var.get('_left')>var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('<=')):
                            SWITCHED = True
                            return (var.get('_left')<=var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('>=')):
                            SWITCHED = True
                            return (var.get('_left')>=var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('==')):
                            SWITCHED = True
                            return (var.get('_left')==var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('!=')):
                            SWITCHED = True
                            return (var.get('_left')!=var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('===')):
                            SWITCHED = True
                            return PyJsStrictEq(var.get('_left'),var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('!==')):
                            SWITCHED = True
                            return PyJsStrictNeq(var.get('_left'),var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('|')):
                            SWITCHED = True
                            return (var.get('_left')|var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('&')):
                            SWITCHED = True
                            return (var.get('_left')&var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('^')):
                            SWITCHED = True
                            return (var.get('_left')^var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('<<')):
                            SWITCHED = True
                            return (var.get('_left')<<var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('>>')):
                            SWITCHED = True
                            return (var.get('_left')>>var.get('_right'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('>>>')):
                            SWITCHED = True
                            return PyJsBshift(var.get('_left'),var.get('_right'))
                        SWITCHED = True
                        break
                if var.get('path').callprop('isCallExpression'):
                    var.put('callee', var.get('path').callprop('get', Js('callee')))
                    var.put('context', PyJsComma(Js(0.0), Js(None)))
                    var.put('func', PyJsComma(Js(0.0), Js(None)))
                    if ((var.get('callee').callprop('isIdentifier') and var.get('path').get('scope').callprop('getBinding', var.get('callee').get('node').get('name'), var.get('true')).neg()) and (var.get('VALID_CALLEES').callprop('indexOf', var.get('callee').get('node').get('name'))>=Js(0.0))):
                        var.put('func', var.get('global').get(var.get('node').get('callee').get('name')))
                    if var.get('callee').callprop('isMemberExpression'):
                        var.put('_object', var.get('callee').callprop('get', Js('object')))
                        var.put('_property', var.get('callee').callprop('get', Js('property')))
                        if (((var.get('_object').callprop('isIdentifier') and var.get('_property').callprop('isIdentifier')) and (var.get('VALID_CALLEES').callprop('indexOf', var.get('_object').get('node').get('name'))>=Js(0.0))) and (var.get('INVALID_METHODS').callprop('indexOf', var.get('_property').get('node').get('name'))<Js(0.0))):
                            var.put('context', var.get('global').get(var.get('_object').get('node').get('name')))
                            var.put('func', var.get('context').get(var.get('_property').get('node').get('name')))
                        if (var.get('_object').callprop('isLiteral') and var.get('_property').callprop('isIdentifier')):
                            var.put('_type', PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_object').get('node').get('value')))
                            if (PyJsStrictEq(var.get('_type'),Js('string')) or PyJsStrictEq(var.get('_type'),Js('number'))):
                                var.put('context', var.get('_object').get('node').get('value'))
                                var.put('func', var.get('context').get(var.get('_property').get('node').get('name')))
                    if var.get('func'):
                        var.put('args', var.get('path').callprop('get', Js('arguments')).callprop('map', var.get('evaluate')))
                        if var.get('confident').neg():
                            return var.get('undefined')
                        return var.get('func').callprop('apply', var.get('context'), var.get('args'))
                var.get('deopt')(var.get('path'))
            PyJsHoisted__evaluate_.__name__ = '_evaluate'
            var.put('_evaluate', PyJsHoisted__evaluate_)
            var.put('confident', var.get('true'))
            var.put('deoptPath', PyJsComma(Js(0.0), Js(None)))
            var.put('seen', var.get('_map2').get('default').create())
            pass
            var.put('value', var.get('evaluate')(var.get("this")))
            if var.get('confident').neg():
                var.put('value', var.get('undefined'))
            PyJs_Object_1944_ = Js({'confident':var.get('confident'),'deopt':var.get('deoptPath'),'value':var.get('value')})
            return PyJs_Object_1944_
            pass
            pass
        PyJsHoisted_evaluate_.__name__ = 'evaluate'
        var.put('evaluate', PyJsHoisted_evaluate_)
        @Js
        def PyJsHoisted_evaluateTruthy_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['res'])
            var.put('res', var.get("this").callprop('evaluate'))
            if var.get('res').get('confident'):
                return var.get('res').get('value').neg().neg()
        PyJsHoisted_evaluateTruthy_.__name__ = 'evaluateTruthy'
        var.put('evaluateTruthy', PyJsHoisted_evaluateTruthy_)
        Js('use strict')
        var.get('exports').put('__esModule', var.get('true'))
        var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
        var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
        var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
        var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
        var.put('_map', var.get('require')(Js('babel-runtime/core-js/map')))
        var.put('_map2', var.get('_interopRequireDefault')(var.get('_map')))
        var.get('exports').put('evaluateTruthy', var.get('evaluateTruthy'))
        var.get('exports').put('evaluate', var.get('evaluate'))
        pass
        var.put('VALID_CALLEES', Js([Js('String'), Js('Number'), Js('Math')]))
        var.put('INVALID_METHODS', Js([Js('random')]))
        pass
        pass
    PyJs_anonymous_1942_._set_name('anonymous')
    PyJs_anonymous_1942_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_1941_))))
PyJs_anonymous_1940_._set_name('anonymous')
PyJs_Object_1949_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/map':Js(98.0),'babel-runtime/helpers/typeof':Js(114.0)})
@Js
def PyJs_anonymous_1950_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getSibling', 'exports', '_interopRequireWildcard', '_index', 'getOpposite', 'require', '_babelTypes', 'module', 'get', 'getCompletionRecords', 'getStatementParent', 'getOuterBindingIdentifiers', 'getBindingIdentifiers', 't', '_index2', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_getPattern', '_getKey'])
    @Js
    def PyJsHoisted_getSibling_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        PyJs_Object_1954_ = Js({'parentPath':var.get("this").get('parentPath'),'parent':var.get("this").get('parent'),'container':var.get("this").get('container'),'listKey':var.get("this").get('listKey'),'key':var.get('key')})
        return var.get('_index2').get('default').callprop('get', PyJs_Object_1954_)
    PyJsHoisted_getSibling_.__name__ = 'getSibling'
    var.put('getSibling', PyJsHoisted_getSibling_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1951_ = Js({})
            var.put('newObj', PyJs_Object_1951_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_get_(key, context, this, arguments, var=var):
        var = Scope({'this':this, 'context':context, 'key':key, 'arguments':arguments}, var)
        var.registers(['parts', 'context', 'key'])
        if PyJsStrictEq(var.get('context'),var.get('true')):
            var.put('context', var.get("this").get('context'))
        var.put('parts', var.get('key').callprop('split', Js('.')))
        if PyJsStrictEq(var.get('parts').get('length'),Js(1.0)):
            return var.get("this").callprop('_getKey', var.get('key'), var.get('context'))
        else:
            return var.get("this").callprop('_getPattern', var.get('parts'), var.get('context'))
    PyJsHoisted_get_.__name__ = 'get'
    var.put('get', PyJsHoisted_get_)
    @Js
    def PyJsHoisted_getOpposite_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if PyJsStrictEq(var.get("this").get('key'),Js('left')):
            return var.get("this").callprop('getSibling', Js('right'))
        else:
            if PyJsStrictEq(var.get("this").get('key'),Js('right')):
                return var.get("this").callprop('getSibling', Js('left'))
    PyJsHoisted_getOpposite_.__name__ = 'getOpposite'
    var.put('getOpposite', PyJsHoisted_getOpposite_)
    @Js
    def PyJsHoisted_getCompletionRecords_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['paths', 'add'])
        var.put('paths', Js([]))
        @Js
        def PyJs_add_1953_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'add':PyJs_add_1953_, 'arguments':arguments}, var)
            var.registers(['path'])
            if var.get('path'):
                var.put('paths', var.get('paths').callprop('concat', var.get('path').callprop('getCompletionRecords')))
        PyJs_add_1953_._set_name('add')
        var.put('add', PyJs_add_1953_)
        if var.get("this").callprop('isIfStatement'):
            var.get('add')(var.get("this").callprop('get', Js('consequent')))
            var.get('add')(var.get("this").callprop('get', Js('alternate')))
        else:
            if ((var.get("this").callprop('isDoExpression') or var.get("this").callprop('isFor')) or var.get("this").callprop('isWhile')):
                var.get('add')(var.get("this").callprop('get', Js('body')))
            else:
                if (var.get("this").callprop('isProgram') or var.get("this").callprop('isBlockStatement')):
                    var.get('add')(var.get("this").callprop('get', Js('body')).callprop('pop'))
                else:
                    if var.get("this").callprop('isFunction'):
                        return var.get("this").callprop('get', Js('body')).callprop('getCompletionRecords')
                    else:
                        if var.get("this").callprop('isTryStatement'):
                            var.get('add')(var.get("this").callprop('get', Js('block')))
                            var.get('add')(var.get("this").callprop('get', Js('handler')))
                            var.get('add')(var.get("this").callprop('get', Js('finalizer')))
                        else:
                            var.get('paths').callprop('push', var.get("this"))
        return var.get('paths')
    PyJsHoisted_getCompletionRecords_.__name__ = 'getCompletionRecords'
    var.put('getCompletionRecords', PyJsHoisted_getCompletionRecords_)
    @Js
    def PyJsHoisted_getStatementParent_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['path'])
        var.put('path', var.get("this"))
        while 1:
            if (var.get('path').get('parentPath').neg() or (var.get('Array').callprop('isArray', var.get('path').get('container')) and var.get('path').callprop('isStatement'))):
                break
            else:
                var.put('path', var.get('path').get('parentPath'))
            if not var.get('path'):
                break
        if (var.get('path') and (var.get('path').callprop('isProgram') or var.get('path').callprop('isFile'))):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("File/Program node, we can't possibly find a statement parent to this")))
            raise PyJsTempException
        return var.get('path')
    PyJsHoisted_getStatementParent_.__name__ = 'getStatementParent'
    var.put('getStatementParent', PyJsHoisted_getStatementParent_)
    @Js
    def PyJsHoisted_getOuterBindingIdentifiers_(duplicates, this, arguments, var=var):
        var = Scope({'duplicates':duplicates, 'this':this, 'arguments':arguments}, var)
        var.registers(['duplicates'])
        return var.get('t').callprop('getOuterBindingIdentifiers', var.get("this").get('node'), var.get('duplicates'))
    PyJsHoisted_getOuterBindingIdentifiers_.__name__ = 'getOuterBindingIdentifiers'
    var.put('getOuterBindingIdentifiers', PyJsHoisted_getOuterBindingIdentifiers_)
    @Js
    def PyJsHoisted__getKey_(key, context, this, arguments, var=var):
        var = Scope({'this':this, 'context':context, 'key':key, 'arguments':arguments}, var)
        var.registers(['node', 'context', 'container', 'key', '_this'])
        var.put('_this', var.get("this"))
        var.put('node', var.get("this").get('node'))
        var.put('container', var.get('node').get(var.get('key')))
        if var.get('Array').callprop('isArray', var.get('container')):
            @Js
            def PyJs_anonymous_1955_(_, i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments, '_':_}, var)
                var.registers(['i', '_'])
                PyJs_Object_1956_ = Js({'listKey':var.get('key'),'parentPath':var.get('_this'),'parent':var.get('node'),'container':var.get('container'),'key':var.get('i')})
                return var.get('_index2').get('default').callprop('get', PyJs_Object_1956_).callprop('setContext', var.get('context'))
            PyJs_anonymous_1955_._set_name('anonymous')
            return var.get('container').callprop('map', PyJs_anonymous_1955_)
        else:
            PyJs_Object_1957_ = Js({'parentPath':var.get("this"),'parent':var.get('node'),'container':var.get('node'),'key':var.get('key')})
            return var.get('_index2').get('default').callprop('get', PyJs_Object_1957_).callprop('setContext', var.get('context'))
    PyJsHoisted__getKey_.__name__ = '_getKey'
    var.put('_getKey', PyJsHoisted__getKey_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1952_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1952_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getBindingIdentifiers_(duplicates, this, arguments, var=var):
        var = Scope({'duplicates':duplicates, 'this':this, 'arguments':arguments}, var)
        var.registers(['duplicates'])
        return var.get('t').callprop('getBindingIdentifiers', var.get("this").get('node'), var.get('duplicates'))
    PyJsHoisted_getBindingIdentifiers_.__name__ = 'getBindingIdentifiers'
    var.put('getBindingIdentifiers', PyJsHoisted_getBindingIdentifiers_)
    @Js
    def PyJsHoisted__getPattern_(parts, context, this, arguments, var=var):
        var = Scope({'this':this, 'parts':parts, 'arguments':arguments, 'context':context}, var)
        var.registers(['_isArray', '_iterator', 'context', 'parts', 'part', '_i', 'path', '_ref'])
        var.put('path', var.get("this"))
        #for JS loop
        var.put('_iterator', var.get('parts'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('part', var.get('_ref'))
            if PyJsStrictEq(var.get('part'),Js('.')):
                var.put('path', var.get('path').get('parentPath'))
            else:
                if var.get('Array').callprop('isArray', var.get('path')):
                    var.put('path', var.get('path').get(var.get('part')))
                else:
                    var.put('path', var.get('path').callprop('get', var.get('part'), var.get('context')))
        
        return var.get('path')
    PyJsHoisted__getPattern_.__name__ = '_getPattern'
    var.put('_getPattern', PyJsHoisted__getPattern_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('getStatementParent', var.get('getStatementParent'))
    var.get('exports').put('getOpposite', var.get('getOpposite'))
    var.get('exports').put('getCompletionRecords', var.get('getCompletionRecords'))
    var.get('exports').put('getSibling', var.get('getSibling'))
    var.get('exports').put('get', var.get('get'))
    var.get('exports').put('_getKey', var.get('_getKey'))
    var.get('exports').put('_getPattern', var.get('_getPattern'))
    var.get('exports').put('getBindingIdentifiers', var.get('getBindingIdentifiers'))
    var.get('exports').put('getOuterBindingIdentifiers', var.get('getOuterBindingIdentifiers'))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_1950_._set_name('anonymous')
PyJs_Object_1958_ = Js({'./index':Js(232.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1959_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', '_scope', '_ret', '_invariant2', '_virtualTypes', '_ret2', '_loop2', '_interopRequireDefault', '_cache', '_getIterator2', '_getIterator3', 'virtualTypes', '_iterator', '_debug', '_i', '_classCallCheck3', '_classCallCheck2', 'type', 'NodePath', 'exports', '_assign', '_interopRequireWildcard', '_babelTypes', '_debug3', '_debug2', '_index2', '_loop', '_assign2', '_isArray', '_index', 'require', '_ref2', 't', '_scope2', '_invariant'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1961_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1961_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1960_ = Js({})
            var.put('newObj', PyJs_Object_1960_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_virtualTypes', var.get('require')(Js('./lib/virtual-types')))
    var.put('virtualTypes', var.get('_interopRequireWildcard')(var.get('_virtualTypes')))
    var.put('_debug2', var.get('require')(Js('debug')))
    var.put('_debug3', var.get('_interopRequireDefault')(var.get('_debug2')))
    var.put('_invariant', var.get('require')(Js('invariant')))
    var.put('_invariant2', var.get('_interopRequireDefault')(var.get('_invariant')))
    var.put('_index', var.get('require')(Js('../index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    var.put('_assign', var.get('require')(Js('lodash/assign')))
    var.put('_assign2', var.get('_interopRequireDefault')(var.get('_assign')))
    var.put('_scope', var.get('require')(Js('../scope')))
    var.put('_scope2', var.get('_interopRequireDefault')(var.get('_scope')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_cache', var.get('require')(Js('../cache')))
    pass
    pass
    var.put('_debug', PyJsComma(Js(0.0),var.get('_debug3').get('default'))(Js('babel')))
    @Js
    def PyJs_anonymous_1962_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['NodePath'])
        @Js
        def PyJsHoisted_NodePath_(hub, parent, this, arguments, var=var):
            var = Scope({'this':this, 'parent':parent, 'hub':hub, 'arguments':arguments}, var)
            var.registers(['parent', 'hub'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('NodePath'))
            var.get("this").put('parent', var.get('parent'))
            var.get("this").put('hub', var.get('hub'))
            var.get("this").put('contexts', Js([]))
            PyJs_Object_1963_ = Js({})
            var.get("this").put('data', PyJs_Object_1963_)
            var.get("this").put('shouldSkip', Js(False))
            var.get("this").put('shouldStop', Js(False))
            var.get("this").put('removed', Js(False))
            var.get("this").put('state', var.get("null"))
            var.get("this").put('opts', var.get("null"))
            var.get("this").put('skipKeys', var.get("null"))
            var.get("this").put('parentPath', var.get("null"))
            var.get("this").put('context', var.get("null"))
            var.get("this").put('container', var.get("null"))
            var.get("this").put('listKey', var.get("null"))
            var.get("this").put('inList', Js(False))
            var.get("this").put('parentKey', var.get("null"))
            var.get("this").put('key', var.get("null"))
            var.get("this").put('node', var.get("null"))
            var.get("this").put('scope', var.get("null"))
            var.get("this").put('type', var.get("null"))
            var.get("this").put('typeAnnotation', var.get("null"))
        PyJsHoisted_NodePath_.__name__ = 'NodePath'
        var.put('NodePath', PyJsHoisted_NodePath_)
        pass
        @Js
        def PyJs_get_1964_(_ref, this, arguments, var=var):
            var = Scope({'this':this, '_ref':_ref, 'arguments':arguments, 'get':PyJs_get_1964_}, var)
            var.registers(['paths', 'container', 'hub', 'parent', 'i', 'listKey', 'targetNode', 'key', 'parentPath', 'path', 'pathCheck', '_ref'])
            var.put('hub', var.get('_ref').get('hub'))
            var.put('parentPath', var.get('_ref').get('parentPath'))
            var.put('parent', var.get('_ref').get('parent'))
            var.put('container', var.get('_ref').get('container'))
            var.put('listKey', var.get('_ref').get('listKey'))
            var.put('key', var.get('_ref').get('key'))
            if (var.get('hub').neg() and var.get('parentPath')):
                var.put('hub', var.get('parentPath').get('hub'))
            PyJsComma(Js(0.0),var.get('_invariant2').get('default'))(var.get('parent'), Js('To get a node path the parent needs to exist'))
            var.put('targetNode', var.get('container').get(var.get('key')))
            var.put('paths', (var.get('_cache').get('path').callprop('get', var.get('parent')) or Js([])))
            if var.get('_cache').get('path').callprop('has', var.get('parent')).neg():
                var.get('_cache').get('path').callprop('set', var.get('parent'), var.get('paths'))
            var.put('path', PyJsComma(Js(0.0), Js(None)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('paths').get('length')):
                try:
                    var.put('pathCheck', var.get('paths').get(var.get('i')))
                    if PyJsStrictEq(var.get('pathCheck').get('node'),var.get('targetNode')):
                        var.put('path', var.get('pathCheck'))
                        break
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('path').neg():
                var.put('path', var.get('NodePath').create(var.get('hub'), var.get('parent')))
                var.get('paths').callprop('push', var.get('path'))
            var.get('path').callprop('setup', var.get('parentPath'), var.get('container'), var.get('listKey'), var.get('key'))
            return var.get('path')
        PyJs_get_1964_._set_name('get')
        var.get('NodePath').put('get', PyJs_get_1964_)
        @Js
        def PyJs_getScope_1965_(scope, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'getScope':PyJs_getScope_1965_, 'arguments':arguments}, var)
            var.registers(['scope', 'ourScope'])
            var.put('ourScope', var.get('scope'))
            if var.get("this").callprop('isScope'):
                var.put('ourScope', var.get('_scope2').get('default').create(var.get("this"), var.get('scope')))
            return var.get('ourScope')
        PyJs_getScope_1965_._set_name('getScope')
        var.get('NodePath').get('prototype').put('getScope', PyJs_getScope_1965_)
        @Js
        def PyJs_setData_1966_(key, val, this, arguments, var=var):
            var = Scope({'this':this, 'setData':PyJs_setData_1966_, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['val', 'key'])
            return var.get("this").get('data').put(var.get('key'), var.get('val'))
        PyJs_setData_1966_._set_name('setData')
        var.get('NodePath').get('prototype').put('setData', PyJs_setData_1966_)
        @Js
        def PyJs_getData_1967_(key, PyJsArg_646566_, this, arguments, var=var):
            var = Scope({'this':this, 'getData':PyJs_getData_1967_, 'def':PyJsArg_646566_, 'key':key, 'arguments':arguments}, var)
            var.registers(['def', 'key', 'val'])
            var.put('val', var.get("this").get('data').get(var.get('key')))
            if (var.get('val').neg() and var.get('def')):
                var.put('val', var.get("this").get('data').put(var.get('key'), var.get('def')))
            return var.get('val')
        PyJs_getData_1967_._set_name('getData')
        var.get('NodePath').get('prototype').put('getData', PyJs_getData_1967_)
        @Js
        def PyJs_buildCodeFrameError_1968_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'buildCodeFrameError':PyJs_buildCodeFrameError_1968_, 'arguments':arguments}, var)
            var.registers(['msg', 'Error'])
            var.put('Error', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('SyntaxError')))
            return var.get("this").get('hub').get('file').callprop('buildCodeFrameError', var.get("this").get('node'), var.get('msg'), var.get('Error'))
        PyJs_buildCodeFrameError_1968_._set_name('buildCodeFrameError')
        var.get('NodePath').get('prototype').put('buildCodeFrameError', PyJs_buildCodeFrameError_1968_)
        @Js
        def PyJs_traverse_1969_(visitor, state, this, arguments, var=var):
            var = Scope({'this':this, 'visitor':visitor, 'state':state, 'arguments':arguments, 'traverse':PyJs_traverse_1969_}, var)
            var.registers(['visitor', 'state'])
            PyJsComma(Js(0.0),var.get('_index2').get('default'))(var.get("this").get('node'), var.get('visitor'), var.get("this").get('scope'), var.get('state'), var.get("this"))
        PyJs_traverse_1969_._set_name('traverse')
        var.get('NodePath').get('prototype').put('traverse', PyJs_traverse_1969_)
        @Js
        def PyJs_mark_1970_(type, message, this, arguments, var=var):
            var = Scope({'this':this, 'message':message, 'type':type, 'arguments':arguments, 'mark':PyJs_mark_1970_}, var)
            var.registers(['message', 'type'])
            PyJs_Object_1971_ = Js({'type':var.get('type'),'message':var.get('message'),'loc':var.get("this").get('node').get('loc')})
            var.get("this").get('hub').get('file').get('metadata').get('marked').callprop('push', PyJs_Object_1971_)
        PyJs_mark_1970_._set_name('mark')
        var.get('NodePath').get('prototype').put('mark', PyJs_mark_1970_)
        @Js
        def PyJs_set_1972_(key, node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'set':PyJs_set_1972_, 'arguments':arguments, 'key':key}, var)
            var.registers(['node', 'key'])
            var.get('t').callprop('validate', var.get("this").get('node'), var.get('key'), var.get('node'))
            var.get("this").get('node').put(var.get('key'), var.get('node'))
        PyJs_set_1972_._set_name('set')
        var.get('NodePath').get('prototype').put('set', PyJs_set_1972_)
        @Js
        def PyJs_getPathLocation_1973_(this, arguments, var=var):
            var = Scope({'this':this, 'getPathLocation':PyJs_getPathLocation_1973_, 'arguments':arguments}, var)
            var.registers(['path', 'parts', 'key'])
            var.put('parts', Js([]))
            var.put('path', var.get("this"))
            while 1:
                var.put('key', var.get('path').get('key'))
                if var.get('path').get('inList'):
                    var.put('key', (((var.get('path').get('listKey')+Js('['))+var.get('key'))+Js(']')))
                var.get('parts').callprop('unshift', var.get('key'))
                if not var.put('path', var.get('path').get('parentPath')):
                    break
            return var.get('parts').callprop('join', Js('.'))
        PyJs_getPathLocation_1973_._set_name('getPathLocation')
        var.get('NodePath').get('prototype').put('getPathLocation', PyJs_getPathLocation_1973_)
        @Js
        def PyJs_debug_1974_(buildMessage, this, arguments, var=var):
            var = Scope({'this':this, 'buildMessage':buildMessage, 'arguments':arguments, 'debug':PyJs_debug_1974_}, var)
            var.registers(['buildMessage'])
            if var.get('_debug').get('enabled').neg():
                return var.get('undefined')
            var.get('_debug')(((((var.get("this").callprop('getPathLocation')+Js(' '))+var.get("this").get('type'))+Js(': '))+var.get('buildMessage')()))
        PyJs_debug_1974_._set_name('debug')
        var.get('NodePath').get('prototype').put('debug', PyJs_debug_1974_)
        return var.get('NodePath')
    PyJs_anonymous_1962_._set_name('anonymous')
    var.put('NodePath', PyJs_anonymous_1962_())
    var.get('exports').put('default', var.get('NodePath'))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./ancestry')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./inference')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./replacement')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./evaluation')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./conversion')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./introspection')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./context')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./removal')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./modification')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./family')))
    PyJsComma(Js(0.0),var.get('_assign2').get('default'))(var.get('NodePath').get('prototype'), var.get('require')(Js('./comments')))
    @Js
    def PyJs__loop2_1975_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, '_loop2':PyJs__loop2_1975_}, var)
        var.registers(['typeKey', 'type'])
        if var.get('_isArray'):
            if (var.get('_i')>=var.get('_iterator').get('length')):
                return Js('break')
            var.put('_ref2', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
        else:
            var.put('_i', var.get('_iterator').callprop('next'))
            if var.get('_i').get('done'):
                return Js('break')
            var.put('_ref2', var.get('_i').get('value'))
        var.put('type', var.get('_ref2'))
        var.put('typeKey', (Js('is')+var.get('type')))
        @Js
        def PyJs_anonymous_1976_(opts, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['opts'])
            return var.get('t').callprop(var.get('typeKey'), var.get("this").get('node'), var.get('opts'))
        PyJs_anonymous_1976_._set_name('anonymous')
        var.get('NodePath').get('prototype').put(var.get('typeKey'), PyJs_anonymous_1976_)
        @Js
        def PyJs_anonymous_1977_(opts, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['opts'])
            if var.get("this").callprop(var.get('typeKey'), var.get('opts')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Expected node path of type ')+var.get('type'))))
                raise PyJsTempException
        PyJs_anonymous_1977_._set_name('anonymous')
        var.get('NodePath').get('prototype').put((Js('assert')+var.get('type')), PyJs_anonymous_1977_)
    PyJs__loop2_1975_._set_name('_loop2')
    var.put('_loop2', PyJs__loop2_1975_)
    #for JS loop
    var.put('_iterator', var.get('t').get('TYPES'))
    var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
    var.put('_i', Js(0.0))
    var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
    while 1:
        pass
        var.put('_ret2', var.get('_loop2')())
        if PyJsStrictEq(var.get('_ret2'),Js('break')):
            break
    
    @Js
    def PyJs__loop_1978_(type, this, arguments, var=var):
        var = Scope({'this':this, '_loop':PyJs__loop_1978_, 'type':type, 'arguments':arguments}, var)
        var.registers(['virtualType', 'type'])
        if PyJsStrictEq(var.get('type').get('0'),Js('_')):
            return Js('continue')
        if (var.get('t').get('TYPES').callprop('indexOf', var.get('type'))<Js(0.0)):
            var.get('t').get('TYPES').callprop('push', var.get('type'))
        var.put('virtualType', var.get('virtualTypes').get(var.get('type')))
        @Js
        def PyJs_anonymous_1979_(opts, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['opts'])
            return var.get('virtualType').callprop('checkPath', var.get("this"), var.get('opts'))
        PyJs_anonymous_1979_._set_name('anonymous')
        var.get('NodePath').get('prototype').put((Js('is')+var.get('type')), PyJs_anonymous_1979_)
    PyJs__loop_1978_._set_name('_loop')
    var.put('_loop', PyJs__loop_1978_)
    for PyJsTemp in var.get('virtualTypes'):
        var.put('type', PyJsTemp)
        var.put('_ret', var.get('_loop')(var.get('type')))
        if PyJsStrictEq(var.get('_ret'),Js('continue')):
            continue
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1959_._set_name('anonymous')
PyJs_Object_1980_ = Js({'../cache':Js(222.0),'../index':Js(225.0),'../scope':Js(244.0),'./ancestry':Js(226.0),'./comments':Js(227.0),'./context':Js(228.0),'./conversion':Js(229.0),'./evaluation':Js(230.0),'./family':Js(231.0),'./inference':Js(233.0),'./introspection':Js(236.0),'./lib/virtual-types':Js(239.0),'./modification':Js(240.0),'./removal':Js(241.0),'./replacement':Js(242.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0),'debug':Js(268.0),'invariant':Js(280.0),'lodash/assign':Js(435.0)})
@Js
def PyJs_anonymous_1981_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'inferers', '_interopRequireWildcard', '_inferers', 'couldBeBaseType', 'getTypeAnnotation', '_babelTypes', 'isBaseType', 'module', 'baseTypeStrictlyMatches', '_getTypeAnnotation', 'isGenericType', '_isBaseType', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'require'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1982_ = Js({})
            var.put('newObj', PyJs_Object_1982_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_couldBeBaseType_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['_isArray', '_iterator', 'name', '_i', '_ref', 'type', 'type2'])
        var.put('type', var.get("this").callprop('getTypeAnnotation'))
        if var.get('t').callprop('isAnyTypeAnnotation', var.get('type')):
            return var.get('true')
        if var.get('t').callprop('isUnionTypeAnnotation', var.get('type')):
            #for JS loop
            var.put('_iterator', var.get('type').get('types'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('type2', var.get('_ref'))
                if (var.get('t').callprop('isAnyTypeAnnotation', var.get('type2')) or var.get('_isBaseType')(var.get('name'), var.get('type2'), var.get('true'))):
                    return var.get('true')
            
            return Js(False)
        else:
            return var.get('_isBaseType')(var.get('name'), var.get('type'), var.get('true'))
    PyJsHoisted_couldBeBaseType_.__name__ = 'couldBeBaseType'
    var.put('couldBeBaseType', PyJsHoisted_couldBeBaseType_)
    @Js
    def PyJsHoisted_getTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['type'])
        if var.get("this").get('typeAnnotation'):
            return var.get("this").get('typeAnnotation')
        var.put('type', (var.get("this").callprop('_getTypeAnnotation') or var.get('t').callprop('anyTypeAnnotation')))
        if var.get('t').callprop('isTypeAnnotation', var.get('type')):
            var.put('type', var.get('type').get('typeAnnotation'))
        return var.get("this").put('typeAnnotation', var.get('type'))
    PyJsHoisted_getTypeAnnotation_.__name__ = 'getTypeAnnotation'
    var.put('getTypeAnnotation', PyJsHoisted_getTypeAnnotation_)
    @Js
    def PyJsHoisted_isBaseType_(baseName, soft, this, arguments, var=var):
        var = Scope({'this':this, 'baseName':baseName, 'soft':soft, 'arguments':arguments}, var)
        var.registers(['baseName', 'soft'])
        return var.get('_isBaseType')(var.get('baseName'), var.get("this").callprop('getTypeAnnotation'), var.get('soft'))
    PyJsHoisted_isBaseType_.__name__ = 'isBaseType'
    var.put('isBaseType', PyJsHoisted_isBaseType_)
    @Js
    def PyJsHoisted_baseTypeStrictlyMatches_(right, this, arguments, var=var):
        var = Scope({'this':this, 'right':right, 'arguments':arguments}, var)
        var.registers(['right', 'left'])
        var.put('left', var.get("this").callprop('getTypeAnnotation'))
        var.put('right', var.get('right').callprop('getTypeAnnotation'))
        if (var.get('t').callprop('isAnyTypeAnnotation', var.get('left')).neg() and var.get('t').callprop('isFlowBaseAnnotation', var.get('left'))):
            return PyJsStrictEq(var.get('right').get('type'),var.get('left').get('type'))
    PyJsHoisted_baseTypeStrictlyMatches_.__name__ = 'baseTypeStrictlyMatches'
    var.put('baseTypeStrictlyMatches', PyJsHoisted_baseTypeStrictlyMatches_)
    @Js
    def PyJsHoisted__getTypeAnnotation_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'declarParent', 'inferer', 'declar'])
        var.put('node', var.get("this").get('node'))
        if var.get('node').neg():
            if (PyJsStrictEq(var.get("this").get('key'),Js('init')) and var.get("this").get('parentPath').callprop('isVariableDeclarator')):
                var.put('declar', var.get("this").get('parentPath').get('parentPath'))
                var.put('declarParent', var.get('declar').get('parentPath'))
                if (PyJsStrictEq(var.get('declar').get('key'),Js('left')) and var.get('declarParent').callprop('isForInStatement')):
                    return var.get('t').callprop('stringTypeAnnotation')
                if (PyJsStrictEq(var.get('declar').get('key'),Js('left')) and var.get('declarParent').callprop('isForOfStatement')):
                    return var.get('t').callprop('anyTypeAnnotation')
                return var.get('t').callprop('voidTypeAnnotation')
            else:
                return var.get('undefined')
        if var.get('node').get('typeAnnotation'):
            return var.get('node').get('typeAnnotation')
        var.put('inferer', var.get('inferers').get(var.get('node').get('type')))
        if var.get('inferer'):
            return var.get('inferer').callprop('call', var.get("this"), var.get('node'))
        var.put('inferer', var.get('inferers').get(var.get("this").get('parentPath').get('type')))
        if (var.get('inferer') and var.get('inferer').get('validParent')):
            return var.get("this").get('parentPath').callprop('getTypeAnnotation')
    PyJsHoisted__getTypeAnnotation_.__name__ = '_getTypeAnnotation'
    var.put('_getTypeAnnotation', PyJsHoisted__getTypeAnnotation_)
    @Js
    def PyJsHoisted_isGenericType_(genericName, this, arguments, var=var):
        var = Scope({'this':this, 'genericName':genericName, 'arguments':arguments}, var)
        var.registers(['genericName', 'type'])
        var.put('type', var.get("this").callprop('getTypeAnnotation'))
        PyJs_Object_1984_ = Js({'name':var.get('genericName')})
        return (var.get('t').callprop('isGenericTypeAnnotation', var.get('type')) and var.get('t').callprop('isIdentifier', var.get('type').get('id'), PyJs_Object_1984_))
    PyJsHoisted_isGenericType_.__name__ = 'isGenericType'
    var.put('isGenericType', PyJsHoisted_isGenericType_)
    @Js
    def PyJsHoisted__isBaseType_(baseName, type, soft, this, arguments, var=var):
        var = Scope({'this':this, 'soft':soft, 'baseName':baseName, 'type':type, 'arguments':arguments}, var)
        var.registers(['soft', 'baseName', 'type'])
        if PyJsStrictEq(var.get('baseName'),Js('string')):
            return var.get('t').callprop('isStringTypeAnnotation', var.get('type'))
        else:
            if PyJsStrictEq(var.get('baseName'),Js('number')):
                return var.get('t').callprop('isNumberTypeAnnotation', var.get('type'))
            else:
                if PyJsStrictEq(var.get('baseName'),Js('boolean')):
                    return var.get('t').callprop('isBooleanTypeAnnotation', var.get('type'))
                else:
                    if PyJsStrictEq(var.get('baseName'),Js('any')):
                        return var.get('t').callprop('isAnyTypeAnnotation', var.get('type'))
                    else:
                        if PyJsStrictEq(var.get('baseName'),Js('mixed')):
                            return var.get('t').callprop('isMixedTypeAnnotation', var.get('type'))
                        else:
                            if PyJsStrictEq(var.get('baseName'),Js('empty')):
                                return var.get('t').callprop('isEmptyTypeAnnotation', var.get('type'))
                            else:
                                if PyJsStrictEq(var.get('baseName'),Js('void')):
                                    return var.get('t').callprop('isVoidTypeAnnotation', var.get('type'))
                                else:
                                    if var.get('soft'):
                                        return Js(False)
                                    else:
                                        PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown base type ')+var.get('baseName'))))
                                        raise PyJsTempException
    PyJsHoisted__isBaseType_.__name__ = '_isBaseType'
    var.put('_isBaseType', PyJsHoisted__isBaseType_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1983_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1983_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('getTypeAnnotation', var.get('getTypeAnnotation'))
    var.get('exports').put('_getTypeAnnotation', var.get('_getTypeAnnotation'))
    var.get('exports').put('isBaseType', var.get('isBaseType'))
    var.get('exports').put('couldBeBaseType', var.get('couldBeBaseType'))
    var.get('exports').put('baseTypeStrictlyMatches', var.get('baseTypeStrictlyMatches'))
    var.get('exports').put('isGenericType', var.get('isGenericType'))
    var.put('_inferers', var.get('require')(Js('./inferers')))
    var.put('inferers', var.get('_interopRequireWildcard')(var.get('_inferers')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_1981_._set_name('anonymous')
PyJs_Object_1985_ = Js({'./inferers':Js(235.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_1986_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'getConditionalAnnotation', '_interopRequireWildcard', 'getParentConditionalPath', 'require', '_babelTypes', 'module', 'inferAnnotationFromBinaryExpression', 't', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'getTypeAnnotationBindingConstantViolations', 'getConstantViolationsBefore'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_1988_ = Js({})
            var.put('newObj', PyJs_Object_1988_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_getParentConditionalPath_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path', 'parentPath'])
        var.put('parentPath', PyJsComma(Js(0.0), Js(None)))
        while var.put('parentPath', var.get('path').get('parentPath')):
            if (var.get('parentPath').callprop('isIfStatement') or var.get('parentPath').callprop('isConditionalExpression')):
                if PyJsStrictEq(var.get('path').get('key'),Js('test')):
                    return var.get('undefined')
                else:
                    return var.get('parentPath')
            else:
                var.put('path', var.get('parentPath'))
    PyJsHoisted_getParentConditionalPath_.__name__ = 'getParentConditionalPath'
    var.put('getParentConditionalPath', PyJsHoisted_getParentConditionalPath_)
    @Js
    def PyJsHoisted_inferAnnotationFromBinaryExpression_(name, path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'name':name, 'arguments':arguments}, var)
        var.registers(['right', 'target', 'typeValue', 'typeofPath', 'typePath', 'name', 'operator', 'path', 'left'])
        var.put('operator', var.get('path').get('node').get('operator'))
        var.put('right', var.get('path').callprop('get', Js('right')).callprop('resolve'))
        var.put('left', var.get('path').callprop('get', Js('left')).callprop('resolve'))
        var.put('target', PyJsComma(Js(0.0), Js(None)))
        PyJs_Object_1993_ = Js({'name':var.get('name')})
        if var.get('left').callprop('isIdentifier', PyJs_Object_1993_):
            var.put('target', var.get('right'))
        else:
            PyJs_Object_1994_ = Js({'name':var.get('name')})
            if var.get('right').callprop('isIdentifier', PyJs_Object_1994_):
                var.put('target', var.get('left'))
        if var.get('target'):
            if PyJsStrictEq(var.get('operator'),Js('===')):
                return var.get('target').callprop('getTypeAnnotation')
            else:
                if (var.get('t').get('BOOLEAN_NUMBER_BINARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
                    return var.get('t').callprop('numberTypeAnnotation')
                else:
                    return var.get('undefined')
        else:
            if PyJsStrictNeq(var.get('operator'),Js('===')):
                return var.get('undefined')
        var.put('typeofPath', PyJsComma(Js(0.0), Js(None)))
        var.put('typePath', PyJsComma(Js(0.0), Js(None)))
        PyJs_Object_1995_ = Js({'operator':Js('typeof')})
        if var.get('left').callprop('isUnaryExpression', PyJs_Object_1995_):
            var.put('typeofPath', var.get('left'))
            var.put('typePath', var.get('right'))
        else:
            PyJs_Object_1996_ = Js({'operator':Js('typeof')})
            if var.get('right').callprop('isUnaryExpression', PyJs_Object_1996_):
                var.put('typeofPath', var.get('right'))
                var.put('typePath', var.get('left'))
        if (var.get('typePath').neg() and var.get('typeofPath').neg()):
            return var.get('undefined')
        var.put('typePath', var.get('typePath').callprop('resolve'))
        if var.get('typePath').callprop('isLiteral').neg():
            return var.get('undefined')
        var.put('typeValue', var.get('typePath').get('node').get('value'))
        if PyJsStrictNeq(var.get('typeValue',throw=False).typeof(),Js('string')):
            return var.get('undefined')
        PyJs_Object_1997_ = Js({'name':var.get('name')})
        if var.get('typeofPath').callprop('get', Js('argument')).callprop('isIdentifier', PyJs_Object_1997_).neg():
            return var.get('undefined')
        return var.get('t').callprop('createTypeAnnotationBasedOnTypeof', var.get('typePath').get('node').get('value'))
    PyJsHoisted_inferAnnotationFromBinaryExpression_.__name__ = 'inferAnnotationFromBinaryExpression'
    var.put('inferAnnotationFromBinaryExpression', PyJsHoisted_inferAnnotationFromBinaryExpression_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_1989_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_1989_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getConstantViolationsBefore_(binding, path, functions, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'functions':functions, 'binding':binding, 'arguments':arguments}, var)
        var.registers(['path', 'violations', 'binding', 'functions'])
        var.put('violations', var.get('binding').get('constantViolations').callprop('slice'))
        var.get('violations').callprop('unshift', var.get('binding').get('path'))
        @Js
        def PyJs_anonymous_1992_(violation, this, arguments, var=var):
            var = Scope({'violation':violation, 'this':this, 'arguments':arguments}, var)
            var.registers(['status', 'violation'])
            var.put('violation', var.get('violation').callprop('resolve'))
            var.put('status', var.get('violation').callprop('_guessExecutionStatusRelativeTo', var.get('path')))
            if (var.get('functions') and PyJsStrictEq(var.get('status'),Js('function'))):
                var.get('functions').callprop('push', var.get('violation'))
            return PyJsStrictEq(var.get('status'),Js('before'))
        PyJs_anonymous_1992_._set_name('anonymous')
        return var.get('violations').callprop('filter', PyJs_anonymous_1992_)
    PyJsHoisted_getConstantViolationsBefore_.__name__ = 'getConstantViolationsBefore'
    var.put('getConstantViolationsBefore', PyJsHoisted_getConstantViolationsBefore_)
    @Js
    def PyJsHoisted_getConditionalAnnotation_(path, name, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'name':name, 'arguments':arguments}, var)
        var.registers(['paths', 'name', 'test', 'path', 'ifStatement', 'type', 'types', '_path'])
        var.put('ifStatement', var.get('getParentConditionalPath')(var.get('path')))
        if var.get('ifStatement').neg():
            return var.get('undefined')
        var.put('test', var.get('ifStatement').callprop('get', Js('test')))
        var.put('paths', Js([var.get('test')]))
        var.put('types', Js([]))
        while 1:
            var.put('_path', var.get('paths').callprop('shift').callprop('resolve'))
            if var.get('_path').callprop('isLogicalExpression'):
                var.get('paths').callprop('push', var.get('_path').callprop('get', Js('left')))
                var.get('paths').callprop('push', var.get('_path').callprop('get', Js('right')))
            if var.get('_path').callprop('isBinaryExpression'):
                var.put('type', var.get('inferAnnotationFromBinaryExpression')(var.get('name'), var.get('_path')))
                if var.get('type'):
                    var.get('types').callprop('push', var.get('type'))
            if not var.get('paths').get('length'):
                break
        if var.get('types').get('length'):
            PyJs_Object_1998_ = Js({'typeAnnotation':var.get('t').callprop('createUnionTypeAnnotation', var.get('types')),'ifStatement':var.get('ifStatement')})
            return PyJs_Object_1998_
        else:
            return var.get('getConditionalAnnotation')(var.get('ifStatement'), var.get('name'))
    PyJsHoisted_getConditionalAnnotation_.__name__ = 'getConditionalAnnotation'
    var.put('getConditionalAnnotation', PyJsHoisted_getConditionalAnnotation_)
    @Js
    def PyJsHoisted_getTypeAnnotationBindingConstantViolations_(path, name, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'name':name, 'arguments':arguments}, var)
        var.registers(['_isArray', '_iterator', 'name', 'violation', 'binding', 'functionConstantViolations', '_i', 'types', 'path', '_ref', 'testType', 'constantViolations'])
        var.put('binding', var.get('path').get('scope').callprop('getBinding', var.get('name')))
        var.put('types', Js([]))
        var.get('path').put('typeAnnotation', var.get('t').callprop('unionTypeAnnotation', var.get('types')))
        var.put('functionConstantViolations', Js([]))
        var.put('constantViolations', var.get('getConstantViolationsBefore')(var.get('binding'), var.get('path'), var.get('functionConstantViolations')))
        var.put('testType', var.get('getConditionalAnnotation')(var.get('path'), var.get('name')))
        if var.get('testType'):
            @Js
            def PyJs_anonymous_1990_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['testConstantViolations'])
                var.put('testConstantViolations', var.get('getConstantViolationsBefore')(var.get('binding'), var.get('testType').get('ifStatement')))
                @Js
                def PyJs_anonymous_1991_(path, this, arguments, var=var):
                    var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                    var.registers(['path'])
                    return (var.get('testConstantViolations').callprop('indexOf', var.get('path'))<Js(0.0))
                PyJs_anonymous_1991_._set_name('anonymous')
                var.put('constantViolations', var.get('constantViolations').callprop('filter', PyJs_anonymous_1991_))
                var.get('types').callprop('push', var.get('testType').get('typeAnnotation'))
            PyJs_anonymous_1990_._set_name('anonymous')
            PyJs_anonymous_1990_()
        if var.get('constantViolations').get('length'):
            var.put('constantViolations', var.get('constantViolations').callprop('concat', var.get('functionConstantViolations')))
            #for JS loop
            var.put('_iterator', var.get('constantViolations'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('violation', var.get('_ref'))
                var.get('types').callprop('push', var.get('violation').callprop('getTypeAnnotation'))
            
        if var.get('types').get('length'):
            return var.get('t').callprop('createUnionTypeAnnotation', var.get('types'))
    PyJsHoisted_getTypeAnnotationBindingConstantViolations_.__name__ = 'getTypeAnnotationBindingConstantViolations'
    var.put('getTypeAnnotationBindingConstantViolations', PyJsHoisted_getTypeAnnotationBindingConstantViolations_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    @Js
    def PyJs_anonymous_1987_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'binding'])
        if var.get("this").callprop('isReferenced').neg():
            return var.get('undefined')
        var.put('binding', var.get("this").get('scope').callprop('getBinding', var.get('node').get('name')))
        if var.get('binding'):
            if var.get('binding').get('identifier').get('typeAnnotation'):
                return var.get('binding').get('identifier').get('typeAnnotation')
            else:
                return var.get('getTypeAnnotationBindingConstantViolations')(var.get("this"), var.get('node').get('name'))
        if PyJsStrictEq(var.get('node').get('name'),Js('undefined')):
            return var.get('t').callprop('voidTypeAnnotation')
        else:
            if (PyJsStrictEq(var.get('node').get('name'),Js('NaN')) or PyJsStrictEq(var.get('node').get('name'),Js('Infinity'))):
                return var.get('t').callprop('numberTypeAnnotation')
            else:
                if PyJsStrictEq(var.get('node').get('name'),Js('arguments')):
                    pass
    PyJs_anonymous_1987_._set_name('anonymous')
    var.get('exports').put('default', PyJs_anonymous_1987_)
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_1986_._set_name('anonymous')
PyJs_Object_1999_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2000_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['CallExpression', 'UpdateExpression', 'module', 'ObjectExpression', '_interopRequireDefault', 'resolveCall', 'RegExpLiteral', 'ArrayExpression', 'Func', 'AssignmentExpression', 'exports', '_interopRequireWildcard', 'RestElement', '_babelTypes', 'NullLiteral', 'TypeCastExpression', 'SequenceExpression', 'BinaryExpression', 'BooleanLiteral', 'ConditionalExpression', 'UnaryExpression', 'NewExpression', 'require', 'StringLiteral', 'NumericLiteral', 'TaggedTemplateExpression', 't', '_infererReference', 'TemplateLiteral', 'LogicalExpression', 'VariableDeclarator'])
    @Js
    def PyJsHoisted_CallExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('resolveCall')(var.get("this").callprop('get', Js('callee')))
    PyJsHoisted_CallExpression_.__name__ = 'CallExpression'
    var.put('CallExpression', PyJsHoisted_CallExpression_)
    @Js
    def PyJsHoisted_UpdateExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['operator', 'node'])
        var.put('operator', var.get('node').get('operator'))
        if (PyJsStrictEq(var.get('operator'),Js('++')) or PyJsStrictEq(var.get('operator'),Js('--'))):
            return var.get('t').callprop('numberTypeAnnotation')
    PyJsHoisted_UpdateExpression_.__name__ = 'UpdateExpression'
    var.put('UpdateExpression', PyJsHoisted_UpdateExpression_)
    @Js
    def PyJsHoisted_ObjectExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Object')))
    PyJsHoisted_ObjectExpression_.__name__ = 'ObjectExpression'
    var.put('ObjectExpression', PyJsHoisted_ObjectExpression_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2004_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2004_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_resolveCall_(callee, this, arguments, var=var):
        var = Scope({'this':this, 'callee':callee, 'arguments':arguments}, var)
        var.registers(['callee'])
        var.put('callee', var.get('callee').callprop('resolve'))
        if var.get('callee').callprop('isFunction'):
            if var.get('callee').callprop('is', Js('async')):
                if var.get('callee').callprop('is', Js('generator')):
                    return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('AsyncIterator')))
                else:
                    return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Promise')))
            else:
                if var.get('callee').get('node').get('returnType'):
                    return var.get('callee').get('node').get('returnType')
                else:
                    pass
    PyJsHoisted_resolveCall_.__name__ = 'resolveCall'
    var.put('resolveCall', PyJsHoisted_resolveCall_)
    @Js
    def PyJsHoisted_RegExpLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('RegExp')))
    PyJsHoisted_RegExpLiteral_.__name__ = 'RegExpLiteral'
    var.put('RegExpLiteral', PyJsHoisted_RegExpLiteral_)
    @Js
    def PyJsHoisted_ArrayExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Array')))
    PyJsHoisted_ArrayExpression_.__name__ = 'ArrayExpression'
    var.put('ArrayExpression', PyJsHoisted_ArrayExpression_)
    @Js
    def PyJsHoisted_Func_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Function')))
    PyJsHoisted_Func_.__name__ = 'Func'
    var.put('Func', PyJsHoisted_Func_)
    @Js
    def PyJsHoisted_AssignmentExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('get', Js('right')).callprop('getTypeAnnotation')
    PyJsHoisted_AssignmentExpression_.__name__ = 'AssignmentExpression'
    var.put('AssignmentExpression', PyJsHoisted_AssignmentExpression_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2003_ = Js({})
            var.put('newObj', PyJs_Object_2003_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_RestElement_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('ArrayExpression')()
    PyJsHoisted_RestElement_.__name__ = 'RestElement'
    var.put('RestElement', PyJsHoisted_RestElement_)
    @Js
    def PyJsHoisted_NullLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('nullLiteralTypeAnnotation')
    PyJsHoisted_NullLiteral_.__name__ = 'NullLiteral'
    var.put('NullLiteral', PyJsHoisted_NullLiteral_)
    @Js
    def PyJsHoisted_TypeCastExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return var.get('node').get('typeAnnotation')
    PyJsHoisted_TypeCastExpression_.__name__ = 'TypeCastExpression'
    var.put('TypeCastExpression', PyJsHoisted_TypeCastExpression_)
    @Js
    def PyJsHoisted_SequenceExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('get', Js('expressions')).callprop('pop').callprop('getTypeAnnotation')
    PyJsHoisted_SequenceExpression_.__name__ = 'SequenceExpression'
    var.put('SequenceExpression', PyJsHoisted_SequenceExpression_)
    @Js
    def PyJsHoisted_BinaryExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['operator', 'node', 'right', 'left'])
        var.put('operator', var.get('node').get('operator'))
        if (var.get('t').get('NUMBER_BINARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
            return var.get('t').callprop('numberTypeAnnotation')
        else:
            if (var.get('t').get('BOOLEAN_BINARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
                return var.get('t').callprop('booleanTypeAnnotation')
            else:
                if PyJsStrictEq(var.get('operator'),Js('+')):
                    var.put('right', var.get("this").callprop('get', Js('right')))
                    var.put('left', var.get("this").callprop('get', Js('left')))
                    if (var.get('left').callprop('isBaseType', Js('number')) and var.get('right').callprop('isBaseType', Js('number'))):
                        return var.get('t').callprop('numberTypeAnnotation')
                    else:
                        if (var.get('left').callprop('isBaseType', Js('string')) or var.get('right').callprop('isBaseType', Js('string'))):
                            return var.get('t').callprop('stringTypeAnnotation')
                    return var.get('t').callprop('unionTypeAnnotation', Js([var.get('t').callprop('stringTypeAnnotation'), var.get('t').callprop('numberTypeAnnotation')]))
    PyJsHoisted_BinaryExpression_.__name__ = 'BinaryExpression'
    var.put('BinaryExpression', PyJsHoisted_BinaryExpression_)
    @Js
    def PyJsHoisted_BooleanLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('booleanTypeAnnotation')
    PyJsHoisted_BooleanLiteral_.__name__ = 'BooleanLiteral'
    var.put('BooleanLiteral', PyJsHoisted_BooleanLiteral_)
    @Js
    def PyJsHoisted_ConditionalExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('createUnionTypeAnnotation', Js([var.get("this").callprop('get', Js('consequent')).callprop('getTypeAnnotation'), var.get("this").callprop('get', Js('alternate')).callprop('getTypeAnnotation')]))
    PyJsHoisted_ConditionalExpression_.__name__ = 'ConditionalExpression'
    var.put('ConditionalExpression', PyJsHoisted_ConditionalExpression_)
    @Js
    def PyJsHoisted_UnaryExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['operator', 'node'])
        var.put('operator', var.get('node').get('operator'))
        if PyJsStrictEq(var.get('operator'),Js('void')):
            return var.get('t').callprop('voidTypeAnnotation')
        else:
            if (var.get('t').get('NUMBER_UNARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
                return var.get('t').callprop('numberTypeAnnotation')
            else:
                if (var.get('t').get('STRING_UNARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
                    return var.get('t').callprop('stringTypeAnnotation')
                else:
                    if (var.get('t').get('BOOLEAN_UNARY_OPERATORS').callprop('indexOf', var.get('operator'))>=Js(0.0)):
                        return var.get('t').callprop('booleanTypeAnnotation')
    PyJsHoisted_UnaryExpression_.__name__ = 'UnaryExpression'
    var.put('UnaryExpression', PyJsHoisted_UnaryExpression_)
    @Js
    def PyJsHoisted_NewExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('get', Js('callee')).callprop('isIdentifier'):
            return var.get('t').callprop('genericTypeAnnotation', var.get('node').get('callee'))
    PyJsHoisted_NewExpression_.__name__ = 'NewExpression'
    var.put('NewExpression', PyJsHoisted_NewExpression_)
    @Js
    def PyJsHoisted_StringLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('stringTypeAnnotation')
    PyJsHoisted_StringLiteral_.__name__ = 'StringLiteral'
    var.put('StringLiteral', PyJsHoisted_StringLiteral_)
    @Js
    def PyJsHoisted_NumericLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('numberTypeAnnotation')
    PyJsHoisted_NumericLiteral_.__name__ = 'NumericLiteral'
    var.put('NumericLiteral', PyJsHoisted_NumericLiteral_)
    @Js
    def PyJsHoisted_TaggedTemplateExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('resolveCall')(var.get("this").callprop('get', Js('tag')))
    PyJsHoisted_TaggedTemplateExpression_.__name__ = 'TaggedTemplateExpression'
    var.put('TaggedTemplateExpression', PyJsHoisted_TaggedTemplateExpression_)
    @Js
    def PyJsHoisted_TemplateLiteral_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('stringTypeAnnotation')
    PyJsHoisted_TemplateLiteral_.__name__ = 'TemplateLiteral'
    var.put('TemplateLiteral', PyJsHoisted_TemplateLiteral_)
    @Js
    def PyJsHoisted_LogicalExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('t').callprop('createUnionTypeAnnotation', Js([var.get("this").callprop('get', Js('left')).callprop('getTypeAnnotation'), var.get("this").callprop('get', Js('right')).callprop('getTypeAnnotation')]))
    PyJsHoisted_LogicalExpression_.__name__ = 'LogicalExpression'
    var.put('LogicalExpression', PyJsHoisted_LogicalExpression_)
    @Js
    def PyJsHoisted_VariableDeclarator_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['id'])
        var.put('id', var.get("this").callprop('get', Js('id')))
        if var.get('id').callprop('isIdentifier'):
            return var.get("this").callprop('get', Js('init')).callprop('getTypeAnnotation')
        else:
            return var.get('undefined')
    PyJsHoisted_VariableDeclarator_.__name__ = 'VariableDeclarator'
    var.put('VariableDeclarator', PyJsHoisted_VariableDeclarator_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('ClassDeclaration', var.get('exports').put('ClassExpression', var.get('exports').put('FunctionDeclaration', var.get('exports').put('ArrowFunctionExpression', var.get('exports').put('FunctionExpression', var.get('exports').put('Identifier', var.get('undefined')))))))
    var.put('_infererReference', var.get('require')(Js('./inferer-reference')))
    @Js
    def PyJs_get_2002_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2002_}, var)
        var.registers([])
        return var.get('_interopRequireDefault')(var.get('_infererReference')).get('default')
    PyJs_get_2002_._set_name('get')
    PyJs_Object_2001_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2002_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('Identifier'), PyJs_Object_2001_)
    var.get('exports').put('VariableDeclarator', var.get('VariableDeclarator'))
    var.get('exports').put('TypeCastExpression', var.get('TypeCastExpression'))
    var.get('exports').put('NewExpression', var.get('NewExpression'))
    var.get('exports').put('TemplateLiteral', var.get('TemplateLiteral'))
    var.get('exports').put('UnaryExpression', var.get('UnaryExpression'))
    var.get('exports').put('BinaryExpression', var.get('BinaryExpression'))
    var.get('exports').put('LogicalExpression', var.get('LogicalExpression'))
    var.get('exports').put('ConditionalExpression', var.get('ConditionalExpression'))
    var.get('exports').put('SequenceExpression', var.get('SequenceExpression'))
    var.get('exports').put('AssignmentExpression', var.get('AssignmentExpression'))
    var.get('exports').put('UpdateExpression', var.get('UpdateExpression'))
    var.get('exports').put('StringLiteral', var.get('StringLiteral'))
    var.get('exports').put('NumericLiteral', var.get('NumericLiteral'))
    var.get('exports').put('BooleanLiteral', var.get('BooleanLiteral'))
    var.get('exports').put('NullLiteral', var.get('NullLiteral'))
    var.get('exports').put('RegExpLiteral', var.get('RegExpLiteral'))
    var.get('exports').put('ObjectExpression', var.get('ObjectExpression'))
    var.get('exports').put('ArrayExpression', var.get('ArrayExpression'))
    var.get('exports').put('RestElement', var.get('RestElement'))
    var.get('exports').put('CallExpression', var.get('CallExpression'))
    var.get('exports').put('TaggedTemplateExpression', var.get('TaggedTemplateExpression'))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    var.get('TypeCastExpression').put('validParent', var.get('true'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.get('RestElement').put('validParent', var.get('true'))
    pass
    var.get('exports').put('FunctionExpression', var.get('Func'))
    var.get('exports').put('ArrowFunctionExpression', var.get('Func'))
    var.get('exports').put('FunctionDeclaration', var.get('Func'))
    var.get('exports').put('ClassExpression', var.get('Func'))
    var.get('exports').put('ClassDeclaration', var.get('Func'))
    pass
    pass
    pass
PyJs_anonymous_2000_._set_name('anonymous')
PyJs_Object_2005_ = Js({'./inferer-reference':Js(234.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2006_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_resolve', 'is', 'exports', 'module', 'isnt', 'canSwapBetweenExpressionAndStatement', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'referencesImport', '_typeof2', '_typeof3', 'canHaveVariableDeclarationOrExpression', 'isStatementOrBlock', 't', 'has', '_guessExecutionStatusRelativeTo', '_includes', 'isStatic', 'isCompletionRecord', '_interopRequireWildcard', '_babelTypes', '_includes2', 'equals', 'isNodeType', '_guessExecutionStatusRelativeToDifferentFunctions', 'resolve', 'willIMaybeExecuteBefore', 'require', 'matchesPattern', 'getSource'])
    @Js
    def PyJsHoisted__resolve_(dangerous, resolved, this, arguments, var=var):
        var = Scope({'resolved':resolved, 'dangerous':dangerous, 'this':this, 'arguments':arguments}, var)
        var.registers(['resolved', 'dangerous', '_isArray3', 'target', '_this', '_ret', '_i3', 'binding', 'elems', 'prop', 'match', 'key', 'props', 'targetKey', 'elem', 'targetName', '_ref3', '_iterator3'])
        var.put('_this', var.get("this"))
        if (var.get('resolved') and (var.get('resolved').callprop('indexOf', var.get("this"))>=Js(0.0))):
            return var.get('undefined')
        var.put('resolved', (var.get('resolved') or Js([])))
        var.get('resolved').callprop('push', var.get("this"))
        if var.get("this").callprop('isVariableDeclarator'):
            if var.get("this").callprop('get', Js('id')).callprop('isIdentifier'):
                return var.get("this").callprop('get', Js('init')).callprop('resolve', var.get('dangerous'), var.get('resolved'))
            else:
                pass
        else:
            if var.get("this").callprop('isReferencedIdentifier'):
                var.put('binding', var.get("this").get('scope').callprop('getBinding', var.get("this").get('node').get('name')))
                if var.get('binding').neg():
                    return var.get('undefined')
                if var.get('binding').get('constant').neg():
                    return var.get('undefined')
                if PyJsStrictEq(var.get('binding').get('kind'),Js('module')):
                    return var.get('undefined')
                if PyJsStrictNeq(var.get('binding').get('path'),var.get("this")):
                    @Js
                    def PyJs_anonymous_2010_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['ret'])
                        var.put('ret', var.get('binding').get('path').callprop('resolve', var.get('dangerous'), var.get('resolved')))
                        @Js
                        def PyJs_anonymous_2011_(parent, this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'parent':parent}, var)
                            var.registers(['parent'])
                            return PyJsStrictEq(var.get('parent').get('node'),var.get('ret').get('node'))
                        PyJs_anonymous_2011_._set_name('anonymous')
                        if var.get('_this').callprop('find', PyJs_anonymous_2011_):
                            PyJs_Object_2012_ = Js({'v':PyJsComma(Js(0.0), Js(None))})
                            return PyJs_Object_2012_
                        PyJs_Object_2013_ = Js({'v':var.get('ret')})
                        return PyJs_Object_2013_
                    PyJs_anonymous_2010_._set_name('anonymous')
                    var.put('_ret', PyJs_anonymous_2010_())
                    if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('_ret',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('_ret'))),Js('object')):
                        return var.get('_ret').get('v')
            else:
                if var.get("this").callprop('isTypeCastExpression'):
                    return var.get("this").callprop('get', Js('expression')).callprop('resolve', var.get('dangerous'), var.get('resolved'))
                else:
                    if (var.get('dangerous') and var.get("this").callprop('isMemberExpression')):
                        var.put('targetKey', var.get("this").callprop('toComputedKey'))
                        if var.get('t').callprop('isLiteral', var.get('targetKey')).neg():
                            return var.get('undefined')
                        var.put('targetName', var.get('targetKey').get('value'))
                        var.put('target', var.get("this").callprop('get', Js('object')).callprop('resolve', var.get('dangerous'), var.get('resolved')))
                        if var.get('target').callprop('isObjectExpression'):
                            var.put('props', var.get('target').callprop('get', Js('properties')))
                            #for JS loop
                            var.put('_iterator3', var.get('props'))
                            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                            var.put('_i3', Js(0.0))
                            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                            while 1:
                                pass
                                if var.get('_isArray3'):
                                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                                        break
                                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                                else:
                                    var.put('_i3', var.get('_iterator3').callprop('next'))
                                    if var.get('_i3').get('done'):
                                        break
                                    var.put('_ref3', var.get('_i3').get('value'))
                                var.put('prop', var.get('_ref3'))
                                if var.get('prop').callprop('isProperty').neg():
                                    continue
                                var.put('key', var.get('prop').callprop('get', Js('key')))
                                PyJs_Object_2014_ = Js({'name':var.get('targetName')})
                                var.put('match', (var.get('prop').callprop('isnt', Js('computed')) and var.get('key').callprop('isIdentifier', PyJs_Object_2014_)))
                                PyJs_Object_2015_ = Js({'value':var.get('targetName')})
                                var.put('match', (var.get('match') or var.get('key').callprop('isLiteral', PyJs_Object_2015_)))
                                if var.get('match'):
                                    return var.get('prop').callprop('get', Js('value')).callprop('resolve', var.get('dangerous'), var.get('resolved'))
                            
                        else:
                            if (var.get('target').callprop('isArrayExpression') and var.get('isNaN')((+var.get('targetName'))).neg()):
                                var.put('elems', var.get('target').callprop('get', Js('elements')))
                                var.put('elem', var.get('elems').get(var.get('targetName')))
                                if var.get('elem'):
                                    return var.get('elem').callprop('resolve', var.get('dangerous'), var.get('resolved'))
    PyJsHoisted__resolve_.__name__ = '_resolve'
    var.put('_resolve', PyJsHoisted__resolve_)
    @Js
    def PyJsHoisted_isStatic_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").get('scope').callprop('isStatic', var.get("this").get('node'))
    PyJsHoisted_isStatic_.__name__ = 'isStatic'
    var.put('isStatic', PyJsHoisted_isStatic_)
    @Js
    def PyJsHoisted_isCompletionRecord_(allowInsideFunction, this, arguments, var=var):
        var = Scope({'this':this, 'allowInsideFunction':allowInsideFunction, 'arguments':arguments}, var)
        var.registers(['path', 'allowInsideFunction', 'container', 'first'])
        var.put('path', var.get("this"))
        var.put('first', var.get('true'))
        while 1:
            var.put('container', var.get('path').get('container'))
            if (var.get('path').callprop('isFunction') and var.get('first').neg()):
                return var.get('allowInsideFunction').neg().neg()
            var.put('first', Js(False))
            if (var.get('Array').callprop('isArray', var.get('container')) and PyJsStrictNeq(var.get('path').get('key'),(var.get('container').get('length')-Js(1.0)))):
                return Js(False)
            if not (var.put('path', var.get('path').get('parentPath')) and var.get('path').callprop('isProgram').neg()):
                break
        return var.get('true')
    PyJsHoisted_isCompletionRecord_.__name__ = 'isCompletionRecord'
    var.put('isCompletionRecord', PyJsHoisted_isCompletionRecord_)
    @Js
    def PyJsHoisted_willIMaybeExecuteBefore_(target, this, arguments, var=var):
        var = Scope({'this':this, 'target':target, 'arguments':arguments}, var)
        var.registers(['target'])
        return PyJsStrictNeq(var.get("this").callprop('_guessExecutionStatusRelativeTo', var.get('target')),Js('after'))
    PyJsHoisted_willIMaybeExecuteBefore_.__name__ = 'willIMaybeExecuteBefore'
    var.put('willIMaybeExecuteBefore', PyJsHoisted_willIMaybeExecuteBefore_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2007_ = Js({})
            var.put('newObj', PyJs_Object_2007_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_canHaveVariableDeclarationOrExpression_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return ((PyJsStrictEq(var.get("this").get('key'),Js('init')) or PyJsStrictEq(var.get("this").get('key'),Js('left'))) and var.get("this").get('parentPath').callprop('isFor'))
    PyJsHoisted_canHaveVariableDeclarationOrExpression_.__name__ = 'canHaveVariableDeclarationOrExpression'
    var.put('canHaveVariableDeclarationOrExpression', PyJsHoisted_canHaveVariableDeclarationOrExpression_)
    @Js
    def PyJsHoisted__guessExecutionStatusRelativeTo_(target, this, arguments, var=var):
        var = Scope({'this':this, 'target':target, 'arguments':arguments}, var)
        var.registers(['status', 'targetKeyPosition', 'target', 'selfIndex', 'selfPath', 'commonPath', 'targetRelationship', 'selfRelationship', 'selfFuncParent', 'selfPaths', 'targetFuncParent', 'targetPaths', 'selfKeyPosition', 'targetIndex'])
        var.put('targetFuncParent', var.get('target').get('scope').callprop('getFunctionParent'))
        var.put('selfFuncParent', var.get("this").get('scope').callprop('getFunctionParent'))
        if PyJsStrictNeq(var.get('targetFuncParent').get('node'),var.get('selfFuncParent').get('node')):
            var.put('status', var.get("this").callprop('_guessExecutionStatusRelativeToDifferentFunctions', var.get('targetFuncParent')))
            if var.get('status'):
                return var.get('status')
            else:
                var.put('target', var.get('targetFuncParent').get('path'))
        var.put('targetPaths', var.get('target').callprop('getAncestry'))
        if (var.get('targetPaths').callprop('indexOf', var.get("this"))>=Js(0.0)):
            return Js('after')
        var.put('selfPaths', var.get("this").callprop('getAncestry'))
        var.put('commonPath', PyJsComma(Js(0.0), Js(None)))
        var.put('targetIndex', PyJsComma(Js(0.0), Js(None)))
        var.put('selfIndex', PyJsComma(Js(0.0), Js(None)))
        #for JS loop
        var.put('selfIndex', Js(0.0))
        while (var.get('selfIndex')<var.get('selfPaths').get('length')):
            try:
                var.put('selfPath', var.get('selfPaths').get(var.get('selfIndex')))
                var.put('targetIndex', var.get('targetPaths').callprop('indexOf', var.get('selfPath')))
                if (var.get('targetIndex')>=Js(0.0)):
                    var.put('commonPath', var.get('selfPath'))
                    break
            finally:
                    (var.put('selfIndex',Js(var.get('selfIndex').to_number())+Js(1))-Js(1))
        if var.get('commonPath').neg():
            return Js('before')
        var.put('targetRelationship', var.get('targetPaths').get((var.get('targetIndex')-Js(1.0))))
        var.put('selfRelationship', var.get('selfPaths').get((var.get('selfIndex')-Js(1.0))))
        if (var.get('targetRelationship').neg() or var.get('selfRelationship').neg()):
            return Js('before')
        if (var.get('targetRelationship').get('listKey') and PyJsStrictEq(var.get('targetRelationship').get('container'),var.get('selfRelationship').get('container'))):
            return (Js('before') if (var.get('targetRelationship').get('key')>var.get('selfRelationship').get('key')) else Js('after'))
        var.put('targetKeyPosition', var.get('t').get('VISITOR_KEYS').get(var.get('targetRelationship').get('type')).callprop('indexOf', var.get('targetRelationship').get('key')))
        var.put('selfKeyPosition', var.get('t').get('VISITOR_KEYS').get(var.get('selfRelationship').get('type')).callprop('indexOf', var.get('selfRelationship').get('key')))
        return (Js('before') if (var.get('targetKeyPosition')>var.get('selfKeyPosition')) else Js('after'))
    PyJsHoisted__guessExecutionStatusRelativeTo_.__name__ = '_guessExecutionStatusRelativeTo'
    var.put('_guessExecutionStatusRelativeTo', PyJsHoisted__guessExecutionStatusRelativeTo_)
    @Js
    def PyJsHoisted_equals_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'key'])
        return PyJsStrictEq(var.get("this").get('node').get(var.get('key')),var.get('value'))
    PyJsHoisted_equals_.__name__ = 'equals'
    var.put('equals', PyJsHoisted_equals_)
    @Js
    def PyJsHoisted_isNodeType_(type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['type'])
        return var.get('t').callprop('isType', var.get("this").get('type'), var.get('type'))
    PyJsHoisted_isNodeType_.__name__ = 'isNodeType'
    var.put('isNodeType', PyJsHoisted_isNodeType_)
    @Js
    def PyJsHoisted_isStatementOrBlock_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if (var.get("this").get('parentPath').callprop('isLabeledStatement') or var.get('t').callprop('isBlockStatement', var.get("this").get('container'))):
            return Js(False)
        else:
            return PyJsComma(Js(0.0),var.get('_includes2').get('default'))(var.get('t').get('STATEMENT_OR_BLOCK_KEYS'), var.get("this").get('key'))
    PyJsHoisted_isStatementOrBlock_.__name__ = 'isStatementOrBlock'
    var.put('isStatementOrBlock', PyJsHoisted_isStatementOrBlock_)
    @Js
    def PyJsHoisted_isnt_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get("this").callprop('has', var.get('key')).neg()
    PyJsHoisted_isnt_.__name__ = 'isnt'
    var.put('isnt', PyJsHoisted_isnt_)
    @Js
    def PyJsHoisted_resolve_(dangerous, resolved, this, arguments, var=var):
        var = Scope({'resolved':resolved, 'dangerous':dangerous, 'this':this, 'arguments':arguments}, var)
        var.registers(['resolved', 'dangerous'])
        return (var.get("this").callprop('_resolve', var.get('dangerous'), var.get('resolved')) or var.get("this"))
    PyJsHoisted_resolve_.__name__ = 'resolve'
    var.put('resolve', PyJsHoisted_resolve_)
    @Js
    def PyJsHoisted_matchesPattern_(pattern, allowPartial, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'arguments':arguments, 'allowPartial':allowPartial}, var)
        var.registers(['node', 'search', 'i', 'pattern', 'allowPartial', 'matches', 'parts'])
        @Js
        def PyJsHoisted_matches_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
            var.registers(['part', 'name'])
            var.put('part', var.get('parts').get(var.get('i')))
            return (PyJsStrictEq(var.get('part'),Js('*')) or PyJsStrictEq(var.get('name'),var.get('part')))
        PyJsHoisted_matches_.__name__ = 'matches'
        var.put('matches', PyJsHoisted_matches_)
        if var.get("this").callprop('isMemberExpression').neg():
            return Js(False)
        var.put('parts', var.get('pattern').callprop('split', Js('.')))
        var.put('search', Js([var.get("this").get('node')]))
        var.put('i', Js(0.0))
        pass
        while var.get('search').get('length'):
            var.put('node', var.get('search').callprop('shift'))
            if (var.get('allowPartial') and PyJsStrictEq(var.get('i'),var.get('parts').get('length'))):
                return var.get('true')
            if var.get('t').callprop('isIdentifier', var.get('node')):
                if var.get('matches')(var.get('node').get('name')).neg():
                    return Js(False)
            else:
                if var.get('t').callprop('isLiteral', var.get('node')):
                    if var.get('matches')(var.get('node').get('value')).neg():
                        return Js(False)
                else:
                    if var.get('t').callprop('isMemberExpression', var.get('node')):
                        if (var.get('node').get('computed') and var.get('t').callprop('isLiteral', var.get('node').get('property')).neg()):
                            return Js(False)
                        else:
                            var.get('search').callprop('unshift', var.get('node').get('property'))
                            var.get('search').callprop('unshift', var.get('node').get('object'))
                            continue
                    else:
                        if var.get('t').callprop('isThisExpression', var.get('node')):
                            if var.get('matches')(Js('this')).neg():
                                return Js(False)
                        else:
                            return Js(False)
            if (var.put('i',Js(var.get('i').to_number())+Js(1))>var.get('parts').get('length')):
                return Js(False)
        return PyJsStrictEq(var.get('i'),var.get('parts').get('length'))
    PyJsHoisted_matchesPattern_.__name__ = 'matchesPattern'
    var.put('matchesPattern', PyJsHoisted_matchesPattern_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2008_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2008_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getSource_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").get('node'))
        if var.get('node').get('end'):
            return var.get("this").get('hub').get('file').get('code').callprop('slice', var.get('node').get('start'), var.get('node').get('end'))
        else:
            return Js('')
    PyJsHoisted_getSource_.__name__ = 'getSource'
    var.put('getSource', PyJsHoisted_getSource_)
    @Js
    def PyJsHoisted_has_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key', 'val'])
        var.put('val', (var.get("this").get('node') and var.get("this").get('node').get(var.get('key'))))
        if (var.get('val') and var.get('Array').callprop('isArray', var.get('val'))):
            return var.get('val').get('length').neg().neg()
        else:
            return var.get('val').neg().neg()
    PyJsHoisted_has_.__name__ = 'has'
    var.put('has', PyJsHoisted_has_)
    @Js
    def PyJsHoisted_referencesImport_(moduleSource, importName, this, arguments, var=var):
        var = Scope({'importName':importName, 'this':this, 'moduleSource':moduleSource, 'arguments':arguments}, var)
        var.registers(['importName', 'path', 'moduleSource', 'binding', 'parent'])
        if var.get("this").callprop('isReferencedIdentifier').neg():
            return Js(False)
        var.put('binding', var.get("this").get('scope').callprop('getBinding', var.get("this").get('node').get('name')))
        if (var.get('binding').neg() or PyJsStrictNeq(var.get('binding').get('kind'),Js('module'))):
            return Js(False)
        var.put('path', var.get('binding').get('path'))
        var.put('parent', var.get('path').get('parentPath'))
        if var.get('parent').callprop('isImportDeclaration').neg():
            return Js(False)
        if PyJsStrictEq(var.get('parent').get('node').get('source').get('value'),var.get('moduleSource')):
            if var.get('importName').neg():
                return var.get('true')
        else:
            return Js(False)
        if (var.get('path').callprop('isImportDefaultSpecifier') and PyJsStrictEq(var.get('importName'),Js('default'))):
            return var.get('true')
        if (var.get('path').callprop('isImportNamespaceSpecifier') and PyJsStrictEq(var.get('importName'),Js('*'))):
            return var.get('true')
        if (var.get('path').callprop('isImportSpecifier') and PyJsStrictEq(var.get('path').get('node').get('imported').get('name'),var.get('importName'))):
            return var.get('true')
        return Js(False)
    PyJsHoisted_referencesImport_.__name__ = 'referencesImport'
    var.put('referencesImport', PyJsHoisted_referencesImport_)
    @Js
    def PyJsHoisted__guessExecutionStatusRelativeToDifferentFunctions_(targetFuncParent, this, arguments, var=var):
        var = Scope({'this':this, 'targetFuncParent':targetFuncParent, 'arguments':arguments}, var)
        var.registers(['status', 'targetFuncPath', 'referencePaths', '_iterator', '_isArray2', 'binding', '_isArray', '_i2', 'childOfFunction', 'targetFuncParent', '_i', '_path', 'path', '_ref', '_ref2', 'allStatus', '_iterator2'])
        var.put('targetFuncPath', var.get('targetFuncParent').get('path'))
        if var.get('targetFuncPath').callprop('isFunctionDeclaration').neg():
            return var.get('undefined')
        var.put('binding', var.get('targetFuncPath').get('scope').callprop('getBinding', var.get('targetFuncPath').get('node').get('id').get('name')))
        if var.get('binding').get('references').neg():
            return Js('before')
        var.put('referencePaths', var.get('binding').get('referencePaths'))
        #for JS loop
        var.put('_iterator', var.get('referencePaths'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('path', var.get('_ref'))
            if (PyJsStrictNeq(var.get('path').get('key'),Js('callee')) or var.get('path').get('parentPath').callprop('isCallExpression').neg()):
                return var.get('undefined')
        
        var.put('allStatus', PyJsComma(Js(0.0), Js(None)))
        #for JS loop
        var.put('_iterator2', var.get('referencePaths'))
        var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
        var.put('_i2', Js(0.0))
        var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
        while 1:
            pass
            if var.get('_isArray2'):
                if (var.get('_i2')>=var.get('_iterator2').get('length')):
                    break
                var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i2', var.get('_iterator2').callprop('next'))
                if var.get('_i2').get('done'):
                    break
                var.put('_ref2', var.get('_i2').get('value'))
            var.put('_path', var.get('_ref2'))
            @Js
            def PyJs_anonymous_2009_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return PyJsStrictEq(var.get('path').get('node'),var.get('targetFuncPath').get('node'))
            PyJs_anonymous_2009_._set_name('anonymous')
            var.put('childOfFunction', var.get('_path').callprop('find', PyJs_anonymous_2009_).neg().neg())
            if var.get('childOfFunction'):
                continue
            var.put('status', var.get("this").callprop('_guessExecutionStatusRelativeTo', var.get('_path')))
            if var.get('allStatus'):
                if PyJsStrictNeq(var.get('allStatus'),var.get('status')):
                    return var.get('undefined')
            else:
                var.put('allStatus', var.get('status'))
        
        return var.get('allStatus')
    PyJsHoisted__guessExecutionStatusRelativeToDifferentFunctions_.__name__ = '_guessExecutionStatusRelativeToDifferentFunctions'
    var.put('_guessExecutionStatusRelativeToDifferentFunctions', PyJsHoisted__guessExecutionStatusRelativeToDifferentFunctions_)
    @Js
    def PyJsHoisted_canSwapBetweenExpressionAndStatement_(replacement, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'replacement':replacement}, var)
        var.registers(['replacement'])
        if (PyJsStrictNeq(var.get("this").get('key'),Js('body')) or var.get("this").get('parentPath').callprop('isArrowFunctionExpression').neg()):
            return Js(False)
        if var.get("this").callprop('isExpression'):
            return var.get('t').callprop('isBlockStatement', var.get('replacement'))
        else:
            if var.get("this").callprop('isBlockStatement'):
                return var.get('t').callprop('isExpression', var.get('replacement'))
        return Js(False)
    PyJsHoisted_canSwapBetweenExpressionAndStatement_.__name__ = 'canSwapBetweenExpressionAndStatement'
    var.put('canSwapBetweenExpressionAndStatement', PyJsHoisted_canSwapBetweenExpressionAndStatement_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('is', var.get('undefined'))
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('matchesPattern', var.get('matchesPattern'))
    var.get('exports').put('has', var.get('has'))
    var.get('exports').put('isStatic', var.get('isStatic'))
    var.get('exports').put('isnt', var.get('isnt'))
    var.get('exports').put('equals', var.get('equals'))
    var.get('exports').put('isNodeType', var.get('isNodeType'))
    var.get('exports').put('canHaveVariableDeclarationOrExpression', var.get('canHaveVariableDeclarationOrExpression'))
    var.get('exports').put('canSwapBetweenExpressionAndStatement', var.get('canSwapBetweenExpressionAndStatement'))
    var.get('exports').put('isCompletionRecord', var.get('isCompletionRecord'))
    var.get('exports').put('isStatementOrBlock', var.get('isStatementOrBlock'))
    var.get('exports').put('referencesImport', var.get('referencesImport'))
    var.get('exports').put('getSource', var.get('getSource'))
    var.get('exports').put('willIMaybeExecuteBefore', var.get('willIMaybeExecuteBefore'))
    var.get('exports').put('_guessExecutionStatusRelativeTo', var.get('_guessExecutionStatusRelativeTo'))
    var.get('exports').put('_guessExecutionStatusRelativeToDifferentFunctions', var.get('_guessExecutionStatusRelativeToDifferentFunctions'))
    var.get('exports').put('resolve', var.get('resolve'))
    var.get('exports').put('_resolve', var.get('_resolve'))
    var.put('_includes', var.get('require')(Js('lodash/includes')))
    var.put('_includes2', var.get('_interopRequireDefault')(var.get('_includes')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    var.put('is', var.get('exports').put('is', var.get('has')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2006_._set_name('anonymous')
PyJs_Object_2016_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/typeof':Js(114.0),'babel-types':Js(258.0),'lodash/includes':Js(456.0)})
@Js
def PyJs_anonymous_2017_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_classCallCheck2', 'PathHoister', '_interopRequireWildcard', 'require', '_babelTypes', 'module', 'referenceVisitor', 't', '_interopRequireDefault', '_classCallCheck3', '_getIterator3', '_getIterator2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2019_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2019_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2018_ = Js({})
            var.put('newObj', PyJs_Object_2018_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_ReferencedIdentifier_2021_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_2021_, 'arguments':arguments}, var)
        var.registers(['_isArray', '_iterator', 'binding', 'violationPath', 'state', '_i', 'path', '_ref'])
        if (var.get('path').callprop('isJSXIdentifier') and var.get('_babelTypes').get('react').callprop('isCompatTag', var.get('path').get('node').get('name'))):
            return var.get('undefined')
        var.put('binding', var.get('path').get('scope').callprop('getBinding', var.get('path').get('node').get('name')))
        if var.get('binding').neg():
            return var.get('undefined')
        if PyJsStrictNeq(var.get('binding'),var.get('state').get('scope').callprop('getBinding', var.get('path').get('node').get('name'))):
            return var.get('undefined')
        if var.get('binding').get('constant'):
            var.get('state').get('bindings').put(var.get('path').get('node').get('name'), var.get('binding'))
        else:
            #for JS loop
            var.put('_iterator', var.get('binding').get('constantViolations'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('violationPath', var.get('_ref'))
                var.get('state').put('breakOnScopePaths', var.get('state').get('breakOnScopePaths').callprop('concat', var.get('violationPath').callprop('getAncestry')))
            
    PyJs_ReferencedIdentifier_2021_._set_name('ReferencedIdentifier')
    PyJs_Object_2020_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_2021_})
    var.put('referenceVisitor', PyJs_Object_2020_)
    @Js
    def PyJs_anonymous_2022_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['PathHoister'])
        @Js
        def PyJsHoisted_PathHoister_(path, scope, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'scope':scope}, var)
            var.registers(['path', 'scope'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('PathHoister'))
            var.get("this").put('breakOnScopePaths', Js([]))
            PyJs_Object_2023_ = Js({})
            var.get("this").put('bindings', PyJs_Object_2023_)
            var.get("this").put('scopes', Js([]))
            var.get("this").put('scope', var.get('scope'))
            var.get("this").put('path', var.get('path'))
        PyJsHoisted_PathHoister_.__name__ = 'PathHoister'
        var.put('PathHoister', PyJsHoisted_PathHoister_)
        pass
        @Js
        def PyJs_isCompatibleScope_2024_(scope, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'arguments':arguments, 'isCompatibleScope':PyJs_isCompatibleScope_2024_}, var)
            var.registers(['scope', 'binding', 'key'])
            for PyJsTemp in var.get("this").get('bindings'):
                var.put('key', PyJsTemp)
                var.put('binding', var.get("this").get('bindings').get(var.get('key')))
                if var.get('scope').callprop('bindingIdentifierEquals', var.get('key'), var.get('binding').get('identifier')).neg():
                    return Js(False)
            return var.get('true')
        PyJs_isCompatibleScope_2024_._set_name('isCompatibleScope')
        var.get('PathHoister').get('prototype').put('isCompatibleScope', PyJs_isCompatibleScope_2024_)
        @Js
        def PyJs_getCompatibleScopes_2025_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getCompatibleScopes':PyJs_getCompatibleScopes_2025_}, var)
            var.registers(['scope'])
            var.put('scope', var.get("this").get('path').get('scope'))
            while 1:
                if var.get("this").callprop('isCompatibleScope', var.get('scope')):
                    var.get("this").get('scopes').callprop('push', var.get('scope'))
                else:
                    break
                if (var.get("this").get('breakOnScopePaths').callprop('indexOf', var.get('scope').get('path'))>=Js(0.0)):
                    break
                if not var.put('scope', var.get('scope').get('parent')):
                    break
        PyJs_getCompatibleScopes_2025_._set_name('getCompatibleScopes')
        var.get('PathHoister').get('prototype').put('getCompatibleScopes', PyJs_getCompatibleScopes_2025_)
        @Js
        def PyJs_getAttachmentPath_2026_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getAttachmentPath':PyJs_getAttachmentPath_2026_}, var)
            var.registers(['path', 'binding', 'name', 'targetScope'])
            var.put('path', var.get("this").callprop('_getAttachmentPath'))
            if var.get('path').neg():
                return var.get('undefined')
            var.put('targetScope', var.get('path').get('scope'))
            if PyJsStrictEq(var.get('targetScope').get('path'),var.get('path')):
                var.put('targetScope', var.get('path').get('scope').get('parent'))
            if (var.get('targetScope').get('path').callprop('isProgram') or var.get('targetScope').get('path').callprop('isFunction')):
                for PyJsTemp in var.get("this").get('bindings'):
                    var.put('name', PyJsTemp)
                    if var.get('targetScope').callprop('hasOwnBinding', var.get('name')).neg():
                        continue
                    var.put('binding', var.get("this").get('bindings').get(var.get('name')))
                    if PyJsStrictEq(var.get('binding').get('kind'),Js('param')):
                        continue
                    if (var.get('binding').get('path').callprop('getStatementParent').get('key')>var.get('path').get('key')):
                        return var.get('undefined')
            return var.get('path')
        PyJs_getAttachmentPath_2026_._set_name('getAttachmentPath')
        var.get('PathHoister').get('prototype').put('getAttachmentPath', PyJs_getAttachmentPath_2026_)
        @Js
        def PyJs__getAttachmentPath_2027_(this, arguments, var=var):
            var = Scope({'this':this, '_getAttachmentPath':PyJs__getAttachmentPath_2027_, 'arguments':arguments}, var)
            var.registers(['scopes', 'scope'])
            var.put('scopes', var.get("this").get('scopes'))
            var.put('scope', var.get('scopes').callprop('pop'))
            if var.get('scope').neg():
                return var.get('undefined')
            if var.get('scope').get('path').callprop('isFunction'):
                if var.get("this").callprop('hasOwnParamBindings', var.get('scope')):
                    if PyJsStrictEq(var.get("this").get('scope'),var.get('scope')):
                        return var.get('undefined')
                    return var.get('scope').get('path').callprop('get', Js('body')).callprop('get', Js('body')).get('0')
                else:
                    return var.get("this").callprop('getNextScopeStatementParent')
            else:
                if var.get('scope').get('path').callprop('isProgram'):
                    return var.get("this").callprop('getNextScopeStatementParent')
        PyJs__getAttachmentPath_2027_._set_name('_getAttachmentPath')
        var.get('PathHoister').get('prototype').put('_getAttachmentPath', PyJs__getAttachmentPath_2027_)
        @Js
        def PyJs_getNextScopeStatementParent_2028_(this, arguments, var=var):
            var = Scope({'this':this, 'getNextScopeStatementParent':PyJs_getNextScopeStatementParent_2028_, 'arguments':arguments}, var)
            var.registers(['scope'])
            var.put('scope', var.get("this").get('scopes').callprop('pop'))
            if var.get('scope'):
                return var.get('scope').get('path').callprop('getStatementParent')
        PyJs_getNextScopeStatementParent_2028_._set_name('getNextScopeStatementParent')
        var.get('PathHoister').get('prototype').put('getNextScopeStatementParent', PyJs_getNextScopeStatementParent_2028_)
        @Js
        def PyJs_hasOwnParamBindings_2029_(scope, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'arguments':arguments, 'hasOwnParamBindings':PyJs_hasOwnParamBindings_2029_}, var)
            var.registers(['scope', 'binding', 'name'])
            for PyJsTemp in var.get("this").get('bindings'):
                var.put('name', PyJsTemp)
                if var.get('scope').callprop('hasOwnBinding', var.get('name')).neg():
                    continue
                var.put('binding', var.get("this").get('bindings').get(var.get('name')))
                if PyJsStrictEq(var.get('binding').get('kind'),Js('param')):
                    return var.get('true')
            return Js(False)
        PyJs_hasOwnParamBindings_2029_._set_name('hasOwnParamBindings')
        var.get('PathHoister').get('prototype').put('hasOwnParamBindings', PyJs_hasOwnParamBindings_2029_)
        @Js
        def PyJs_run_2030_(this, arguments, var=var):
            var = Scope({'this':this, 'run':PyJs_run_2030_, 'arguments':arguments}, var)
            var.registers(['node', 'attachTo', 'uid', 'parent'])
            var.put('node', var.get("this").get('path').get('node'))
            if var.get('node').get('_hoisted'):
                return var.get('undefined')
            var.get('node').put('_hoisted', var.get('true'))
            var.get("this").get('path').callprop('traverse', var.get('referenceVisitor'), var.get("this"))
            var.get("this").callprop('getCompatibleScopes')
            var.put('attachTo', var.get("this").callprop('getAttachmentPath'))
            if var.get('attachTo').neg():
                return var.get('undefined')
            if PyJsStrictEq(var.get('attachTo').callprop('getFunctionParent'),var.get("this").get('path').callprop('getFunctionParent')):
                return var.get('undefined')
            var.put('uid', var.get('attachTo').get('scope').callprop('generateUidIdentifier', Js('ref')))
            var.get('attachTo').callprop('insertBefore', Js([var.get('t').callprop('variableDeclaration', Js('var'), Js([var.get('t').callprop('variableDeclarator', var.get('uid'), var.get("this").get('path').get('node'))]))]))
            var.put('parent', var.get("this").get('path').get('parentPath'))
            if (var.get('parent').callprop('isJSXElement') and PyJsStrictEq(var.get("this").get('path').get('container'),var.get('parent').get('node').get('children'))):
                var.put('uid', var.get('t').callprop('JSXExpressionContainer', var.get('uid')))
            var.get("this").get('path').callprop('replaceWith', var.get('uid'))
        PyJs_run_2030_._set_name('run')
        var.get('PathHoister').get('prototype').put('run', PyJs_run_2030_)
        return var.get('PathHoister')
    PyJs_anonymous_2022_._set_name('anonymous')
    var.put('PathHoister', PyJs_anonymous_2022_())
    var.get('exports').put('default', var.get('PathHoister'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_2017_._set_name('anonymous')
PyJs_Object_2031_ = Js({'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2032_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['hooks', 'require', 'exports', 'module'])
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    @Js
    def PyJs_anonymous_2033_(self, parent, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['self', 'parent'])
        if (PyJsStrictEq(var.get('self').get('key'),Js('body')) and var.get('parent').callprop('isArrowFunctionExpression')):
            var.get('self').callprop('replaceWith', var.get('self').get('scope').callprop('buildUndefinedNode'))
            return var.get('true')
    PyJs_anonymous_2033_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2034_(self, parent, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['self', 'removeParent', 'parent'])
        var.put('removeParent', Js(False))
        var.put('removeParent', (var.get('removeParent') or (PyJsStrictEq(var.get('self').get('key'),Js('test')) and (var.get('parent').callprop('isWhile') or var.get('parent').callprop('isSwitchCase')))))
        var.put('removeParent', (var.get('removeParent') or (PyJsStrictEq(var.get('self').get('key'),Js('declaration')) and var.get('parent').callprop('isExportDeclaration'))))
        var.put('removeParent', (var.get('removeParent') or (PyJsStrictEq(var.get('self').get('key'),Js('body')) and var.get('parent').callprop('isLabeledStatement'))))
        var.put('removeParent', (var.get('removeParent') or ((PyJsStrictEq(var.get('self').get('listKey'),Js('declarations')) and var.get('parent').callprop('isVariableDeclaration')) and PyJsStrictEq(var.get('parent').get('node').get('declarations').get('length'),Js(1.0)))))
        var.put('removeParent', (var.get('removeParent') or (PyJsStrictEq(var.get('self').get('key'),Js('expression')) and var.get('parent').callprop('isExpressionStatement'))))
        if var.get('removeParent'):
            var.get('parent').callprop('remove')
            return var.get('true')
    PyJs_anonymous_2034_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2035_(self, parent, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['self', 'parent'])
        if (var.get('parent').callprop('isSequenceExpression') and PyJsStrictEq(var.get('parent').get('node').get('expressions').get('length'),Js(1.0))):
            var.get('parent').callprop('replaceWith', var.get('parent').get('node').get('expressions').get('0'))
            return var.get('true')
    PyJs_anonymous_2035_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2036_(self, parent, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['self', 'parent'])
        if var.get('parent').callprop('isBinary'):
            if PyJsStrictEq(var.get('self').get('key'),Js('left')):
                var.get('parent').callprop('replaceWith', var.get('parent').get('node').get('right'))
            else:
                var.get('parent').callprop('replaceWith', var.get('parent').get('node').get('left'))
            return var.get('true')
    PyJs_anonymous_2036_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2037_(self, parent, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['self', 'parent'])
        if ((var.get('parent').callprop('isIfStatement') and (PyJsStrictEq(var.get('self').get('key'),Js('consequent')) or PyJsStrictEq(var.get('self').get('key'),Js('alternate')))) or (var.get('parent').callprop('isLoop') and PyJsStrictEq(var.get('self').get('key'),Js('body')))):
            PyJs_Object_2038_ = Js({'type':Js('BlockStatement'),'body':Js([])})
            var.get('self').callprop('replaceWith', PyJs_Object_2038_)
            return var.get('true')
    PyJs_anonymous_2037_._set_name('anonymous')
    var.put('hooks', var.get('exports').put('hooks', Js([PyJs_anonymous_2033_, PyJs_anonymous_2034_, PyJs_anonymous_2035_, PyJs_anonymous_2036_, PyJs_anonymous_2037_])))
PyJs_anonymous_2032_._set_name('anonymous')
PyJs_Object_2039_ = Js({})
@Js
def PyJs_anonymous_2040_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Referenced', 'ReferencedIdentifier', 'Pure', '_interopRequireWildcard', 'require', '_babelTypes', 'Flow', 'module', 'ReferencedMemberExpression', 'BlockScoped', 'Generated', 'User', 't', 'Statement', 'Var', 'Scope', 'Expression', 'BindingIdentifier'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2042_ = Js({})
            var.put('newObj', PyJs_Object_2042_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    def PyJs_LONG_2041_(var=var):
        return var.get('exports').put('Var', var.get('exports').put('BlockScoped', var.get('exports').put('Referenced', var.get('exports').put('Scope', var.get('exports').put('Expression', var.get('exports').put('Statement', var.get('exports').put('BindingIdentifier', var.get('exports').put('ReferencedMemberExpression', var.get('exports').put('ReferencedIdentifier', var.get('undefined'))))))))))
    var.get('exports').put('Flow', var.get('exports').put('Pure', var.get('exports').put('Generated', var.get('exports').put('User', PyJs_LONG_2041_()))))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    @Js
    def PyJs_checkPath_2044_(_ref, opts, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'checkPath':PyJs_checkPath_2044_, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['node', '_ref', 'opts', 'parent'])
        var.put('node', var.get('_ref').get('node'))
        var.put('parent', var.get('_ref').get('parent'))
        if (var.get('t').callprop('isIdentifier', var.get('node'), var.get('opts')).neg() and var.get('t').callprop('isJSXMemberExpression', var.get('parent'), var.get('opts')).neg()):
            if var.get('t').callprop('isJSXIdentifier', var.get('node'), var.get('opts')):
                if var.get('_babelTypes').get('react').callprop('isCompatTag', var.get('node').get('name')):
                    return Js(False)
            else:
                return Js(False)
        return var.get('t').callprop('isReferenced', var.get('node'), var.get('parent'))
    PyJs_checkPath_2044_._set_name('checkPath')
    PyJs_Object_2043_ = Js({'types':Js([Js('Identifier'), Js('JSXIdentifier')]),'checkPath':PyJs_checkPath_2044_})
    var.put('ReferencedIdentifier', var.get('exports').put('ReferencedIdentifier', PyJs_Object_2043_))
    @Js
    def PyJs_checkPath_2046_(_ref2, this, arguments, var=var):
        var = Scope({'this':this, 'checkPath':PyJs_checkPath_2046_, '_ref2':_ref2, 'arguments':arguments}, var)
        var.registers(['node', '_ref2', 'parent'])
        var.put('node', var.get('_ref2').get('node'))
        var.put('parent', var.get('_ref2').get('parent'))
        return (var.get('t').callprop('isMemberExpression', var.get('node')) and var.get('t').callprop('isReferenced', var.get('node'), var.get('parent')))
    PyJs_checkPath_2046_._set_name('checkPath')
    PyJs_Object_2045_ = Js({'types':Js([Js('MemberExpression')]),'checkPath':PyJs_checkPath_2046_})
    var.put('ReferencedMemberExpression', var.get('exports').put('ReferencedMemberExpression', PyJs_Object_2045_))
    @Js
    def PyJs_checkPath_2048_(_ref3, this, arguments, var=var):
        var = Scope({'this':this, 'checkPath':PyJs_checkPath_2048_, '_ref3':_ref3, 'arguments':arguments}, var)
        var.registers(['node', '_ref3', 'parent'])
        var.put('node', var.get('_ref3').get('node'))
        var.put('parent', var.get('_ref3').get('parent'))
        return (var.get('t').callprop('isIdentifier', var.get('node')) and var.get('t').callprop('isBinding', var.get('node'), var.get('parent')))
    PyJs_checkPath_2048_._set_name('checkPath')
    PyJs_Object_2047_ = Js({'types':Js([Js('Identifier')]),'checkPath':PyJs_checkPath_2048_})
    var.put('BindingIdentifier', var.get('exports').put('BindingIdentifier', PyJs_Object_2047_))
    @Js
    def PyJs_checkPath_2050_(_ref4, this, arguments, var=var):
        var = Scope({'this':this, '_ref4':_ref4, 'checkPath':PyJs_checkPath_2050_, 'arguments':arguments}, var)
        var.registers(['node', '_ref4', 'parent'])
        var.put('node', var.get('_ref4').get('node'))
        var.put('parent', var.get('_ref4').get('parent'))
        if var.get('t').callprop('isStatement', var.get('node')):
            if var.get('t').callprop('isVariableDeclaration', var.get('node')):
                PyJs_Object_2051_ = Js({'left':var.get('node')})
                if var.get('t').callprop('isForXStatement', var.get('parent'), PyJs_Object_2051_):
                    return Js(False)
                PyJs_Object_2052_ = Js({'init':var.get('node')})
                if var.get('t').callprop('isForStatement', var.get('parent'), PyJs_Object_2052_):
                    return Js(False)
            return var.get('true')
        else:
            return Js(False)
    PyJs_checkPath_2050_._set_name('checkPath')
    PyJs_Object_2049_ = Js({'types':Js([Js('Statement')]),'checkPath':PyJs_checkPath_2050_})
    var.put('Statement', var.get('exports').put('Statement', PyJs_Object_2049_))
    @Js
    def PyJs_checkPath_2054_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2054_, 'arguments':arguments}, var)
        var.registers(['path'])
        if var.get('path').callprop('isIdentifier'):
            return var.get('path').callprop('isReferencedIdentifier')
        else:
            return var.get('t').callprop('isExpression', var.get('path').get('node'))
    PyJs_checkPath_2054_._set_name('checkPath')
    PyJs_Object_2053_ = Js({'types':Js([Js('Expression')]),'checkPath':PyJs_checkPath_2054_})
    var.put('Expression', var.get('exports').put('Expression', PyJs_Object_2053_))
    @Js
    def PyJs_checkPath_2056_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2056_, 'arguments':arguments}, var)
        var.registers(['path'])
        return var.get('t').callprop('isScope', var.get('path').get('node'), var.get('path').get('parent'))
    PyJs_checkPath_2056_._set_name('checkPath')
    PyJs_Object_2055_ = Js({'types':Js([Js('Scopable')]),'checkPath':PyJs_checkPath_2056_})
    var.put('Scope', var.get('exports').put('Scope', PyJs_Object_2055_))
    @Js
    def PyJs_checkPath_2058_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2058_, 'arguments':arguments}, var)
        var.registers(['path'])
        return var.get('t').callprop('isReferenced', var.get('path').get('node'), var.get('path').get('parent'))
    PyJs_checkPath_2058_._set_name('checkPath')
    PyJs_Object_2057_ = Js({'checkPath':PyJs_checkPath_2058_})
    var.put('Referenced', var.get('exports').put('Referenced', PyJs_Object_2057_))
    @Js
    def PyJs_checkPath_2060_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2060_, 'arguments':arguments}, var)
        var.registers(['path'])
        return var.get('t').callprop('isBlockScoped', var.get('path').get('node'))
    PyJs_checkPath_2060_._set_name('checkPath')
    PyJs_Object_2059_ = Js({'checkPath':PyJs_checkPath_2060_})
    var.put('BlockScoped', var.get('exports').put('BlockScoped', PyJs_Object_2059_))
    @Js
    def PyJs_checkPath_2062_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2062_, 'arguments':arguments}, var)
        var.registers(['path'])
        return var.get('t').callprop('isVar', var.get('path').get('node'))
    PyJs_checkPath_2062_._set_name('checkPath')
    PyJs_Object_2061_ = Js({'types':Js([Js('VariableDeclaration')]),'checkPath':PyJs_checkPath_2062_})
    var.put('Var', var.get('exports').put('Var', PyJs_Object_2061_))
    @Js
    def PyJs_checkPath_2064_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2064_, 'arguments':arguments}, var)
        var.registers(['path'])
        return (var.get('path').get('node') and var.get('path').get('node').get('loc').neg().neg())
    PyJs_checkPath_2064_._set_name('checkPath')
    PyJs_Object_2063_ = Js({'checkPath':PyJs_checkPath_2064_})
    var.put('User', var.get('exports').put('User', PyJs_Object_2063_))
    @Js
    def PyJs_checkPath_2066_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2066_, 'arguments':arguments}, var)
        var.registers(['path'])
        return var.get('path').callprop('isUser').neg()
    PyJs_checkPath_2066_._set_name('checkPath')
    PyJs_Object_2065_ = Js({'checkPath':PyJs_checkPath_2066_})
    var.put('Generated', var.get('exports').put('Generated', PyJs_Object_2065_))
    @Js
    def PyJs_checkPath_2068_(path, opts, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'checkPath':PyJs_checkPath_2068_, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['path', 'opts'])
        return var.get('path').get('scope').callprop('isPure', var.get('path').get('node'), var.get('opts'))
    PyJs_checkPath_2068_._set_name('checkPath')
    PyJs_Object_2067_ = Js({'checkPath':PyJs_checkPath_2068_})
    var.put('Pure', var.get('exports').put('Pure', PyJs_Object_2067_))
    @Js
    def PyJs_checkPath_2070_(_ref5, this, arguments, var=var):
        var = Scope({'this':this, '_ref5':_ref5, 'checkPath':PyJs_checkPath_2070_, 'arguments':arguments}, var)
        var.registers(['node', '_ref5'])
        var.put('node', var.get('_ref5').get('node'))
        if var.get('t').callprop('isFlow', var.get('node')):
            return var.get('true')
        else:
            if var.get('t').callprop('isImportDeclaration', var.get('node')):
                return (PyJsStrictEq(var.get('node').get('importKind'),Js('type')) or PyJsStrictEq(var.get('node').get('importKind'),Js('typeof')))
            else:
                if var.get('t').callprop('isExportDeclaration', var.get('node')):
                    return PyJsStrictEq(var.get('node').get('exportKind'),Js('type'))
                else:
                    return Js(False)
    PyJs_checkPath_2070_._set_name('checkPath')
    PyJs_Object_2069_ = Js({'types':Js([Js('Flow'), Js('ImportDeclaration'), Js('ExportDeclaration')]),'checkPath':PyJs_checkPath_2070_})
    var.put('Flow', var.get('exports').put('Flow', PyJs_Object_2069_))
PyJs_anonymous_2040_._set_name('anonymous')
PyJs_Object_2071_ = Js({'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2072_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_hoister', 'updateSiblingKeys', '_verifyNodeList', '_interopRequireDefault', '_cache', '_getIterator2', '_getIterator3', '_maybePopFromStatements', '_typeof2', '_typeof3', '_interopRequireWildcard', 'unshiftContainer', 'insertAfter', 'exports', 'pushContainer', 'insertBefore', '_babelTypes', 'hoist', 'module', '_index2', '_index', 'require', '_containerInsert', '_containerInsertBefore', 't', '_containerInsertAfter', '_hoister2'])
    @Js
    def PyJsHoisted_pushContainer_(listKey, nodes, this, arguments, var=var):
        var = Scope({'this':this, 'listKey':listKey, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['path', 'listKey', 'container', 'nodes'])
        var.get("this").callprop('_assertUnremoved')
        var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
        var.put('container', var.get("this").get('node').get(var.get('listKey')))
        PyJs_Object_2078_ = Js({'parentPath':var.get("this"),'parent':var.get("this").get('node'),'container':var.get('container'),'listKey':var.get('listKey'),'key':var.get('container').get('length')})
        var.put('path', var.get('_index2').get('default').callprop('get', PyJs_Object_2078_))
        return var.get('path').callprop('replaceWithMultiple', var.get('nodes'))
    PyJsHoisted_pushContainer_.__name__ = 'pushContainer'
    var.put('pushContainer', PyJsHoisted_pushContainer_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2073_ = Js({})
            var.put('newObj', PyJs_Object_2073_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_insertBefore_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes'])
        var.get("this").callprop('_assertUnremoved')
        var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
        if (var.get("this").get('parentPath').callprop('isExpressionStatement') or var.get("this").get('parentPath').callprop('isLabeledStatement')):
            return var.get("this").get('parentPath').callprop('insertBefore', var.get('nodes'))
        else:
            if (var.get("this").callprop('isNodeType', Js('Expression')) or (var.get("this").get('parentPath').callprop('isForStatement') and PyJsStrictEq(var.get("this").get('key'),Js('init')))):
                if var.get("this").get('node'):
                    var.get('nodes').callprop('push', var.get("this").get('node'))
                var.get("this").callprop('replaceExpressionWithStatements', var.get('nodes'))
            else:
                var.get("this").callprop('_maybePopFromStatements', var.get('nodes'))
                if var.get('Array').callprop('isArray', var.get("this").get('container')):
                    return var.get("this").callprop('_containerInsertBefore', var.get('nodes'))
                else:
                    if var.get("this").callprop('isStatementOrBlock'):
                        if var.get("this").get('node'):
                            var.get('nodes').callprop('push', var.get("this").get('node'))
                        var.get("this").callprop('_replaceWith', var.get('t').callprop('blockStatement', var.get('nodes')))
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(Js("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?")))
                        raise PyJsTempException
        return Js([var.get("this")])
    PyJsHoisted_insertBefore_.__name__ = 'insertBefore'
    var.put('insertBefore', PyJsHoisted_insertBefore_)
    @Js
    def PyJsHoisted__containerInsert_(PyJsArg_66726f6d_, nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'from':PyJsArg_66726f6d_, 'arguments':arguments}, var)
        var.registers(['node', 'paths', '_isArray', 'context', '_iterator', '_isArray2', 'to', 'i', '_i2', '_ref2', 'contexts', 'from', '_i', 'path', '_ref', '_iterator2', 'nodes', '_path'])
        var.get("this").callprop('updateSiblingKeys', var.get('from'), var.get('nodes').get('length'))
        var.put('paths', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('nodes').get('length')):
            try:
                var.put('to', (var.get('from')+var.get('i')))
                var.put('node', var.get('nodes').get(var.get('i')))
                var.get("this").get('container').callprop('splice', var.get('to'), Js(0.0), var.get('node'))
                if var.get("this").get('context'):
                    var.put('path', var.get("this").get('context').callprop('create', var.get("this").get('parent'), var.get("this").get('container'), var.get('to'), var.get("this").get('listKey')))
                    if var.get("this").get('context').get('queue'):
                        var.get('path').callprop('pushContext', var.get("this").get('context'))
                    var.get('paths').callprop('push', var.get('path'))
                else:
                    PyJs_Object_2075_ = Js({'parentPath':var.get("this").get('parentPath'),'parent':var.get("this").get('parent'),'container':var.get("this").get('container'),'listKey':var.get("this").get('listKey'),'key':var.get('to')})
                    var.get('paths').callprop('push', var.get('_index2').get('default').callprop('get', PyJs_Object_2075_))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.put('contexts', var.get("this").callprop('_getQueueContexts'))
        #for JS loop
        var.put('_iterator', var.get('paths'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('_path', var.get('_ref'))
            var.get('_path').callprop('setScope')
            @Js
            def PyJs_anonymous_2076_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js('Inserted.')
            PyJs_anonymous_2076_._set_name('anonymous')
            var.get('_path').callprop('debug', PyJs_anonymous_2076_)
            #for JS loop
            var.put('_iterator2', var.get('contexts'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('context', var.get('_ref2'))
                var.get('context').callprop('maybeQueue', var.get('_path'), var.get('true'))
            
        
        return var.get('paths')
    PyJsHoisted__containerInsert_.__name__ = '_containerInsert'
    var.put('_containerInsert', PyJsHoisted__containerInsert_)
    @Js
    def PyJsHoisted_unshiftContainer_(listKey, nodes, this, arguments, var=var):
        var = Scope({'this':this, 'listKey':listKey, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['path', 'listKey', 'nodes'])
        var.get("this").callprop('_assertUnremoved')
        var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
        PyJs_Object_2077_ = Js({'parentPath':var.get("this"),'parent':var.get("this").get('node'),'container':var.get("this").get('node').get(var.get('listKey')),'listKey':var.get('listKey'),'key':Js(0.0)})
        var.put('path', var.get('_index2').get('default').callprop('get', PyJs_Object_2077_))
        return var.get('path').callprop('insertBefore', var.get('nodes'))
    PyJsHoisted_unshiftContainer_.__name__ = 'unshiftContainer'
    var.put('unshiftContainer', PyJsHoisted_unshiftContainer_)
    @Js
    def PyJsHoisted__containerInsertBefore_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes'])
        return var.get("this").callprop('_containerInsert', var.get("this").get('key'), var.get('nodes'))
    PyJsHoisted__containerInsertBefore_.__name__ = '_containerInsertBefore'
    var.put('_containerInsertBefore', PyJsHoisted__containerInsertBefore_)
    @Js
    def PyJsHoisted_updateSiblingKeys_(fromIndex, incrementBy, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'fromIndex':fromIndex, 'incrementBy':incrementBy}, var)
        var.registers(['i', 'paths', 'incrementBy', 'fromIndex', 'path'])
        if var.get("this").get('parent').neg():
            return var.get('undefined')
        var.put('paths', var.get('_cache').get('path').callprop('get', var.get("this").get('parent')))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('paths').get('length')):
            try:
                var.put('path', var.get('paths').get(var.get('i')))
                if (var.get('path').get('key')>=var.get('fromIndex')):
                    var.get('path').put('key', var.get('incrementBy'), '+')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJsHoisted_updateSiblingKeys_.__name__ = 'updateSiblingKeys'
    var.put('updateSiblingKeys', PyJsHoisted_updateSiblingKeys_)
    @Js
    def PyJsHoisted__verifyNodeList_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['i', 'node', 'nodes', 'type', 'msg'])
        if var.get('nodes').neg():
            return Js([])
        if PyJsStrictNeq(var.get('nodes').get('constructor'),var.get('Array')):
            var.put('nodes', Js([var.get('nodes')]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('nodes').get('length')):
            try:
                var.put('node', var.get('nodes').get(var.get('i')))
                var.put('msg', PyJsComma(Js(0.0), Js(None)))
                if var.get('node').neg():
                    var.put('msg', Js('has falsy node'))
                else:
                    if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('node',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('node'))),Js('object')):
                        var.put('msg', Js('contains a non-object node'))
                    else:
                        if var.get('node').get('type').neg():
                            var.put('msg', Js('without a type'))
                        else:
                            if var.get('node').instanceof(var.get('_index2').get('default')):
                                var.put('msg', Js('has a NodePath when it expected a raw object'))
                if var.get('msg'):
                    var.put('type', (Js('array') if var.get('Array').callprop('isArray', var.get('node')) else (Js('undefined') if PyJsStrictEq(var.get('node',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('node')))))
                    PyJsTempException = JsToPyException(var.get('Error').create((((((Js('Node list ')+var.get('msg'))+Js(' with the index of '))+var.get('i'))+Js(' and type of '))+var.get('type'))))
                    raise PyJsTempException
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('nodes')
    PyJsHoisted__verifyNodeList_.__name__ = '_verifyNodeList'
    var.put('_verifyNodeList', PyJsHoisted__verifyNodeList_)
    @Js
    def PyJsHoisted_insertAfter_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes', 'temp'])
        var.get("this").callprop('_assertUnremoved')
        var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
        if (var.get("this").get('parentPath').callprop('isExpressionStatement') or var.get("this").get('parentPath').callprop('isLabeledStatement')):
            return var.get("this").get('parentPath').callprop('insertAfter', var.get('nodes'))
        else:
            if (var.get("this").callprop('isNodeType', Js('Expression')) or (var.get("this").get('parentPath').callprop('isForStatement') and PyJsStrictEq(var.get("this").get('key'),Js('init')))):
                if var.get("this").get('node'):
                    var.put('temp', var.get("this").get('scope').callprop('generateDeclaredUidIdentifier'))
                    var.get('nodes').callprop('unshift', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('temp'), var.get("this").get('node'))))
                    var.get('nodes').callprop('push', var.get('t').callprop('expressionStatement', var.get('temp')))
                var.get("this").callprop('replaceExpressionWithStatements', var.get('nodes'))
            else:
                var.get("this").callprop('_maybePopFromStatements', var.get('nodes'))
                if var.get('Array').callprop('isArray', var.get("this").get('container')):
                    return var.get("this").callprop('_containerInsertAfter', var.get('nodes'))
                else:
                    if var.get("this").callprop('isStatementOrBlock'):
                        if var.get("this").get('node'):
                            var.get('nodes').callprop('unshift', var.get("this").get('node'))
                        var.get("this").callprop('_replaceWith', var.get('t').callprop('blockStatement', var.get('nodes')))
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(Js("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?")))
                        raise PyJsTempException
        return Js([var.get("this")])
    PyJsHoisted_insertAfter_.__name__ = 'insertAfter'
    var.put('insertAfter', PyJsHoisted_insertAfter_)
    @Js
    def PyJsHoisted_hoist_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['scope', 'hoister'])
        var.put('scope', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else var.get("this").get('scope')))
        var.put('hoister', var.get('_hoister2').get('default').create(var.get("this"), var.get('scope')))
        return var.get('hoister').callprop('run')
    PyJsHoisted_hoist_.__name__ = 'hoist'
    var.put('hoist', PyJsHoisted_hoist_)
    @Js
    def PyJsHoisted__containerInsertAfter_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes'])
        return var.get("this").callprop('_containerInsert', (var.get("this").get('key')+Js(1.0)), var.get('nodes'))
    PyJsHoisted__containerInsertAfter_.__name__ = '_containerInsertAfter'
    var.put('_containerInsertAfter', PyJsHoisted__containerInsertAfter_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2074_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2074_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__maybePopFromStatements_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes', 'last', 'isIdentifier'])
        var.put('last', var.get('nodes').get((var.get('nodes').get('length')-Js(1.0))))
        var.put('isIdentifier', (var.get('t').callprop('isIdentifier', var.get('last')) or (var.get('t').callprop('isExpressionStatement', var.get('last')) and var.get('t').callprop('isIdentifier', var.get('last').get('expression')))))
        if (var.get('isIdentifier') and var.get("this").callprop('isCompletionRecord').neg()):
            var.get('nodes').callprop('pop')
    PyJsHoisted__maybePopFromStatements_.__name__ = '_maybePopFromStatements'
    var.put('_maybePopFromStatements', PyJsHoisted__maybePopFromStatements_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('insertBefore', var.get('insertBefore'))
    var.get('exports').put('_containerInsert', var.get('_containerInsert'))
    var.get('exports').put('_containerInsertBefore', var.get('_containerInsertBefore'))
    var.get('exports').put('_containerInsertAfter', var.get('_containerInsertAfter'))
    var.get('exports').put('_maybePopFromStatements', var.get('_maybePopFromStatements'))
    var.get('exports').put('insertAfter', var.get('insertAfter'))
    var.get('exports').put('updateSiblingKeys', var.get('updateSiblingKeys'))
    var.get('exports').put('_verifyNodeList', var.get('_verifyNodeList'))
    var.get('exports').put('unshiftContainer', var.get('unshiftContainer'))
    var.get('exports').put('pushContainer', var.get('pushContainer'))
    var.get('exports').put('hoist', var.get('hoist'))
    var.put('_cache', var.get('require')(Js('../cache')))
    var.put('_hoister', var.get('require')(Js('./lib/hoister')))
    var.put('_hoister2', var.get('_interopRequireDefault')(var.get('_hoister')))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2072_._set_name('anonymous')
PyJs_Object_2079_ = Js({'../cache':Js(222.0),'./index':Js(232.0),'./lib/hoister':Js(237.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/helpers/typeof':Js(114.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2080_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_assertUnremoved', 'exports', 'require', 'remove', '_remove', '_markRemoved', 'module', '_removalHooks', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_callRemovalHooks'])
    @Js
    def PyJsHoisted__assertUnremoved_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('removed'):
            PyJsTempException = JsToPyException(var.get("this").callprop('buildCodeFrameError', Js('NodePath has been removed so is read-only.')))
            raise PyJsTempException
    PyJsHoisted__assertUnremoved_.__name__ = '_assertUnremoved'
    var.put('_assertUnremoved', PyJsHoisted__assertUnremoved_)
    @Js
    def PyJsHoisted_remove_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").callprop('_assertUnremoved')
        var.get("this").callprop('resync')
        if var.get("this").callprop('_callRemovalHooks'):
            var.get("this").callprop('_markRemoved')
            return var.get('undefined')
        var.get("this").callprop('shareCommentsWithSiblings')
        var.get("this").callprop('_remove')
        var.get("this").callprop('_markRemoved')
    PyJsHoisted_remove_.__name__ = 'remove'
    var.put('remove', PyJsHoisted_remove_)
    @Js
    def PyJsHoisted__remove_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get('Array').callprop('isArray', var.get("this").get('container')):
            var.get("this").get('container').callprop('splice', var.get("this").get('key'), Js(1.0))
            var.get("this").callprop('updateSiblingKeys', var.get("this").get('key'), (-Js(1.0)))
        else:
            var.get("this").callprop('_replaceWith', var.get("null"))
    PyJsHoisted__remove_.__name__ = '_remove'
    var.put('_remove', PyJsHoisted__remove_)
    @Js
    def PyJsHoisted__markRemoved_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('shouldSkip', var.get('true'))
        var.get("this").put('removed', var.get('true'))
        var.get("this").put('node', var.get("null"))
    PyJsHoisted__markRemoved_.__name__ = '_markRemoved'
    var.put('_markRemoved', PyJsHoisted__markRemoved_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2081_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2081_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__callRemovalHooks_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['fn', '_isArray', '_iterator', '_ref', '_i'])
        #for JS loop
        var.put('_iterator', var.get('_removalHooks').get('hooks'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('fn', var.get('_ref'))
            if var.get('fn')(var.get("this"), var.get("this").get('parentPath')):
                return var.get('true')
        
    PyJsHoisted__callRemovalHooks_.__name__ = '_callRemovalHooks'
    var.put('_callRemovalHooks', PyJsHoisted__callRemovalHooks_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('remove', var.get('remove'))
    var.get('exports').put('_callRemovalHooks', var.get('_callRemovalHooks'))
    var.get('exports').put('_remove', var.get('_remove'))
    var.get('exports').put('_markRemoved', var.get('_markRemoved'))
    var.get('exports').put('_assertUnremoved', var.get('_assertUnremoved'))
    var.put('_removalHooks', var.get('require')(Js('./lib/removal-hooks')))
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2080_._set_name('anonymous')
PyJs_Object_2082_ = Js({'./lib/removal-hooks':Js(238.0),'babel-runtime/core-js/get-iterator':Js(96.0)})
@Js
def PyJs_anonymous_2083_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['replaceExpressionWithStatements', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'replaceInline', 'replaceWithSourceString', '_babelCodeFrame2', '_replaceWith', '_babylon', 'hoistVariablesVisitor', 'exports', '_babelTypes', '_interopRequireWildcard', 'replaceWith', '_babelCodeFrame', '_index4', '_index2', '_index3', '_index', 'require', 't', 'replaceWithMultiple'])
    @Js
    def PyJsHoisted_replaceExpressionWithStatements_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['container', '_isArray2', 'toSequenceExpression', 'completionRecords', '_i2', '_ref2', 'exprs', 'uid', 'path', 'nodes', 'callee', 'loop', '_iterator2'])
        var.get("this").callprop('resync')
        var.put('toSequenceExpression', var.get('t').callprop('toSequenceExpression', var.get('nodes'), var.get("this").get('scope')))
        if var.get('t').callprop('isSequenceExpression', var.get('toSequenceExpression')):
            var.put('exprs', var.get('toSequenceExpression').get('expressions'))
            if ((var.get('exprs').get('length')>=Js(2.0)) and var.get("this").get('parentPath').callprop('isExpressionStatement')):
                var.get("this").callprop('_maybePopFromStatements', var.get('exprs'))
            if PyJsStrictEq(var.get('exprs').get('length'),Js(1.0)):
                var.get("this").callprop('replaceWith', var.get('exprs').get('0'))
            else:
                var.get("this").callprop('replaceWith', var.get('toSequenceExpression'))
        else:
            if var.get('toSequenceExpression'):
                var.get("this").callprop('replaceWith', var.get('toSequenceExpression'))
            else:
                var.put('container', var.get('t').callprop('functionExpression', var.get("null"), Js([]), var.get('t').callprop('blockStatement', var.get('nodes'))))
                var.get('container').put('shadow', var.get('true'))
                var.get("this").callprop('replaceWith', var.get('t').callprop('callExpression', var.get('container'), Js([])))
                var.get("this").callprop('traverse', var.get('hoistVariablesVisitor'))
                var.put('completionRecords', var.get("this").callprop('get', Js('callee')).callprop('getCompletionRecords'))
                #for JS loop
                var.put('_iterator2', var.get('completionRecords'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('path', var.get('_ref2'))
                    if var.get('path').callprop('isExpressionStatement').neg():
                        continue
                    @Js
                    def PyJs_anonymous_2091_(path, this, arguments, var=var):
                        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                        var.registers(['path'])
                        return var.get('path').callprop('isLoop')
                    PyJs_anonymous_2091_._set_name('anonymous')
                    var.put('loop', var.get('path').callprop('findParent', PyJs_anonymous_2091_))
                    if var.get('loop'):
                        var.put('callee', var.get("this").callprop('get', Js('callee')))
                        var.put('uid', var.get('callee').get('scope').callprop('generateDeclaredUidIdentifier', Js('ret')))
                        var.get('callee').callprop('get', Js('body')).callprop('pushContainer', Js('body'), var.get('t').callprop('returnStatement', var.get('uid')))
                        var.get('path').callprop('get', Js('expression')).callprop('replaceWith', var.get('t').callprop('assignmentExpression', Js('='), var.get('uid'), var.get('path').get('node').get('expression')))
                    else:
                        var.get('path').callprop('replaceWith', var.get('t').callprop('returnStatement', var.get('path').get('node').get('expression')))
                
                return var.get("this").get('node')
    PyJsHoisted_replaceExpressionWithStatements_.__name__ = 'replaceExpressionWithStatements'
    var.put('replaceExpressionWithStatements', PyJsHoisted_replaceExpressionWithStatements_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2084_ = Js({})
            var.put('newObj', PyJs_Object_2084_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_replaceWith_(replacement, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'replacement':replacement}, var)
        var.registers(['oldNode', 'replacement'])
        var.get("this").callprop('resync')
        if var.get("this").get('removed'):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("You can't replace this node, we've already removed it")))
            raise PyJsTempException
        if var.get('replacement').instanceof(var.get('_index4').get('default')):
            var.put('replacement', var.get('replacement').get('node'))
        if var.get('replacement').neg():
            PyJsTempException = JsToPyException(var.get('Error').create(Js('You passed `path.replaceWith()` a falsy node, use `path.remove()` instead')))
            raise PyJsTempException
        if PyJsStrictEq(var.get("this").get('node'),var.get('replacement')):
            return var.get('undefined')
        if (var.get("this").callprop('isProgram') and var.get('t').callprop('isProgram', var.get('replacement')).neg()):
            PyJsTempException = JsToPyException(var.get('Error').create(Js('You can only replace a Program root node with another Program node')))
            raise PyJsTempException
        if var.get('Array').callprop('isArray', var.get('replacement')):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`")))
            raise PyJsTempException
        if PyJsStrictEq(var.get('replacement',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('Error').create(Js("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`")))
            raise PyJsTempException
        if (var.get("this").callprop('isNodeType', Js('Statement')) and var.get('t').callprop('isExpression', var.get('replacement'))):
            if (var.get("this").callprop('canHaveVariableDeclarationOrExpression').neg() and var.get("this").callprop('canSwapBetweenExpressionAndStatement', var.get('replacement')).neg()):
                var.put('replacement', var.get('t').callprop('expressionStatement', var.get('replacement')))
        if (var.get("this").callprop('isNodeType', Js('Expression')) and var.get('t').callprop('isStatement', var.get('replacement'))):
            if (var.get("this").callprop('canHaveVariableDeclarationOrExpression').neg() and var.get("this").callprop('canSwapBetweenExpressionAndStatement', var.get('replacement')).neg()):
                return var.get("this").callprop('replaceExpressionWithStatements', Js([var.get('replacement')]))
        var.put('oldNode', var.get("this").get('node'))
        if var.get('oldNode'):
            var.get('t').callprop('inheritsComments', var.get('replacement'), var.get('oldNode'))
            var.get('t').callprop('removeComments', var.get('oldNode'))
        var.get("this").callprop('_replaceWith', var.get('replacement'))
        var.get("this").put('type', var.get('replacement').get('type'))
        var.get("this").callprop('setScope')
        var.get("this").callprop('requeue')
    PyJsHoisted_replaceWith_.__name__ = 'replaceWith'
    var.put('replaceWith', PyJsHoisted_replaceWith_)
    @Js
    def PyJsHoisted__replaceWith_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").get('container').neg():
            PyJsTempException = JsToPyException(var.get('ReferenceError').create(Js('Container is falsy')))
            raise PyJsTempException
        if var.get("this").get('inList'):
            var.get('t').callprop('validate', var.get("this").get('parent'), var.get("this").get('key'), Js([var.get('node')]))
        else:
            var.get('t').callprop('validate', var.get("this").get('parent'), var.get("this").get('key'), var.get('node'))
        @Js
        def PyJs_anonymous_2090_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (Js('Replace with ')+(var.get('node') and var.get('node').get('type')))
        PyJs_anonymous_2090_._set_name('anonymous')
        var.get("this").callprop('debug', PyJs_anonymous_2090_)
        var.get("this").put('node', var.get("this").get('container').put(var.get("this").get('key'), var.get('node')))
    PyJsHoisted__replaceWith_.__name__ = '_replaceWith'
    var.put('_replaceWith', PyJsHoisted__replaceWith_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2085_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2085_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_replaceInline_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes'])
        var.get("this").callprop('resync')
        if var.get('Array').callprop('isArray', var.get('nodes')):
            if var.get('Array').callprop('isArray', var.get("this").get('container')):
                var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
                var.get("this").callprop('_containerInsertAfter', var.get('nodes'))
                return var.get("this").callprop('remove')
            else:
                return var.get("this").callprop('replaceWithMultiple', var.get('nodes'))
        else:
            return var.get("this").callprop('replaceWith', var.get('nodes'))
    PyJsHoisted_replaceInline_.__name__ = 'replaceInline'
    var.put('replaceInline', PyJsHoisted_replaceInline_)
    @Js
    def PyJsHoisted_replaceWithMultiple_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['nodes'])
        var.get("this").callprop('resync')
        var.put('nodes', var.get("this").callprop('_verifyNodeList', var.get('nodes')))
        var.get('t').callprop('inheritLeadingComments', var.get('nodes').get('0'), var.get("this").get('node'))
        var.get('t').callprop('inheritTrailingComments', var.get('nodes').get((var.get('nodes').get('length')-Js(1.0))), var.get("this").get('node'))
        var.get("this").put('node', var.get("this").get('container').put(var.get("this").get('key'), var.get("null")))
        var.get("this").callprop('insertAfter', var.get('nodes'))
        if var.get("this").get('node'):
            var.get("this").callprop('requeue')
        else:
            var.get("this").callprop('remove')
    PyJsHoisted_replaceWithMultiple_.__name__ = 'replaceWithMultiple'
    var.put('replaceWithMultiple', PyJsHoisted_replaceWithMultiple_)
    @Js
    def PyJsHoisted_replaceWithSourceString_(replacement, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'replacement':replacement}, var)
        var.registers(['loc', 'replacement'])
        var.get("this").callprop('resync')
        try:
            var.put('replacement', ((Js('(')+var.get('replacement'))+Js(')')))
            var.put('replacement', PyJsComma(Js(0.0),var.get('_babylon').get('parse'))(var.get('replacement')))
        except PyJsException as PyJsTempException:
            PyJsHolder_657272_62521723 = var.own.get('err')
            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
            try:
                var.put('loc', var.get('err').get('loc'))
                if var.get('loc'):
                    var.get('err').put('message', Js(' - make sure this is an expression.'), '+')
                    var.get('err').put('message', (Js('\n')+PyJsComma(Js(0.0),var.get('_babelCodeFrame2').get('default'))(var.get('replacement'), var.get('loc').get('line'), (var.get('loc').get('column')+Js(1.0)))), '+')
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
            finally:
                if PyJsHolder_657272_62521723 is not None:
                    var.own['err'] = PyJsHolder_657272_62521723
                else:
                    del var.own['err']
                del PyJsHolder_657272_62521723
        var.put('replacement', var.get('replacement').get('program').get('body').get('0').get('expression'))
        var.get('_index2').get('default').callprop('removeProperties', var.get('replacement'))
        return var.get("this").callprop('replaceWith', var.get('replacement'))
    PyJsHoisted_replaceWithSourceString_.__name__ = 'replaceWithSourceString'
    var.put('replaceWithSourceString', PyJsHoisted_replaceWithSourceString_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('replaceWithMultiple', var.get('replaceWithMultiple'))
    var.get('exports').put('replaceWithSourceString', var.get('replaceWithSourceString'))
    var.get('exports').put('replaceWith', var.get('replaceWith'))
    var.get('exports').put('_replaceWith', var.get('_replaceWith'))
    var.get('exports').put('replaceExpressionWithStatements', var.get('replaceExpressionWithStatements'))
    var.get('exports').put('replaceInline', var.get('replaceInline'))
    var.put('_babelCodeFrame', var.get('require')(Js('babel-code-frame')))
    var.put('_babelCodeFrame2', var.get('_interopRequireDefault')(var.get('_babelCodeFrame')))
    var.put('_index', var.get('require')(Js('../index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    var.put('_index3', var.get('require')(Js('./index')))
    var.put('_index4', var.get('_interopRequireDefault')(var.get('_index3')))
    var.put('_babylon', var.get('require')(Js('babylon')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_Function_2087_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'Function':PyJs_Function_2087_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').callprop('skip')
    PyJs_Function_2087_._set_name('Function')
    @Js
    def PyJs_VariableDeclaration_2088_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'VariableDeclaration':PyJs_VariableDeclaration_2088_}, var)
        var.registers(['_isArray', '_iterator', 'key', 'exprs', 'declar', '_i', 'path', 'bindings', '_ref'])
        if PyJsStrictNeq(var.get('path').get('node').get('kind'),Js('var')):
            return var.get('undefined')
        var.put('bindings', var.get('path').callprop('getBindingIdentifiers'))
        for PyJsTemp in var.get('bindings'):
            var.put('key', PyJsTemp)
            PyJs_Object_2089_ = Js({'id':var.get('bindings').get(var.get('key'))})
            var.get('path').get('scope').callprop('push', PyJs_Object_2089_)
        var.put('exprs', Js([]))
        #for JS loop
        var.put('_iterator', var.get('path').get('node').get('declarations'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('declar', var.get('_ref'))
            if var.get('declar').get('init'):
                var.get('exprs').callprop('push', var.get('t').callprop('expressionStatement', var.get('t').callprop('assignmentExpression', Js('='), var.get('declar').get('id'), var.get('declar').get('init'))))
        
        var.get('path').callprop('replaceWithMultiple', var.get('exprs'))
    PyJs_VariableDeclaration_2088_._set_name('VariableDeclaration')
    PyJs_Object_2086_ = Js({'Function':PyJs_Function_2087_,'VariableDeclaration':PyJs_VariableDeclaration_2088_})
    var.put('hoistVariablesVisitor', PyJs_Object_2086_)
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2083_._set_name('anonymous')
PyJs_Object_2092_ = Js({'../index':Js(225.0),'./index':Js(232.0),'babel-code-frame':Js(4.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-types':Js(258.0),'babylon':Js(262.0)})
@Js
def PyJs_anonymous_2093_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'Binding', 'module', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2094_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2094_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    pass
    @Js
    def PyJs_anonymous_2095_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Binding'])
        @Js
        def PyJsHoisted_Binding_(_ref, this, arguments, var=var):
            var = Scope({'this':this, '_ref':_ref, 'arguments':arguments}, var)
            var.registers(['kind', 'existing', 'path', 'scope', '_ref', 'identifier'])
            var.put('existing', var.get('_ref').get('existing'))
            var.put('identifier', var.get('_ref').get('identifier'))
            var.put('scope', var.get('_ref').get('scope'))
            var.put('path', var.get('_ref').get('path'))
            var.put('kind', var.get('_ref').get('kind'))
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Binding'))
            var.get("this").put('identifier', var.get('identifier'))
            var.get("this").put('scope', var.get('scope'))
            var.get("this").put('path', var.get('path'))
            var.get("this").put('kind', var.get('kind'))
            var.get("this").put('constantViolations', Js([]))
            var.get("this").put('constant', var.get('true'))
            var.get("this").put('referencePaths', Js([]))
            var.get("this").put('referenced', Js(False))
            var.get("this").put('references', Js(0.0))
            var.get("this").callprop('clearValue')
            if var.get('existing'):
                var.get("this").put('constantViolations', Js([]).callprop('concat', var.get('existing').get('path'), var.get('existing').get('constantViolations'), var.get("this").get('constantViolations')))
        PyJsHoisted_Binding_.__name__ = 'Binding'
        var.put('Binding', PyJsHoisted_Binding_)
        pass
        @Js
        def PyJs_deoptValue_2096_(this, arguments, var=var):
            var = Scope({'this':this, 'deoptValue':PyJs_deoptValue_2096_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").callprop('clearValue')
            var.get("this").put('hasDeoptedValue', var.get('true'))
        PyJs_deoptValue_2096_._set_name('deoptValue')
        var.get('Binding').get('prototype').put('deoptValue', PyJs_deoptValue_2096_)
        @Js
        def PyJs_setValue_2097_(value, this, arguments, var=var):
            var = Scope({'this':this, 'setValue':PyJs_setValue_2097_, 'arguments':arguments, 'value':value}, var)
            var.registers(['value'])
            if var.get("this").get('hasDeoptedValue'):
                return var.get('undefined')
            var.get("this").put('hasValue', var.get('true'))
            var.get("this").put('value', var.get('value'))
        PyJs_setValue_2097_._set_name('setValue')
        var.get('Binding').get('prototype').put('setValue', PyJs_setValue_2097_)
        @Js
        def PyJs_clearValue_2098_(this, arguments, var=var):
            var = Scope({'this':this, 'clearValue':PyJs_clearValue_2098_, 'arguments':arguments}, var)
            var.registers([])
            var.get("this").put('hasDeoptedValue', Js(False))
            var.get("this").put('hasValue', Js(False))
            var.get("this").put('value', var.get("null"))
        PyJs_clearValue_2098_._set_name('clearValue')
        var.get('Binding').get('prototype').put('clearValue', PyJs_clearValue_2098_)
        @Js
        def PyJs_reassign_2099_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'reassign':PyJs_reassign_2099_}, var)
            var.registers(['path'])
            var.get("this").put('constant', Js(False))
            if PyJsStrictNeq(var.get("this").get('constantViolations').callprop('indexOf', var.get('path')),(-Js(1.0))):
                return var.get('undefined')
            var.get("this").get('constantViolations').callprop('push', var.get('path'))
        PyJs_reassign_2099_._set_name('reassign')
        var.get('Binding').get('prototype').put('reassign', PyJs_reassign_2099_)
        @Js
        def PyJs_reference_2100_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'reference':PyJs_reference_2100_}, var)
            var.registers(['path'])
            if PyJsStrictNeq(var.get("this").get('referencePaths').callprop('indexOf', var.get('path')),(-Js(1.0))):
                return var.get('undefined')
            var.get("this").put('referenced', var.get('true'))
            (var.get("this").put('references',Js(var.get("this").get('references').to_number())+Js(1))-Js(1))
            var.get("this").get('referencePaths').callprop('push', var.get('path'))
        PyJs_reference_2100_._set_name('reference')
        var.get('Binding').get('prototype').put('reference', PyJs_reference_2100_)
        @Js
        def PyJs_dereference_2101_(this, arguments, var=var):
            var = Scope({'this':this, 'dereference':PyJs_dereference_2101_, 'arguments':arguments}, var)
            var.registers([])
            (var.get("this").put('references',Js(var.get("this").get('references').to_number())-Js(1))+Js(1))
            var.get("this").put('referenced', var.get("this").get('references').neg().neg())
        PyJs_dereference_2101_._set_name('dereference')
        var.get('Binding').get('prototype').put('dereference', PyJs_dereference_2101_)
        return var.get('Binding')
    PyJs_anonymous_2095_._set_name('anonymous')
    var.put('Binding', PyJs_anonymous_2095_())
    var.get('exports').put('default', var.get('Binding'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_2093_._set_name('anonymous')
PyJs_Object_2102_ = Js({'babel-runtime/helpers/classCallCheck':Js(110.0)})
@Js
def PyJs_anonymous_2103_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_binding3', '_binding2', 'uid', '_defaults', 'module', 'Scope', '_interopRequireDefault', '_cache', '_getIterator2', '_getIterator3', '_renamer2', '_create2', '_keys', '_globals2', 't', '_classCallCheck3', '_classCallCheck2', '_babelMessages', '_create', '_renamer', 'exports', '_interopRequireWildcard', '_babelTypes', '_includes2', '_globals', '_keys2', 'collectorVisitor', '_index2', '_defaults2', '_repeat2', 'getCache', '_map2', '_map', '_crawlCallsCount', 'require', '_index', 'messages', '_repeat', '_includes'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2105_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2105_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getCache_(path, parentScope, self, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'self':self, 'arguments':arguments, 'parentScope':parentScope}, var)
        var.registers(['scopes', '_isArray', '_iterator', 'self', 'parentScope', '_i', 'path', 'scope', '_ref'])
        var.put('scopes', (var.get('_cache').get('scope').callprop('get', var.get('path').get('node')) or Js([])))
        #for JS loop
        var.put('_iterator', var.get('scopes'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('scope', var.get('_ref'))
            if (PyJsStrictEq(var.get('scope').get('parent'),var.get('parentScope')) and PyJsStrictEq(var.get('scope').get('path'),var.get('path'))):
                return var.get('scope')
        
        var.get('scopes').callprop('push', var.get('self'))
        if var.get('_cache').get('scope').callprop('has', var.get('path').get('node')).neg():
            var.get('_cache').get('scope').callprop('set', var.get('path').get('node'), var.get('scopes'))
    PyJsHoisted_getCache_.__name__ = 'getCache'
    var.put('getCache', PyJsHoisted_getCache_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2104_ = Js({})
            var.put('newObj', PyJs_Object_2104_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.put('_map', var.get('require')(Js('babel-runtime/core-js/map')))
    var.put('_map2', var.get('_interopRequireDefault')(var.get('_map')))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_includes', var.get('require')(Js('lodash/includes')))
    var.put('_includes2', var.get('_interopRequireDefault')(var.get('_includes')))
    var.put('_repeat', var.get('require')(Js('lodash/repeat')))
    var.put('_repeat2', var.get('_interopRequireDefault')(var.get('_repeat')))
    var.put('_renamer', var.get('require')(Js('./lib/renamer')))
    var.put('_renamer2', var.get('_interopRequireDefault')(var.get('_renamer')))
    var.put('_index', var.get('require')(Js('../index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    var.put('_defaults', var.get('require')(Js('lodash/defaults')))
    var.put('_defaults2', var.get('_interopRequireDefault')(var.get('_defaults')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_binding2', var.get('require')(Js('./binding')))
    var.put('_binding3', var.get('_interopRequireDefault')(var.get('_binding2')))
    var.put('_globals', var.get('require')(Js('globals')))
    var.put('_globals2', var.get('_interopRequireDefault')(var.get('_globals')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_cache', var.get('require')(Js('../cache')))
    pass
    pass
    var.put('_crawlCallsCount', Js(0.0))
    pass
    @Js
    def PyJs_For_2107_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'For':PyJs_For_2107_}, var)
        var.registers(['_isArray2', '_i2', '_ref2', 'declar', 'key', 'path', '_iterator2'])
        #for JS loop
        var.put('_iterator2', var.get('t').get('FOR_INIT_KEYS'))
        var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
        var.put('_i2', Js(0.0))
        var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
        while 1:
            pass
            if var.get('_isArray2'):
                if (var.get('_i2')>=var.get('_iterator2').get('length')):
                    break
                var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i2', var.get('_iterator2').callprop('next'))
                if var.get('_i2').get('done'):
                    break
                var.put('_ref2', var.get('_i2').get('value'))
            var.put('key', var.get('_ref2'))
            var.put('declar', var.get('path').callprop('get', var.get('key')))
            if var.get('declar').callprop('isVar'):
                var.get('path').get('scope').callprop('getFunctionParent').callprop('registerBinding', Js('var'), var.get('declar'))
        
    PyJs_For_2107_._set_name('For')
    @Js
    def PyJs_Declaration_2108_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'Declaration':PyJs_Declaration_2108_}, var)
        var.registers(['path'])
        if var.get('path').callprop('isBlockScoped'):
            return var.get('undefined')
        if (var.get('path').callprop('isExportDeclaration') and var.get('path').callprop('get', Js('declaration')).callprop('isDeclaration')):
            return var.get('undefined')
        var.get('path').get('scope').callprop('getFunctionParent').callprop('registerDeclaration', var.get('path'))
    PyJs_Declaration_2108_._set_name('Declaration')
    @Js
    def PyJs_ReferencedIdentifier_2109_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_2109_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        var.get('state').get('references').callprop('push', var.get('path'))
    PyJs_ReferencedIdentifier_2109_._set_name('ReferencedIdentifier')
    @Js
    def PyJs_ForXStatement_2110_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'ForXStatement':PyJs_ForXStatement_2110_}, var)
        var.registers(['path', 'state', 'left'])
        var.put('left', var.get('path').callprop('get', Js('left')))
        if (var.get('left').callprop('isPattern') or var.get('left').callprop('isIdentifier')):
            var.get('state').get('constantViolations').callprop('push', var.get('left'))
    PyJs_ForXStatement_2110_._set_name('ForXStatement')
    @Js
    def PyJs_exit_2112_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'exit':PyJs_exit_2112_, 'arguments':arguments}, var)
        var.registers(['node', 'decl', '_isArray3', 'name', '_i3', 'binding', 'ids', 'declar', '_binding', 'path', 'scope', '_id', '_ref3', '_iterator3'])
        var.put('node', var.get('path').get('node'))
        var.put('scope', var.get('path').get('scope'))
        var.put('declar', var.get('node').get('declaration'))
        if (var.get('t').callprop('isClassDeclaration', var.get('declar')) or var.get('t').callprop('isFunctionDeclaration', var.get('declar'))):
            var.put('_id', var.get('declar').get('id'))
            if var.get('_id').neg():
                return var.get('undefined')
            var.put('binding', var.get('scope').callprop('getBinding', var.get('_id').get('name')))
            if var.get('binding'):
                var.get('binding').callprop('reference', var.get('path'))
        else:
            if var.get('t').callprop('isVariableDeclaration', var.get('declar')):
                #for JS loop
                var.put('_iterator3', var.get('declar').get('declarations'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref3', var.get('_i3').get('value'))
                    var.put('decl', var.get('_ref3'))
                    var.put('ids', var.get('t').callprop('getBindingIdentifiers', var.get('decl')))
                    for PyJsTemp in var.get('ids'):
                        var.put('name', PyJsTemp)
                        var.put('_binding', var.get('scope').callprop('getBinding', var.get('name')))
                        if var.get('_binding'):
                            var.get('_binding').callprop('reference', var.get('path'))
                
    PyJs_exit_2112_._set_name('exit')
    PyJs_Object_2111_ = Js({'exit':PyJs_exit_2112_})
    @Js
    def PyJs_LabeledStatement_2113_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'LabeledStatement':PyJs_LabeledStatement_2113_, 'arguments':arguments}, var)
        var.registers(['path'])
        var.get('path').get('scope').callprop('getProgramParent').callprop('addGlobal', var.get('path').get('node'))
        var.get('path').get('scope').callprop('getBlockParent').callprop('registerDeclaration', var.get('path'))
    PyJs_LabeledStatement_2113_._set_name('LabeledStatement')
    @Js
    def PyJs_AssignmentExpression_2114_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'AssignmentExpression':PyJs_AssignmentExpression_2114_}, var)
        var.registers(['path', 'state'])
        var.get('state').get('assignments').callprop('push', var.get('path'))
    PyJs_AssignmentExpression_2114_._set_name('AssignmentExpression')
    @Js
    def PyJs_UpdateExpression_2115_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'UpdateExpression':PyJs_UpdateExpression_2115_}, var)
        var.registers(['path', 'state'])
        var.get('state').get('constantViolations').callprop('push', var.get('path').callprop('get', Js('argument')))
    PyJs_UpdateExpression_2115_._set_name('UpdateExpression')
    @Js
    def PyJs_UnaryExpression_2116_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'UnaryExpression':PyJs_UnaryExpression_2116_, 'arguments':arguments}, var)
        var.registers(['path', 'state'])
        if PyJsStrictEq(var.get('path').get('node').get('operator'),Js('delete')):
            var.get('state').get('constantViolations').callprop('push', var.get('path').callprop('get', Js('argument')))
    PyJs_UnaryExpression_2116_._set_name('UnaryExpression')
    @Js
    def PyJs_BlockScoped_2117_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'BlockScoped':PyJs_BlockScoped_2117_}, var)
        var.registers(['scope', 'path'])
        var.put('scope', var.get('path').get('scope'))
        if PyJsStrictEq(var.get('scope').get('path'),var.get('path')):
            var.put('scope', var.get('scope').get('parent'))
        var.get('scope').callprop('getBlockParent').callprop('registerDeclaration', var.get('path'))
    PyJs_BlockScoped_2117_._set_name('BlockScoped')
    @Js
    def PyJs_ClassDeclaration_2118_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'ClassDeclaration':PyJs_ClassDeclaration_2118_, 'arguments':arguments}, var)
        var.registers(['path', 'id', 'name'])
        var.put('id', var.get('path').get('node').get('id'))
        if var.get('id').neg():
            return var.get('undefined')
        var.put('name', var.get('id').get('name'))
        var.get('path').get('scope').get('bindings').put(var.get('name'), var.get('path').get('scope').callprop('getBinding', var.get('name')))
    PyJs_ClassDeclaration_2118_._set_name('ClassDeclaration')
    @Js
    def PyJs_Block_2119_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'Block':PyJs_Block_2119_}, var)
        var.registers(['paths', '_isArray4', 'bodyPath', '_ref4', '_i4', 'path', '_iterator4'])
        var.put('paths', var.get('path').callprop('get', Js('body')))
        #for JS loop
        var.put('_iterator4', var.get('paths'))
        var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
        var.put('_i4', Js(0.0))
        var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
        while 1:
            pass
            if var.get('_isArray4'):
                if (var.get('_i4')>=var.get('_iterator4').get('length')):
                    break
                var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i4', var.get('_iterator4').callprop('next'))
                if var.get('_i4').get('done'):
                    break
                var.put('_ref4', var.get('_i4').get('value'))
            var.put('bodyPath', var.get('_ref4'))
            if var.get('bodyPath').callprop('isFunctionDeclaration'):
                var.get('path').get('scope').callprop('getBlockParent').callprop('registerDeclaration', var.get('bodyPath'))
        
    PyJs_Block_2119_._set_name('Block')
    PyJs_Object_2106_ = Js({'For':PyJs_For_2107_,'Declaration':PyJs_Declaration_2108_,'ReferencedIdentifier':PyJs_ReferencedIdentifier_2109_,'ForXStatement':PyJs_ForXStatement_2110_,'ExportDeclaration':PyJs_Object_2111_,'LabeledStatement':PyJs_LabeledStatement_2113_,'AssignmentExpression':PyJs_AssignmentExpression_2114_,'UpdateExpression':PyJs_UpdateExpression_2115_,'UnaryExpression':PyJs_UnaryExpression_2116_,'BlockScoped':PyJs_BlockScoped_2117_,'ClassDeclaration':PyJs_ClassDeclaration_2118_,'Block':PyJs_Block_2119_})
    var.put('collectorVisitor', PyJs_Object_2106_)
    var.put('uid', Js(0.0))
    @Js
    def PyJs_anonymous_2120_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Scope'])
        @Js
        def PyJsHoisted_Scope_(path, parentScope, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'parentScope':parentScope}, var)
            var.registers(['cached', 'path', 'parentScope'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Scope'))
            if (var.get('parentScope') and PyJsStrictEq(var.get('parentScope').get('block'),var.get('path').get('node'))):
                return var.get('parentScope')
            var.put('cached', var.get('getCache')(var.get('path'), var.get('parentScope'), var.get("this")))
            if var.get('cached'):
                return var.get('cached')
            var.get("this").put('uid', (var.put('uid',Js(var.get('uid').to_number())+Js(1))-Js(1)))
            var.get("this").put('parent', var.get('parentScope'))
            var.get("this").put('hub', var.get('path').get('hub'))
            var.get("this").put('parentBlock', var.get('path').get('parent'))
            var.get("this").put('block', var.get('path').get('node'))
            var.get("this").put('path', var.get('path'))
            var.get("this").put('labels', var.get('_map2').get('default').create())
        PyJsHoisted_Scope_.__name__ = 'Scope'
        var.put('Scope', PyJsHoisted_Scope_)
        pass
        @Js
        def PyJs_traverse_2121_(node, opts, state, this, arguments, var=var):
            var = Scope({'node':node, 'traverse':PyJs_traverse_2121_, 'this':this, 'state':state, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['node', 'state', 'opts'])
            PyJsComma(Js(0.0),var.get('_index2').get('default'))(var.get('node'), var.get('opts'), var.get("this"), var.get('state'), var.get("this").get('path'))
        PyJs_traverse_2121_._set_name('traverse')
        var.get('Scope').get('prototype').put('traverse', PyJs_traverse_2121_)
        @Js
        def PyJs_generateDeclaredUidIdentifier_2122_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'generateDeclaredUidIdentifier':PyJs_generateDeclaredUidIdentifier_2122_}, var)
            var.registers(['name', 'id'])
            var.put('name', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else Js('temp')))
            var.put('id', var.get("this").callprop('generateUidIdentifier', var.get('name')))
            PyJs_Object_2123_ = Js({'id':var.get('id')})
            var.get("this").callprop('push', PyJs_Object_2123_)
            return var.get('id')
        PyJs_generateDeclaredUidIdentifier_2122_._set_name('generateDeclaredUidIdentifier')
        var.get('Scope').get('prototype').put('generateDeclaredUidIdentifier', PyJs_generateDeclaredUidIdentifier_2122_)
        @Js
        def PyJs_generateUidIdentifier_2124_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'generateUidIdentifier':PyJs_generateUidIdentifier_2124_}, var)
            var.registers(['name'])
            var.put('name', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else Js('temp')))
            return var.get('t').callprop('identifier', var.get("this").callprop('generateUid', var.get('name')))
        PyJs_generateUidIdentifier_2124_._set_name('generateUidIdentifier')
        var.get('Scope').get('prototype').put('generateUidIdentifier', PyJs_generateUidIdentifier_2124_)
        @Js
        def PyJs_generateUid_2125_(this, arguments, var=var):
            var = Scope({'this':this, 'generateUid':PyJs_generateUid_2125_, 'arguments':arguments}, var)
            var.registers(['i', 'program', 'name', 'uid'])
            var.put('name', (var.get('arguments').get('0') if ((var.get('arguments').get('length')>Js(0.0)) and PyJsStrictNeq(var.get('arguments').get('0'),var.get('undefined'))) else Js('temp')))
            var.put('name', var.get('t').callprop('toIdentifier', var.get('name')).callprop('replace', JsRegExp('/^_+/'), Js('')).callprop('replace', JsRegExp('/[0-9]+$/g'), Js('')))
            var.put('uid', PyJsComma(Js(0.0), Js(None)))
            var.put('i', Js(0.0))
            while 1:
                var.put('uid', var.get("this").callprop('_generateUid', var.get('name'), var.get('i')))
                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if not (((var.get("this").callprop('hasLabel', var.get('uid')) or var.get("this").callprop('hasBinding', var.get('uid'))) or var.get("this").callprop('hasGlobal', var.get('uid'))) or var.get("this").callprop('hasReference', var.get('uid'))):
                    break
            var.put('program', var.get("this").callprop('getProgramParent'))
            var.get('program').get('references').put(var.get('uid'), var.get('true'))
            var.get('program').get('uids').put(var.get('uid'), var.get('true'))
            return var.get('uid')
        PyJs_generateUid_2125_._set_name('generateUid')
        var.get('Scope').get('prototype').put('generateUid', PyJs_generateUid_2125_)
        @Js
        def PyJs__generateUid_2126_(name, i, this, arguments, var=var):
            var = Scope({'i':i, 'this':this, '_generateUid':PyJs__generateUid_2126_, 'name':name, 'arguments':arguments}, var)
            var.registers(['i', 'id', 'name'])
            var.put('id', var.get('name'))
            if (var.get('i')>Js(1.0)):
                var.put('id', var.get('i'), '+')
            return (Js('_')+var.get('id'))
        PyJs__generateUid_2126_._set_name('_generateUid')
        var.get('Scope').get('prototype').put('_generateUid', PyJs__generateUid_2126_)
        @Js
        def PyJs_generateUidIdentifierBasedOnNode_2127_(parent, defaultName, this, arguments, var=var):
            var = Scope({'this':this, 'defaultName':defaultName, 'generateUidIdentifierBasedOnNode':PyJs_generateUidIdentifierBasedOnNode_2127_, 'arguments':arguments, 'parent':parent}, var)
            var.registers(['node', 'parent', 'defaultName', 'add', 'parts', 'id'])
            var.put('node', var.get('parent'))
            if var.get('t').callprop('isAssignmentExpression', var.get('parent')):
                var.put('node', var.get('parent').get('left'))
            else:
                if var.get('t').callprop('isVariableDeclarator', var.get('parent')):
                    var.put('node', var.get('parent').get('id'))
                else:
                    if (var.get('t').callprop('isObjectProperty', var.get('node')) or var.get('t').callprop('isObjectMethod', var.get('node'))):
                        var.put('node', var.get('node').get('key'))
            var.put('parts', Js([]))
            @Js
            def PyJs_add_2128_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'add':PyJs_add_2128_, 'arguments':arguments}, var)
                var.registers(['node', 'specifier', '_isArray5', '_isArray6', '_i6', '_ref5', 'prop', '_ref6', '_iterator5', '_iterator6', '_i5'])
                if var.get('t').callprop('isModuleDeclaration', var.get('node')):
                    if var.get('node').get('source'):
                        var.get('add')(var.get('node').get('source'))
                    else:
                        if (var.get('node').get('specifiers') and var.get('node').get('specifiers').get('length')):
                            #for JS loop
                            var.put('_iterator5', var.get('node').get('specifiers'))
                            var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
                            var.put('_i5', Js(0.0))
                            var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
                            while 1:
                                pass
                                if var.get('_isArray5'):
                                    if (var.get('_i5')>=var.get('_iterator5').get('length')):
                                        break
                                    var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                                else:
                                    var.put('_i5', var.get('_iterator5').callprop('next'))
                                    if var.get('_i5').get('done'):
                                        break
                                    var.put('_ref5', var.get('_i5').get('value'))
                                var.put('specifier', var.get('_ref5'))
                                var.get('add')(var.get('specifier'))
                            
                        else:
                            if var.get('node').get('declaration'):
                                var.get('add')(var.get('node').get('declaration'))
                else:
                    if var.get('t').callprop('isModuleSpecifier', var.get('node')):
                        var.get('add')(var.get('node').get('local'))
                    else:
                        if var.get('t').callprop('isMemberExpression', var.get('node')):
                            var.get('add')(var.get('node').get('object'))
                            var.get('add')(var.get('node').get('property'))
                        else:
                            if var.get('t').callprop('isIdentifier', var.get('node')):
                                var.get('parts').callprop('push', var.get('node').get('name'))
                            else:
                                if var.get('t').callprop('isLiteral', var.get('node')):
                                    var.get('parts').callprop('push', var.get('node').get('value'))
                                else:
                                    if var.get('t').callprop('isCallExpression', var.get('node')):
                                        var.get('add')(var.get('node').get('callee'))
                                    else:
                                        if (var.get('t').callprop('isObjectExpression', var.get('node')) or var.get('t').callprop('isObjectPattern', var.get('node'))):
                                            #for JS loop
                                            var.put('_iterator6', var.get('node').get('properties'))
                                            var.put('_isArray6', var.get('Array').callprop('isArray', var.get('_iterator6')))
                                            var.put('_i6', Js(0.0))
                                            var.put('_iterator6', (var.get('_iterator6') if var.get('_isArray6') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator6'))))
                                            while 1:
                                                pass
                                                if var.get('_isArray6'):
                                                    if (var.get('_i6')>=var.get('_iterator6').get('length')):
                                                        break
                                                    var.put('_ref6', var.get('_iterator6').get((var.put('_i6',Js(var.get('_i6').to_number())+Js(1))-Js(1))))
                                                else:
                                                    var.put('_i6', var.get('_iterator6').callprop('next'))
                                                    if var.get('_i6').get('done'):
                                                        break
                                                    var.put('_ref6', var.get('_i6').get('value'))
                                                var.put('prop', var.get('_ref6'))
                                                var.get('add')((var.get('prop').get('key') or var.get('prop').get('argument')))
                                            
            PyJs_add_2128_._set_name('add')
            var.put('add', PyJs_add_2128_)
            var.get('add')(var.get('node'))
            var.put('id', var.get('parts').callprop('join', Js('$')))
            var.put('id', ((var.get('id').callprop('replace', JsRegExp('/^_/'), Js('')) or var.get('defaultName')) or Js('ref')))
            return var.get("this").callprop('generateUidIdentifier', var.get('id').callprop('slice', Js(0.0), Js(20.0)))
        PyJs_generateUidIdentifierBasedOnNode_2127_._set_name('generateUidIdentifierBasedOnNode')
        var.get('Scope').get('prototype').put('generateUidIdentifierBasedOnNode', PyJs_generateUidIdentifierBasedOnNode_2127_)
        @Js
        def PyJs_isStatic_2129_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'isStatic':PyJs_isStatic_2129_, 'arguments':arguments}, var)
            var.registers(['node', 'binding'])
            if (var.get('t').callprop('isThisExpression', var.get('node')) or var.get('t').callprop('isSuper', var.get('node'))):
                return var.get('true')
            if var.get('t').callprop('isIdentifier', var.get('node')):
                var.put('binding', var.get("this").callprop('getBinding', var.get('node').get('name')))
                if var.get('binding'):
                    return var.get('binding').get('constant')
                else:
                    return var.get("this").callprop('hasBinding', var.get('node').get('name'))
            return Js(False)
        PyJs_isStatic_2129_._set_name('isStatic')
        var.get('Scope').get('prototype').put('isStatic', PyJs_isStatic_2129_)
        @Js
        def PyJs_maybeGenerateMemoised_2130_(node, dontPush, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'maybeGenerateMemoised':PyJs_maybeGenerateMemoised_2130_, 'dontPush':dontPush, 'arguments':arguments}, var)
            var.registers(['node', 'dontPush', '_id2'])
            if var.get("this").callprop('isStatic', var.get('node')):
                return var.get("null")
            else:
                var.put('_id2', var.get("this").callprop('generateUidIdentifierBasedOnNode', var.get('node')))
                if var.get('dontPush').neg():
                    PyJs_Object_2131_ = Js({'id':var.get('_id2')})
                    var.get("this").callprop('push', PyJs_Object_2131_)
                return var.get('_id2')
        PyJs_maybeGenerateMemoised_2130_._set_name('maybeGenerateMemoised')
        var.get('Scope').get('prototype').put('maybeGenerateMemoised', PyJs_maybeGenerateMemoised_2130_)
        @Js
        def PyJs_checkBlockScopedCollisions_2132_(local, kind, name, id, this, arguments, var=var):
            var = Scope({'kind':kind, 'name':name, 'this':this, 'checkBlockScopedCollisions':PyJs_checkBlockScopedCollisions_2132_, 'local':local, 'id':id, 'arguments':arguments}, var)
            var.registers(['id', 'duplicate', 'local', 'kind', 'name'])
            if PyJsStrictEq(var.get('kind'),Js('param')):
                return var.get('undefined')
            if (PyJsStrictEq(var.get('kind'),Js('hoisted')) and PyJsStrictEq(var.get('local').get('kind'),Js('let'))):
                return var.get('undefined')
            var.put('duplicate', Js(False))
            if var.get('duplicate').neg():
                var.put('duplicate', (((PyJsStrictEq(var.get('kind'),Js('let')) or PyJsStrictEq(var.get('local').get('kind'),Js('let'))) or PyJsStrictEq(var.get('local').get('kind'),Js('const'))) or PyJsStrictEq(var.get('local').get('kind'),Js('module'))))
            if var.get('duplicate').neg():
                var.put('duplicate', (PyJsStrictEq(var.get('local').get('kind'),Js('param')) and (PyJsStrictEq(var.get('kind'),Js('let')) or PyJsStrictEq(var.get('kind'),Js('const')))))
            if var.get('duplicate'):
                PyJsTempException = JsToPyException(var.get("this").get('hub').get('file').callprop('buildCodeFrameError', var.get('id'), var.get('messages').callprop('get', Js('scopeDuplicateDeclaration'), var.get('name')), var.get('TypeError')))
                raise PyJsTempException
        PyJs_checkBlockScopedCollisions_2132_._set_name('checkBlockScopedCollisions')
        var.get('Scope').get('prototype').put('checkBlockScopedCollisions', PyJs_checkBlockScopedCollisions_2132_)
        @Js
        def PyJs_rename_2133_(oldName, newName, block, this, arguments, var=var):
            var = Scope({'rename':PyJs_rename_2133_, 'newName':newName, 'this':this, 'oldName':oldName, 'block':block, 'arguments':arguments}, var)
            var.registers(['newName', 'binding', 'oldName', 'block'])
            var.put('binding', var.get("this").callprop('getBinding', var.get('oldName')))
            if var.get('binding'):
                var.put('newName', (var.get('newName') or var.get("this").callprop('generateUidIdentifier', var.get('oldName')).get('name')))
                return var.get('_renamer2').get('default').create(var.get('binding'), var.get('oldName'), var.get('newName')).callprop('rename', var.get('block'))
        PyJs_rename_2133_._set_name('rename')
        var.get('Scope').get('prototype').put('rename', PyJs_rename_2133_)
        @Js
        def PyJs__renameFromMap_2134_(map, oldName, newName, value, this, arguments, var=var):
            var = Scope({'map':map, '_renameFromMap':PyJs__renameFromMap_2134_, 'oldName':oldName, 'newName':newName, 'this':this, 'value':value, 'arguments':arguments}, var)
            var.registers(['newName', 'map', 'oldName', 'value'])
            if var.get('map').get(var.get('oldName')):
                var.get('map').put(var.get('newName'), var.get('value'))
                var.get('map').put(var.get('oldName'), var.get("null"))
        PyJs__renameFromMap_2134_._set_name('_renameFromMap')
        var.get('Scope').get('prototype').put('_renameFromMap', PyJs__renameFromMap_2134_)
        @Js
        def PyJs_dump_2135_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'dump':PyJs_dump_2135_}, var)
            var.registers(['scope', 'binding', 'name', 'sep'])
            var.put('sep', PyJsComma(Js(0.0),var.get('_repeat2').get('default'))(Js('-'), Js(60.0)))
            var.get('console').callprop('log', var.get('sep'))
            var.put('scope', var.get("this"))
            while 1:
                var.get('console').callprop('log', Js('#'), var.get('scope').get('block').get('type'))
                for PyJsTemp in var.get('scope').get('bindings'):
                    var.put('name', PyJsTemp)
                    var.put('binding', var.get('scope').get('bindings').get(var.get('name')))
                    PyJs_Object_2136_ = Js({'constant':var.get('binding').get('constant'),'references':var.get('binding').get('references'),'violations':var.get('binding').get('constantViolations').get('length'),'kind':var.get('binding').get('kind')})
                    var.get('console').callprop('log', Js(' -'), var.get('name'), PyJs_Object_2136_)
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            var.get('console').callprop('log', var.get('sep'))
        PyJs_dump_2135_._set_name('dump')
        var.get('Scope').get('prototype').put('dump', PyJs_dump_2135_)
        @Js
        def PyJs_toArray_2137_(node, i, this, arguments, var=var):
            var = Scope({'node':node, 'i':i, 'this':this, 'arguments':arguments, 'toArray':PyJs_toArray_2137_}, var)
            var.registers(['node', 'helperName', 'i', 'args', 'binding', 'file'])
            var.put('file', var.get("this").get('hub').get('file'))
            if var.get('t').callprop('isIdentifier', var.get('node')):
                var.put('binding', var.get("this").callprop('getBinding', var.get('node').get('name')))
                if ((var.get('binding') and var.get('binding').get('constant')) and var.get('binding').get('path').callprop('isGenericType', Js('Array'))):
                    return var.get('node')
            if var.get('t').callprop('isArrayExpression', var.get('node')):
                return var.get('node')
            PyJs_Object_2138_ = Js({'name':Js('arguments')})
            if var.get('t').callprop('isIdentifier', var.get('node'), PyJs_Object_2138_):
                def PyJs_LONG_2139_(var=var):
                    return var.get('t').callprop('callExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('memberExpression', var.get('t').callprop('identifier', Js('Array')), var.get('t').callprop('identifier', Js('prototype'))), var.get('t').callprop('identifier', Js('slice'))), var.get('t').callprop('identifier', Js('call'))), Js([var.get('node')]))
                return PyJs_LONG_2139_()
            var.put('helperName', Js('toArray'))
            var.put('args', Js([var.get('node')]))
            if PyJsStrictEq(var.get('i'),var.get('true')):
                var.put('helperName', Js('toConsumableArray'))
            else:
                if var.get('i'):
                    var.get('args').callprop('push', var.get('t').callprop('numericLiteral', var.get('i')))
                    var.put('helperName', Js('slicedToArray'))
            return var.get('t').callprop('callExpression', var.get('file').callprop('addHelper', var.get('helperName')), var.get('args'))
        PyJs_toArray_2137_._set_name('toArray')
        var.get('Scope').get('prototype').put('toArray', PyJs_toArray_2137_)
        @Js
        def PyJs_hasLabel_2140_(name, this, arguments, var=var):
            var = Scope({'this':this, 'hasLabel':PyJs_hasLabel_2140_, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            return var.get("this").callprop('getLabel', var.get('name')).neg().neg()
        PyJs_hasLabel_2140_._set_name('hasLabel')
        var.get('Scope').get('prototype').put('hasLabel', PyJs_hasLabel_2140_)
        @Js
        def PyJs_getLabel_2141_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'getLabel':PyJs_getLabel_2141_, 'arguments':arguments}, var)
            var.registers(['name'])
            return var.get("this").get('labels').callprop('get', var.get('name'))
        PyJs_getLabel_2141_._set_name('getLabel')
        var.get('Scope').get('prototype').put('getLabel', PyJs_getLabel_2141_)
        @Js
        def PyJs_registerLabel_2142_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'registerLabel':PyJs_registerLabel_2142_}, var)
            var.registers(['path'])
            var.get("this").get('labels').callprop('set', var.get('path').get('node').get('label').get('name'), var.get('path'))
        PyJs_registerLabel_2142_._set_name('registerLabel')
        var.get('Scope').get('prototype').put('registerLabel', PyJs_registerLabel_2142_)
        @Js
        def PyJs_registerDeclaration_2143_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'registerDeclaration':PyJs_registerDeclaration_2143_}, var)
            var.registers(['_isArray7', 'specifiers', '_ref8', '_i8', '_i7', 'declarations', '_isArray8', '_ref7', 'declar', '_iterator8', 'path', 'specifier', '_declar', '_iterator7'])
            if var.get('path').callprop('isLabeledStatement'):
                var.get("this").callprop('registerLabel', var.get('path'))
            else:
                if var.get('path').callprop('isFunctionDeclaration'):
                    var.get("this").callprop('registerBinding', Js('hoisted'), var.get('path').callprop('get', Js('id')), var.get('path'))
                else:
                    if var.get('path').callprop('isVariableDeclaration'):
                        var.put('declarations', var.get('path').callprop('get', Js('declarations')))
                        #for JS loop
                        var.put('_iterator7', var.get('declarations'))
                        var.put('_isArray7', var.get('Array').callprop('isArray', var.get('_iterator7')))
                        var.put('_i7', Js(0.0))
                        var.put('_iterator7', (var.get('_iterator7') if var.get('_isArray7') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator7'))))
                        while 1:
                            pass
                            if var.get('_isArray7'):
                                if (var.get('_i7')>=var.get('_iterator7').get('length')):
                                    break
                                var.put('_ref7', var.get('_iterator7').get((var.put('_i7',Js(var.get('_i7').to_number())+Js(1))-Js(1))))
                            else:
                                var.put('_i7', var.get('_iterator7').callprop('next'))
                                if var.get('_i7').get('done'):
                                    break
                                var.put('_ref7', var.get('_i7').get('value'))
                            var.put('declar', var.get('_ref7'))
                            var.get("this").callprop('registerBinding', var.get('path').get('node').get('kind'), var.get('declar'))
                        
                    else:
                        if var.get('path').callprop('isClassDeclaration'):
                            var.get("this").callprop('registerBinding', Js('let'), var.get('path'))
                        else:
                            if var.get('path').callprop('isImportDeclaration'):
                                var.put('specifiers', var.get('path').callprop('get', Js('specifiers')))
                                #for JS loop
                                var.put('_iterator8', var.get('specifiers'))
                                var.put('_isArray8', var.get('Array').callprop('isArray', var.get('_iterator8')))
                                var.put('_i8', Js(0.0))
                                var.put('_iterator8', (var.get('_iterator8') if var.get('_isArray8') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator8'))))
                                while 1:
                                    pass
                                    if var.get('_isArray8'):
                                        if (var.get('_i8')>=var.get('_iterator8').get('length')):
                                            break
                                        var.put('_ref8', var.get('_iterator8').get((var.put('_i8',Js(var.get('_i8').to_number())+Js(1))-Js(1))))
                                    else:
                                        var.put('_i8', var.get('_iterator8').callprop('next'))
                                        if var.get('_i8').get('done'):
                                            break
                                        var.put('_ref8', var.get('_i8').get('value'))
                                    var.put('specifier', var.get('_ref8'))
                                    var.get("this").callprop('registerBinding', Js('module'), var.get('specifier'))
                                
                            else:
                                if var.get('path').callprop('isExportDeclaration'):
                                    var.put('_declar', var.get('path').callprop('get', Js('declaration')))
                                    if ((var.get('_declar').callprop('isClassDeclaration') or var.get('_declar').callprop('isFunctionDeclaration')) or var.get('_declar').callprop('isVariableDeclaration')):
                                        var.get("this").callprop('registerDeclaration', var.get('_declar'))
                                else:
                                    var.get("this").callprop('registerBinding', Js('unknown'), var.get('path'))
        PyJs_registerDeclaration_2143_._set_name('registerDeclaration')
        var.get('Scope').get('prototype').put('registerDeclaration', PyJs_registerDeclaration_2143_)
        @Js
        def PyJs_buildUndefinedNode_2144_(this, arguments, var=var):
            var = Scope({'this':this, 'buildUndefinedNode':PyJs_buildUndefinedNode_2144_, 'arguments':arguments}, var)
            var.registers([])
            if var.get("this").callprop('hasBinding', Js('undefined')):
                return var.get('t').callprop('unaryExpression', Js('void'), var.get('t').callprop('numericLiteral', Js(0.0)), var.get('true'))
            else:
                return var.get('t').callprop('identifier', Js('undefined'))
        PyJs_buildUndefinedNode_2144_._set_name('buildUndefinedNode')
        var.get('Scope').get('prototype').put('buildUndefinedNode', PyJs_buildUndefinedNode_2144_)
        @Js
        def PyJs_registerConstantViolation_2145_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'registerConstantViolation':PyJs_registerConstantViolation_2145_}, var)
            var.registers(['path', 'binding', 'ids', 'name'])
            var.put('ids', var.get('path').callprop('getBindingIdentifiers'))
            for PyJsTemp in var.get('ids'):
                var.put('name', PyJsTemp)
                var.put('binding', var.get("this").callprop('getBinding', var.get('name')))
                if var.get('binding'):
                    var.get('binding').callprop('reassign', var.get('path'))
        PyJs_registerConstantViolation_2145_._set_name('registerConstantViolation')
        var.get('Scope').get('prototype').put('registerConstantViolation', PyJs_registerConstantViolation_2145_)
        @Js
        def PyJs_registerBinding_2146_(kind, path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'kind':kind, 'arguments':arguments, 'registerBinding':PyJs_registerBinding_2146_}, var)
            var.registers(['parent', 'kind', '_i10', '_i9', '_ref9', 'name', '_ref10', 'ids', '_isArray9', 'declarators', 'declar', '_iterator9', '_isArray10', '_iterator10', 'path', '_id3', 'local', 'bindingPath'])
            var.put('bindingPath', (var.get('arguments').get('2') if ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictNeq(var.get('arguments').get('2'),var.get('undefined'))) else var.get('path')))
            if var.get('kind').neg():
                PyJsTempException = JsToPyException(var.get('ReferenceError').create(Js('no `kind`')))
                raise PyJsTempException
            if var.get('path').callprop('isVariableDeclaration'):
                var.put('declarators', var.get('path').callprop('get', Js('declarations')))
                #for JS loop
                var.put('_iterator9', var.get('declarators'))
                var.put('_isArray9', var.get('Array').callprop('isArray', var.get('_iterator9')))
                var.put('_i9', Js(0.0))
                var.put('_iterator9', (var.get('_iterator9') if var.get('_isArray9') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator9'))))
                while 1:
                    pass
                    if var.get('_isArray9'):
                        if (var.get('_i9')>=var.get('_iterator9').get('length')):
                            break
                        var.put('_ref9', var.get('_iterator9').get((var.put('_i9',Js(var.get('_i9').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i9', var.get('_iterator9').callprop('next'))
                        if var.get('_i9').get('done'):
                            break
                        var.put('_ref9', var.get('_i9').get('value'))
                    var.put('declar', var.get('_ref9'))
                    var.get("this").callprop('registerBinding', var.get('kind'), var.get('declar'))
                
                return var.get('undefined')
            var.put('parent', var.get("this").callprop('getProgramParent'))
            var.put('ids', var.get('path').callprop('getBindingIdentifiers', var.get('true')))
            for PyJsTemp in var.get('ids'):
                var.put('name', PyJsTemp)
                #for JS loop
                var.put('_iterator10', var.get('ids').get(var.get('name')))
                var.put('_isArray10', var.get('Array').callprop('isArray', var.get('_iterator10')))
                var.put('_i10', Js(0.0))
                var.put('_iterator10', (var.get('_iterator10') if var.get('_isArray10') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator10'))))
                while 1:
                    pass
                    if var.get('_isArray10'):
                        if (var.get('_i10')>=var.get('_iterator10').get('length')):
                            break
                        var.put('_ref10', var.get('_iterator10').get((var.put('_i10',Js(var.get('_i10').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i10', var.get('_iterator10').callprop('next'))
                        if var.get('_i10').get('done'):
                            break
                        var.put('_ref10', var.get('_i10').get('value'))
                    var.put('_id3', var.get('_ref10'))
                    var.put('local', var.get("this").callprop('getOwnBinding', var.get('name')))
                    if var.get('local'):
                        if PyJsStrictEq(var.get('local').get('identifier'),var.get('_id3')):
                            continue
                        var.get("this").callprop('checkBlockScopedCollisions', var.get('local'), var.get('kind'), var.get('name'), var.get('_id3'))
                    if (var.get('local') and var.get('local').get('path').callprop('isFlow')):
                        var.put('local', var.get("null"))
                    var.get('parent').get('references').put(var.get('name'), var.get('true'))
                    PyJs_Object_2147_ = Js({'identifier':var.get('_id3'),'existing':var.get('local'),'scope':var.get("this"),'path':var.get('bindingPath'),'kind':var.get('kind')})
                    var.get("this").get('bindings').put(var.get('name'), var.get('_binding3').get('default').create(PyJs_Object_2147_))
                
        PyJs_registerBinding_2146_._set_name('registerBinding')
        var.get('Scope').get('prototype').put('registerBinding', PyJs_registerBinding_2146_)
        @Js
        def PyJs_addGlobal_2148_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'addGlobal':PyJs_addGlobal_2148_}, var)
            var.registers(['node'])
            var.get("this").get('globals').put(var.get('node').get('name'), var.get('node'))
        PyJs_addGlobal_2148_._set_name('addGlobal')
        var.get('Scope').get('prototype').put('addGlobal', PyJs_addGlobal_2148_)
        @Js
        def PyJs_hasUid_2149_(name, this, arguments, var=var):
            var = Scope({'this':this, 'hasUid':PyJs_hasUid_2149_, 'name':name, 'arguments':arguments}, var)
            var.registers(['scope', 'name'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('uids').get(var.get('name')):
                    return var.get('true')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            return Js(False)
        PyJs_hasUid_2149_._set_name('hasUid')
        var.get('Scope').get('prototype').put('hasUid', PyJs_hasUid_2149_)
        @Js
        def PyJs_hasGlobal_2150_(name, this, arguments, var=var):
            var = Scope({'this':this, 'hasGlobal':PyJs_hasGlobal_2150_, 'name':name, 'arguments':arguments}, var)
            var.registers(['scope', 'name'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('globals').get(var.get('name')):
                    return var.get('true')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            return Js(False)
        PyJs_hasGlobal_2150_._set_name('hasGlobal')
        var.get('Scope').get('prototype').put('hasGlobal', PyJs_hasGlobal_2150_)
        @Js
        def PyJs_hasReference_2151_(name, this, arguments, var=var):
            var = Scope({'this':this, 'hasReference':PyJs_hasReference_2151_, 'name':name, 'arguments':arguments}, var)
            var.registers(['scope', 'name'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('references').get(var.get('name')):
                    return var.get('true')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            return Js(False)
        PyJs_hasReference_2151_._set_name('hasReference')
        var.get('Scope').get('prototype').put('hasReference', PyJs_hasReference_2151_)
        @Js
        def PyJs_isPure_2152_(node, constantsOnly, this, arguments, var=var):
            var = Scope({'node':node, 'constantsOnly':constantsOnly, 'this':this, 'arguments':arguments, 'isPure':PyJs_isPure_2152_}, var)
            var.registers(['node', 'constantsOnly', '_isArray11', 'binding', 'elem', 'prop', '_i13', '_i12', '_i11', '_isArray13', '_isArray12', '_ref11', '_iterator11', '_ref13', '_iterator13', '_iterator12', 'method', '_ref12'])
            if var.get('t').callprop('isIdentifier', var.get('node')):
                var.put('binding', var.get("this").callprop('getBinding', var.get('node').get('name')))
                if var.get('binding').neg():
                    return Js(False)
                if var.get('constantsOnly'):
                    return var.get('binding').get('constant')
                return var.get('true')
            else:
                if var.get('t').callprop('isClass', var.get('node')):
                    if (var.get('node').get('superClass') and var.get("this").callprop('isPure', var.get('node').get('superClass'), var.get('constantsOnly')).neg()):
                        return Js(False)
                    return var.get("this").callprop('isPure', var.get('node').get('body'), var.get('constantsOnly'))
                else:
                    if var.get('t').callprop('isClassBody', var.get('node')):
                        #for JS loop
                        var.put('_iterator11', var.get('node').get('body'))
                        var.put('_isArray11', var.get('Array').callprop('isArray', var.get('_iterator11')))
                        var.put('_i11', Js(0.0))
                        var.put('_iterator11', (var.get('_iterator11') if var.get('_isArray11') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator11'))))
                        while 1:
                            pass
                            if var.get('_isArray11'):
                                if (var.get('_i11')>=var.get('_iterator11').get('length')):
                                    break
                                var.put('_ref11', var.get('_iterator11').get((var.put('_i11',Js(var.get('_i11').to_number())+Js(1))-Js(1))))
                            else:
                                var.put('_i11', var.get('_iterator11').callprop('next'))
                                if var.get('_i11').get('done'):
                                    break
                                var.put('_ref11', var.get('_i11').get('value'))
                            var.put('method', var.get('_ref11'))
                            if var.get("this").callprop('isPure', var.get('method'), var.get('constantsOnly')).neg():
                                return Js(False)
                        
                        return var.get('true')
                    else:
                        if var.get('t').callprop('isBinary', var.get('node')):
                            return (var.get("this").callprop('isPure', var.get('node').get('left'), var.get('constantsOnly')) and var.get("this").callprop('isPure', var.get('node').get('right'), var.get('constantsOnly')))
                        else:
                            if var.get('t').callprop('isArrayExpression', var.get('node')):
                                #for JS loop
                                var.put('_iterator12', var.get('node').get('elements'))
                                var.put('_isArray12', var.get('Array').callprop('isArray', var.get('_iterator12')))
                                var.put('_i12', Js(0.0))
                                var.put('_iterator12', (var.get('_iterator12') if var.get('_isArray12') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator12'))))
                                while 1:
                                    pass
                                    if var.get('_isArray12'):
                                        if (var.get('_i12')>=var.get('_iterator12').get('length')):
                                            break
                                        var.put('_ref12', var.get('_iterator12').get((var.put('_i12',Js(var.get('_i12').to_number())+Js(1))-Js(1))))
                                    else:
                                        var.put('_i12', var.get('_iterator12').callprop('next'))
                                        if var.get('_i12').get('done'):
                                            break
                                        var.put('_ref12', var.get('_i12').get('value'))
                                    var.put('elem', var.get('_ref12'))
                                    if var.get("this").callprop('isPure', var.get('elem'), var.get('constantsOnly')).neg():
                                        return Js(False)
                                
                                return var.get('true')
                            else:
                                if var.get('t').callprop('isObjectExpression', var.get('node')):
                                    #for JS loop
                                    var.put('_iterator13', var.get('node').get('properties'))
                                    var.put('_isArray13', var.get('Array').callprop('isArray', var.get('_iterator13')))
                                    var.put('_i13', Js(0.0))
                                    var.put('_iterator13', (var.get('_iterator13') if var.get('_isArray13') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator13'))))
                                    while 1:
                                        pass
                                        if var.get('_isArray13'):
                                            if (var.get('_i13')>=var.get('_iterator13').get('length')):
                                                break
                                            var.put('_ref13', var.get('_iterator13').get((var.put('_i13',Js(var.get('_i13').to_number())+Js(1))-Js(1))))
                                        else:
                                            var.put('_i13', var.get('_iterator13').callprop('next'))
                                            if var.get('_i13').get('done'):
                                                break
                                            var.put('_ref13', var.get('_i13').get('value'))
                                        var.put('prop', var.get('_ref13'))
                                        if var.get("this").callprop('isPure', var.get('prop'), var.get('constantsOnly')).neg():
                                            return Js(False)
                                    
                                    return var.get('true')
                                else:
                                    if var.get('t').callprop('isClassMethod', var.get('node')):
                                        if (var.get('node').get('computed') and var.get("this").callprop('isPure', var.get('node').get('key'), var.get('constantsOnly')).neg()):
                                            return Js(False)
                                        if (PyJsStrictEq(var.get('node').get('kind'),Js('get')) or PyJsStrictEq(var.get('node').get('kind'),Js('set'))):
                                            return Js(False)
                                        return var.get('true')
                                    else:
                                        if (var.get('t').callprop('isClassProperty', var.get('node')) or var.get('t').callprop('isObjectProperty', var.get('node'))):
                                            if (var.get('node').get('computed') and var.get("this").callprop('isPure', var.get('node').get('key'), var.get('constantsOnly')).neg()):
                                                return Js(False)
                                            return var.get("this").callprop('isPure', var.get('node').get('value'), var.get('constantsOnly'))
                                        else:
                                            if var.get('t').callprop('isUnaryExpression', var.get('node')):
                                                return var.get("this").callprop('isPure', var.get('node').get('argument'), var.get('constantsOnly'))
                                            else:
                                                return var.get('t').callprop('isPureish', var.get('node'))
        PyJs_isPure_2152_._set_name('isPure')
        var.get('Scope').get('prototype').put('isPure', PyJs_isPure_2152_)
        @Js
        def PyJs_setData_2153_(key, val, this, arguments, var=var):
            var = Scope({'this':this, 'setData':PyJs_setData_2153_, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['val', 'key'])
            return var.get("this").get('data').put(var.get('key'), var.get('val'))
        PyJs_setData_2153_._set_name('setData')
        var.get('Scope').get('prototype').put('setData', PyJs_setData_2153_)
        @Js
        def PyJs_getData_2154_(key, this, arguments, var=var):
            var = Scope({'this':this, 'getData':PyJs_getData_2154_, 'arguments':arguments, 'key':key}, var)
            var.registers(['scope', 'data', 'key'])
            var.put('scope', var.get("this"))
            while 1:
                var.put('data', var.get('scope').get('data').get(var.get('key')))
                if (var.get('data')!=var.get("null")):
                    return var.get('data')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
        PyJs_getData_2154_._set_name('getData')
        var.get('Scope').get('prototype').put('getData', PyJs_getData_2154_)
        @Js
        def PyJs_removeData_2155_(key, this, arguments, var=var):
            var = Scope({'this':this, 'removeData':PyJs_removeData_2155_, 'arguments':arguments, 'key':key}, var)
            var.registers(['scope', 'data', 'key'])
            var.put('scope', var.get("this"))
            while 1:
                var.put('data', var.get('scope').get('data').get(var.get('key')))
                if (var.get('data')!=var.get("null")):
                    var.get('scope').get('data').put(var.get('key'), var.get("null"))
                if not var.put('scope', var.get('scope').get('parent')):
                    break
        PyJs_removeData_2155_._set_name('removeData')
        var.get('Scope').get('prototype').put('removeData', PyJs_removeData_2155_)
        @Js
        def PyJs_init_2156_(this, arguments, var=var):
            var = Scope({'this':this, 'init':PyJs_init_2156_, 'arguments':arguments}, var)
            var.registers([])
            if var.get("this").get('references').neg():
                var.get("this").callprop('crawl')
        PyJs_init_2156_._set_name('init')
        var.get('Scope').get('prototype').put('init', PyJs_init_2156_)
        @Js
        def PyJs_crawl_2157_(this, arguments, var=var):
            var = Scope({'this':this, 'crawl':PyJs_crawl_2157_, 'arguments':arguments}, var)
            var.registers([])
            (var.put('_crawlCallsCount',Js(var.get('_crawlCallsCount').to_number())+Js(1))-Js(1))
            var.get("this").callprop('_crawl')
            (var.put('_crawlCallsCount',Js(var.get('_crawlCallsCount').to_number())-Js(1))+Js(1))
        PyJs_crawl_2157_._set_name('crawl')
        var.get('Scope').get('prototype').put('crawl', PyJs_crawl_2157_)
        @Js
        def PyJs__crawl_2158_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_crawl':PyJs__crawl_2158_}, var)
            var.registers(['binding', '_ref15', 'param', '_ref17', '_ref16', 'state', '_ref14', 'params', '_isArray18', 'ref', '_ref18', 'node', 'parent', '_isArray17', '_isArray16', '_isArray15', '_isArray14', 'key', 'path', '_path2', '_iterator15', '_iterator14', '_iterator17', '_iterator16', 'name', '_iterator18', 'ids', 'programParent', '_i17', '_i16', '_i15', '_i14', '_i18', '_path'])
            var.put('path', var.get("this").get('path'))
            var.get("this").put('references', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('bindings', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('globals', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('uids', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.get("this").put('data', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            if var.get('path').callprop('isLoop'):
                #for JS loop
                var.put('_iterator14', var.get('t').get('FOR_INIT_KEYS'))
                var.put('_isArray14', var.get('Array').callprop('isArray', var.get('_iterator14')))
                var.put('_i14', Js(0.0))
                var.put('_iterator14', (var.get('_iterator14') if var.get('_isArray14') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator14'))))
                while 1:
                    pass
                    if var.get('_isArray14'):
                        if (var.get('_i14')>=var.get('_iterator14').get('length')):
                            break
                        var.put('_ref14', var.get('_iterator14').get((var.put('_i14',Js(var.get('_i14').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i14', var.get('_iterator14').callprop('next'))
                        if var.get('_i14').get('done'):
                            break
                        var.put('_ref14', var.get('_i14').get('value'))
                    var.put('key', var.get('_ref14'))
                    var.put('node', var.get('path').callprop('get', var.get('key')))
                    if var.get('node').callprop('isBlockScoped'):
                        var.get("this").callprop('registerBinding', var.get('node').get('node').get('kind'), var.get('node'))
                
            if (var.get('path').callprop('isFunctionExpression') and var.get('path').callprop('has', Js('id'))):
                if var.get('path').callprop('get', Js('id')).get('node').get(var.get('t').get('NOT_LOCAL_BINDING')).neg():
                    var.get("this").callprop('registerBinding', Js('local'), var.get('path').callprop('get', Js('id')), var.get('path'))
            if (var.get('path').callprop('isClassExpression') and var.get('path').callprop('has', Js('id'))):
                if var.get('path').callprop('get', Js('id')).get('node').get(var.get('t').get('NOT_LOCAL_BINDING')).neg():
                    var.get("this").callprop('registerBinding', Js('local'), var.get('path'))
            if var.get('path').callprop('isFunction'):
                var.put('params', var.get('path').callprop('get', Js('params')))
                #for JS loop
                var.put('_iterator15', var.get('params'))
                var.put('_isArray15', var.get('Array').callprop('isArray', var.get('_iterator15')))
                var.put('_i15', Js(0.0))
                var.put('_iterator15', (var.get('_iterator15') if var.get('_isArray15') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator15'))))
                while 1:
                    pass
                    if var.get('_isArray15'):
                        if (var.get('_i15')>=var.get('_iterator15').get('length')):
                            break
                        var.put('_ref15', var.get('_iterator15').get((var.put('_i15',Js(var.get('_i15').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i15', var.get('_iterator15').callprop('next'))
                        if var.get('_i15').get('done'):
                            break
                        var.put('_ref15', var.get('_i15').get('value'))
                    var.put('param', var.get('_ref15'))
                    var.get("this").callprop('registerBinding', Js('param'), var.get('param'))
                
            if var.get('path').callprop('isCatchClause'):
                var.get("this").callprop('registerBinding', Js('let'), var.get('path'))
            var.put('parent', var.get("this").callprop('getProgramParent'))
            if var.get('parent').get('crawling'):
                return var.get('undefined')
            PyJs_Object_2159_ = Js({'references':Js([]),'constantViolations':Js([]),'assignments':Js([])})
            var.put('state', PyJs_Object_2159_)
            var.get("this").put('crawling', var.get('true'))
            var.get('path').callprop('traverse', var.get('collectorVisitor'), var.get('state'))
            var.get("this").put('crawling', Js(False))
            #for JS loop
            var.put('_iterator16', var.get('state').get('assignments'))
            var.put('_isArray16', var.get('Array').callprop('isArray', var.get('_iterator16')))
            var.put('_i16', Js(0.0))
            var.put('_iterator16', (var.get('_iterator16') if var.get('_isArray16') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator16'))))
            while 1:
                pass
                if var.get('_isArray16'):
                    if (var.get('_i16')>=var.get('_iterator16').get('length')):
                        break
                    var.put('_ref16', var.get('_iterator16').get((var.put('_i16',Js(var.get('_i16').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i16', var.get('_iterator16').callprop('next'))
                    if var.get('_i16').get('done'):
                        break
                    var.put('_ref16', var.get('_i16').get('value'))
                var.put('_path', var.get('_ref16'))
                var.put('ids', var.get('_path').callprop('getBindingIdentifiers'))
                var.put('programParent', PyJsComma(Js(0.0), Js(None)))
                for PyJsTemp in var.get('ids'):
                    var.put('name', PyJsTemp)
                    if var.get('_path').get('scope').callprop('getBinding', var.get('name')):
                        continue
                    var.put('programParent', (var.get('programParent') or var.get('_path').get('scope').callprop('getProgramParent')))
                    var.get('programParent').callprop('addGlobal', var.get('ids').get(var.get('name')))
                var.get('_path').get('scope').callprop('registerConstantViolation', var.get('_path'))
            
            #for JS loop
            var.put('_iterator17', var.get('state').get('references'))
            var.put('_isArray17', var.get('Array').callprop('isArray', var.get('_iterator17')))
            var.put('_i17', Js(0.0))
            var.put('_iterator17', (var.get('_iterator17') if var.get('_isArray17') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator17'))))
            while 1:
                pass
                if var.get('_isArray17'):
                    if (var.get('_i17')>=var.get('_iterator17').get('length')):
                        break
                    var.put('_ref17', var.get('_iterator17').get((var.put('_i17',Js(var.get('_i17').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i17', var.get('_iterator17').callprop('next'))
                    if var.get('_i17').get('done'):
                        break
                    var.put('_ref17', var.get('_i17').get('value'))
                var.put('ref', var.get('_ref17'))
                var.put('binding', var.get('ref').get('scope').callprop('getBinding', var.get('ref').get('node').get('name')))
                if var.get('binding'):
                    var.get('binding').callprop('reference', var.get('ref'))
                else:
                    var.get('ref').get('scope').callprop('getProgramParent').callprop('addGlobal', var.get('ref').get('node'))
            
            #for JS loop
            var.put('_iterator18', var.get('state').get('constantViolations'))
            var.put('_isArray18', var.get('Array').callprop('isArray', var.get('_iterator18')))
            var.put('_i18', Js(0.0))
            var.put('_iterator18', (var.get('_iterator18') if var.get('_isArray18') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator18'))))
            while 1:
                pass
                if var.get('_isArray18'):
                    if (var.get('_i18')>=var.get('_iterator18').get('length')):
                        break
                    var.put('_ref18', var.get('_iterator18').get((var.put('_i18',Js(var.get('_i18').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i18', var.get('_iterator18').callprop('next'))
                    if var.get('_i18').get('done'):
                        break
                    var.put('_ref18', var.get('_i18').get('value'))
                var.put('_path2', var.get('_ref18'))
                var.get('_path2').get('scope').callprop('registerConstantViolation', var.get('_path2'))
            
        PyJs__crawl_2158_._set_name('_crawl')
        var.get('Scope').get('prototype').put('_crawl', PyJs__crawl_2158_)
        @Js
        def PyJs_push_2160_(opts, this, arguments, var=var):
            var = Scope({'this':this, 'push':PyJs_push_2160_, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['kind', 'blockHoist', '_path$unshiftContaine', 'declarPath', 'declar', 'declarator', 'path', 'dataKey', 'unique', 'opts'])
            var.put('path', var.get("this").get('path'))
            if (var.get('path').callprop('isBlockStatement').neg() and var.get('path').callprop('isProgram').neg()):
                var.put('path', var.get("this").callprop('getBlockParent').get('path'))
            if var.get('path').callprop('isSwitchStatement'):
                var.put('path', var.get("this").callprop('getFunctionParent').get('path'))
            if ((var.get('path').callprop('isLoop') or var.get('path').callprop('isCatchClause')) or var.get('path').callprop('isFunction')):
                var.get('t').callprop('ensureBlock', var.get('path').get('node'))
                var.put('path', var.get('path').callprop('get', Js('body')))
            var.put('unique', var.get('opts').get('unique'))
            var.put('kind', (var.get('opts').get('kind') or Js('var')))
            var.put('blockHoist', (Js(2.0) if (var.get('opts').get('_blockHoist')==var.get("null")) else var.get('opts').get('_blockHoist')))
            var.put('dataKey', (((Js('declaration:')+var.get('kind'))+Js(':'))+var.get('blockHoist')))
            var.put('declarPath', (var.get('unique').neg() and var.get('path').callprop('getData', var.get('dataKey'))))
            if var.get('declarPath').neg():
                var.put('declar', var.get('t').callprop('variableDeclaration', var.get('kind'), Js([])))
                var.get('declar').put('_generated', var.get('true'))
                var.get('declar').put('_blockHoist', var.get('blockHoist'))
                var.put('_path$unshiftContaine', var.get('path').callprop('unshiftContainer', Js('body'), Js([var.get('declar')])))
                var.put('declarPath', var.get('_path$unshiftContaine').get('0'))
                if var.get('unique').neg():
                    var.get('path').callprop('setData', var.get('dataKey'), var.get('declarPath'))
            var.put('declarator', var.get('t').callprop('variableDeclarator', var.get('opts').get('id'), var.get('opts').get('init')))
            var.get('declarPath').get('node').get('declarations').callprop('push', var.get('declarator'))
            var.get("this").callprop('registerBinding', var.get('kind'), var.get('declarPath').callprop('get', Js('declarations')).callprop('pop'))
        PyJs_push_2160_._set_name('push')
        var.get('Scope').get('prototype').put('push', PyJs_push_2160_)
        @Js
        def PyJs_getProgramParent_2161_(this, arguments, var=var):
            var = Scope({'this':this, 'getProgramParent':PyJs_getProgramParent_2161_, 'arguments':arguments}, var)
            var.registers(['scope'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('path').callprop('isProgram'):
                    return var.get('scope')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            PyJsTempException = JsToPyException(var.get('Error').create(Js("We couldn't find a Function or Program...")))
            raise PyJsTempException
        PyJs_getProgramParent_2161_._set_name('getProgramParent')
        var.get('Scope').get('prototype').put('getProgramParent', PyJs_getProgramParent_2161_)
        @Js
        def PyJs_getFunctionParent_2162_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getFunctionParent':PyJs_getFunctionParent_2162_}, var)
            var.registers(['scope'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('path').callprop('isFunctionParent'):
                    return var.get('scope')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            PyJsTempException = JsToPyException(var.get('Error').create(Js("We couldn't find a Function or Program...")))
            raise PyJsTempException
        PyJs_getFunctionParent_2162_._set_name('getFunctionParent')
        var.get('Scope').get('prototype').put('getFunctionParent', PyJs_getFunctionParent_2162_)
        @Js
        def PyJs_getBlockParent_2163_(this, arguments, var=var):
            var = Scope({'this':this, 'getBlockParent':PyJs_getBlockParent_2163_, 'arguments':arguments}, var)
            var.registers(['scope'])
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('path').callprop('isBlockParent'):
                    return var.get('scope')
                if not var.put('scope', var.get('scope').get('parent')):
                    break
            PyJsTempException = JsToPyException(var.get('Error').create(Js("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...")))
            raise PyJsTempException
        PyJs_getBlockParent_2163_._set_name('getBlockParent')
        var.get('Scope').get('prototype').put('getBlockParent', PyJs_getBlockParent_2163_)
        @Js
        def PyJs_getAllBindings_2164_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getAllBindings':PyJs_getAllBindings_2164_}, var)
            var.registers(['scope', 'ids'])
            var.put('ids', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            var.put('scope', var.get("this"))
            while 1:
                PyJsComma(Js(0.0),var.get('_defaults2').get('default'))(var.get('ids'), var.get('scope').get('bindings'))
                var.put('scope', var.get('scope').get('parent'))
                if not var.get('scope'):
                    break
            return var.get('ids')
        PyJs_getAllBindings_2164_._set_name('getAllBindings')
        var.get('Scope').get('prototype').put('getAllBindings', PyJs_getAllBindings_2164_)
        @Js
        def PyJs_getAllBindingsOfKind_2165_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getAllBindingsOfKind':PyJs_getAllBindingsOfKind_2165_}, var)
            var.registers(['kind', 'name', 'binding', 'ids', '_iterator19', '_ref19', 'scope', '_i19', '_isArray19'])
            var.put('ids', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
            #for JS loop
            var.put('_iterator19', var.get('arguments'))
            var.put('_isArray19', var.get('Array').callprop('isArray', var.get('_iterator19')))
            var.put('_i19', Js(0.0))
            var.put('_iterator19', (var.get('_iterator19') if var.get('_isArray19') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator19'))))
            while 1:
                pass
                if var.get('_isArray19'):
                    if (var.get('_i19')>=var.get('_iterator19').get('length')):
                        break
                    var.put('_ref19', var.get('_iterator19').get((var.put('_i19',Js(var.get('_i19').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i19', var.get('_iterator19').callprop('next'))
                    if var.get('_i19').get('done'):
                        break
                    var.put('_ref19', var.get('_i19').get('value'))
                var.put('kind', var.get('_ref19'))
                var.put('scope', var.get("this"))
                while 1:
                    for PyJsTemp in var.get('scope').get('bindings'):
                        var.put('name', PyJsTemp)
                        var.put('binding', var.get('scope').get('bindings').get(var.get('name')))
                        if PyJsStrictEq(var.get('binding').get('kind'),var.get('kind')):
                            var.get('ids').put(var.get('name'), var.get('binding'))
                    var.put('scope', var.get('scope').get('parent'))
                    if not var.get('scope'):
                        break
            
            return var.get('ids')
        PyJs_getAllBindingsOfKind_2165_._set_name('getAllBindingsOfKind')
        var.get('Scope').get('prototype').put('getAllBindingsOfKind', PyJs_getAllBindingsOfKind_2165_)
        @Js
        def PyJs_bindingIdentifierEquals_2166_(name, node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'bindingIdentifierEquals':PyJs_bindingIdentifierEquals_2166_, 'name':name, 'arguments':arguments}, var)
            var.registers(['node', 'name'])
            return PyJsStrictEq(var.get("this").callprop('getBindingIdentifier', var.get('name')),var.get('node'))
        PyJs_bindingIdentifierEquals_2166_._set_name('bindingIdentifierEquals')
        var.get('Scope').get('prototype').put('bindingIdentifierEquals', PyJs_bindingIdentifierEquals_2166_)
        @Js
        def PyJs_warnOnFlowBinding_2167_(binding, this, arguments, var=var):
            var = Scope({'this':this, 'binding':binding, 'arguments':arguments, 'warnOnFlowBinding':PyJs_warnOnFlowBinding_2167_}, var)
            var.registers(['binding'])
            if ((PyJsStrictEq(var.get('_crawlCallsCount'),Js(0.0)) and var.get('binding')) and var.get('binding').get('path').callprop('isFlow')):
                var.get('console').callprop('warn', Js('\n        You or one of the Babel plugins you are using are using Flow declarations as bindings.\n        Support for this will be removed in version 6.8. To find out the caller, grep for this\n        message and change it to a `console.trace()`.\n      '))
            return var.get('binding')
        PyJs_warnOnFlowBinding_2167_._set_name('warnOnFlowBinding')
        var.get('Scope').get('prototype').put('warnOnFlowBinding', PyJs_warnOnFlowBinding_2167_)
        @Js
        def PyJs_getBinding_2168_(name, this, arguments, var=var):
            var = Scope({'this':this, 'getBinding':PyJs_getBinding_2168_, 'name':name, 'arguments':arguments}, var)
            var.registers(['scope', 'binding', 'name'])
            var.put('scope', var.get("this"))
            while 1:
                var.put('binding', var.get('scope').callprop('getOwnBinding', var.get('name')))
                if var.get('binding'):
                    return var.get("this").callprop('warnOnFlowBinding', var.get('binding'))
                if not var.put('scope', var.get('scope').get('parent')):
                    break
        PyJs_getBinding_2168_._set_name('getBinding')
        var.get('Scope').get('prototype').put('getBinding', PyJs_getBinding_2168_)
        @Js
        def PyJs_getOwnBinding_2169_(name, this, arguments, var=var):
            var = Scope({'this':this, 'getOwnBinding':PyJs_getOwnBinding_2169_, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            return var.get("this").callprop('warnOnFlowBinding', var.get("this").get('bindings').get(var.get('name')))
        PyJs_getOwnBinding_2169_._set_name('getOwnBinding')
        var.get('Scope').get('prototype').put('getOwnBinding', PyJs_getOwnBinding_2169_)
        @Js
        def PyJs_getBindingIdentifier_2170_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'getBindingIdentifier':PyJs_getBindingIdentifier_2170_, 'arguments':arguments}, var)
            var.registers(['info', 'name'])
            var.put('info', var.get("this").callprop('getBinding', var.get('name')))
            return (var.get('info') and var.get('info').get('identifier'))
        PyJs_getBindingIdentifier_2170_._set_name('getBindingIdentifier')
        var.get('Scope').get('prototype').put('getBindingIdentifier', PyJs_getBindingIdentifier_2170_)
        @Js
        def PyJs_getOwnBindingIdentifier_2171_(name, this, arguments, var=var):
            var = Scope({'this':this, 'getOwnBindingIdentifier':PyJs_getOwnBindingIdentifier_2171_, 'name':name, 'arguments':arguments}, var)
            var.registers(['binding', 'name'])
            var.put('binding', var.get("this").get('bindings').get(var.get('name')))
            return (var.get('binding') and var.get('binding').get('identifier'))
        PyJs_getOwnBindingIdentifier_2171_._set_name('getOwnBindingIdentifier')
        var.get('Scope').get('prototype').put('getOwnBindingIdentifier', PyJs_getOwnBindingIdentifier_2171_)
        @Js
        def PyJs_hasOwnBinding_2172_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'hasOwnBinding':PyJs_hasOwnBinding_2172_, 'arguments':arguments}, var)
            var.registers(['name'])
            return var.get("this").callprop('getOwnBinding', var.get('name')).neg().neg()
        PyJs_hasOwnBinding_2172_._set_name('hasOwnBinding')
        var.get('Scope').get('prototype').put('hasOwnBinding', PyJs_hasOwnBinding_2172_)
        @Js
        def PyJs_hasBinding_2173_(name, noGlobals, this, arguments, var=var):
            var = Scope({'this':this, 'hasBinding':PyJs_hasBinding_2173_, 'name':name, 'noGlobals':noGlobals, 'arguments':arguments}, var)
            var.registers(['name', 'noGlobals'])
            if var.get('name').neg():
                return Js(False)
            if var.get("this").callprop('hasOwnBinding', var.get('name')):
                return var.get('true')
            if var.get("this").callprop('parentHasBinding', var.get('name'), var.get('noGlobals')):
                return var.get('true')
            if var.get("this").callprop('hasUid', var.get('name')):
                return var.get('true')
            if (var.get('noGlobals').neg() and PyJsComma(Js(0.0),var.get('_includes2').get('default'))(var.get('Scope').get('globals'), var.get('name'))):
                return var.get('true')
            if (var.get('noGlobals').neg() and PyJsComma(Js(0.0),var.get('_includes2').get('default'))(var.get('Scope').get('contextVariables'), var.get('name'))):
                return var.get('true')
            return Js(False)
        PyJs_hasBinding_2173_._set_name('hasBinding')
        var.get('Scope').get('prototype').put('hasBinding', PyJs_hasBinding_2173_)
        @Js
        def PyJs_parentHasBinding_2174_(name, noGlobals, this, arguments, var=var):
            var = Scope({'this':this, 'parentHasBinding':PyJs_parentHasBinding_2174_, 'name':name, 'noGlobals':noGlobals, 'arguments':arguments}, var)
            var.registers(['name', 'noGlobals'])
            return (var.get("this").get('parent') and var.get("this").get('parent').callprop('hasBinding', var.get('name'), var.get('noGlobals')))
        PyJs_parentHasBinding_2174_._set_name('parentHasBinding')
        var.get('Scope').get('prototype').put('parentHasBinding', PyJs_parentHasBinding_2174_)
        @Js
        def PyJs_moveBindingTo_2175_(name, scope, this, arguments, var=var):
            var = Scope({'this':this, 'scope':scope, 'moveBindingTo':PyJs_moveBindingTo_2175_, 'name':name, 'arguments':arguments}, var)
            var.registers(['info', 'scope', 'name'])
            var.put('info', var.get("this").callprop('getBinding', var.get('name')))
            if var.get('info'):
                var.get('info').get('scope').callprop('removeOwnBinding', var.get('name'))
                var.get('info').put('scope', var.get('scope'))
                var.get('scope').get('bindings').put(var.get('name'), var.get('info'))
        PyJs_moveBindingTo_2175_._set_name('moveBindingTo')
        var.get('Scope').get('prototype').put('moveBindingTo', PyJs_moveBindingTo_2175_)
        @Js
        def PyJs_removeOwnBinding_2176_(name, this, arguments, var=var):
            var = Scope({'this':this, 'removeOwnBinding':PyJs_removeOwnBinding_2176_, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            var.get("this").get('bindings').delete(var.get('name'))
        PyJs_removeOwnBinding_2176_._set_name('removeOwnBinding')
        var.get('Scope').get('prototype').put('removeOwnBinding', PyJs_removeOwnBinding_2176_)
        @Js
        def PyJs_removeBinding_2177_(name, this, arguments, var=var):
            var = Scope({'this':this, 'name':name, 'removeBinding':PyJs_removeBinding_2177_, 'arguments':arguments}, var)
            var.registers(['info', 'scope', 'name'])
            var.put('info', var.get("this").callprop('getBinding', var.get('name')))
            if var.get('info'):
                var.get('info').get('scope').callprop('removeOwnBinding', var.get('name'))
            var.put('scope', var.get("this"))
            while 1:
                if var.get('scope').get('uids').get(var.get('name')):
                    var.get('scope').get('uids').put(var.get('name'), Js(False))
                if not var.put('scope', var.get('scope').get('parent')):
                    break
        PyJs_removeBinding_2177_._set_name('removeBinding')
        var.get('Scope').get('prototype').put('removeBinding', PyJs_removeBinding_2177_)
        return var.get('Scope')
    PyJs_anonymous_2120_._set_name('anonymous')
    var.put('Scope', PyJs_anonymous_2120_())
    var.get('Scope').put('globals', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('_globals2').get('default').get('builtin')))
    var.get('Scope').put('contextVariables', Js([Js('arguments'), Js('undefined'), Js('Infinity'), Js('NaN')]))
    var.get('exports').put('default', var.get('Scope'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_2103_._set_name('anonymous')
PyJs_Object_2178_ = Js({'../cache':Js(222.0),'../index':Js(225.0),'./binding':Js(243.0),'./lib/renamer':Js(245.0),'babel-messages':Js(57.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/map':Js(98.0),'babel-runtime/core-js/object/create':Js(101.0),'babel-runtime/core-js/object/keys':Js(103.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0),'globals':Js(278.0),'lodash/defaults':Js(442.0),'lodash/includes':Js(456.0),'lodash/repeat':Js(483.0)})
@Js
def PyJs_anonymous_2179_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_binding2', 'exports', '_interopRequireWildcard', 'Renamer', 'require', '_babelTypes', 'renameVisitor', 'module', 't', '_binding', '_interopRequireDefault', '_classCallCheck3', '_classCallCheck2'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2181_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2181_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2180_ = Js({})
            var.put('newObj', PyJs_Object_2180_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_classCallCheck2', var.get('require')(Js('babel-runtime/helpers/classCallCheck')))
    var.put('_classCallCheck3', var.get('_interopRequireDefault')(var.get('_classCallCheck2')))
    var.put('_binding', var.get('require')(Js('../binding')))
    var.put('_binding2', var.get('_interopRequireDefault')(var.get('_binding')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    pass
    pass
    @Js
    def PyJs_ReferencedIdentifier_2183_(_ref, state, this, arguments, var=var):
        var = Scope({'this':this, '_ref':_ref, 'ReferencedIdentifier':PyJs_ReferencedIdentifier_2183_, 'state':state, 'arguments':arguments}, var)
        var.registers(['node', '_ref', 'state'])
        var.put('node', var.get('_ref').get('node'))
        if PyJsStrictEq(var.get('node').get('name'),var.get('state').get('oldName')):
            var.get('node').put('name', var.get('state').get('newName'))
    PyJs_ReferencedIdentifier_2183_._set_name('ReferencedIdentifier')
    @Js
    def PyJs_Scope_2184_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'arguments':arguments, 'Scope':PyJs_Scope_2184_}, var)
        var.registers(['path', 'state'])
        if var.get('path').get('scope').callprop('bindingIdentifierEquals', var.get('state').get('oldName'), var.get('state').get('binding').get('identifier')).neg():
            var.get('path').callprop('skip')
    PyJs_Scope_2184_._set_name('Scope')
    @Js
    def PyJs_AssignmentExpressionDeclaration_2185_(path, state, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'state':state, 'AssignmentExpressionDeclaration':PyJs_AssignmentExpressionDeclaration_2185_, 'arguments':arguments}, var)
        var.registers(['path', 'state', 'ids', 'name'])
        var.put('ids', var.get('path').callprop('getOuterBindingIdentifiers'))
        for PyJsTemp in var.get('ids'):
            var.put('name', PyJsTemp)
            if PyJsStrictEq(var.get('name'),var.get('state').get('oldName')):
                var.get('ids').get(var.get('name')).put('name', var.get('state').get('newName'))
    PyJs_AssignmentExpressionDeclaration_2185_._set_name('AssignmentExpressionDeclaration')
    PyJs_Object_2182_ = Js({'ReferencedIdentifier':PyJs_ReferencedIdentifier_2183_,'Scope':PyJs_Scope_2184_,'AssignmentExpression|Declaration':PyJs_AssignmentExpressionDeclaration_2185_})
    var.put('renameVisitor', PyJs_Object_2182_)
    @Js
    def PyJs_anonymous_2186_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Renamer'])
        @Js
        def PyJsHoisted_Renamer_(binding, oldName, newName, this, arguments, var=var):
            var = Scope({'newName':newName, 'this':this, 'binding':binding, 'oldName':oldName, 'arguments':arguments}, var)
            var.registers(['newName', 'binding', 'oldName'])
            PyJsComma(Js(0.0),var.get('_classCallCheck3').get('default'))(var.get("this"), var.get('Renamer'))
            var.get("this").put('newName', var.get('newName'))
            var.get("this").put('oldName', var.get('oldName'))
            var.get("this").put('binding', var.get('binding'))
        PyJsHoisted_Renamer_.__name__ = 'Renamer'
        var.put('Renamer', PyJsHoisted_Renamer_)
        pass
        @Js
        def PyJs_maybeConvertFromExportDeclaration_2187_(parentDeclar, this, arguments, var=var):
            var = Scope({'this':this, 'parentDeclar':parentDeclar, 'maybeConvertFromExportDeclaration':PyJs_maybeConvertFromExportDeclaration_2187_, 'arguments':arguments}, var)
            var.registers(['specifiers', 'exportDeclar', 'name', 'bindingIdentifiers', 'exportedName', 'parentDeclar', 'localName', 'aliasDeclar', 'isDefault'])
            var.put('exportDeclar', (var.get('parentDeclar').get('parentPath').callprop('isExportDeclaration') and var.get('parentDeclar').get('parentPath')))
            if var.get('exportDeclar').neg():
                return var.get('undefined')
            var.put('isDefault', var.get('exportDeclar').callprop('isExportDefaultDeclaration'))
            if ((var.get('isDefault') and (var.get('parentDeclar').callprop('isFunctionDeclaration') or var.get('parentDeclar').callprop('isClassDeclaration'))) and var.get('parentDeclar').get('node').get('id').neg()):
                var.get('parentDeclar').get('node').put('id', var.get('parentDeclar').get('scope').callprop('generateUidIdentifier', Js('default')))
            var.put('bindingIdentifiers', var.get('parentDeclar').callprop('getOuterBindingIdentifiers'))
            var.put('specifiers', Js([]))
            for PyJsTemp in var.get('bindingIdentifiers'):
                var.put('name', PyJsTemp)
                var.put('localName', (var.get("this").get('newName') if PyJsStrictEq(var.get('name'),var.get("this").get('oldName')) else var.get('name')))
                var.put('exportedName', (Js('default') if var.get('isDefault') else var.get('name')))
                var.get('specifiers').callprop('push', var.get('t').callprop('exportSpecifier', var.get('t').callprop('identifier', var.get('localName')), var.get('t').callprop('identifier', var.get('exportedName'))))
            if var.get('specifiers').get('length'):
                var.put('aliasDeclar', var.get('t').callprop('exportNamedDeclaration', var.get("null"), var.get('specifiers')))
                if var.get('parentDeclar').callprop('isFunctionDeclaration'):
                    var.get('aliasDeclar').put('_blockHoist', Js(3.0))
                var.get('exportDeclar').callprop('insertAfter', var.get('aliasDeclar'))
                var.get('exportDeclar').callprop('replaceWith', var.get('parentDeclar').get('node'))
        PyJs_maybeConvertFromExportDeclaration_2187_._set_name('maybeConvertFromExportDeclaration')
        var.get('Renamer').get('prototype').put('maybeConvertFromExportDeclaration', PyJs_maybeConvertFromExportDeclaration_2187_)
        @Js
        def PyJs_maybeConvertFromClassFunctionDeclaration_2188_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'maybeConvertFromClassFunctionDeclaration':PyJs_maybeConvertFromClassFunctionDeclaration_2188_}, var)
            var.registers(['path'])
            return var.get('undefined')
            if (var.get('path').callprop('isFunctionDeclaration').neg() and var.get('path').callprop('isClassDeclaration').neg()):
                return var.get('undefined')
            if PyJsStrictNeq(var.get("this").get('binding').get('kind'),Js('hoisted')):
                return var.get('undefined')
            var.get('path').get('node').put('id', var.get('t').callprop('identifier', var.get("this").get('oldName')))
            var.get('path').get('node').put('_blockHoist', Js(3.0))
            var.get('path').callprop('replaceWith', var.get('t').callprop('variableDeclaration', Js('let'), Js([var.get('t').callprop('variableDeclarator', var.get('t').callprop('identifier', var.get("this").get('newName')), var.get('t').callprop('toExpression', var.get('path').get('node')))])))
        PyJs_maybeConvertFromClassFunctionDeclaration_2188_._set_name('maybeConvertFromClassFunctionDeclaration')
        var.get('Renamer').get('prototype').put('maybeConvertFromClassFunctionDeclaration', PyJs_maybeConvertFromClassFunctionDeclaration_2188_)
        @Js
        def PyJs_maybeConvertFromClassFunctionExpression_2189_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments, 'maybeConvertFromClassFunctionExpression':PyJs_maybeConvertFromClassFunctionExpression_2189_}, var)
            var.registers(['path'])
            return var.get('undefined')
            if (var.get('path').callprop('isFunctionExpression').neg() and var.get('path').callprop('isClassExpression').neg()):
                return var.get('undefined')
            if PyJsStrictNeq(var.get("this").get('binding').get('kind'),Js('local')):
                return var.get('undefined')
            var.get('path').get('node').put('id', var.get('t').callprop('identifier', var.get("this").get('oldName')))
            PyJs_Object_2190_ = Js({'id':var.get('t').callprop('identifier', var.get("this").get('newName'))})
            var.get("this").get('binding').get('scope').get('parent').callprop('push', PyJs_Object_2190_)
            var.get('path').callprop('replaceWith', var.get('t').callprop('assignmentExpression', Js('='), var.get('t').callprop('identifier', var.get("this").get('newName')), var.get('path').get('node')))
        PyJs_maybeConvertFromClassFunctionExpression_2189_._set_name('maybeConvertFromClassFunctionExpression')
        var.get('Renamer').get('prototype').put('maybeConvertFromClassFunctionExpression', PyJs_maybeConvertFromClassFunctionExpression_2189_)
        @Js
        def PyJs_rename_2191_(block, this, arguments, var=var):
            var = Scope({'this':this, 'rename':PyJs_rename_2191_, 'arguments':arguments, 'block':block}, var)
            var.registers(['newName', 'binding', 'oldName', 'parentDeclar', 'scope', 'path', 'block'])
            var.put('binding', var.get("this").get('binding'))
            var.put('oldName', var.get("this").get('oldName'))
            var.put('newName', var.get("this").get('newName'))
            var.put('scope', var.get('binding').get('scope'))
            var.put('path', var.get('binding').get('path'))
            @Js
            def PyJs_anonymous_2192_(path, this, arguments, var=var):
                var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
                var.registers(['path'])
                return (var.get('path').callprop('isDeclaration') or var.get('path').callprop('isFunctionExpression'))
            PyJs_anonymous_2192_._set_name('anonymous')
            var.put('parentDeclar', var.get('path').callprop('find', PyJs_anonymous_2192_))
            if var.get('parentDeclar'):
                var.get("this").callprop('maybeConvertFromExportDeclaration', var.get('parentDeclar'))
            var.get('scope').callprop('traverse', (var.get('block') or var.get('scope').get('block')), var.get('renameVisitor'), var.get("this"))
            if var.get('block').neg():
                var.get('scope').callprop('removeOwnBinding', var.get('oldName'))
                var.get('scope').get('bindings').put(var.get('newName'), var.get('binding'))
                var.get("this").get('binding').get('identifier').put('name', var.get('newName'))
            if PyJsStrictEq(var.get('binding').get('type'),Js('hoisted')):
                pass
            if var.get('parentDeclar'):
                var.get("this").callprop('maybeConvertFromClassFunctionDeclaration', var.get('parentDeclar'))
                var.get("this").callprop('maybeConvertFromClassFunctionExpression', var.get('parentDeclar'))
        PyJs_rename_2191_._set_name('rename')
        var.get('Renamer').get('prototype').put('rename', PyJs_rename_2191_)
        return var.get('Renamer')
    PyJs_anonymous_2186_._set_name('anonymous')
    var.put('Renamer', PyJs_anonymous_2186_())
    var.get('exports').put('default', var.get('Renamer'))
    var.get('module').put('exports', var.get('exports').get('default'))
PyJs_anonymous_2179_._set_name('anonymous')
PyJs_Object_2193_ = Js({'../binding':Js(243.0),'babel-runtime/helpers/classCallCheck':Js(110.0),'babel-types':Js(258.0)})
@Js
def PyJs_anonymous_2194_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', '_clone', '_virtualTypes', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'virtualTypes', '_typeof2', '_typeof3', 'shouldIgnoreKey', 'validateVisitorMethods', 'verify', '_keys', 'wrapWithStateOrWrapper', '_babelMessages', 'exports', '_interopRequireWildcard', 'mergePair', '_babelTypes', '_keys2', 'ensureCallbackArrays', 'ensureEntranceObjects', 'require', 'messages', 'wrapCheck', '_clone2', 'explode', 'merge', 't'])
    @Js
    def PyJsHoisted_mergePair_(dest, src, this, arguments, var=var):
        var = Scope({'dest':dest, 'src':src, 'this':this, 'arguments':arguments}, var)
        var.registers(['dest', 'src', 'key'])
        for PyJsTemp in var.get('src'):
            var.put('key', PyJsTemp)
            var.get('dest').put(var.get('key'), Js([]).callprop('concat', (var.get('dest').get(var.get('key')) or Js([])), var.get('src').get(var.get('key'))))
    PyJsHoisted_mergePair_.__name__ = 'mergePair'
    var.put('mergePair', PyJsHoisted_mergePair_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2195_ = Js({})
            var.put('newObj', PyJs_Object_2195_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_shouldIgnoreKey_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        if PyJsStrictEq(var.get('key').get('0'),Js('_')):
            return var.get('true')
        if ((PyJsStrictEq(var.get('key'),Js('enter')) or PyJsStrictEq(var.get('key'),Js('exit'))) or PyJsStrictEq(var.get('key'),Js('shouldSkip'))):
            return var.get('true')
        if ((PyJsStrictEq(var.get('key'),Js('blacklist')) or PyJsStrictEq(var.get('key'),Js('noScope'))) or PyJsStrictEq(var.get('key'),Js('skipKeys'))):
            return var.get('true')
        return Js(False)
    PyJsHoisted_shouldIgnoreKey_.__name__ = 'shouldIgnoreKey'
    var.put('shouldIgnoreKey', PyJsHoisted_shouldIgnoreKey_)
    @Js
    def PyJsHoisted_validateVisitorMethods_(path, val, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments, 'val':val}, var)
        var.registers(['_isArray5', 'fns', 'val', '_ref5', '_iterator5', 'path', '_i5', 'fn'])
        var.put('fns', Js([]).callprop('concat', var.get('val')))
        #for JS loop
        var.put('_iterator5', var.get('fns'))
        var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
        var.put('_i5', Js(0.0))
        var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
        while 1:
            pass
            if var.get('_isArray5'):
                if (var.get('_i5')>=var.get('_iterator5').get('length')):
                    break
                var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i5', var.get('_iterator5').callprop('next'))
                if var.get('_i5').get('done'):
                    break
                var.put('_ref5', var.get('_i5').get('value'))
            var.put('fn', var.get('_ref5'))
            if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError').create((((Js('Non-function found defined in ')+var.get('path'))+Js(' with type '))+(Js('undefined') if PyJsStrictEq(var.get('fn',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('fn'))))))
                raise PyJsTempException
        
    PyJsHoisted_validateVisitorMethods_.__name__ = 'validateVisitorMethods'
    var.put('validateVisitorMethods', PyJsHoisted_validateVisitorMethods_)
    @Js
    def PyJsHoisted_verify_(visitor, this, arguments, var=var):
        var = Scope({'this':this, 'visitor':visitor, 'arguments':arguments}, var)
        var.registers(['visitors', 'nodeType', 'visitor', 'visitorKey'])
        if var.get('visitor').get('_verified'):
            return var.get('undefined')
        if PyJsStrictEq(var.get('visitor',throw=False).typeof(),Js('function')):
            PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('traverseVerifyRootFunction'))))
            raise PyJsTempException
        for PyJsTemp in var.get('visitor'):
            var.put('nodeType', PyJsTemp)
            if (PyJsStrictEq(var.get('nodeType'),Js('enter')) or PyJsStrictEq(var.get('nodeType'),Js('exit'))):
                var.get('validateVisitorMethods')(var.get('nodeType'), var.get('visitor').get(var.get('nodeType')))
            if var.get('shouldIgnoreKey')(var.get('nodeType')):
                continue
            if (var.get('t').get('TYPES').callprop('indexOf', var.get('nodeType'))<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('traverseVerifyNodeType'), var.get('nodeType'))))
                raise PyJsTempException
            var.put('visitors', var.get('visitor').get(var.get('nodeType')))
            if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('visitors',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('visitors'))),Js('object')):
                for PyJsTemp in var.get('visitors'):
                    var.put('visitorKey', PyJsTemp)
                    if (PyJsStrictEq(var.get('visitorKey'),Js('enter')) or PyJsStrictEq(var.get('visitorKey'),Js('exit'))):
                        var.get('validateVisitorMethods')(((var.get('nodeType')+Js('.'))+var.get('visitorKey')), var.get('visitors').get(var.get('visitorKey')))
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(var.get('messages').callprop('get', Js('traverseVerifyVisitorProperty'), var.get('nodeType'), var.get('visitorKey'))))
                        raise PyJsTempException
        var.get('visitor').put('_verified', var.get('true'))
    PyJsHoisted_verify_.__name__ = 'verify'
    var.put('verify', PyJsHoisted_verify_)
    @Js
    def PyJsHoisted_wrapCheck_(wrapper, fn, this, arguments, var=var):
        var = Scope({'this':this, 'fn':fn, 'wrapper':wrapper, 'arguments':arguments}, var)
        var.registers(['newFn', 'fn', 'wrapper'])
        @Js
        def PyJs_newFn_2204_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'newFn':PyJs_newFn_2204_, 'arguments':arguments}, var)
            var.registers(['path'])
            if var.get('wrapper').callprop('checkPath', var.get('path')):
                return var.get('fn').callprop('apply', var.get("this"), var.get('arguments'))
        PyJs_newFn_2204_._set_name('newFn')
        var.put('newFn', PyJs_newFn_2204_)
        @Js
        def PyJs_anonymous_2205_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('fn').callprop('toString')
        PyJs_anonymous_2205_._set_name('anonymous')
        var.get('newFn').put('toString', PyJs_anonymous_2205_)
        return var.get('newFn')
    PyJsHoisted_wrapCheck_.__name__ = 'wrapCheck'
    var.put('wrapCheck', PyJsHoisted_wrapCheck_)
    @Js
    def PyJsHoisted_explode_(visitor, this, arguments, var=var):
        var = Scope({'this':this, 'visitor':visitor, 'arguments':arguments}, var)
        var.registers(['_isArray4', '_isArray3', '_isArray2', 'visitor', 'existing', '_nodeType3', '_nodeType2', '_ref', 'aliases', '_iterator', '_i4', '_i3', '_i2', 'wrapper', 'parts', '_i', 'type', '_type', 'nodeType', '_nodeType', 'part', 'deprecratedKey', '_isArray', 'fns', '_fns', '_ref4', '_ref3', '_ref2', 'alias', '_iterator4', '_fns2', '_iterator3', '_iterator2'])
        if var.get('visitor').get('_exploded'):
            return var.get('visitor')
        var.get('visitor').put('_exploded', var.get('true'))
        for PyJsTemp in var.get('visitor'):
            var.put('nodeType', PyJsTemp)
            if var.get('shouldIgnoreKey')(var.get('nodeType')):
                continue
            var.put('parts', var.get('nodeType').callprop('split', Js('|')))
            if PyJsStrictEq(var.get('parts').get('length'),Js(1.0)):
                continue
            var.put('fns', var.get('visitor').get(var.get('nodeType')))
            var.get('visitor').delete(var.get('nodeType'))
            #for JS loop
            var.put('_iterator', var.get('parts'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('part', var.get('_ref'))
                var.get('visitor').put(var.get('part'), var.get('fns'))
            
        var.get('verify')(var.get('visitor'))
        var.get('visitor').delete('__esModule')
        var.get('ensureEntranceObjects')(var.get('visitor'))
        var.get('ensureCallbackArrays')(var.get('visitor'))
        #for JS loop
        var.put('_iterator2', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('visitor')))
        var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
        var.put('_i2', Js(0.0))
        var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
        while 1:
            pass
            if var.get('_isArray2'):
                if (var.get('_i2')>=var.get('_iterator2').get('length')):
                    break
                var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i2', var.get('_iterator2').callprop('next'))
                if var.get('_i2').get('done'):
                    break
                var.put('_ref2', var.get('_i2').get('value'))
            var.put('_nodeType3', var.get('_ref2'))
            if var.get('shouldIgnoreKey')(var.get('_nodeType3')):
                continue
            var.put('wrapper', var.get('virtualTypes').get(var.get('_nodeType3')))
            if var.get('wrapper').neg():
                continue
            var.put('_fns2', var.get('visitor').get(var.get('_nodeType3')))
            for PyJsTemp in var.get('_fns2'):
                var.put('type', PyJsTemp)
                var.get('_fns2').put(var.get('type'), var.get('wrapCheck')(var.get('wrapper'), var.get('_fns2').get(var.get('type'))))
            var.get('visitor').delete(var.get('_nodeType3'))
            if var.get('wrapper').get('types'):
                #for JS loop
                var.put('_iterator4', var.get('wrapper').get('types'))
                var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
                var.put('_i4', Js(0.0))
                var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
                while 1:
                    pass
                    if var.get('_isArray4'):
                        if (var.get('_i4')>=var.get('_iterator4').get('length')):
                            break
                        var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i4', var.get('_iterator4').callprop('next'))
                        if var.get('_i4').get('done'):
                            break
                        var.put('_ref4', var.get('_i4').get('value'))
                    var.put('_type', var.get('_ref4'))
                    if var.get('visitor').get(var.get('_type')):
                        var.get('mergePair')(var.get('visitor').get(var.get('_type')), var.get('_fns2'))
                    else:
                        var.get('visitor').put(var.get('_type'), var.get('_fns2'))
                
            else:
                var.get('mergePair')(var.get('visitor'), var.get('_fns2'))
        
        for PyJsTemp in var.get('visitor'):
            var.put('_nodeType', PyJsTemp)
            if var.get('shouldIgnoreKey')(var.get('_nodeType')):
                continue
            var.put('_fns', var.get('visitor').get(var.get('_nodeType')))
            var.put('aliases', var.get('t').get('FLIPPED_ALIAS_KEYS').get(var.get('_nodeType')))
            var.put('deprecratedKey', var.get('t').get('DEPRECATED_KEYS').get(var.get('_nodeType')))
            if var.get('deprecratedKey'):
                var.get('console').callprop('trace', (((Js('Visitor defined for ')+var.get('_nodeType'))+Js(' but it has been renamed to '))+var.get('deprecratedKey')))
                var.put('aliases', Js([var.get('deprecratedKey')]))
            if var.get('aliases').neg():
                continue
            var.get('visitor').delete(var.get('_nodeType'))
            #for JS loop
            var.put('_iterator3', var.get('aliases'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref3', var.get('_i3').get('value'))
                var.put('alias', var.get('_ref3'))
                var.put('existing', var.get('visitor').get(var.get('alias')))
                if var.get('existing'):
                    var.get('mergePair')(var.get('existing'), var.get('_fns'))
                else:
                    var.get('visitor').put(var.get('alias'), PyJsComma(Js(0.0),var.get('_clone2').get('default'))(var.get('_fns')))
            
        for PyJsTemp in var.get('visitor'):
            var.put('_nodeType2', PyJsTemp)
            if var.get('shouldIgnoreKey')(var.get('_nodeType2')):
                continue
            var.get('ensureCallbackArrays')(var.get('visitor').get(var.get('_nodeType2')))
        return var.get('visitor')
    PyJsHoisted_explode_.__name__ = 'explode'
    var.put('explode', PyJsHoisted_explode_)
    @Js
    def PyJsHoisted_merge_(visitors, this, arguments, var=var):
        var = Scope({'this':this, 'visitors':visitors, 'arguments':arguments}, var)
        var.registers(['visitorType', 'i', 'visitor', 'rootVisitor', 'wrapper', 'states', 'visitors', 'state', 'nodeVisitor', 'type'])
        var.put('states', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js([])))
        var.put('wrapper', var.get('arguments').get('2'))
        PyJs_Object_2197_ = Js({})
        var.put('rootVisitor', PyJs_Object_2197_)
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('visitors').get('length')):
            try:
                var.put('visitor', var.get('visitors').get(var.get('i')))
                var.put('state', var.get('states').get(var.get('i')))
                var.get('explode')(var.get('visitor'))
                for PyJsTemp in var.get('visitor'):
                    var.put('type', PyJsTemp)
                    var.put('visitorType', var.get('visitor').get(var.get('type')))
                    if (var.get('state') or var.get('wrapper')):
                        var.put('visitorType', var.get('wrapWithStateOrWrapper')(var.get('visitorType'), var.get('state'), var.get('wrapper')))
                    PyJs_Object_2198_ = Js({})
                    var.put('nodeVisitor', var.get('rootVisitor').put(var.get('type'), (var.get('rootVisitor').get(var.get('type')) or PyJs_Object_2198_)))
                    var.get('mergePair')(var.get('nodeVisitor'), var.get('visitorType'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('rootVisitor')
    PyJsHoisted_merge_.__name__ = 'merge'
    var.put('merge', PyJsHoisted_merge_)
    @Js
    def PyJsHoisted_ensureCallbackArrays_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        if (var.get('obj').get('enter') and var.get('Array').callprop('isArray', var.get('obj').get('enter')).neg()):
            var.get('obj').put('enter', Js([var.get('obj').get('enter')]))
        if (var.get('obj').get('exit') and var.get('Array').callprop('isArray', var.get('obj').get('exit')).neg()):
            var.get('obj').put('exit', Js([var.get('obj').get('exit')]))
    PyJsHoisted_ensureCallbackArrays_.__name__ = 'ensureCallbackArrays'
    var.put('ensureCallbackArrays', PyJsHoisted_ensureCallbackArrays_)
    @Js
    def PyJsHoisted_wrapWithStateOrWrapper_(oldVisitor, state, wrapper, this, arguments, var=var):
        var = Scope({'this':this, 'oldVisitor':oldVisitor, 'state':state, 'arguments':arguments, 'wrapper':wrapper}, var)
        var.registers(['_loop', '_ret', 'newVisitor', 'oldVisitor', 'state', 'wrapper', 'key'])
        PyJs_Object_2199_ = Js({})
        var.put('newVisitor', PyJs_Object_2199_)
        @Js
        def PyJs__loop_2200_(key, this, arguments, var=var):
            var = Scope({'this':this, '_loop':PyJs__loop_2200_, 'arguments':arguments, 'key':key}, var)
            var.registers(['fns', 'key'])
            var.put('fns', var.get('oldVisitor').get(var.get('key')))
            if var.get('Array').callprop('isArray', var.get('fns')).neg():
                return Js('continue')
            @Js
            def PyJs_anonymous_2201_(fn, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fn':fn}, var)
                var.registers(['newFn', 'fn'])
                var.put('newFn', var.get('fn'))
                if var.get('state'):
                    @Js
                    def PyJs_newFn_2202_(path, this, arguments, var=var):
                        var = Scope({'this':this, 'path':path, 'newFn':PyJs_newFn_2202_, 'arguments':arguments}, var)
                        var.registers(['path'])
                        return var.get('fn').callprop('call', var.get('state'), var.get('path'), var.get('state'))
                    PyJs_newFn_2202_._set_name('newFn')
                    var.put('newFn', PyJs_newFn_2202_)
                if var.get('wrapper'):
                    var.put('newFn', var.get('wrapper')(var.get('state').get('key'), var.get('key'), var.get('newFn')))
                return var.get('newFn')
            PyJs_anonymous_2201_._set_name('anonymous')
            var.put('fns', var.get('fns').callprop('map', PyJs_anonymous_2201_))
            var.get('newVisitor').put(var.get('key'), var.get('fns'))
        PyJs__loop_2200_._set_name('_loop')
        var.put('_loop', PyJs__loop_2200_)
        for PyJsTemp in var.get('oldVisitor'):
            var.put('key', PyJsTemp)
            var.put('_ret', var.get('_loop')(var.get('key')))
            if PyJsStrictEq(var.get('_ret'),Js('continue')):
                continue
        return var.get('newVisitor')
    PyJsHoisted_wrapWithStateOrWrapper_.__name__ = 'wrapWithStateOrWrapper'
    var.put('wrapWithStateOrWrapper', PyJsHoisted_wrapWithStateOrWrapper_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2196_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2196_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_ensureEntranceObjects_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'fns', 'key'])
        for PyJsTemp in var.get('obj'):
            var.put('key', PyJsTemp)
            if var.get('shouldIgnoreKey')(var.get('key')):
                continue
            var.put('fns', var.get('obj').get(var.get('key')))
            if PyJsStrictEq(var.get('fns',throw=False).typeof(),Js('function')):
                PyJs_Object_2203_ = Js({'enter':var.get('fns')})
                var.get('obj').put(var.get('key'), PyJs_Object_2203_)
    PyJsHoisted_ensureEntranceObjects_.__name__ = 'ensureEntranceObjects'
    var.put('ensureEntranceObjects', PyJsHoisted_ensureEntranceObjects_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('explode', var.get('explode'))
    var.get('exports').put('verify', var.get('verify'))
    var.get('exports').put('merge', var.get('merge'))
    var.put('_virtualTypes', var.get('require')(Js('./path/lib/virtual-types')))
    var.put('virtualTypes', var.get('_interopRequireWildcard')(var.get('_virtualTypes')))
    var.put('_babelMessages', var.get('require')(Js('babel-messages')))
    var.put('messages', var.get('_interopRequireWildcard')(var.get('_babelMessages')))
    var.put('_babelTypes', var.get('require')(Js('babel-types')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_babelTypes')))
    var.put('_clone', var.get('require')(Js('lodash/clone')))
    var.put('_clone2', var.get('_interopRequireDefault')(var.get('_clone')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2194_._set_name('anonymous')
PyJs_Object_2206_ = Js({'./path/lib/virtual-types':Js(239.0),'babel-messages':Js(57.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/object/keys':Js(103.0),'babel-runtime/helpers/typeof':Js(114.0),'babel-types':Js(258.0),'lodash/clone':Js(438.0)})
@Js
def PyJs_anonymous_2207_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['BOOLEAN_UNARY_OPERATORS', '_for', 'module', 'STATEMENT_OR_BLOCK_KEYS', 'BLOCK_SCOPED_SYMBOL', '_interopRequireDefault', 'COMMENT_KEYS', 'INHERIT_KEYS', 'BOOLEAN_BINARY_OPERATORS', 'UNARY_OPERATORS', 'FOR_INIT_KEYS', 'exports', 'COMPARISON_BINARY_OPERATORS', 'NUMBER_UNARY_OPERATORS', '_for2', 'FLATTENABLE_KEYS', 'LOGICAL_OPERATORS', 'STRING_UNARY_OPERATORS', 'NUMBER_BINARY_OPERATORS', 'UPDATE_OPERATORS', 'require', 'NOT_LOCAL_BINDING', 'BINARY_OPERATORS', 'EQUALITY_BINARY_OPERATORS', 'BOOLEAN_NUMBER_BINARY_OPERATORS'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2210_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2210_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    def PyJs_LONG_2209_(var=var):
        def PyJs_LONG_2208_(var=var):
            return var.get('exports').put('EQUALITY_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_NUMBER_BINARY_OPERATORS', var.get('exports').put('UPDATE_OPERATORS', var.get('exports').put('LOGICAL_OPERATORS', var.get('exports').put('COMMENT_KEYS', var.get('exports').put('FOR_INIT_KEYS', var.get('exports').put('FLATTENABLE_KEYS', var.get('exports').put('STATEMENT_OR_BLOCK_KEYS', var.get('undefined')))))))))
        return var.get('exports').put('UNARY_OPERATORS', var.get('exports').put('STRING_UNARY_OPERATORS', var.get('exports').put('NUMBER_UNARY_OPERATORS', var.get('exports').put('BOOLEAN_UNARY_OPERATORS', var.get('exports').put('BINARY_OPERATORS', var.get('exports').put('NUMBER_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_BINARY_OPERATORS', var.get('exports').put('COMPARISON_BINARY_OPERATORS', PyJs_LONG_2208_()))))))))
    var.get('exports').put('NOT_LOCAL_BINDING', var.get('exports').put('BLOCK_SCOPED_SYMBOL', var.get('exports').put('INHERIT_KEYS', PyJs_LONG_2209_())))
    var.put('_for', var.get('require')(Js('babel-runtime/core-js/symbol/for')))
    var.put('_for2', var.get('_interopRequireDefault')(var.get('_for')))
    pass
    var.put('STATEMENT_OR_BLOCK_KEYS', var.get('exports').put('STATEMENT_OR_BLOCK_KEYS', Js([Js('consequent'), Js('body'), Js('alternate')])))
    var.put('FLATTENABLE_KEYS', var.get('exports').put('FLATTENABLE_KEYS', Js([Js('body'), Js('expressions')])))
    var.put('FOR_INIT_KEYS', var.get('exports').put('FOR_INIT_KEYS', Js([Js('left'), Js('init')])))
    var.put('COMMENT_KEYS', var.get('exports').put('COMMENT_KEYS', Js([Js('leadingComments'), Js('trailingComments'), Js('innerComments')])))
    var.put('LOGICAL_OPERATORS', var.get('exports').put('LOGICAL_OPERATORS', Js([Js('||'), Js('&&')])))
    var.put('UPDATE_OPERATORS', var.get('exports').put('UPDATE_OPERATORS', Js([Js('++'), Js('--')])))
    var.put('BOOLEAN_NUMBER_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_NUMBER_BINARY_OPERATORS', Js([Js('>'), Js('<'), Js('>='), Js('<=')])))
    var.put('EQUALITY_BINARY_OPERATORS', var.get('exports').put('EQUALITY_BINARY_OPERATORS', Js([Js('=='), Js('==='), Js('!='), Js('!==')])))
    var.put('COMPARISON_BINARY_OPERATORS', var.get('exports').put('COMPARISON_BINARY_OPERATORS', Js([]).callprop('concat', var.get('EQUALITY_BINARY_OPERATORS'), Js([Js('in'), Js('instanceof')]))))
    var.put('BOOLEAN_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_BINARY_OPERATORS', Js([]).callprop('concat', var.get('COMPARISON_BINARY_OPERATORS'), var.get('BOOLEAN_NUMBER_BINARY_OPERATORS'))))
    var.put('NUMBER_BINARY_OPERATORS', var.get('exports').put('NUMBER_BINARY_OPERATORS', Js([Js('-'), Js('/'), Js('%'), Js('*'), Js('**'), Js('&'), Js('|'), Js('>>'), Js('>>>'), Js('<<'), Js('^')])))
    var.put('BINARY_OPERATORS', var.get('exports').put('BINARY_OPERATORS', Js([Js('+')]).callprop('concat', var.get('NUMBER_BINARY_OPERATORS'), var.get('BOOLEAN_BINARY_OPERATORS'))))
    var.put('BOOLEAN_UNARY_OPERATORS', var.get('exports').put('BOOLEAN_UNARY_OPERATORS', Js([Js('delete'), Js('!')])))
    var.put('NUMBER_UNARY_OPERATORS', var.get('exports').put('NUMBER_UNARY_OPERATORS', Js([Js('+'), Js('-'), Js('++'), Js('--'), Js('~')])))
    var.put('STRING_UNARY_OPERATORS', var.get('exports').put('STRING_UNARY_OPERATORS', Js([Js('typeof')])))
    var.put('UNARY_OPERATORS', var.get('exports').put('UNARY_OPERATORS', Js([Js('void')]).callprop('concat', var.get('BOOLEAN_UNARY_OPERATORS'), var.get('NUMBER_UNARY_OPERATORS'), var.get('STRING_UNARY_OPERATORS'))))
    PyJs_Object_2211_ = Js({'optional':Js([Js('typeAnnotation'), Js('typeParameters'), Js('returnType')]),'force':Js([Js('start'), Js('loc'), Js('end')])})
    var.put('INHERIT_KEYS', var.get('exports').put('INHERIT_KEYS', PyJs_Object_2211_))
    var.put('BLOCK_SCOPED_SYMBOL', var.get('exports').put('BLOCK_SCOPED_SYMBOL', PyJsComma(Js(0.0),var.get('_for2').get('default'))(Js('var used to be block scoped'))))
    var.put('NOT_LOCAL_BINDING', var.get('exports').put('NOT_LOCAL_BINDING', PyJsComma(Js(0.0),var.get('_for2').get('default'))(Js('should not be considered a local binding'))))
PyJs_anonymous_2207_._set_name('anonymous')
PyJs_Object_2212_ = Js({'babel-runtime/core-js/symbol/for':Js(106.0)})
@Js
def PyJs_anonymous_2213_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['toComputedKey', 'toBindingIdentifierName', 'module', '_isString2', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'toKeyAlias', '_isNumber', 'toSequenceExpression', '_isRegExp2', '_isRegExp', 'toIdentifier', 't', '_isNumber2', 'exports', '_stringify2', '_interopRequireWildcard', 'toExpression', '_maxSafeInteger2', '_isPlainObject2', '_index', '_isString', 'require', 'toBlock', 'toStatement', '_stringify', '_maxSafeInteger', '_isPlainObject', 'valueToNode'])
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2214_ = Js({})
            var.put('newObj', PyJs_Object_2214_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_toSequenceExpression_(nodes, scope, this, arguments, var=var):
        var = Scope({'this':this, 'scope':scope, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['convert', 'bailed', 'i', 'declars', 'result', 'scope', 'nodes'])
        @Js
        def PyJsHoisted_convert_(nodes, this, arguments, var=var):
            var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
            var.registers(['node', '_isArray', '_iterator', '_isArray2', 'ensureLastUndefined', 'alternate', 'nodes', '_i2', '_ref2', 'key', 'exprs', 'declar', '_i', '_ref', 'consequent', 'bindings', '_iterator2'])
            var.put('ensureLastUndefined', Js(False))
            var.put('exprs', Js([]))
            #for JS loop
            var.put('_iterator', var.get('nodes'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('node', var.get('_ref'))
                if var.get('t').callprop('isExpression', var.get('node')):
                    var.get('exprs').callprop('push', var.get('node'))
                else:
                    if var.get('t').callprop('isExpressionStatement', var.get('node')):
                        var.get('exprs').callprop('push', var.get('node').get('expression'))
                    else:
                        if var.get('t').callprop('isVariableDeclaration', var.get('node')):
                            if PyJsStrictNeq(var.get('node').get('kind'),Js('var')):
                                return var.put('bailed', var.get('true'))
                            #for JS loop
                            var.put('_iterator2', var.get('node').get('declarations'))
                            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                            var.put('_i2', Js(0.0))
                            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
                            while 1:
                                pass
                                if var.get('_isArray2'):
                                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                                        break
                                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                                else:
                                    var.put('_i2', var.get('_iterator2').callprop('next'))
                                    if var.get('_i2').get('done'):
                                        break
                                    var.put('_ref2', var.get('_i2').get('value'))
                                var.put('declar', var.get('_ref2'))
                                var.put('bindings', var.get('t').callprop('getBindingIdentifiers', var.get('declar')))
                                for PyJsTemp in var.get('bindings'):
                                    var.put('key', PyJsTemp)
                                    PyJs_Object_2216_ = Js({'kind':var.get('node').get('kind'),'id':var.get('bindings').get(var.get('key'))})
                                    var.get('declars').callprop('push', PyJs_Object_2216_)
                                if var.get('declar').get('init'):
                                    var.get('exprs').callprop('push', var.get('t').callprop('assignmentExpression', Js('='), var.get('declar').get('id'), var.get('declar').get('init')))
                            
                            var.put('ensureLastUndefined', var.get('true'))
                            continue
                        else:
                            if var.get('t').callprop('isIfStatement', var.get('node')):
                                var.put('consequent', (var.get('convert')(Js([var.get('node').get('consequent')])) if var.get('node').get('consequent') else var.get('scope').callprop('buildUndefinedNode')))
                                var.put('alternate', (var.get('convert')(Js([var.get('node').get('alternate')])) if var.get('node').get('alternate') else var.get('scope').callprop('buildUndefinedNode')))
                                if (var.get('consequent').neg() or var.get('alternate').neg()):
                                    return var.put('bailed', var.get('true'))
                                var.get('exprs').callprop('push', var.get('t').callprop('conditionalExpression', var.get('node').get('test'), var.get('consequent'), var.get('alternate')))
                            else:
                                if var.get('t').callprop('isBlockStatement', var.get('node')):
                                    var.get('exprs').callprop('push', var.get('convert')(var.get('node').get('body')))
                                else:
                                    if var.get('t').callprop('isEmptyStatement', var.get('node')):
                                        var.put('ensureLastUndefined', var.get('true'))
                                        continue
                                    else:
                                        return var.put('bailed', var.get('true'))
                var.put('ensureLastUndefined', Js(False))
            
            if (var.get('ensureLastUndefined') or PyJsStrictEq(var.get('exprs').get('length'),Js(0.0))):
                var.get('exprs').callprop('push', var.get('scope').callprop('buildUndefinedNode'))
            if PyJsStrictEq(var.get('exprs').get('length'),Js(1.0)):
                return var.get('exprs').get('0')
            else:
                return var.get('t').callprop('sequenceExpression', var.get('exprs'))
        PyJsHoisted_convert_.__name__ = 'convert'
        var.put('convert', PyJsHoisted_convert_)
        if (var.get('nodes').neg() or var.get('nodes').get('length').neg()):
            return var.get('undefined')
        var.put('declars', Js([]))
        var.put('bailed', Js(False))
        var.put('result', var.get('convert')(var.get('nodes')))
        if var.get('bailed'):
            return var.get('undefined')
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('declars').get('length')):
            try:
                var.get('scope').callprop('push', var.get('declars').get(var.get('i')))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('result')
        pass
    PyJsHoisted_toSequenceExpression_.__name__ = 'toSequenceExpression'
    var.put('toSequenceExpression', PyJsHoisted_toSequenceExpression_)
    @Js
    def PyJsHoisted_toExpression_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isExpressionStatement', var.get('node')):
            var.put('node', var.get('node').get('expression'))
        if var.get('t').callprop('isExpression', var.get('node')):
            return var.get('node')
        if var.get('t').callprop('isClass', var.get('node')):
            var.get('node').put('type', Js('ClassExpression'))
        else:
            if var.get('t').callprop('isFunction', var.get('node')):
                var.get('node').put('type', Js('FunctionExpression'))
        if var.get('t').callprop('isExpression', var.get('node')).neg():
            PyJsTempException = JsToPyException(var.get('Error').create(((Js('cannot turn ')+var.get('node').get('type'))+Js(' to an expression'))))
            raise PyJsTempException
        return var.get('node')
    PyJsHoisted_toExpression_.__name__ = 'toExpression'
    var.put('toExpression', PyJsHoisted_toExpression_)
    @Js
    def PyJsHoisted_toComputedKey_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'key'])
        var.put('key', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else (var.get('node').get('key') or var.get('node').get('property'))))
        if var.get('node').get('computed').neg():
            if var.get('t').callprop('isIdentifier', var.get('key')):
                var.put('key', var.get('t').callprop('stringLiteral', var.get('key').get('name')))
        return var.get('key')
    PyJsHoisted_toComputedKey_.__name__ = 'toComputedKey'
    var.put('toComputedKey', PyJsHoisted_toComputedKey_)
    @Js
    def PyJsHoisted_toBindingIdentifierName_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        var.put('name', var.get('toIdentifier')(var.get('name')))
        if (PyJsStrictEq(var.get('name'),Js('eval')) or PyJsStrictEq(var.get('name'),Js('arguments'))):
            var.put('name', (Js('_')+var.get('name')))
        return var.get('name')
    PyJsHoisted_toBindingIdentifierName_.__name__ = 'toBindingIdentifierName'
    var.put('toBindingIdentifierName', PyJsHoisted_toBindingIdentifierName_)
    @Js
    def PyJsHoisted_toBlock_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        if var.get('t').callprop('isBlockStatement', var.get('node')):
            return var.get('node')
        if var.get('t').callprop('isEmptyStatement', var.get('node')):
            var.put('node', Js([]))
        if var.get('Array').callprop('isArray', var.get('node')).neg():
            if var.get('t').callprop('isStatement', var.get('node')).neg():
                if var.get('t').callprop('isFunction', var.get('parent')):
                    var.put('node', var.get('t').callprop('returnStatement', var.get('node')))
                else:
                    var.put('node', var.get('t').callprop('expressionStatement', var.get('node')))
            var.put('node', Js([var.get('node')]))
        return var.get('t').callprop('blockStatement', var.get('node'))
    PyJsHoisted_toBlock_.__name__ = 'toBlock'
    var.put('toBlock', PyJsHoisted_toBlock_)
    @Js
    def PyJsHoisted_toStatement_(node, ignore, this, arguments, var=var):
        var = Scope({'node':node, 'ignore':ignore, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'ignore', 'mustHaveId', 'newType'])
        if var.get('t').callprop('isStatement', var.get('node')):
            return var.get('node')
        var.put('mustHaveId', Js(False))
        var.put('newType', PyJsComma(Js(0.0), Js(None)))
        if var.get('t').callprop('isClass', var.get('node')):
            var.put('mustHaveId', var.get('true'))
            var.put('newType', Js('ClassDeclaration'))
        else:
            if var.get('t').callprop('isFunction', var.get('node')):
                var.put('mustHaveId', var.get('true'))
                var.put('newType', Js('FunctionDeclaration'))
            else:
                if var.get('t').callprop('isAssignmentExpression', var.get('node')):
                    return var.get('t').callprop('expressionStatement', var.get('node'))
        if (var.get('mustHaveId') and var.get('node').get('id').neg()):
            var.put('newType', Js(False))
        if var.get('newType').neg():
            if var.get('ignore'):
                return Js(False)
            else:
                PyJsTempException = JsToPyException(var.get('Error').create(((Js('cannot turn ')+var.get('node').get('type'))+Js(' to a statement'))))
                raise PyJsTempException
        var.get('node').put('type', var.get('newType'))
        return var.get('node')
    PyJsHoisted_toStatement_.__name__ = 'toStatement'
    var.put('toStatement', PyJsHoisted_toStatement_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2215_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2215_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_toIdentifier_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        var.put('name', (var.get('name')+Js('')))
        var.put('name', var.get('name').callprop('replace', JsRegExp('/[^a-zA-Z0-9$_]/g'), Js('-')))
        var.put('name', var.get('name').callprop('replace', JsRegExp('/^[-0-9]+/'), Js('')))
        @Js
        def PyJs_anonymous_2218_(match, c, this, arguments, var=var):
            var = Scope({'this':this, 'c':c, 'arguments':arguments, 'match':match}, var)
            var.registers(['c', 'match'])
            return (var.get('c').callprop('toUpperCase') if var.get('c') else Js(''))
        PyJs_anonymous_2218_._set_name('anonymous')
        var.put('name', var.get('name').callprop('replace', JsRegExp('/[-\\s]+(.)?/g'), PyJs_anonymous_2218_))
        if var.get('t').callprop('isValidIdentifier', var.get('name')).neg():
            var.put('name', (Js('_')+var.get('name')))
        return (var.get('name') or Js('_'))
    PyJsHoisted_toIdentifier_.__name__ = 'toIdentifier'
    var.put('toIdentifier', PyJsHoisted_toIdentifier_)
    @Js
    def PyJsHoisted_toKeyAlias_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'alias', 'key'])
        var.put('key', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else var.get('node').get('key')))
        var.put('alias', PyJsComma(Js(0.0), Js(None)))
        if PyJsStrictEq(var.get('node').get('kind'),Js('method')):
            return (var.get('toKeyAlias').callprop('increment')+Js(''))
        else:
            if var.get('t').callprop('isIdentifier', var.get('key')):
                var.put('alias', var.get('key').get('name'))
            else:
                if var.get('t').callprop('isStringLiteral', var.get('key')):
                    var.put('alias', PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('key').get('value')))
                else:
                    var.put('alias', PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('t').callprop('removePropertiesDeep', var.get('t').callprop('cloneDeep', var.get('key')))))
        if var.get('node').get('computed'):
            var.put('alias', ((Js('[')+var.get('alias'))+Js(']')))
        if var.get('node').get('static'):
            var.put('alias', (Js('static:')+var.get('alias')))
        return var.get('alias')
    PyJsHoisted_toKeyAlias_.__name__ = 'toKeyAlias'
    var.put('toKeyAlias', PyJsHoisted_toKeyAlias_)
    @Js
    def PyJsHoisted_valueToNode_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['pattern', 'value', 'flags', 'nodeKey', 'key', 'props'])
        if PyJsStrictEq(var.get('value'),var.get('undefined')):
            return var.get('t').callprop('identifier', Js('undefined'))
        if (PyJsStrictEq(var.get('value'),var.get('true')) or PyJsStrictEq(var.get('value'),Js(False))):
            return var.get('t').callprop('booleanLiteral', var.get('value'))
        if PyJsStrictEq(var.get('value'),var.get("null")):
            return var.get('t').callprop('nullLiteral')
        if PyJsComma(Js(0.0),var.get('_isString2').get('default'))(var.get('value')):
            return var.get('t').callprop('stringLiteral', var.get('value'))
        if PyJsComma(Js(0.0),var.get('_isNumber2').get('default'))(var.get('value')):
            return var.get('t').callprop('numericLiteral', var.get('value'))
        if PyJsComma(Js(0.0),var.get('_isRegExp2').get('default'))(var.get('value')):
            var.put('pattern', var.get('value').get('source'))
            var.put('flags', var.get('value').callprop('toString').callprop('match', JsRegExp('/\\/([a-z]+|)$/')).get('1'))
            return var.get('t').callprop('regExpLiteral', var.get('pattern'), var.get('flags'))
        if var.get('Array').callprop('isArray', var.get('value')):
            return var.get('t').callprop('arrayExpression', var.get('value').callprop('map', var.get('t').get('valueToNode')))
        if PyJsComma(Js(0.0),var.get('_isPlainObject2').get('default'))(var.get('value')):
            var.put('props', Js([]))
            for PyJsTemp in var.get('value'):
                var.put('key', PyJsTemp)
                var.put('nodeKey', PyJsComma(Js(0.0), Js(None)))
                if var.get('t').callprop('isValidIdentifier', var.get('key')):
                    var.put('nodeKey', var.get('t').callprop('identifier', var.get('key')))
                else:
                    var.put('nodeKey', var.get('t').callprop('stringLiteral', var.get('key')))
                var.get('props').callprop('push', var.get('t').callprop('objectProperty', var.get('nodeKey'), var.get('t').callprop('valueToNode', var.get('value').get(var.get('key')))))
            return var.get('t').callprop('objectExpression', var.get('props'))
        PyJsTempException = JsToPyException(var.get('Error').create(Js("don't know how to turn this value into a node")))
        raise PyJsTempException
    PyJsHoisted_valueToNode_.__name__ = 'valueToNode'
    var.put('valueToNode', PyJsHoisted_valueToNode_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_maxSafeInteger', var.get('require')(Js('babel-runtime/core-js/number/max-safe-integer')))
    var.put('_maxSafeInteger2', var.get('_interopRequireDefault')(var.get('_maxSafeInteger')))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('toComputedKey', var.get('toComputedKey'))
    var.get('exports').put('toSequenceExpression', var.get('toSequenceExpression'))
    var.get('exports').put('toKeyAlias', var.get('toKeyAlias'))
    var.get('exports').put('toIdentifier', var.get('toIdentifier'))
    var.get('exports').put('toBindingIdentifierName', var.get('toBindingIdentifierName'))
    var.get('exports').put('toStatement', var.get('toStatement'))
    var.get('exports').put('toExpression', var.get('toExpression'))
    var.get('exports').put('toBlock', var.get('toBlock'))
    var.get('exports').put('valueToNode', var.get('valueToNode'))
    var.put('_isPlainObject', var.get('require')(Js('lodash/isPlainObject')))
    var.put('_isPlainObject2', var.get('_interopRequireDefault')(var.get('_isPlainObject')))
    var.put('_isNumber', var.get('require')(Js('lodash/isNumber')))
    var.put('_isNumber2', var.get('_interopRequireDefault')(var.get('_isNumber')))
    var.put('_isRegExp', var.get('require')(Js('lodash/isRegExp')))
    var.put('_isRegExp2', var.get('_interopRequireDefault')(var.get('_isRegExp')))
    var.put('_isString', var.get('require')(Js('lodash/isString')))
    var.put('_isString2', var.get('_interopRequireDefault')(var.get('_isString')))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    pass
    pass
    pass
    pass
    pass
    var.get('toKeyAlias').put('uid', Js(0.0))
    @Js
    def PyJs_anonymous_2217_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if (var.get('toKeyAlias').get('uid')>=var.get('_maxSafeInteger2').get('default')):
            return var.get('toKeyAlias').put('uid', Js(0.0))
        else:
            return (var.get('toKeyAlias').put('uid',Js(var.get('toKeyAlias').get('uid').to_number())+Js(1))-Js(1))
    PyJs_anonymous_2217_._set_name('anonymous')
    var.get('toKeyAlias').put('increment', PyJs_anonymous_2217_)
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2213_._set_name('anonymous')
PyJs_Object_2219_ = Js({'./index':Js(258.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/core-js/number/max-safe-integer':Js(99.0),'lodash/isNumber':Js(466.0),'lodash/isPlainObject':Js(469.0),'lodash/isRegExp':Js(470.0),'lodash/isString':Js(471.0)})
@Js
def PyJs_anonymous_2220_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_constants', '_interopRequireWildcard', '_index', 'require', 'module', 't', '_index2', '_index3', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2221_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2221_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2222_ = Js({})
            var.put('newObj', PyJs_Object_2222_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('../index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    var.put('_constants', var.get('require')(Js('../constants')))
    var.put('_index2', var.get('require')(Js('./index')))
    var.put('_index3', var.get('_interopRequireDefault')(var.get('_index2')))
    pass
    pass
    PyJs_Object_2225_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeOrValueType'))(Js('null'), Js('Expression'), Js('SpreadElement')))),'default':Js([])})
    PyJs_Object_2224_ = Js({'elements':PyJs_Object_2225_})
    PyJs_Object_2223_ = Js({'fields':PyJs_Object_2224_,'visitor':Js([Js('elements')]),'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ArrayExpression'), PyJs_Object_2223_)
    PyJs_Object_2228_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string'))})
    PyJs_Object_2229_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('LVal'))})
    PyJs_Object_2230_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2227_ = Js({'operator':PyJs_Object_2228_,'left':PyJs_Object_2229_,'right':PyJs_Object_2230_})
    PyJs_Object_2226_ = Js({'fields':PyJs_Object_2227_,'builder':Js([Js('operator'), Js('left'), Js('right')]),'visitor':Js([Js('left'), Js('right')]),'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('AssignmentExpression'), PyJs_Object_2226_)
    PyJs_Object_2233_ = Js({'validate':var.get('_index2').get('assertOneOf').callprop('apply', var.get('undefined'), var.get('_constants').get('BINARY_OPERATORS'))})
    PyJs_Object_2234_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2235_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2232_ = Js({'operator':PyJs_Object_2233_,'left':PyJs_Object_2234_,'right':PyJs_Object_2235_})
    PyJs_Object_2231_ = Js({'builder':Js([Js('operator'), Js('left'), Js('right')]),'fields':PyJs_Object_2232_,'visitor':Js([Js('left'), Js('right')]),'aliases':Js([Js('Binary'), Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('BinaryExpression'), PyJs_Object_2231_)
    PyJs_Object_2238_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('DirectiveLiteral'))})
    PyJs_Object_2237_ = Js({'value':PyJs_Object_2238_})
    PyJs_Object_2236_ = Js({'visitor':Js([Js('value')]),'fields':PyJs_Object_2237_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('Directive'), PyJs_Object_2236_)
    PyJs_Object_2241_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string'))})
    PyJs_Object_2240_ = Js({'value':PyJs_Object_2241_})
    PyJs_Object_2239_ = Js({'builder':Js([Js('value')]),'fields':PyJs_Object_2240_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('DirectiveLiteral'), PyJs_Object_2239_)
    PyJs_Object_2244_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Directive')))),'default':Js([])})
    PyJs_Object_2245_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))))})
    PyJs_Object_2243_ = Js({'directives':PyJs_Object_2244_,'body':PyJs_Object_2245_})
    PyJs_Object_2242_ = Js({'builder':Js([Js('body'), Js('directives')]),'visitor':Js([Js('directives'), Js('body')]),'fields':PyJs_Object_2243_,'aliases':Js([Js('Scopable'), Js('BlockParent'), Js('Block'), Js('Statement')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('BlockStatement'), PyJs_Object_2242_)
    PyJs_Object_2248_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier')),'optional':var.get('true')})
    PyJs_Object_2247_ = Js({'label':PyJs_Object_2248_})
    PyJs_Object_2246_ = Js({'visitor':Js([Js('label')]),'fields':PyJs_Object_2247_,'aliases':Js([Js('Statement'), Js('Terminatorless'), Js('CompletionStatement')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('BreakStatement'), PyJs_Object_2246_)
    PyJs_Object_2251_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2252_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'), Js('SpreadElement'))))})
    PyJs_Object_2250_ = Js({'callee':PyJs_Object_2251_,'arguments':PyJs_Object_2252_})
    PyJs_Object_2249_ = Js({'visitor':Js([Js('callee'), Js('arguments')]),'fields':PyJs_Object_2250_,'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('CallExpression'), PyJs_Object_2249_)
    PyJs_Object_2255_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2256_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2254_ = Js({'param':PyJs_Object_2255_,'body':PyJs_Object_2256_})
    PyJs_Object_2253_ = Js({'visitor':Js([Js('param'), Js('body')]),'fields':PyJs_Object_2254_,'aliases':Js([Js('Scopable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('CatchClause'), PyJs_Object_2253_)
    PyJs_Object_2259_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2260_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2261_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2258_ = Js({'test':PyJs_Object_2259_,'consequent':PyJs_Object_2260_,'alternate':PyJs_Object_2261_})
    PyJs_Object_2257_ = Js({'visitor':Js([Js('test'), Js('consequent'), Js('alternate')]),'fields':PyJs_Object_2258_,'aliases':Js([Js('Expression'), Js('Conditional')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ConditionalExpression'), PyJs_Object_2257_)
    PyJs_Object_2264_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier')),'optional':var.get('true')})
    PyJs_Object_2263_ = Js({'label':PyJs_Object_2264_})
    PyJs_Object_2262_ = Js({'visitor':Js([Js('label')]),'fields':PyJs_Object_2263_,'aliases':Js([Js('Statement'), Js('Terminatorless'), Js('CompletionStatement')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ContinueStatement'), PyJs_Object_2262_)
    PyJs_Object_2265_ = Js({'aliases':Js([Js('Statement')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('DebuggerStatement'), PyJs_Object_2265_)
    PyJs_Object_2268_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2269_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2267_ = Js({'test':PyJs_Object_2268_,'body':PyJs_Object_2269_})
    PyJs_Object_2266_ = Js({'visitor':Js([Js('test'), Js('body')]),'fields':PyJs_Object_2267_,'aliases':Js([Js('Statement'), Js('BlockParent'), Js('Loop'), Js('While'), Js('Scopable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('DoWhileStatement'), PyJs_Object_2266_)
    PyJs_Object_2270_ = Js({'aliases':Js([Js('Statement')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('EmptyStatement'), PyJs_Object_2270_)
    PyJs_Object_2273_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2272_ = Js({'expression':PyJs_Object_2273_})
    PyJs_Object_2271_ = Js({'visitor':Js([Js('expression')]),'fields':PyJs_Object_2272_,'aliases':Js([Js('Statement'), Js('ExpressionWrapper')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ExpressionStatement'), PyJs_Object_2271_)
    PyJs_Object_2276_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Program'))})
    PyJs_Object_2275_ = Js({'program':PyJs_Object_2276_})
    PyJs_Object_2274_ = Js({'builder':Js([Js('program'), Js('comments'), Js('tokens')]),'visitor':Js([Js('program')]),'fields':PyJs_Object_2275_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('File'), PyJs_Object_2274_)
    PyJs_Object_2279_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('VariableDeclaration'), Js('LVal'))})
    PyJs_Object_2280_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2281_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2278_ = Js({'left':PyJs_Object_2279_,'right':PyJs_Object_2280_,'body':PyJs_Object_2281_})
    PyJs_Object_2277_ = Js({'visitor':Js([Js('left'), Js('right'), Js('body')]),'aliases':Js([Js('Scopable'), Js('Statement'), Js('For'), Js('BlockParent'), Js('Loop'), Js('ForXStatement')]),'fields':PyJs_Object_2278_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ForInStatement'), PyJs_Object_2277_)
    PyJs_Object_2284_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('VariableDeclaration'), Js('Expression')),'optional':var.get('true')})
    PyJs_Object_2285_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression')),'optional':var.get('true')})
    PyJs_Object_2286_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression')),'optional':var.get('true')})
    PyJs_Object_2287_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2283_ = Js({'init':PyJs_Object_2284_,'test':PyJs_Object_2285_,'update':PyJs_Object_2286_,'body':PyJs_Object_2287_})
    PyJs_Object_2282_ = Js({'visitor':Js([Js('init'), Js('test'), Js('update'), Js('body')]),'aliases':Js([Js('Scopable'), Js('Statement'), Js('For'), Js('BlockParent'), Js('Loop')]),'fields':PyJs_Object_2283_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ForStatement'), PyJs_Object_2282_)
    PyJs_Object_2290_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2291_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('LVal'))))})
    PyJs_Object_2292_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2293_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2294_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2289_ = Js({'id':PyJs_Object_2290_,'params':PyJs_Object_2291_,'body':PyJs_Object_2292_,'generator':PyJs_Object_2293_,'async':PyJs_Object_2294_})
    PyJs_Object_2288_ = Js({'builder':Js([Js('id'), Js('params'), Js('body'), Js('generator'), Js('async')]),'visitor':Js([Js('id'), Js('params'), Js('body'), Js('returnType'), Js('typeParameters')]),'fields':PyJs_Object_2289_,'aliases':Js([Js('Scopable'), Js('Function'), Js('BlockParent'), Js('FunctionParent'), Js('Statement'), Js('Pureish'), Js('Declaration')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('FunctionDeclaration'), PyJs_Object_2288_)
    PyJs_Object_2297_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier')),'optional':var.get('true')})
    PyJs_Object_2298_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('LVal'))))})
    PyJs_Object_2299_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2300_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2301_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2296_ = Js({'id':PyJs_Object_2297_,'params':PyJs_Object_2298_,'body':PyJs_Object_2299_,'generator':PyJs_Object_2300_,'async':PyJs_Object_2301_})
    PyJs_Object_2295_ = Js({'inherits':Js('FunctionDeclaration'),'aliases':Js([Js('Scopable'), Js('Function'), Js('BlockParent'), Js('FunctionParent'), Js('Expression'), Js('Pureish')]),'fields':PyJs_Object_2296_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('FunctionExpression'), PyJs_Object_2295_)
    @Js
    def PyJs_validate_2305_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'val':val, 'this':this, 'arguments':arguments, 'key':key, 'validate':PyJs_validate_2305_}, var)
        var.registers(['node', 'val', 'key'])
        if var.get('t').callprop('isValidIdentifier', var.get('val')).neg():
            pass
    PyJs_validate_2305_._set_name('validate')
    PyJs_Object_2304_ = Js({'validate':PyJs_validate_2305_})
    PyJs_Object_2306_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2303_ = Js({'name':PyJs_Object_2304_,'decorators':PyJs_Object_2306_})
    PyJs_Object_2302_ = Js({'builder':Js([Js('name')]),'visitor':Js([Js('typeAnnotation')]),'aliases':Js([Js('Expression'), Js('LVal')]),'fields':PyJs_Object_2303_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('Identifier'), PyJs_Object_2302_)
    PyJs_Object_2309_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2310_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2311_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2308_ = Js({'test':PyJs_Object_2309_,'consequent':PyJs_Object_2310_,'alternate':PyJs_Object_2311_})
    PyJs_Object_2307_ = Js({'visitor':Js([Js('test'), Js('consequent'), Js('alternate')]),'aliases':Js([Js('Statement'), Js('Conditional')]),'fields':PyJs_Object_2308_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('IfStatement'), PyJs_Object_2307_)
    PyJs_Object_2314_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2315_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2313_ = Js({'label':PyJs_Object_2314_,'body':PyJs_Object_2315_})
    PyJs_Object_2312_ = Js({'visitor':Js([Js('label'), Js('body')]),'aliases':Js([Js('Statement')]),'fields':PyJs_Object_2313_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('LabeledStatement'), PyJs_Object_2312_)
    PyJs_Object_2318_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string'))})
    PyJs_Object_2317_ = Js({'value':PyJs_Object_2318_})
    PyJs_Object_2316_ = Js({'builder':Js([Js('value')]),'fields':PyJs_Object_2317_,'aliases':Js([Js('Expression'), Js('Pureish'), Js('Literal'), Js('Immutable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('StringLiteral'), PyJs_Object_2316_)
    PyJs_Object_2321_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('number'))})
    PyJs_Object_2320_ = Js({'value':PyJs_Object_2321_})
    PyJs_Object_2319_ = Js({'builder':Js([Js('value')]),'deprecatedAlias':Js('NumberLiteral'),'fields':PyJs_Object_2320_,'aliases':Js([Js('Expression'), Js('Pureish'), Js('Literal'), Js('Immutable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('NumericLiteral'), PyJs_Object_2319_)
    PyJs_Object_2322_ = Js({'aliases':Js([Js('Expression'), Js('Pureish'), Js('Literal'), Js('Immutable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('NullLiteral'), PyJs_Object_2322_)
    PyJs_Object_2325_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2324_ = Js({'value':PyJs_Object_2325_})
    PyJs_Object_2323_ = Js({'builder':Js([Js('value')]),'fields':PyJs_Object_2324_,'aliases':Js([Js('Expression'), Js('Pureish'), Js('Literal'), Js('Immutable')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('BooleanLiteral'), PyJs_Object_2323_)
    PyJs_Object_2328_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string'))})
    PyJs_Object_2329_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string')),'default':Js('')})
    PyJs_Object_2327_ = Js({'pattern':PyJs_Object_2328_,'flags':PyJs_Object_2329_})
    PyJs_Object_2326_ = Js({'builder':Js([Js('pattern'), Js('flags')]),'deprecatedAlias':Js('RegexLiteral'),'aliases':Js([Js('Expression'), Js('Literal')]),'fields':PyJs_Object_2327_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('RegExpLiteral'), PyJs_Object_2326_)
    PyJs_Object_2332_ = Js({'validate':var.get('_index2').get('assertOneOf').callprop('apply', var.get('undefined'), var.get('_constants').get('LOGICAL_OPERATORS'))})
    PyJs_Object_2333_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2334_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2331_ = Js({'operator':PyJs_Object_2332_,'left':PyJs_Object_2333_,'right':PyJs_Object_2334_})
    PyJs_Object_2330_ = Js({'builder':Js([Js('operator'), Js('left'), Js('right')]),'visitor':Js([Js('left'), Js('right')]),'aliases':Js([Js('Binary'), Js('Expression')]),'fields':PyJs_Object_2331_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('LogicalExpression'), PyJs_Object_2330_)
    PyJs_Object_2337_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    @Js
    def PyJs_validate_2339_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'val':val, 'this':this, 'arguments':arguments, 'key':key, 'validate':PyJs_validate_2339_}, var)
        var.registers(['node', 'expectedType', 'val', 'key'])
        var.put('expectedType', (Js('Expression') if var.get('node').get('computed') else Js('Identifier')))
        PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(var.get('expectedType'))(var.get('node'), var.get('key'), var.get('val'))
    PyJs_validate_2339_._set_name('validate')
    PyJs_Object_2338_ = Js({'validate':PyJs_validate_2339_})
    PyJs_Object_2340_ = Js({'default':Js(False)})
    PyJs_Object_2336_ = Js({'object':PyJs_Object_2337_,'property':PyJs_Object_2338_,'computed':PyJs_Object_2340_})
    PyJs_Object_2335_ = Js({'builder':Js([Js('object'), Js('property'), Js('computed')]),'visitor':Js([Js('object'), Js('property')]),'aliases':Js([Js('Expression'), Js('LVal')]),'fields':PyJs_Object_2336_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('MemberExpression'), PyJs_Object_2335_)
    PyJs_Object_2343_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2344_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'), Js('SpreadElement'))))})
    PyJs_Object_2342_ = Js({'callee':PyJs_Object_2343_,'arguments':PyJs_Object_2344_})
    PyJs_Object_2341_ = Js({'visitor':Js([Js('callee'), Js('arguments')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2342_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('NewExpression'), PyJs_Object_2341_)
    PyJs_Object_2347_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Directive')))),'default':Js([])})
    PyJs_Object_2348_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))))})
    PyJs_Object_2346_ = Js({'directives':PyJs_Object_2347_,'body':PyJs_Object_2348_})
    PyJs_Object_2345_ = Js({'visitor':Js([Js('directives'), Js('body')]),'builder':Js([Js('body'), Js('directives')]),'fields':PyJs_Object_2346_,'aliases':Js([Js('Scopable'), Js('BlockParent'), Js('Block'), Js('FunctionParent')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('Program'), PyJs_Object_2345_)
    PyJs_Object_2351_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('ObjectMethod'), Js('ObjectProperty'), Js('SpreadProperty'))))})
    PyJs_Object_2350_ = Js({'properties':PyJs_Object_2351_})
    PyJs_Object_2349_ = Js({'visitor':Js([Js('properties')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2350_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ObjectExpression'), PyJs_Object_2349_)
    PyJs_Object_2354_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string')), PyJsComma(Js(0.0),var.get('_index2').get('assertOneOf'))(Js('method'), Js('get'), Js('set'))),'default':Js('method')})
    PyJs_Object_2355_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    @Js
    def PyJs_validate_2357_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'val':val, 'this':this, 'arguments':arguments, 'key':key, 'validate':PyJs_validate_2357_}, var)
        var.registers(['node', 'val', 'key', 'expectedTypes'])
        var.put('expectedTypes', (Js([Js('Expression')]) if var.get('node').get('computed') else Js([Js('Identifier'), Js('StringLiteral'), Js('NumericLiteral')])))
        var.get('_index2').get('assertNodeType').callprop('apply', var.get('undefined'), var.get('expectedTypes'))(var.get('node'), var.get('key'), var.get('val'))
    PyJs_validate_2357_._set_name('validate')
    PyJs_Object_2356_ = Js({'validate':PyJs_validate_2357_})
    PyJs_Object_2358_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2359_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2360_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2361_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2353_ = Js({'kind':PyJs_Object_2354_,'computed':PyJs_Object_2355_,'key':PyJs_Object_2356_,'decorators':PyJs_Object_2358_,'body':PyJs_Object_2359_,'generator':PyJs_Object_2360_,'async':PyJs_Object_2361_})
    PyJs_Object_2352_ = Js({'builder':Js([Js('kind'), Js('key'), Js('params'), Js('body'), Js('computed')]),'fields':PyJs_Object_2353_,'visitor':Js([Js('key'), Js('params'), Js('body'), Js('decorators'), Js('returnType'), Js('typeParameters')]),'aliases':Js([Js('UserWhitespacable'), Js('Function'), Js('Scopable'), Js('BlockParent'), Js('FunctionParent'), Js('Method'), Js('ObjectMember')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ObjectMethod'), PyJs_Object_2352_)
    PyJs_Object_2364_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    @Js
    def PyJs_validate_2366_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'val':val, 'this':this, 'arguments':arguments, 'key':key, 'validate':PyJs_validate_2366_}, var)
        var.registers(['node', 'val', 'key', 'expectedTypes'])
        var.put('expectedTypes', (Js([Js('Expression')]) if var.get('node').get('computed') else Js([Js('Identifier'), Js('StringLiteral'), Js('NumericLiteral')])))
        var.get('_index2').get('assertNodeType').callprop('apply', var.get('undefined'), var.get('expectedTypes'))(var.get('node'), var.get('key'), var.get('val'))
    PyJs_validate_2366_._set_name('validate')
    PyJs_Object_2365_ = Js({'validate':PyJs_validate_2366_})
    PyJs_Object_2367_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2368_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    PyJs_Object_2369_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Decorator')))),'optional':var.get('true')})
    PyJs_Object_2363_ = Js({'computed':PyJs_Object_2364_,'key':PyJs_Object_2365_,'value':PyJs_Object_2367_,'shorthand':PyJs_Object_2368_,'decorators':PyJs_Object_2369_})
    PyJs_Object_2362_ = Js({'builder':Js([Js('key'), Js('value'), Js('computed'), Js('shorthand'), Js('decorators')]),'fields':PyJs_Object_2363_,'visitor':Js([Js('key'), Js('value'), Js('decorators')]),'aliases':Js([Js('UserWhitespacable'), Js('Property'), Js('ObjectMember')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ObjectProperty'), PyJs_Object_2362_)
    PyJs_Object_2372_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('LVal'))})
    PyJs_Object_2373_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2371_ = Js({'argument':PyJs_Object_2372_,'decorators':PyJs_Object_2373_})
    PyJs_Object_2370_ = Js({'visitor':Js([Js('argument'), Js('typeAnnotation')]),'aliases':Js([Js('LVal')]),'fields':PyJs_Object_2371_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('RestElement'), PyJs_Object_2370_)
    PyJs_Object_2376_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression')),'optional':var.get('true')})
    PyJs_Object_2375_ = Js({'argument':PyJs_Object_2376_})
    PyJs_Object_2374_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('Statement'), Js('Terminatorless'), Js('CompletionStatement')]),'fields':PyJs_Object_2375_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ReturnStatement'), PyJs_Object_2374_)
    PyJs_Object_2379_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))))})
    PyJs_Object_2378_ = Js({'expressions':PyJs_Object_2379_})
    PyJs_Object_2377_ = Js({'visitor':Js([Js('expressions')]),'fields':PyJs_Object_2378_,'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('SequenceExpression'), PyJs_Object_2377_)
    PyJs_Object_2382_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression')),'optional':var.get('true')})
    PyJs_Object_2383_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Statement'))))})
    PyJs_Object_2381_ = Js({'test':PyJs_Object_2382_,'consequent':PyJs_Object_2383_})
    PyJs_Object_2380_ = Js({'visitor':Js([Js('test'), Js('consequent')]),'fields':PyJs_Object_2381_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('SwitchCase'), PyJs_Object_2380_)
    PyJs_Object_2386_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2387_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('SwitchCase'))))})
    PyJs_Object_2385_ = Js({'discriminant':PyJs_Object_2386_,'cases':PyJs_Object_2387_})
    PyJs_Object_2384_ = Js({'visitor':Js([Js('discriminant'), Js('cases')]),'aliases':Js([Js('Statement'), Js('BlockParent'), Js('Scopable')]),'fields':PyJs_Object_2385_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('SwitchStatement'), PyJs_Object_2384_)
    PyJs_Object_2388_ = Js({'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ThisExpression'), PyJs_Object_2388_)
    PyJs_Object_2391_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2390_ = Js({'argument':PyJs_Object_2391_})
    PyJs_Object_2389_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('Statement'), Js('Terminatorless'), Js('CompletionStatement')]),'fields':PyJs_Object_2390_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('ThrowStatement'), PyJs_Object_2389_)
    PyJs_Object_2394_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2395_ = Js({'optional':var.get('true'),'handler':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2396_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2393_ = Js({'body':PyJs_Object_2394_,'handler':PyJs_Object_2395_,'finalizer':PyJs_Object_2396_})
    PyJs_Object_2392_ = Js({'visitor':Js([Js('block'), Js('handler'), Js('finalizer')]),'aliases':Js([Js('Statement')]),'fields':PyJs_Object_2393_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('TryStatement'), PyJs_Object_2392_)
    PyJs_Object_2399_ = Js({'default':var.get('true')})
    PyJs_Object_2400_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2401_ = Js({'validate':var.get('_index2').get('assertOneOf').callprop('apply', var.get('undefined'), var.get('_constants').get('UNARY_OPERATORS'))})
    PyJs_Object_2398_ = Js({'prefix':PyJs_Object_2399_,'argument':PyJs_Object_2400_,'operator':PyJs_Object_2401_})
    PyJs_Object_2397_ = Js({'builder':Js([Js('operator'), Js('argument'), Js('prefix')]),'fields':PyJs_Object_2398_,'visitor':Js([Js('argument')]),'aliases':Js([Js('UnaryLike'), Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('UnaryExpression'), PyJs_Object_2397_)
    PyJs_Object_2404_ = Js({'default':Js(False)})
    PyJs_Object_2405_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2406_ = Js({'validate':var.get('_index2').get('assertOneOf').callprop('apply', var.get('undefined'), var.get('_constants').get('UPDATE_OPERATORS'))})
    PyJs_Object_2403_ = Js({'prefix':PyJs_Object_2404_,'argument':PyJs_Object_2405_,'operator':PyJs_Object_2406_})
    PyJs_Object_2402_ = Js({'builder':Js([Js('operator'), Js('argument'), Js('prefix')]),'fields':PyJs_Object_2403_,'visitor':Js([Js('argument')]),'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('UpdateExpression'), PyJs_Object_2402_)
    PyJs_Object_2409_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('string')), PyJsComma(Js(0.0),var.get('_index2').get('assertOneOf'))(Js('var'), Js('let'), Js('const')))})
    PyJs_Object_2410_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('chain'))(PyJsComma(Js(0.0),var.get('_index2').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index2').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('VariableDeclarator'))))})
    PyJs_Object_2408_ = Js({'kind':PyJs_Object_2409_,'declarations':PyJs_Object_2410_})
    PyJs_Object_2407_ = Js({'builder':Js([Js('kind'), Js('declarations')]),'visitor':Js([Js('declarations')]),'aliases':Js([Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2408_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('VariableDeclaration'), PyJs_Object_2407_)
    PyJs_Object_2413_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('LVal'))})
    PyJs_Object_2414_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2412_ = Js({'id':PyJs_Object_2413_,'init':PyJs_Object_2414_})
    PyJs_Object_2411_ = Js({'visitor':Js([Js('id'), Js('init')]),'fields':PyJs_Object_2412_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('VariableDeclarator'), PyJs_Object_2411_)
    PyJs_Object_2417_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2418_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'), Js('Statement'))})
    PyJs_Object_2416_ = Js({'test':PyJs_Object_2417_,'body':PyJs_Object_2418_})
    PyJs_Object_2415_ = Js({'visitor':Js([Js('test'), Js('body')]),'aliases':Js([Js('Statement'), Js('BlockParent'), Js('Loop'), Js('While'), Js('Scopable')]),'fields':PyJs_Object_2416_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('WhileStatement'), PyJs_Object_2415_)
    PyJs_Object_2421_ = Js({'object':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2422_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index2').get('assertNodeType'))(Js('BlockStatement'), Js('Statement'))})
    PyJs_Object_2420_ = Js({'object':PyJs_Object_2421_,'body':PyJs_Object_2422_})
    PyJs_Object_2419_ = Js({'visitor':Js([Js('object'), Js('body')]),'aliases':Js([Js('Statement')]),'fields':PyJs_Object_2420_})
    PyJsComma(Js(0.0),var.get('_index3').get('default'))(Js('WithStatement'), PyJs_Object_2419_)
PyJs_anonymous_2220_._set_name('anonymous')
PyJs_Object_2423_ = Js({'../constants':Js(247.0),'../index':Js(258.0),'./index':Js(253.0)})
@Js
def PyJs_anonymous_2424_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_index', 'require', 'module', '_index2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2425_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2425_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    PyJs_Object_2428_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2429_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2430_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2427_ = Js({'left':PyJs_Object_2428_,'right':PyJs_Object_2429_,'decorators':PyJs_Object_2430_})
    PyJs_Object_2426_ = Js({'visitor':Js([Js('left'), Js('right')]),'aliases':Js([Js('Pattern'), Js('LVal')]),'fields':PyJs_Object_2427_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('AssignmentPattern'), PyJs_Object_2426_)
    PyJs_Object_2433_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))))})
    PyJs_Object_2434_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2432_ = Js({'elements':PyJs_Object_2433_,'decorators':PyJs_Object_2434_})
    PyJs_Object_2431_ = Js({'visitor':Js([Js('elements'), Js('typeAnnotation')]),'aliases':Js([Js('Pattern'), Js('LVal')]),'fields':PyJs_Object_2432_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ArrayPattern'), PyJs_Object_2431_)
    PyJs_Object_2437_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('LVal'))))})
    PyJs_Object_2438_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('BlockStatement'), Js('Expression'))})
    PyJs_Object_2439_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    PyJs_Object_2436_ = Js({'params':PyJs_Object_2437_,'body':PyJs_Object_2438_,'async':PyJs_Object_2439_})
    PyJs_Object_2435_ = Js({'builder':Js([Js('params'), Js('body'), Js('async')]),'visitor':Js([Js('params'), Js('body'), Js('returnType'), Js('typeParameters')]),'aliases':Js([Js('Scopable'), Js('Function'), Js('BlockParent'), Js('FunctionParent'), Js('Expression'), Js('Pureish')]),'fields':PyJs_Object_2436_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ArrowFunctionExpression'), PyJs_Object_2435_)
    PyJs_Object_2442_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('ClassMethod'), Js('ClassProperty'))))})
    PyJs_Object_2441_ = Js({'body':PyJs_Object_2442_})
    PyJs_Object_2440_ = Js({'visitor':Js([Js('body')]),'fields':PyJs_Object_2441_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassBody'), PyJs_Object_2440_)
    PyJs_Object_2445_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2446_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('ClassBody'))})
    PyJs_Object_2447_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2448_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2444_ = Js({'id':PyJs_Object_2445_,'body':PyJs_Object_2446_,'superClass':PyJs_Object_2447_,'decorators':PyJs_Object_2448_})
    PyJs_Object_2443_ = Js({'builder':Js([Js('id'), Js('superClass'), Js('body'), Js('decorators')]),'visitor':Js([Js('id'), Js('body'), Js('superClass'), Js('mixins'), Js('typeParameters'), Js('superTypeParameters'), Js('implements'), Js('decorators')]),'aliases':Js([Js('Scopable'), Js('Class'), Js('Statement'), Js('Declaration'), Js('Pureish')]),'fields':PyJs_Object_2444_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassDeclaration'), PyJs_Object_2443_)
    PyJs_Object_2451_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2452_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('ClassBody'))})
    PyJs_Object_2453_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2454_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2450_ = Js({'id':PyJs_Object_2451_,'body':PyJs_Object_2452_,'superClass':PyJs_Object_2453_,'decorators':PyJs_Object_2454_})
    PyJs_Object_2449_ = Js({'inherits':Js('ClassDeclaration'),'aliases':Js([Js('Scopable'), Js('Class'), Js('Expression'), Js('Pureish')]),'fields':PyJs_Object_2450_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassExpression'), PyJs_Object_2449_)
    PyJs_Object_2457_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('StringLiteral'))})
    PyJs_Object_2456_ = Js({'source':PyJs_Object_2457_})
    PyJs_Object_2455_ = Js({'visitor':Js([Js('source')]),'aliases':Js([Js('Statement'), Js('Declaration'), Js('ModuleDeclaration'), Js('ExportDeclaration')]),'fields':PyJs_Object_2456_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportAllDeclaration'), PyJs_Object_2455_)
    PyJs_Object_2460_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('FunctionDeclaration'), Js('ClassDeclaration'), Js('Expression'))})
    PyJs_Object_2459_ = Js({'declaration':PyJs_Object_2460_})
    PyJs_Object_2458_ = Js({'visitor':Js([Js('declaration')]),'aliases':Js([Js('Statement'), Js('Declaration'), Js('ModuleDeclaration'), Js('ExportDeclaration')]),'fields':PyJs_Object_2459_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportDefaultDeclaration'), PyJs_Object_2458_)
    PyJs_Object_2463_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Declaration')),'optional':var.get('true')})
    PyJs_Object_2464_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('ExportSpecifier'))))})
    PyJs_Object_2465_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('StringLiteral')),'optional':var.get('true')})
    PyJs_Object_2462_ = Js({'declaration':PyJs_Object_2463_,'specifiers':PyJs_Object_2464_,'source':PyJs_Object_2465_})
    PyJs_Object_2461_ = Js({'visitor':Js([Js('declaration'), Js('specifiers'), Js('source')]),'aliases':Js([Js('Statement'), Js('Declaration'), Js('ModuleDeclaration'), Js('ExportDeclaration')]),'fields':PyJs_Object_2462_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportNamedDeclaration'), PyJs_Object_2461_)
    PyJs_Object_2468_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2469_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2467_ = Js({'local':PyJs_Object_2468_,'exported':PyJs_Object_2469_})
    PyJs_Object_2466_ = Js({'visitor':Js([Js('local'), Js('exported')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2467_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportSpecifier'), PyJs_Object_2466_)
    PyJs_Object_2472_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('VariableDeclaration'), Js('LVal'))})
    PyJs_Object_2473_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2474_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2471_ = Js({'left':PyJs_Object_2472_,'right':PyJs_Object_2473_,'body':PyJs_Object_2474_})
    PyJs_Object_2470_ = Js({'visitor':Js([Js('left'), Js('right'), Js('body')]),'aliases':Js([Js('Scopable'), Js('Statement'), Js('For'), Js('BlockParent'), Js('Loop'), Js('ForXStatement')]),'fields':PyJs_Object_2471_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ForOfStatement'), PyJs_Object_2470_)
    PyJs_Object_2477_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('ImportSpecifier'), Js('ImportDefaultSpecifier'), Js('ImportNamespaceSpecifier'))))})
    PyJs_Object_2478_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('StringLiteral'))})
    PyJs_Object_2476_ = Js({'specifiers':PyJs_Object_2477_,'source':PyJs_Object_2478_})
    PyJs_Object_2475_ = Js({'visitor':Js([Js('specifiers'), Js('source')]),'aliases':Js([Js('Statement'), Js('Declaration'), Js('ModuleDeclaration')]),'fields':PyJs_Object_2476_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ImportDeclaration'), PyJs_Object_2475_)
    PyJs_Object_2481_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2480_ = Js({'local':PyJs_Object_2481_})
    PyJs_Object_2479_ = Js({'visitor':Js([Js('local')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2480_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ImportDefaultSpecifier'), PyJs_Object_2479_)
    PyJs_Object_2484_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2483_ = Js({'local':PyJs_Object_2484_})
    PyJs_Object_2482_ = Js({'visitor':Js([Js('local')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2483_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ImportNamespaceSpecifier'), PyJs_Object_2482_)
    PyJs_Object_2487_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2488_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2486_ = Js({'local':PyJs_Object_2487_,'imported':PyJs_Object_2488_})
    PyJs_Object_2485_ = Js({'visitor':Js([Js('local'), Js('imported')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2486_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ImportSpecifier'), PyJs_Object_2485_)
    PyJs_Object_2491_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('string'))})
    PyJs_Object_2492_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('string'))})
    PyJs_Object_2490_ = Js({'meta':PyJs_Object_2491_,'property':PyJs_Object_2492_})
    PyJs_Object_2489_ = Js({'visitor':Js([Js('meta'), Js('property')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2490_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('MetaProperty'), PyJs_Object_2489_)
    PyJs_Object_2495_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('string')), PyJsComma(Js(0.0),var.get('_index').get('assertOneOf'))(Js('get'), Js('set'), Js('method'), Js('constructor'))),'default':Js('method')})
    PyJs_Object_2496_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2497_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean'))})
    @Js
    def PyJs_validate_2499_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'val':val, 'this':this, 'arguments':arguments, 'key':key, 'validate':PyJs_validate_2499_}, var)
        var.registers(['node', 'val', 'key', 'expectedTypes'])
        var.put('expectedTypes', (Js([Js('Expression')]) if var.get('node').get('computed') else Js([Js('Identifier'), Js('StringLiteral'), Js('NumericLiteral')])))
        var.get('_index').get('assertNodeType').callprop('apply', var.get('undefined'), var.get('expectedTypes'))(var.get('node'), var.get('key'), var.get('val'))
    PyJs_validate_2499_._set_name('validate')
    PyJs_Object_2498_ = Js({'validate':PyJs_validate_2499_})
    PyJs_Object_2500_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('LVal'))))})
    PyJs_Object_2501_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2502_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2503_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2494_ = Js({'kind':PyJs_Object_2495_,'computed':PyJs_Object_2496_,'static':PyJs_Object_2497_,'key':PyJs_Object_2498_,'params':PyJs_Object_2500_,'body':PyJs_Object_2501_,'generator':PyJs_Object_2502_,'async':PyJs_Object_2503_})
    PyJs_Object_2493_ = Js({'aliases':Js([Js('Function'), Js('Scopable'), Js('BlockParent'), Js('FunctionParent'), Js('Method')]),'builder':Js([Js('kind'), Js('key'), Js('params'), Js('body'), Js('computed'), Js('static')]),'visitor':Js([Js('key'), Js('params'), Js('body'), Js('decorators'), Js('returnType'), Js('typeParameters')]),'fields':PyJs_Object_2494_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassMethod'), PyJs_Object_2493_)
    PyJs_Object_2506_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('RestProperty'), Js('Property'))))})
    PyJs_Object_2507_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Decorator'))))})
    PyJs_Object_2505_ = Js({'properties':PyJs_Object_2506_,'decorators':PyJs_Object_2507_})
    PyJs_Object_2504_ = Js({'visitor':Js([Js('properties'), Js('typeAnnotation')]),'aliases':Js([Js('Pattern'), Js('LVal')]),'fields':PyJs_Object_2505_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ObjectPattern'), PyJs_Object_2504_)
    PyJs_Object_2510_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2509_ = Js({'argument':PyJs_Object_2510_})
    PyJs_Object_2508_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('UnaryLike')]),'fields':PyJs_Object_2509_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('SpreadElement'), PyJs_Object_2508_)
    PyJs_Object_2511_ = Js({'aliases':Js([Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('Super'), PyJs_Object_2511_)
    PyJs_Object_2514_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2515_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('TemplateLiteral'))})
    PyJs_Object_2513_ = Js({'tag':PyJs_Object_2514_,'quasi':PyJs_Object_2515_})
    PyJs_Object_2512_ = Js({'visitor':Js([Js('tag'), Js('quasi')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2513_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TaggedTemplateExpression'), PyJs_Object_2512_)
    PyJs_Object_2518_ = Js({})
    PyJs_Object_2519_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    PyJs_Object_2517_ = Js({'value':PyJs_Object_2518_,'tail':PyJs_Object_2519_})
    PyJs_Object_2516_ = Js({'builder':Js([Js('value'), Js('tail')]),'fields':PyJs_Object_2517_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TemplateElement'), PyJs_Object_2516_)
    PyJs_Object_2522_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('TemplateElement'))))})
    PyJs_Object_2523_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))))})
    PyJs_Object_2521_ = Js({'quasis':PyJs_Object_2522_,'expressions':PyJs_Object_2523_})
    PyJs_Object_2520_ = Js({'visitor':Js([Js('quasis'), Js('expressions')]),'aliases':Js([Js('Expression'), Js('Literal')]),'fields':PyJs_Object_2521_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TemplateLiteral'), PyJs_Object_2520_)
    PyJs_Object_2526_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    PyJs_Object_2527_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2525_ = Js({'delegate':PyJs_Object_2526_,'argument':PyJs_Object_2527_})
    PyJs_Object_2524_ = Js({'builder':Js([Js('argument'), Js('delegate')]),'visitor':Js([Js('argument')]),'aliases':Js([Js('Expression'), Js('Terminatorless')]),'fields':PyJs_Object_2525_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('YieldExpression'), PyJs_Object_2524_)
PyJs_anonymous_2424_._set_name('anonymous')
PyJs_Object_2528_ = Js({'./index':Js(253.0)})
@Js
def PyJs_anonymous_2529_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_index', 'require', 'module', '_index2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2530_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2530_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    PyJs_Object_2533_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2532_ = Js({'argument':PyJs_Object_2533_})
    PyJs_Object_2531_ = Js({'builder':Js([Js('argument')]),'visitor':Js([Js('argument')]),'aliases':Js([Js('Expression'), Js('Terminatorless')]),'fields':PyJs_Object_2532_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('AwaitExpression'), PyJs_Object_2531_)
    PyJs_Object_2536_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('VariableDeclaration'), Js('LVal'))})
    PyJs_Object_2537_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2538_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Statement'))})
    PyJs_Object_2535_ = Js({'left':PyJs_Object_2536_,'right':PyJs_Object_2537_,'body':PyJs_Object_2538_})
    PyJs_Object_2534_ = Js({'visitor':Js([Js('left'), Js('right'), Js('body')]),'aliases':Js([Js('Scopable'), Js('Statement'), Js('For'), Js('BlockParent'), Js('Loop'), Js('ForXStatement')]),'fields':PyJs_Object_2535_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ForAwaitStatement'), PyJs_Object_2534_)
    PyJs_Object_2540_ = Js({})
    PyJs_Object_2539_ = Js({'visitor':Js([Js('object'), Js('callee')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2540_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('BindExpression'), PyJs_Object_2539_)
    PyJs_Object_2543_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2542_ = Js({'expression':PyJs_Object_2543_})
    PyJs_Object_2541_ = Js({'visitor':Js([Js('expression')]),'fields':PyJs_Object_2542_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('Decorator'), PyJs_Object_2541_)
    PyJs_Object_2546_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('BlockStatement'))})
    PyJs_Object_2545_ = Js({'body':PyJs_Object_2546_})
    PyJs_Object_2544_ = Js({'visitor':Js([Js('body')]),'aliases':Js([Js('Expression')]),'fields':PyJs_Object_2545_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DoExpression'), PyJs_Object_2544_)
    PyJs_Object_2549_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2548_ = Js({'exported':PyJs_Object_2549_})
    PyJs_Object_2547_ = Js({'visitor':Js([Js('exported')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2548_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportDefaultSpecifier'), PyJs_Object_2547_)
    PyJs_Object_2552_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Identifier'))})
    PyJs_Object_2551_ = Js({'exported':PyJs_Object_2552_})
    PyJs_Object_2550_ = Js({'visitor':Js([Js('exported')]),'aliases':Js([Js('ModuleSpecifier')]),'fields':PyJs_Object_2551_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExportNamespaceSpecifier'), PyJs_Object_2550_)
    PyJs_Object_2555_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('LVal'))})
    PyJs_Object_2554_ = Js({'argument':PyJs_Object_2555_})
    PyJs_Object_2553_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('UnaryLike')]),'fields':PyJs_Object_2554_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('RestProperty'), PyJs_Object_2553_)
    PyJs_Object_2558_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2557_ = Js({'argument':PyJs_Object_2558_})
    PyJs_Object_2556_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('UnaryLike')]),'fields':PyJs_Object_2557_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('SpreadProperty'), PyJs_Object_2556_)
PyJs_anonymous_2529_._set_name('anonymous')
PyJs_Object_2559_ = Js({'./index':Js(253.0)})
@Js
def PyJs_anonymous_2560_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_index', 'require', 'module', '_index2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2561_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2561_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    PyJs_Object_2563_ = Js({})
    PyJs_Object_2562_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2563_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('AnyTypeAnnotation'), PyJs_Object_2562_)
    PyJs_Object_2565_ = Js({})
    PyJs_Object_2564_ = Js({'visitor':Js([Js('elementType')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2565_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ArrayTypeAnnotation'), PyJs_Object_2564_)
    PyJs_Object_2567_ = Js({})
    PyJs_Object_2566_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2567_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('BooleanTypeAnnotation'), PyJs_Object_2566_)
    PyJs_Object_2569_ = Js({})
    PyJs_Object_2568_ = Js({'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2569_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('BooleanLiteralTypeAnnotation'), PyJs_Object_2568_)
    PyJs_Object_2571_ = Js({})
    PyJs_Object_2570_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2571_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('NullLiteralTypeAnnotation'), PyJs_Object_2570_)
    PyJs_Object_2573_ = Js({})
    PyJs_Object_2572_ = Js({'visitor':Js([Js('id'), Js('typeParameters')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2573_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassImplements'), PyJs_Object_2572_)
    PyJs_Object_2576_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean')),'default':Js(False)})
    PyJs_Object_2575_ = Js({'computed':PyJs_Object_2576_})
    PyJs_Object_2574_ = Js({'visitor':Js([Js('key'), Js('value'), Js('typeAnnotation'), Js('decorators')]),'builder':Js([Js('key'), Js('value'), Js('typeAnnotation'), Js('decorators'), Js('computed')]),'aliases':Js([Js('Property')]),'fields':PyJs_Object_2575_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ClassProperty'), PyJs_Object_2574_)
    PyJs_Object_2578_ = Js({})
    PyJs_Object_2577_ = Js({'visitor':Js([Js('id'), Js('typeParameters'), Js('extends'), Js('body')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2578_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareClass'), PyJs_Object_2577_)
    PyJs_Object_2580_ = Js({})
    PyJs_Object_2579_ = Js({'visitor':Js([Js('id')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2580_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareFunction'), PyJs_Object_2579_)
    PyJs_Object_2582_ = Js({})
    PyJs_Object_2581_ = Js({'visitor':Js([Js('id'), Js('typeParameters'), Js('extends'), Js('body')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2582_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareInterface'), PyJs_Object_2581_)
    PyJs_Object_2584_ = Js({})
    PyJs_Object_2583_ = Js({'visitor':Js([Js('id'), Js('body')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2584_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareModule'), PyJs_Object_2583_)
    PyJs_Object_2586_ = Js({})
    PyJs_Object_2585_ = Js({'visitor':Js([Js('typeAnnotation')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2586_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareModuleExports'), PyJs_Object_2585_)
    PyJs_Object_2588_ = Js({})
    PyJs_Object_2587_ = Js({'visitor':Js([Js('id'), Js('typeParameters'), Js('right')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2588_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareTypeAlias'), PyJs_Object_2587_)
    PyJs_Object_2590_ = Js({})
    PyJs_Object_2589_ = Js({'visitor':Js([Js('id')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2590_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('DeclareVariable'), PyJs_Object_2589_)
    PyJs_Object_2591_ = Js({'aliases':Js([Js('Flow')])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ExistentialTypeParam'), PyJs_Object_2591_)
    PyJs_Object_2593_ = Js({})
    PyJs_Object_2592_ = Js({'visitor':Js([Js('typeParameters'), Js('params'), Js('rest'), Js('returnType')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2593_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('FunctionTypeAnnotation'), PyJs_Object_2592_)
    PyJs_Object_2595_ = Js({})
    PyJs_Object_2594_ = Js({'visitor':Js([Js('name'), Js('typeAnnotation')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2595_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('FunctionTypeParam'), PyJs_Object_2594_)
    PyJs_Object_2597_ = Js({})
    PyJs_Object_2596_ = Js({'visitor':Js([Js('id'), Js('typeParameters')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2597_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('GenericTypeAnnotation'), PyJs_Object_2596_)
    PyJs_Object_2599_ = Js({})
    PyJs_Object_2598_ = Js({'visitor':Js([Js('id'), Js('typeParameters')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2599_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('InterfaceExtends'), PyJs_Object_2598_)
    PyJs_Object_2601_ = Js({})
    PyJs_Object_2600_ = Js({'visitor':Js([Js('id'), Js('typeParameters'), Js('extends'), Js('body')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2601_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('InterfaceDeclaration'), PyJs_Object_2600_)
    PyJs_Object_2603_ = Js({})
    PyJs_Object_2602_ = Js({'visitor':Js([Js('types')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2603_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('IntersectionTypeAnnotation'), PyJs_Object_2602_)
    PyJs_Object_2604_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('MixedTypeAnnotation'), PyJs_Object_2604_)
    PyJs_Object_2605_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('EmptyTypeAnnotation'), PyJs_Object_2605_)
    PyJs_Object_2607_ = Js({})
    PyJs_Object_2606_ = Js({'visitor':Js([Js('typeAnnotation')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2607_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('NullableTypeAnnotation'), PyJs_Object_2606_)
    PyJs_Object_2609_ = Js({})
    PyJs_Object_2608_ = Js({'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2609_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('NumericLiteralTypeAnnotation'), PyJs_Object_2608_)
    PyJs_Object_2611_ = Js({})
    PyJs_Object_2610_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2611_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('NumberTypeAnnotation'), PyJs_Object_2610_)
    PyJs_Object_2613_ = Js({})
    PyJs_Object_2612_ = Js({'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2613_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('StringLiteralTypeAnnotation'), PyJs_Object_2612_)
    PyJs_Object_2615_ = Js({})
    PyJs_Object_2614_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2615_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('StringTypeAnnotation'), PyJs_Object_2614_)
    PyJs_Object_2617_ = Js({})
    PyJs_Object_2616_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2617_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ThisTypeAnnotation'), PyJs_Object_2616_)
    PyJs_Object_2619_ = Js({})
    PyJs_Object_2618_ = Js({'visitor':Js([Js('types')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2619_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TupleTypeAnnotation'), PyJs_Object_2618_)
    PyJs_Object_2621_ = Js({})
    PyJs_Object_2620_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2621_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeofTypeAnnotation'), PyJs_Object_2620_)
    PyJs_Object_2623_ = Js({})
    PyJs_Object_2622_ = Js({'visitor':Js([Js('id'), Js('typeParameters'), Js('right')]),'aliases':Js([Js('Flow'), Js('FlowDeclaration'), Js('Statement'), Js('Declaration')]),'fields':PyJs_Object_2623_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeAlias'), PyJs_Object_2622_)
    PyJs_Object_2625_ = Js({})
    PyJs_Object_2624_ = Js({'visitor':Js([Js('typeAnnotation')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2625_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeAnnotation'), PyJs_Object_2624_)
    PyJs_Object_2627_ = Js({})
    PyJs_Object_2626_ = Js({'visitor':Js([Js('expression'), Js('typeAnnotation')]),'aliases':Js([Js('Flow'), Js('ExpressionWrapper'), Js('Expression')]),'fields':PyJs_Object_2627_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeCastExpression'), PyJs_Object_2626_)
    PyJs_Object_2629_ = Js({})
    PyJs_Object_2628_ = Js({'visitor':Js([Js('bound')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2629_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeParameter'), PyJs_Object_2628_)
    PyJs_Object_2631_ = Js({})
    PyJs_Object_2630_ = Js({'visitor':Js([Js('params')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2631_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeParameterDeclaration'), PyJs_Object_2630_)
    PyJs_Object_2633_ = Js({})
    PyJs_Object_2632_ = Js({'visitor':Js([Js('params')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2633_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('TypeParameterInstantiation'), PyJs_Object_2632_)
    PyJs_Object_2635_ = Js({})
    PyJs_Object_2634_ = Js({'visitor':Js([Js('properties'), Js('indexers'), Js('callProperties')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2635_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ObjectTypeAnnotation'), PyJs_Object_2634_)
    PyJs_Object_2637_ = Js({})
    PyJs_Object_2636_ = Js({'visitor':Js([Js('value')]),'aliases':Js([Js('Flow'), Js('UserWhitespacable')]),'fields':PyJs_Object_2637_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ObjectTypeCallProperty'), PyJs_Object_2636_)
    PyJs_Object_2639_ = Js({})
    PyJs_Object_2638_ = Js({'visitor':Js([Js('id'), Js('key'), Js('value')]),'aliases':Js([Js('Flow'), Js('UserWhitespacable')]),'fields':PyJs_Object_2639_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ObjectTypeIndexer'), PyJs_Object_2638_)
    PyJs_Object_2641_ = Js({})
    PyJs_Object_2640_ = Js({'visitor':Js([Js('key'), Js('value')]),'aliases':Js([Js('Flow'), Js('UserWhitespacable')]),'fields':PyJs_Object_2641_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ObjectTypeProperty'), PyJs_Object_2640_)
    PyJs_Object_2643_ = Js({})
    PyJs_Object_2642_ = Js({'visitor':Js([Js('id'), Js('qualification')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2643_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('QualifiedTypeIdentifier'), PyJs_Object_2642_)
    PyJs_Object_2645_ = Js({})
    PyJs_Object_2644_ = Js({'visitor':Js([Js('types')]),'aliases':Js([Js('Flow')]),'fields':PyJs_Object_2645_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('UnionTypeAnnotation'), PyJs_Object_2644_)
    PyJs_Object_2647_ = Js({})
    PyJs_Object_2646_ = Js({'aliases':Js([Js('Flow'), Js('FlowBaseAnnotation')]),'fields':PyJs_Object_2647_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('VoidTypeAnnotation'), PyJs_Object_2646_)
PyJs_anonymous_2560_._set_name('anonymous')
PyJs_Object_2648_ = Js({'./index':Js(253.0)})
@Js
def PyJs_anonymous_2649_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['chain', 'BUILDER_KEYS', 'defineType', 'assertNodeOrValueType', 'module', '_interopRequireDefault', '_getIterator2', '_getIterator3', 'assertEach', '_typeof2', '_typeof3', 'VISITOR_KEYS', 'NODE_FIELDS', 'assertOneOf', 'store', 'DEPRECATED_KEYS', 'exports', '_stringify2', 'assertNodeType', '_interopRequireWildcard', 'ALIAS_KEYS', 'getType', '_index', 'require', 'assertValueType', '_stringify', 't'])
    @Js
    def PyJsHoisted_assertNodeType_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['validate', '_len2', 'types', '_key2'])
        @Js
        def PyJsHoisted_validate_(node, key, val, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['node', '_isArray', '_iterator', 'key', 'val', 'valid', '_i', '_ref', 'type'])
            var.put('valid', Js(False))
            #for JS loop
            var.put('_iterator', var.get('types'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('type', var.get('_ref'))
                if var.get('t').callprop('is', var.get('type'), var.get('val')):
                    var.put('valid', var.get('true'))
                    break
            
            if var.get('valid').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create((((((((Js('Property ')+var.get('key'))+Js(' of '))+var.get('node').get('type'))+Js(' expected node to be of a type '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('types')))+Js(' '))+(Js('but instead got ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))((var.get('val') and var.get('val').get('type')))))))
                raise PyJsTempException
        PyJsHoisted_validate_.__name__ = 'validate'
        var.put('validate', PyJsHoisted_validate_)
        #for JS loop
        var.put('_len2', var.get('arguments').get('length'))
        var.put('types', var.get('Array')(var.get('_len2')))
        var.put('_key2', Js(0.0))
        while (var.get('_key2')<var.get('_len2')):
            try:
                var.get('types').put(var.get('_key2'), var.get('arguments').get(var.get('_key2')))
            finally:
                    (var.put('_key2',Js(var.get('_key2').to_number())+Js(1))-Js(1))
        pass
        var.get('validate').put('oneOfNodeTypes', var.get('types'))
        return var.get('validate')
    PyJsHoisted_assertNodeType_.__name__ = 'assertNodeType'
    var.put('assertNodeType', PyJsHoisted_assertNodeType_)
    @Js
    def PyJsHoisted_chain_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['validate', 'fns', '_len4', '_key4'])
        @Js
        def PyJsHoisted_validate_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['fn', '_i3', '_isArray3', '_ref3', '_iterator3'])
            #for JS loop
            var.put('_iterator3', var.get('fns'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref3', var.get('_i3').get('value'))
                var.put('fn', var.get('_ref3'))
                var.get('fn').callprop('apply', var.get('undefined'), var.get('arguments'))
            
        PyJsHoisted_validate_.__name__ = 'validate'
        var.put('validate', PyJsHoisted_validate_)
        #for JS loop
        var.put('_len4', var.get('arguments').get('length'))
        var.put('fns', var.get('Array')(var.get('_len4')))
        var.put('_key4', Js(0.0))
        while (var.get('_key4')<var.get('_len4')):
            try:
                var.get('fns').put(var.get('_key4'), var.get('arguments').get(var.get('_key4')))
            finally:
                    (var.put('_key4',Js(var.get('_key4').to_number())+Js(1))-Js(1))
        pass
        var.get('validate').put('chainOf', var.get('fns'))
        return var.get('validate')
    PyJsHoisted_chain_.__name__ = 'chain'
    var.put('chain', PyJsHoisted_chain_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2650_ = Js({})
            var.put('newObj', PyJs_Object_2650_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_getType_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        if var.get('Array').callprop('isArray', var.get('val')):
            return Js('array')
        else:
            if PyJsStrictEq(var.get('val'),var.get("null")):
                return Js('null')
            else:
                if PyJsStrictEq(var.get('val'),var.get('undefined')):
                    return Js('undefined')
                else:
                    return (Js('undefined') if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('undefined')) else PyJsComma(Js(0.0),var.get('_typeof3').get('default'))(var.get('val')))
    PyJsHoisted_getType_.__name__ = 'getType'
    var.put('getType', PyJsHoisted_getType_)
    @Js
    def PyJsHoisted_assertNodeOrValueType_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['validate', '_len3', '_key3', 'types'])
        @Js
        def PyJsHoisted_validate_(node, key, val, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['node', '_isArray2', 'val', '_ref2', '_i2', 'valid', 'key', 'type', '_iterator2'])
            var.put('valid', Js(False))
            #for JS loop
            var.put('_iterator2', var.get('types'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('type', var.get('_ref2'))
                if (PyJsStrictEq(var.get('getType')(var.get('val')),var.get('type')) or var.get('t').callprop('is', var.get('type'), var.get('val'))):
                    var.put('valid', var.get('true'))
                    break
            
            if var.get('valid').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create((((((((Js('Property ')+var.get('key'))+Js(' of '))+var.get('node').get('type'))+Js(' expected node to be of a type '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('types')))+Js(' '))+(Js('but instead got ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))((var.get('val') and var.get('val').get('type')))))))
                raise PyJsTempException
        PyJsHoisted_validate_.__name__ = 'validate'
        var.put('validate', PyJsHoisted_validate_)
        #for JS loop
        var.put('_len3', var.get('arguments').get('length'))
        var.put('types', var.get('Array')(var.get('_len3')))
        var.put('_key3', Js(0.0))
        while (var.get('_key3')<var.get('_len3')):
            try:
                var.get('types').put(var.get('_key3'), var.get('arguments').get(var.get('_key3')))
            finally:
                    (var.put('_key3',Js(var.get('_key3').to_number())+Js(1))-Js(1))
        pass
        var.get('validate').put('oneOfNodeOrValueTypes', var.get('types'))
        return var.get('validate')
    PyJsHoisted_assertNodeOrValueType_.__name__ = 'assertNodeOrValueType'
    var.put('assertNodeOrValueType', PyJsHoisted_assertNodeOrValueType_)
    @Js
    def PyJsHoisted_assertValueType_(type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['validate', 'type'])
        @Js
        def PyJsHoisted_validate_(node, key, val, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['node', 'valid', 'val', 'key'])
            var.put('valid', PyJsStrictEq(var.get('getType')(var.get('val')),var.get('type')))
            if var.get('valid').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create((((((Js('Property ')+var.get('key'))+Js(' expected type of '))+var.get('type'))+Js(' but got '))+var.get('getType')(var.get('val')))))
                raise PyJsTempException
        PyJsHoisted_validate_.__name__ = 'validate'
        var.put('validate', PyJsHoisted_validate_)
        pass
        var.get('validate').put('type', var.get('type'))
        return var.get('validate')
    PyJsHoisted_assertValueType_.__name__ = 'assertValueType'
    var.put('assertValueType', PyJsHoisted_assertValueType_)
    @Js
    def PyJsHoisted_assertOneOf_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['_len', 'vals', 'validate', '_key'])
        @Js
        def PyJsHoisted_validate_(node, key, val, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['node', 'val', 'key'])
            if (var.get('vals').callprop('indexOf', var.get('val'))<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('TypeError').create((((((Js('Property ')+var.get('key'))+Js(' expected value to be one of '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('vals')))+Js(' but got '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('val')))))
                raise PyJsTempException
        PyJsHoisted_validate_.__name__ = 'validate'
        var.put('validate', PyJsHoisted_validate_)
        #for JS loop
        var.put('_len', var.get('arguments').get('length'))
        var.put('vals', var.get('Array')(var.get('_len')))
        var.put('_key', Js(0.0))
        while (var.get('_key')<var.get('_len')):
            try:
                var.get('vals').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
            finally:
                    (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
        pass
        var.get('validate').put('oneOf', var.get('vals'))
        return var.get('validate')
    PyJsHoisted_assertOneOf_.__name__ = 'assertOneOf'
    var.put('assertOneOf', PyJsHoisted_assertOneOf_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2651_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2651_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_defineType_(type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['inherits', '_isArray4', '_i4', 'field', '_key5', 'key', '_iterator4', 'type', 'opts', '_ref4'])
        PyJs_Object_2657_ = Js({})
        var.put('opts', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_2657_))
        PyJs_Object_2658_ = Js({})
        var.put('inherits', ((var.get('opts').get('inherits') and var.get('store').get(var.get('opts').get('inherits'))) or PyJs_Object_2658_))
        PyJs_Object_2659_ = Js({})
        var.get('opts').put('fields', ((var.get('opts').get('fields') or var.get('inherits').get('fields')) or PyJs_Object_2659_))
        var.get('opts').put('visitor', ((var.get('opts').get('visitor') or var.get('inherits').get('visitor')) or Js([])))
        var.get('opts').put('aliases', ((var.get('opts').get('aliases') or var.get('inherits').get('aliases')) or Js([])))
        var.get('opts').put('builder', (((var.get('opts').get('builder') or var.get('inherits').get('builder')) or var.get('opts').get('visitor')) or Js([])))
        if var.get('opts').get('deprecatedAlias'):
            var.get('DEPRECATED_KEYS').put(var.get('opts').get('deprecatedAlias'), var.get('type'))
        #for JS loop
        var.put('_iterator4', var.get('opts').get('visitor').callprop('concat', var.get('opts').get('builder')))
        var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
        var.put('_i4', Js(0.0))
        var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
        while 1:
            pass
            if var.get('_isArray4'):
                if (var.get('_i4')>=var.get('_iterator4').get('length')):
                    break
                var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i4', var.get('_iterator4').callprop('next'))
                if var.get('_i4').get('done'):
                    break
                var.put('_ref4', var.get('_i4').get('value'))
            var.put('_key5', var.get('_ref4'))
            PyJs_Object_2660_ = Js({})
            var.get('opts').get('fields').put(var.get('_key5'), (var.get('opts').get('fields').get(var.get('_key5')) or PyJs_Object_2660_))
        
        for PyJsTemp in var.get('opts').get('fields'):
            var.put('key', PyJsTemp)
            var.put('field', var.get('opts').get('fields').get(var.get('key')))
            if PyJsStrictEq(var.get('opts').get('builder').callprop('indexOf', var.get('key')),(-Js(1.0))):
                var.get('field').put('optional', var.get('true'))
            if PyJsStrictEq(var.get('field').get('default'),var.get('undefined')):
                var.get('field').put('default', var.get("null"))
            else:
                if var.get('field').get('validate').neg():
                    var.get('field').put('validate', var.get('assertValueType')(var.get('getType')(var.get('field').get('default'))))
        var.get('VISITOR_KEYS').put(var.get('type'), var.get('opts').get('visitor'))
        var.get('BUILDER_KEYS').put(var.get('type'), var.get('opts').get('builder'))
        var.get('NODE_FIELDS').put(var.get('type'), var.get('opts').get('fields'))
        var.get('ALIAS_KEYS').put(var.get('type'), var.get('opts').get('aliases'))
        var.get('store').put(var.get('type'), var.get('opts'))
    PyJsHoisted_defineType_.__name__ = 'defineType'
    var.put('defineType', PyJsHoisted_defineType_)
    @Js
    def PyJsHoisted_assertEach_(callback, this, arguments, var=var):
        var = Scope({'this':this, 'callback':callback, 'arguments':arguments}, var)
        var.registers(['callback', 'validator'])
        @Js
        def PyJsHoisted_validator_(node, key, val, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
            var.registers(['i', 'node', 'val', 'key'])
            if var.get('Array').callprop('isArray', var.get('val')).neg():
                return var.get('undefined')
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('val').get('length')):
                try:
                    var.get('callback')(var.get('node'), (((var.get('key')+Js('['))+var.get('i'))+Js(']')), var.get('val').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_validator_.__name__ = 'validator'
        var.put('validator', PyJsHoisted_validator_)
        pass
        var.get('validator').put('each', var.get('callback'))
        return var.get('validator')
    PyJsHoisted_assertEach_.__name__ = 'assertEach'
    var.put('assertEach', PyJsHoisted_assertEach_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('DEPRECATED_KEYS', var.get('exports').put('BUILDER_KEYS', var.get('exports').put('NODE_FIELDS', var.get('exports').put('ALIAS_KEYS', var.get('exports').put('VISITOR_KEYS', var.get('undefined'))))))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.put('_typeof2', var.get('require')(Js('babel-runtime/helpers/typeof')))
    var.put('_typeof3', var.get('_interopRequireDefault')(var.get('_typeof2')))
    var.get('exports').put('assertEach', var.get('assertEach'))
    var.get('exports').put('assertOneOf', var.get('assertOneOf'))
    var.get('exports').put('assertNodeType', var.get('assertNodeType'))
    var.get('exports').put('assertNodeOrValueType', var.get('assertNodeOrValueType'))
    var.get('exports').put('assertValueType', var.get('assertValueType'))
    var.get('exports').put('chain', var.get('chain'))
    var.get('exports').put('default', var.get('defineType'))
    var.put('_index', var.get('require')(Js('../index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    pass
    pass
    PyJs_Object_2652_ = Js({})
    var.put('VISITOR_KEYS', var.get('exports').put('VISITOR_KEYS', PyJs_Object_2652_))
    PyJs_Object_2653_ = Js({})
    var.put('ALIAS_KEYS', var.get('exports').put('ALIAS_KEYS', PyJs_Object_2653_))
    PyJs_Object_2654_ = Js({})
    var.put('NODE_FIELDS', var.get('exports').put('NODE_FIELDS', PyJs_Object_2654_))
    PyJs_Object_2655_ = Js({})
    var.put('BUILDER_KEYS', var.get('exports').put('BUILDER_KEYS', PyJs_Object_2655_))
    PyJs_Object_2656_ = Js({})
    var.put('DEPRECATED_KEYS', var.get('exports').put('DEPRECATED_KEYS', PyJs_Object_2656_))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJs_Object_2661_ = Js({})
    var.put('store', PyJs_Object_2661_)
PyJs_anonymous_2649_._set_name('anonymous')
PyJs_Object_2662_ = Js({'../index':Js(258.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/helpers/typeof':Js(114.0)})
@Js
def PyJs_anonymous_2663_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    var.get('require')(Js('./index'))
    var.get('require')(Js('./core'))
    var.get('require')(Js('./es2015'))
    var.get('require')(Js('./flow'))
    var.get('require')(Js('./jsx'))
    var.get('require')(Js('./misc'))
    var.get('require')(Js('./experimental'))
PyJs_anonymous_2663_._set_name('anonymous')
PyJs_Object_2664_ = Js({'./core':Js(249.0),'./es2015':Js(250.0),'./experimental':Js(251.0),'./flow':Js(252.0),'./index':Js(253.0),'./jsx':Js(255.0),'./misc':Js(256.0)})
@Js
def PyJs_anonymous_2665_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_index', 'require', 'module', '_index2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2666_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2666_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    PyJs_Object_2669_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'), Js('JSXNamespacedName'))})
    PyJs_Object_2670_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXElement'), Js('StringLiteral'), Js('JSXExpressionContainer'))})
    PyJs_Object_2668_ = Js({'name':PyJs_Object_2669_,'value':PyJs_Object_2670_})
    PyJs_Object_2667_ = Js({'visitor':Js([Js('name'), Js('value')]),'aliases':Js([Js('JSX'), Js('Immutable')]),'fields':PyJs_Object_2668_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXAttribute'), PyJs_Object_2667_)
    PyJs_Object_2673_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'), Js('JSXMemberExpression'))})
    PyJs_Object_2672_ = Js({'name':PyJs_Object_2673_})
    PyJs_Object_2671_ = Js({'visitor':Js([Js('name')]),'aliases':Js([Js('JSX'), Js('Immutable')]),'fields':PyJs_Object_2672_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXClosingElement'), PyJs_Object_2671_)
    PyJs_Object_2676_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXOpeningElement'))})
    PyJs_Object_2677_ = Js({'optional':var.get('true'),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXClosingElement'))})
    PyJs_Object_2678_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXText'), Js('JSXExpressionContainer'), Js('JSXElement'))))})
    PyJs_Object_2675_ = Js({'openingElement':PyJs_Object_2676_,'closingElement':PyJs_Object_2677_,'children':PyJs_Object_2678_})
    PyJs_Object_2674_ = Js({'builder':Js([Js('openingElement'), Js('closingElement'), Js('children'), Js('selfClosing')]),'visitor':Js([Js('openingElement'), Js('children'), Js('closingElement')]),'aliases':Js([Js('JSX'), Js('Immutable'), Js('Expression')]),'fields':PyJs_Object_2675_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXElement'), PyJs_Object_2674_)
    PyJs_Object_2679_ = Js({'aliases':Js([Js('JSX'), Js('Expression')])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXEmptyExpression'), PyJs_Object_2679_)
    PyJs_Object_2682_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2681_ = Js({'expression':PyJs_Object_2682_})
    PyJs_Object_2680_ = Js({'visitor':Js([Js('expression')]),'aliases':Js([Js('JSX'), Js('Immutable')]),'fields':PyJs_Object_2681_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXExpressionContainer'), PyJs_Object_2680_)
    PyJs_Object_2685_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('string'))})
    PyJs_Object_2684_ = Js({'name':PyJs_Object_2685_})
    PyJs_Object_2683_ = Js({'builder':Js([Js('name')]),'aliases':Js([Js('JSX'), Js('Expression')]),'fields':PyJs_Object_2684_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXIdentifier'), PyJs_Object_2683_)
    PyJs_Object_2688_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXMemberExpression'), Js('JSXIdentifier'))})
    PyJs_Object_2689_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'))})
    PyJs_Object_2687_ = Js({'object':PyJs_Object_2688_,'property':PyJs_Object_2689_})
    PyJs_Object_2686_ = Js({'visitor':Js([Js('object'), Js('property')]),'aliases':Js([Js('JSX'), Js('Expression')]),'fields':PyJs_Object_2687_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXMemberExpression'), PyJs_Object_2686_)
    PyJs_Object_2692_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'))})
    PyJs_Object_2693_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'))})
    PyJs_Object_2691_ = Js({'namespace':PyJs_Object_2692_,'name':PyJs_Object_2693_})
    PyJs_Object_2690_ = Js({'visitor':Js([Js('namespace'), Js('name')]),'aliases':Js([Js('JSX')]),'fields':PyJs_Object_2691_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXNamespacedName'), PyJs_Object_2690_)
    PyJs_Object_2696_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXIdentifier'), Js('JSXMemberExpression'))})
    PyJs_Object_2697_ = Js({'default':Js(False),'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('boolean'))})
    PyJs_Object_2698_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('chain'))(PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('array')), PyJsComma(Js(0.0),var.get('_index').get('assertEach'))(PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('JSXAttribute'), Js('JSXSpreadAttribute'))))})
    PyJs_Object_2695_ = Js({'name':PyJs_Object_2696_,'selfClosing':PyJs_Object_2697_,'attributes':PyJs_Object_2698_})
    PyJs_Object_2694_ = Js({'builder':Js([Js('name'), Js('attributes'), Js('selfClosing')]),'visitor':Js([Js('name'), Js('attributes')]),'aliases':Js([Js('JSX'), Js('Immutable')]),'fields':PyJs_Object_2695_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXOpeningElement'), PyJs_Object_2694_)
    PyJs_Object_2701_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2700_ = Js({'argument':PyJs_Object_2701_})
    PyJs_Object_2699_ = Js({'visitor':Js([Js('argument')]),'aliases':Js([Js('JSX')]),'fields':PyJs_Object_2700_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXSpreadAttribute'), PyJs_Object_2699_)
    PyJs_Object_2704_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertValueType'))(Js('string'))})
    PyJs_Object_2703_ = Js({'value':PyJs_Object_2704_})
    PyJs_Object_2702_ = Js({'aliases':Js([Js('JSX'), Js('Immutable')]),'builder':Js([Js('value')]),'fields':PyJs_Object_2703_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('JSXText'), PyJs_Object_2702_)
PyJs_anonymous_2665_._set_name('anonymous')
PyJs_Object_2705_ = Js({'./index':Js(253.0)})
@Js
def PyJs_anonymous_2706_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_index', 'require', 'module', '_index2', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2707_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2707_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    Js('use strict')
    var.put('_index', var.get('require')(Js('./index')))
    var.put('_index2', var.get('_interopRequireDefault')(var.get('_index')))
    pass
    PyJs_Object_2708_ = Js({'visitor':Js([])})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('Noop'), PyJs_Object_2708_)
    PyJs_Object_2711_ = Js({'validate':PyJsComma(Js(0.0),var.get('_index').get('assertNodeType'))(Js('Expression'))})
    PyJs_Object_2710_ = Js({'expression':PyJs_Object_2711_})
    PyJs_Object_2709_ = Js({'visitor':Js([Js('expression')]),'aliases':Js([Js('Expression'), Js('ExpressionWrapper')]),'fields':PyJs_Object_2710_})
    PyJsComma(Js(0.0),var.get('_index2').get('default'))(Js('ParenthesizedExpression'), PyJs_Object_2709_)
PyJs_anonymous_2706_._set_name('anonymous')
PyJs_Object_2712_ = Js({'./index':Js(253.0)})
@Js
def PyJs_anonymous_2713_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', 'removeTypeDuplicates', 'createUnionTypeAnnotation', 'require', '_index', 'createTypeAnnotationBasedOnTypeof', 'module', 't'])
    @Js
    def PyJsHoisted_createTypeAnnotationBasedOnTypeof_(type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['type'])
        if PyJsStrictEq(var.get('type'),Js('string')):
            return var.get('t').callprop('stringTypeAnnotation')
        else:
            if PyJsStrictEq(var.get('type'),Js('number')):
                return var.get('t').callprop('numberTypeAnnotation')
            else:
                if PyJsStrictEq(var.get('type'),Js('undefined')):
                    return var.get('t').callprop('voidTypeAnnotation')
                else:
                    if PyJsStrictEq(var.get('type'),Js('boolean')):
                        return var.get('t').callprop('booleanTypeAnnotation')
                    else:
                        if PyJsStrictEq(var.get('type'),Js('function')):
                            return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Function')))
                        else:
                            if PyJsStrictEq(var.get('type'),Js('object')):
                                return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Object')))
                            else:
                                if PyJsStrictEq(var.get('type'),Js('symbol')):
                                    return var.get('t').callprop('genericTypeAnnotation', var.get('t').callprop('identifier', Js('Symbol')))
                                else:
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid typeof value')))
                                    raise PyJsTempException
    PyJsHoisted_createTypeAnnotationBasedOnTypeof_.__name__ = 'createTypeAnnotationBasedOnTypeof'
    var.put('createTypeAnnotationBasedOnTypeof', PyJsHoisted_createTypeAnnotationBasedOnTypeof_)
    @Js
    def PyJsHoisted_removeTypeDuplicates_(nodes, this, arguments, var=var):
        var = Scope({'this':this, 'nodes':nodes, 'arguments':arguments}, var)
        var.registers(['node', 'name', 'i', 'existing', 'typeGroups', 'bases', 'generics', 'nodes', '_name', 'type', 'types'])
        PyJs_Object_2715_ = Js({})
        var.put('generics', PyJs_Object_2715_)
        PyJs_Object_2716_ = Js({})
        var.put('bases', PyJs_Object_2716_)
        var.put('typeGroups', Js([]))
        var.put('types', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('nodes').get('length')):
            try:
                var.put('node', var.get('nodes').get(var.get('i')))
                if var.get('node').neg():
                    continue
                if (var.get('types').callprop('indexOf', var.get('node'))>=Js(0.0)):
                    continue
                if var.get('t').callprop('isAnyTypeAnnotation', var.get('node')):
                    return Js([var.get('node')])
                if var.get('t').callprop('isFlowBaseAnnotation', var.get('node')):
                    var.get('bases').put(var.get('node').get('type'), var.get('node'))
                    continue
                if var.get('t').callprop('isUnionTypeAnnotation', var.get('node')):
                    if (var.get('typeGroups').callprop('indexOf', var.get('node').get('types'))<Js(0.0)):
                        var.put('nodes', var.get('nodes').callprop('concat', var.get('node').get('types')))
                        var.get('typeGroups').callprop('push', var.get('node').get('types'))
                    continue
                if var.get('t').callprop('isGenericTypeAnnotation', var.get('node')):
                    var.put('name', var.get('node').get('id').get('name'))
                    if var.get('generics').get(var.get('name')):
                        var.put('existing', var.get('generics').get(var.get('name')))
                        if var.get('existing').get('typeParameters'):
                            if var.get('node').get('typeParameters'):
                                var.get('existing').get('typeParameters').put('params', var.get('removeTypeDuplicates')(var.get('existing').get('typeParameters').get('params').callprop('concat', var.get('node').get('typeParameters').get('params'))))
                        else:
                            var.put('existing', var.get('node').get('typeParameters'))
                    else:
                        var.get('generics').put(var.get('name'), var.get('node'))
                    continue
                var.get('types').callprop('push', var.get('node'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        for PyJsTemp in var.get('bases'):
            var.put('type', PyJsTemp)
            var.get('types').callprop('push', var.get('bases').get(var.get('type')))
        for PyJsTemp in var.get('generics'):
            var.put('_name', PyJsTemp)
            var.get('types').callprop('push', var.get('generics').get(var.get('_name')))
        return var.get('types')
    PyJsHoisted_removeTypeDuplicates_.__name__ = 'removeTypeDuplicates'
    var.put('removeTypeDuplicates', PyJsHoisted_removeTypeDuplicates_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2714_ = Js({})
            var.put('newObj', PyJs_Object_2714_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_createUnionTypeAnnotation_(types, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'types':types}, var)
        var.registers(['flattened', 'types'])
        var.put('flattened', var.get('removeTypeDuplicates')(var.get('types')))
        if PyJsStrictEq(var.get('flattened').get('length'),Js(1.0)):
            return var.get('flattened').get('0')
        else:
            return var.get('t').callprop('unionTypeAnnotation', var.get('flattened'))
    PyJsHoisted_createUnionTypeAnnotation_.__name__ = 'createUnionTypeAnnotation'
    var.put('createUnionTypeAnnotation', PyJsHoisted_createUnionTypeAnnotation_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('createUnionTypeAnnotation', var.get('createUnionTypeAnnotation'))
    var.get('exports').put('removeTypeDuplicates', var.get('removeTypeDuplicates'))
    var.get('exports').put('createTypeAnnotationBasedOnTypeof', var.get('createTypeAnnotationBasedOnTypeof'))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    pass
    pass
    pass
    pass
PyJs_anonymous_2713_._set_name('anonymous')
PyJs_Object_2717_ = Js({'./index':Js(258.0)})
@Js
def PyJs_anonymous_2718_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['inherits', '_validators', '_constants', '_each', '_definitions', 'is', 'inheritTrailingComments', '_getOwnPropertySymbols', 'module', '_interopRequireDefault', '_compact', 'inheritInnerComments', 'isType', '_toFastProperties2', '_clone', 'cloneDeep', '_getIterator2', '_getIterator3', '_flow', 'assertNode', '_uniq2', 'inheritLeadingComments', 'inheritsComments', '_inheritComments', 'removeProperties', '_keys', '_getOwnPropertySymbols2', '_uniq', '_each2', 'type', 'clone', 'TYPES', 't', 'removeComments', '_type', '_stringify2', '_interopRequireWildcard', 'buildMatchMemberExpression', 'removePropertiesDeep', '_react', '_keys2', 'appendToMemberExpression', '_loop', 'validate', '_converters', 'traverseFast', '_retrievers', 'prependToMemberExpression', 'exports', '_react2', 'ensureBlock', 'registerType', '_toFastProperties', '_clone2', 'cloneWithoutLoc', '_stringify', '_compact2', 'shallowEqual', 'isNode', 'CLEAR_KEYS', 'CLEAR_KEYS_PLUS_COMMENTS', 'require'])
    @Js
    def PyJsHoisted_inherits_(child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'child':child}, var)
        var.registers(['_isArray6', '_isArray5', 'parent', '_i6', '_ref5', 'child', '_key3', '_key2', 'key', '_ref6', '_iterator5', '_iterator6', '_i5'])
        if (var.get('child').neg() or var.get('parent').neg()):
            return var.get('child')
        #for JS loop
        var.put('_iterator5', var.get('t').get('INHERIT_KEYS').get('optional'))
        var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
        var.put('_i5', Js(0.0))
        var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator5'))))
        while 1:
            pass
            if var.get('_isArray5'):
                if (var.get('_i5')>=var.get('_iterator5').get('length')):
                    break
                var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i5', var.get('_iterator5').callprop('next'))
                if var.get('_i5').get('done'):
                    break
                var.put('_ref5', var.get('_i5').get('value'))
            var.put('_key2', var.get('_ref5'))
            if (var.get('child').get(var.get('_key2'))==var.get("null")):
                var.get('child').put(var.get('_key2'), var.get('parent').get(var.get('_key2')))
        
        for PyJsTemp in var.get('parent'):
            var.put('key', PyJsTemp)
            if PyJsStrictEq(var.get('key').get('0'),Js('_')):
                var.get('child').put(var.get('key'), var.get('parent').get(var.get('key')))
        #for JS loop
        var.put('_iterator6', var.get('t').get('INHERIT_KEYS').get('force'))
        var.put('_isArray6', var.get('Array').callprop('isArray', var.get('_iterator6')))
        var.put('_i6', Js(0.0))
        var.put('_iterator6', (var.get('_iterator6') if var.get('_isArray6') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator6'))))
        while 1:
            pass
            if var.get('_isArray6'):
                if (var.get('_i6')>=var.get('_iterator6').get('length')):
                    break
                var.put('_ref6', var.get('_iterator6').get((var.put('_i6',Js(var.get('_i6').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i6', var.get('_iterator6').callprop('next'))
                if var.get('_i6').get('done'):
                    break
                var.put('_ref6', var.get('_i6').get('value'))
            var.put('_key3', var.get('_ref6'))
            var.get('child').put(var.get('_key3'), var.get('parent').get(var.get('_key3')))
        
        var.get('t').callprop('inheritsComments', var.get('child'), var.get('parent'))
        return var.get('child')
    PyJsHoisted_inherits_.__name__ = 'inherits'
    var.put('inherits', PyJsHoisted_inherits_)
    @Js
    def PyJsHoisted_buildMatchMemberExpression_(match, allowPartial, this, arguments, var=var):
        var = Scope({'this':this, 'allowPartial':allowPartial, 'match':match, 'arguments':arguments}, var)
        var.registers(['parts', 'allowPartial', 'match'])
        var.put('parts', var.get('match').callprop('split', Js('.')))
        @Js
        def PyJs_anonymous_2823_(member, this, arguments, var=var):
            var = Scope({'member':member, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'node', 'search', 'member'])
            if var.get('t').callprop('isMemberExpression', var.get('member')).neg():
                return Js(False)
            var.put('search', Js([var.get('member')]))
            var.put('i', Js(0.0))
            while var.get('search').get('length'):
                var.put('node', var.get('search').callprop('shift'))
                if (var.get('allowPartial') and PyJsStrictEq(var.get('i'),var.get('parts').get('length'))):
                    return var.get('true')
                if var.get('t').callprop('isIdentifier', var.get('node')):
                    if PyJsStrictNeq(var.get('parts').get(var.get('i')),var.get('node').get('name')):
                        return Js(False)
                else:
                    if var.get('t').callprop('isStringLiteral', var.get('node')):
                        if PyJsStrictNeq(var.get('parts').get(var.get('i')),var.get('node').get('value')):
                            return Js(False)
                    else:
                        if var.get('t').callprop('isMemberExpression', var.get('node')):
                            if (var.get('node').get('computed') and var.get('t').callprop('isStringLiteral', var.get('node').get('property')).neg()):
                                return Js(False)
                            else:
                                var.get('search').callprop('push', var.get('node').get('object'))
                                var.get('search').callprop('push', var.get('node').get('property'))
                                continue
                        else:
                            return Js(False)
                if (var.put('i',Js(var.get('i').to_number())+Js(1))>var.get('parts').get('length')):
                    return Js(False)
            return var.get('true')
        PyJs_anonymous_2823_._set_name('anonymous')
        return PyJs_anonymous_2823_
    PyJsHoisted_buildMatchMemberExpression_.__name__ = 'buildMatchMemberExpression'
    var.put('buildMatchMemberExpression', PyJsHoisted_buildMatchMemberExpression_)
    @Js
    def PyJsHoisted_cloneDeep_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'newNode', 'val', 'key'])
        PyJs_Object_2822_ = Js({})
        var.put('newNode', PyJs_Object_2822_)
        for PyJsTemp in var.get('node'):
            var.put('key', PyJsTemp)
            if PyJsStrictEq(var.get('key').get('0'),Js('_')):
                continue
            var.put('val', var.get('node').get(var.get('key')))
            if var.get('val'):
                if var.get('val').get('type'):
                    var.put('val', var.get('t').callprop('cloneDeep', var.get('val')))
                else:
                    if var.get('Array').callprop('isArray', var.get('val')):
                        var.put('val', var.get('val').callprop('map', var.get('t').get('cloneDeep')))
            var.get('newNode').put(var.get('key'), var.get('val'))
        return var.get('newNode')
    PyJsHoisted_cloneDeep_.__name__ = 'cloneDeep'
    var.put('cloneDeep', PyJsHoisted_cloneDeep_)
    @Js
    def PyJsHoisted_is_(type, node, opts, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'type':type, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['matches', 'node', 'type', 'opts'])
        if var.get('node').neg():
            return Js(False)
        var.put('matches', var.get('isType')(var.get('node').get('type'), var.get('type')))
        if var.get('matches').neg():
            return Js(False)
        if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('undefined')):
            return var.get('true')
        else:
            return var.get('t').callprop('shallowEqual', var.get('node'), var.get('opts'))
    PyJsHoisted_is_.__name__ = 'is'
    var.put('is', PyJsHoisted_is_)
    @Js
    def PyJsHoisted_inheritTrailingComments_(child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'child':child}, var)
        var.registers(['parent', 'child'])
        var.get('_inheritComments')(Js('trailingComments'), var.get('child'), var.get('parent'))
    PyJsHoisted_inheritTrailingComments_.__name__ = 'inheritTrailingComments'
    var.put('inheritTrailingComments', PyJsHoisted_inheritTrailingComments_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2809_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2809_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isType_(nodeType, targetType, this, arguments, var=var):
        var = Scope({'this':this, 'targetType':targetType, 'nodeType':nodeType, 'arguments':arguments}, var)
        var.registers(['targetType', '_isArray', '_iterator', 'alias', '_i', 'nodeType', '_ref', 'aliases'])
        if PyJsStrictEq(var.get('nodeType'),var.get('targetType')):
            return var.get('true')
        if var.get('t').get('ALIAS_KEYS').get(var.get('targetType')):
            return Js(False)
        var.put('aliases', var.get('t').get('FLIPPED_ALIAS_KEYS').get(var.get('targetType')))
        if var.get('aliases'):
            if PyJsStrictEq(var.get('aliases').get('0'),var.get('nodeType')):
                return var.get('true')
            #for JS loop
            var.put('_iterator', var.get('aliases'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('alias', var.get('_ref'))
                if PyJsStrictEq(var.get('nodeType'),var.get('alias')):
                    return var.get('true')
            
        return Js(False)
    PyJsHoisted_isType_.__name__ = 'isType'
    var.put('isType', PyJsHoisted_isType_)
    @Js
    def PyJsHoisted_shallowEqual_(actual, expected, this, arguments, var=var):
        var = Scope({'expected':expected, 'this':this, 'actual':actual, 'arguments':arguments}, var)
        var.registers(['_isArray3', 'keys', '_ref3', '_i3', 'key', 'expected', 'actual', '_iterator3'])
        var.put('keys', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('expected')))
        #for JS loop
        var.put('_iterator3', var.get('keys'))
        var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
        var.put('_i3', Js(0.0))
        var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator3'))))
        while 1:
            pass
            if var.get('_isArray3'):
                if (var.get('_i3')>=var.get('_iterator3').get('length')):
                    break
                var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i3', var.get('_iterator3').callprop('next'))
                if var.get('_i3').get('done'):
                    break
                var.put('_ref3', var.get('_i3').get('value'))
            var.put('key', var.get('_ref3'))
            if PyJsStrictNeq(var.get('actual').get(var.get('key')),var.get('expected').get(var.get('key'))):
                return Js(False)
        
        return var.get('true')
    PyJsHoisted_shallowEqual_.__name__ = 'shallowEqual'
    var.put('shallowEqual', PyJsHoisted_shallowEqual_)
    @Js
    def PyJsHoisted_inheritInnerComments_(child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'child':child}, var)
        var.registers(['parent', 'child'])
        var.get('_inheritComments')(Js('innerComments'), var.get('child'), var.get('parent'))
    PyJsHoisted_inheritInnerComments_.__name__ = 'inheritInnerComments'
    var.put('inheritInnerComments', PyJsHoisted_inheritInnerComments_)
    @Js
    def PyJsHoisted_ensureBlock_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'key'])
        var.put('key', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js('body')))
        return var.get('node').put(var.get('key'), var.get('t').callprop('toBlock', var.get('node').get(var.get('key')), var.get('node')))
    PyJsHoisted_ensureBlock_.__name__ = 'ensureBlock'
    var.put('ensureBlock', PyJsHoisted_ensureBlock_)
    @Js
    def PyJsHoisted_assertNode_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('isNode')(var.get('node')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Not a valid node ')+(var.get('node') and var.get('node').get('type')))))
            raise PyJsTempException
    PyJsHoisted_assertNode_.__name__ = 'assertNode'
    var.put('assertNode', PyJsHoisted_assertNode_)
    @Js
    def PyJsHoisted_inheritLeadingComments_(child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'child':child}, var)
        var.registers(['parent', 'child'])
        var.get('_inheritComments')(Js('leadingComments'), var.get('child'), var.get('parent'))
    PyJsHoisted_inheritLeadingComments_.__name__ = 'inheritLeadingComments'
    var.put('inheritLeadingComments', PyJsHoisted_inheritLeadingComments_)
    @Js
    def PyJsHoisted__inheritComments_(key, child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'key':key, 'child':child}, var)
        var.registers(['parent', 'key', 'child'])
        if (var.get('child') and var.get('parent')):
            var.get('child').put(var.get('key'), PyJsComma(Js(0.0),var.get('_uniq2').get('default'))(PyJsComma(Js(0.0),var.get('_compact2').get('default'))(Js([]).callprop('concat', var.get('child').get(var.get('key')), var.get('parent').get(var.get('key'))))))
    PyJsHoisted__inheritComments_.__name__ = '_inheritComments'
    var.put('_inheritComments', PyJsHoisted__inheritComments_)
    @Js
    def PyJsHoisted_removeProperties_(node, opts, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['node', 'map', '_ref9', '_i9', '_ref10', '_isArray9', 'syms', '_i10', '_iterator9', '_key4', 'key', '_isArray10', 'sym', '_iterator10', 'opts'])
        PyJs_Object_2825_ = Js({})
        var.put('opts', (var.get('opts') or PyJs_Object_2825_))
        var.put('map', (var.get('CLEAR_KEYS') if var.get('opts').get('preserveComments') else var.get('CLEAR_KEYS_PLUS_COMMENTS')))
        #for JS loop
        var.put('_iterator9', var.get('map'))
        var.put('_isArray9', var.get('Array').callprop('isArray', var.get('_iterator9')))
        var.put('_i9', Js(0.0))
        var.put('_iterator9', (var.get('_iterator9') if var.get('_isArray9') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator9'))))
        while 1:
            pass
            if var.get('_isArray9'):
                if (var.get('_i9')>=var.get('_iterator9').get('length')):
                    break
                var.put('_ref9', var.get('_iterator9').get((var.put('_i9',Js(var.get('_i9').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i9', var.get('_iterator9').callprop('next'))
                if var.get('_i9').get('done'):
                    break
                var.put('_ref9', var.get('_i9').get('value'))
            var.put('_key4', var.get('_ref9'))
            if (var.get('node').get(var.get('_key4'))!=var.get("null")):
                var.get('node').put(var.get('_key4'), var.get('undefined'))
        
        for PyJsTemp in var.get('node'):
            var.put('key', PyJsTemp)
            if (PyJsStrictEq(var.get('key').get('0'),Js('_')) and (var.get('node').get(var.get('key'))!=var.get("null"))):
                var.get('node').put(var.get('key'), var.get('undefined'))
        var.put('syms', PyJsComma(Js(0.0),var.get('_getOwnPropertySymbols2').get('default'))(var.get('node')))
        #for JS loop
        var.put('_iterator10', var.get('syms'))
        var.put('_isArray10', var.get('Array').callprop('isArray', var.get('_iterator10')))
        var.put('_i10', Js(0.0))
        var.put('_iterator10', (var.get('_iterator10') if var.get('_isArray10') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator10'))))
        while 1:
            pass
            if var.get('_isArray10'):
                if (var.get('_i10')>=var.get('_iterator10').get('length')):
                    break
                var.put('_ref10', var.get('_iterator10').get((var.put('_i10',Js(var.get('_i10').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i10', var.get('_iterator10').callprop('next'))
                if var.get('_i10').get('done'):
                    break
                var.put('_ref10', var.get('_i10').get('value'))
            var.put('sym', var.get('_ref10'))
            var.get('node').put(var.get('sym'), var.get("null"))
        
    PyJsHoisted_removeProperties_.__name__ = 'removeProperties'
    var.put('removeProperties', PyJsHoisted_removeProperties_)
    @Js
    def PyJsHoisted_isNode_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return (var.get('node') and var.get('_definitions').get('VISITOR_KEYS').get(var.get('node').get('type'))).neg().neg()
    PyJsHoisted_isNode_.__name__ = 'isNode'
    var.put('isNode', PyJsHoisted_isNode_)
    @Js
    def PyJsHoisted_inheritsComments_(child, parent, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'parent':parent, 'child':child}, var)
        var.registers(['parent', 'child'])
        var.get('inheritTrailingComments')(var.get('child'), var.get('parent'))
        var.get('inheritLeadingComments')(var.get('child'), var.get('parent'))
        var.get('inheritInnerComments')(var.get('child'), var.get('parent'))
        return var.get('child')
    PyJsHoisted_inheritsComments_.__name__ = 'inheritsComments'
    var.put('inheritsComments', PyJsHoisted_inheritsComments_)
    @Js
    def PyJsHoisted_removeComments_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_isArray4', '_i4', 'key', '_iterator4', '_ref4'])
        #for JS loop
        var.put('_iterator4', var.get('t').get('COMMENT_KEYS'))
        var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
        var.put('_i4', Js(0.0))
        var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator4'))))
        while 1:
            pass
            if var.get('_isArray4'):
                if (var.get('_i4')>=var.get('_iterator4').get('length')):
                    break
                var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i4', var.get('_iterator4').callprop('next'))
                if var.get('_i4').get('done'):
                    break
                var.put('_ref4', var.get('_i4').get('value'))
            var.put('key', var.get('_ref4'))
            var.get('node').delete(var.get('key'))
        
        return var.get('node')
    PyJsHoisted_removeComments_.__name__ = 'removeComments'
    var.put('removeComments', PyJsHoisted_removeComments_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2808_ = Js({})
            var.put('newObj', PyJs_Object_2808_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_removePropertiesDeep_(tree, opts, this, arguments, var=var):
        var = Scope({'this':this, 'tree':tree, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['tree', 'opts'])
        var.get('traverseFast')(var.get('tree'), var.get('removeProperties'), var.get('opts'))
        return var.get('tree')
    PyJsHoisted_removePropertiesDeep_.__name__ = 'removePropertiesDeep'
    var.put('removePropertiesDeep', PyJsHoisted_removePropertiesDeep_)
    @Js
    def PyJsHoisted_clone_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'newNode', 'key'])
        PyJs_Object_2821_ = Js({})
        var.put('newNode', PyJs_Object_2821_)
        for PyJsTemp in var.get('node'):
            var.put('key', PyJsTemp)
            if PyJsStrictEq(var.get('key').get('0'),Js('_')):
                continue
            var.get('newNode').put(var.get('key'), var.get('node').get(var.get('key')))
        return var.get('newNode')
    PyJsHoisted_clone_.__name__ = 'clone'
    var.put('clone', PyJsHoisted_clone_)
    @Js
    def PyJsHoisted_appendToMemberExpression_(member, append, computed, this, arguments, var=var):
        var = Scope({'member':member, 'this':this, 'computed':computed, 'append':append, 'arguments':arguments}, var)
        var.registers(['member', 'computed', 'append'])
        var.get('member').put('object', var.get('t').callprop('memberExpression', var.get('member').get('object'), var.get('member').get('property'), var.get('member').get('computed')))
        var.get('member').put('property', var.get('append'))
        var.get('member').put('computed', var.get('computed').neg().neg())
        return var.get('member')
    PyJsHoisted_appendToMemberExpression_.__name__ = 'appendToMemberExpression'
    var.put('appendToMemberExpression', PyJsHoisted_appendToMemberExpression_)
    @Js
    def PyJsHoisted_validate_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
        var.registers(['node', 'fields', 'val', 'key', 'field'])
        if var.get('node').neg():
            return var.get('undefined')
        var.put('fields', var.get('t').get('NODE_FIELDS').get(var.get('node').get('type')))
        if var.get('fields').neg():
            return var.get('undefined')
        var.put('field', var.get('fields').get(var.get('key')))
        if (var.get('field').neg() or var.get('field').get('validate').neg()):
            return var.get('undefined')
        if (var.get('field').get('optional') and (var.get('val')==var.get("null"))):
            return var.get('undefined')
        var.get('field').callprop('validate', var.get('node'), var.get('key'), var.get('val'))
    PyJsHoisted_validate_.__name__ = 'validate'
    var.put('validate', PyJsHoisted_validate_)
    @Js
    def PyJsHoisted_traverseFast_(node, enter, opts, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'opts':opts, 'enter':enter}, var)
        var.registers(['_isArray7', 'node', '_ref7', '_i8', 'keys', '_ref8', '_isArray8', '_i7', '_node', '_iterator8', 'key', 'enter', '_iterator7', 'subNode', 'opts'])
        if var.get('node').neg():
            return var.get('undefined')
        var.put('keys', var.get('t').get('VISITOR_KEYS').get(var.get('node').get('type')))
        if var.get('keys').neg():
            return var.get('undefined')
        PyJs_Object_2824_ = Js({})
        var.put('opts', (var.get('opts') or PyJs_Object_2824_))
        var.get('enter')(var.get('node'), var.get('opts'))
        #for JS loop
        var.put('_iterator7', var.get('keys'))
        var.put('_isArray7', var.get('Array').callprop('isArray', var.get('_iterator7')))
        var.put('_i7', Js(0.0))
        var.put('_iterator7', (var.get('_iterator7') if var.get('_isArray7') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator7'))))
        while 1:
            pass
            if var.get('_isArray7'):
                if (var.get('_i7')>=var.get('_iterator7').get('length')):
                    break
                var.put('_ref7', var.get('_iterator7').get((var.put('_i7',Js(var.get('_i7').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i7', var.get('_iterator7').callprop('next'))
                if var.get('_i7').get('done'):
                    break
                var.put('_ref7', var.get('_i7').get('value'))
            var.put('key', var.get('_ref7'))
            var.put('subNode', var.get('node').get(var.get('key')))
            if var.get('Array').callprop('isArray', var.get('subNode')):
                #for JS loop
                var.put('_iterator8', var.get('subNode'))
                var.put('_isArray8', var.get('Array').callprop('isArray', var.get('_iterator8')))
                var.put('_i8', Js(0.0))
                var.put('_iterator8', (var.get('_iterator8') if var.get('_isArray8') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator8'))))
                while 1:
                    pass
                    if var.get('_isArray8'):
                        if (var.get('_i8')>=var.get('_iterator8').get('length')):
                            break
                        var.put('_ref8', var.get('_iterator8').get((var.put('_i8',Js(var.get('_i8').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i8', var.get('_iterator8').callprop('next'))
                        if var.get('_i8').get('done'):
                            break
                        var.put('_ref8', var.get('_i8').get('value'))
                    var.put('_node', var.get('_ref8'))
                    var.get('traverseFast')(var.get('_node'), var.get('enter'), var.get('opts'))
                
            else:
                var.get('traverseFast')(var.get('subNode'), var.get('enter'), var.get('opts'))
        
    PyJsHoisted_traverseFast_.__name__ = 'traverseFast'
    var.put('traverseFast', PyJsHoisted_traverseFast_)
    @Js
    def PyJsHoisted_prependToMemberExpression_(member, prepend, this, arguments, var=var):
        var = Scope({'member':member, 'this':this, 'arguments':arguments, 'prepend':prepend}, var)
        var.registers(['member', 'prepend'])
        var.get('member').put('object', var.get('t').callprop('memberExpression', var.get('prepend'), var.get('member').get('object')))
        return var.get('member')
    PyJsHoisted_prependToMemberExpression_.__name__ = 'prependToMemberExpression'
    var.put('prependToMemberExpression', PyJsHoisted_prependToMemberExpression_)
    @Js
    def PyJsHoisted_registerType_(type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['is', 'type'])
        var.put('is', var.get('t').get((Js('is')+var.get('type'))))
        if var.get('is').neg():
            @Js
            def PyJs_anonymous_2810_(node, opts, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments, 'opts':opts}, var)
                var.registers(['node', 'opts'])
                return var.get('t').callprop('is', var.get('type'), var.get('node'), var.get('opts'))
            PyJs_anonymous_2810_._set_name('anonymous')
            var.put('is', var.get('t').put((Js('is')+var.get('type')), PyJs_anonymous_2810_))
        @Js
        def PyJs_anonymous_2811_(node, opts, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments, 'opts':opts}, var)
            var.registers(['node', 'opts'])
            PyJs_Object_2812_ = Js({})
            var.put('opts', (var.get('opts') or PyJs_Object_2812_))
            if var.get('is')(var.get('node'), var.get('opts')).neg():
                PyJsTempException = JsToPyException(var.get('Error').create((((Js('Expected type ')+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('type')))+Js(' with option '))+PyJsComma(Js(0.0),var.get('_stringify2').get('default'))(var.get('opts')))))
                raise PyJsTempException
        PyJs_anonymous_2811_._set_name('anonymous')
        var.get('t').put((Js('assert')+var.get('type')), PyJs_anonymous_2811_)
    PyJsHoisted_registerType_.__name__ = 'registerType'
    var.put('registerType', PyJsHoisted_registerType_)
    @Js
    def PyJsHoisted_cloneWithoutLoc_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'newNode'])
        var.put('newNode', var.get('clone')(var.get('node')))
        var.get('newNode').delete('loc')
        return var.get('newNode')
    PyJsHoisted_cloneWithoutLoc_.__name__ = 'cloneWithoutLoc'
    var.put('cloneWithoutLoc', PyJsHoisted_cloneWithoutLoc_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    def PyJs_LONG_2723_(var=var):
        def PyJs_LONG_2722_(var=var):
            def PyJs_LONG_2721_(var=var):
                def PyJs_LONG_2720_(var=var):
                    def PyJs_LONG_2719_(var=var):
                        return var.get('exports').put('EQUALITY_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_NUMBER_BINARY_OPERATORS', var.get('exports').put('UPDATE_OPERATORS', var.get('exports').put('LOGICAL_OPERATORS', var.get('exports').put('COMMENT_KEYS', var.get('exports').put('FOR_INIT_KEYS', var.get('exports').put('FLATTENABLE_KEYS', var.get('exports').put('STATEMENT_OR_BLOCK_KEYS', var.get('undefined')))))))))
                    return var.get('exports').put('UNARY_OPERATORS', var.get('exports').put('STRING_UNARY_OPERATORS', var.get('exports').put('NUMBER_UNARY_OPERATORS', var.get('exports').put('BOOLEAN_UNARY_OPERATORS', var.get('exports').put('BINARY_OPERATORS', var.get('exports').put('NUMBER_BINARY_OPERATORS', var.get('exports').put('BOOLEAN_BINARY_OPERATORS', var.get('exports').put('COMPARISON_BINARY_OPERATORS', PyJs_LONG_2719_()))))))))
                return var.get('exports').put('TYPES', var.get('exports').put('react', var.get('exports').put('DEPRECATED_KEYS', var.get('exports').put('BUILDER_KEYS', var.get('exports').put('NODE_FIELDS', var.get('exports').put('ALIAS_KEYS', var.get('exports').put('VISITOR_KEYS', var.get('exports').put('NOT_LOCAL_BINDING', var.get('exports').put('BLOCK_SCOPED_SYMBOL', var.get('exports').put('INHERIT_KEYS', PyJs_LONG_2720_()))))))))))
            return var.get('exports').put('isSpecifierDefault', var.get('exports').put('isVar', var.get('exports').put('isBlockScoped', var.get('exports').put('isLet', var.get('exports').put('isValidIdentifier', var.get('exports').put('isReferenced', var.get('exports').put('isBinding', var.get('exports').put('getOuterBindingIdentifiers', var.get('exports').put('getBindingIdentifiers', PyJs_LONG_2721_())))))))))
        return var.get('exports').put('toExpression', var.get('exports').put('toStatement', var.get('exports').put('toBindingIdentifierName', var.get('exports').put('toIdentifier', var.get('exports').put('toKeyAlias', var.get('exports').put('toSequenceExpression', var.get('exports').put('toComputedKey', var.get('exports').put('isImmutable', var.get('exports').put('isScope', PyJs_LONG_2722_())))))))))
    var.get('exports').put('createTypeAnnotationBasedOnTypeof', var.get('exports').put('removeTypeDuplicates', var.get('exports').put('createUnionTypeAnnotation', var.get('exports').put('valueToNode', var.get('exports').put('toBlock', PyJs_LONG_2723_())))))
    var.put('_getOwnPropertySymbols', var.get('require')(Js('babel-runtime/core-js/object/get-own-property-symbols')))
    var.put('_getOwnPropertySymbols2', var.get('_interopRequireDefault')(var.get('_getOwnPropertySymbols')))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.put('_keys', var.get('require')(Js('babel-runtime/core-js/object/keys')))
    var.put('_keys2', var.get('_interopRequireDefault')(var.get('_keys')))
    var.put('_stringify', var.get('require')(Js('babel-runtime/core-js/json/stringify')))
    var.put('_stringify2', var.get('_interopRequireDefault')(var.get('_stringify')))
    var.put('_constants', var.get('require')(Js('./constants')))
    @Js
    def PyJs_get_2725_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2725_}, var)
        var.registers([])
        return var.get('_constants').get('STATEMENT_OR_BLOCK_KEYS')
    PyJs_get_2725_._set_name('get')
    PyJs_Object_2724_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2725_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('STATEMENT_OR_BLOCK_KEYS'), PyJs_Object_2724_)
    @Js
    def PyJs_get_2727_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2727_}, var)
        var.registers([])
        return var.get('_constants').get('FLATTENABLE_KEYS')
    PyJs_get_2727_._set_name('get')
    PyJs_Object_2726_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2727_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('FLATTENABLE_KEYS'), PyJs_Object_2726_)
    @Js
    def PyJs_get_2729_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2729_}, var)
        var.registers([])
        return var.get('_constants').get('FOR_INIT_KEYS')
    PyJs_get_2729_._set_name('get')
    PyJs_Object_2728_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2729_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('FOR_INIT_KEYS'), PyJs_Object_2728_)
    @Js
    def PyJs_get_2731_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2731_}, var)
        var.registers([])
        return var.get('_constants').get('COMMENT_KEYS')
    PyJs_get_2731_._set_name('get')
    PyJs_Object_2730_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2731_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('COMMENT_KEYS'), PyJs_Object_2730_)
    @Js
    def PyJs_get_2733_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2733_}, var)
        var.registers([])
        return var.get('_constants').get('LOGICAL_OPERATORS')
    PyJs_get_2733_._set_name('get')
    PyJs_Object_2732_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2733_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('LOGICAL_OPERATORS'), PyJs_Object_2732_)
    @Js
    def PyJs_get_2735_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2735_}, var)
        var.registers([])
        return var.get('_constants').get('UPDATE_OPERATORS')
    PyJs_get_2735_._set_name('get')
    PyJs_Object_2734_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2735_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('UPDATE_OPERATORS'), PyJs_Object_2734_)
    @Js
    def PyJs_get_2737_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2737_}, var)
        var.registers([])
        return var.get('_constants').get('BOOLEAN_NUMBER_BINARY_OPERATORS')
    PyJs_get_2737_._set_name('get')
    PyJs_Object_2736_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2737_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('BOOLEAN_NUMBER_BINARY_OPERATORS'), PyJs_Object_2736_)
    @Js
    def PyJs_get_2739_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2739_}, var)
        var.registers([])
        return var.get('_constants').get('EQUALITY_BINARY_OPERATORS')
    PyJs_get_2739_._set_name('get')
    PyJs_Object_2738_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2739_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('EQUALITY_BINARY_OPERATORS'), PyJs_Object_2738_)
    @Js
    def PyJs_get_2741_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2741_}, var)
        var.registers([])
        return var.get('_constants').get('COMPARISON_BINARY_OPERATORS')
    PyJs_get_2741_._set_name('get')
    PyJs_Object_2740_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2741_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('COMPARISON_BINARY_OPERATORS'), PyJs_Object_2740_)
    @Js
    def PyJs_get_2743_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2743_}, var)
        var.registers([])
        return var.get('_constants').get('BOOLEAN_BINARY_OPERATORS')
    PyJs_get_2743_._set_name('get')
    PyJs_Object_2742_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2743_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('BOOLEAN_BINARY_OPERATORS'), PyJs_Object_2742_)
    @Js
    def PyJs_get_2745_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2745_}, var)
        var.registers([])
        return var.get('_constants').get('NUMBER_BINARY_OPERATORS')
    PyJs_get_2745_._set_name('get')
    PyJs_Object_2744_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2745_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('NUMBER_BINARY_OPERATORS'), PyJs_Object_2744_)
    @Js
    def PyJs_get_2747_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2747_}, var)
        var.registers([])
        return var.get('_constants').get('BINARY_OPERATORS')
    PyJs_get_2747_._set_name('get')
    PyJs_Object_2746_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2747_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('BINARY_OPERATORS'), PyJs_Object_2746_)
    @Js
    def PyJs_get_2749_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2749_}, var)
        var.registers([])
        return var.get('_constants').get('BOOLEAN_UNARY_OPERATORS')
    PyJs_get_2749_._set_name('get')
    PyJs_Object_2748_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2749_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('BOOLEAN_UNARY_OPERATORS'), PyJs_Object_2748_)
    @Js
    def PyJs_get_2751_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2751_}, var)
        var.registers([])
        return var.get('_constants').get('NUMBER_UNARY_OPERATORS')
    PyJs_get_2751_._set_name('get')
    PyJs_Object_2750_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2751_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('NUMBER_UNARY_OPERATORS'), PyJs_Object_2750_)
    @Js
    def PyJs_get_2753_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2753_}, var)
        var.registers([])
        return var.get('_constants').get('STRING_UNARY_OPERATORS')
    PyJs_get_2753_._set_name('get')
    PyJs_Object_2752_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2753_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('STRING_UNARY_OPERATORS'), PyJs_Object_2752_)
    @Js
    def PyJs_get_2755_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2755_}, var)
        var.registers([])
        return var.get('_constants').get('UNARY_OPERATORS')
    PyJs_get_2755_._set_name('get')
    PyJs_Object_2754_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2755_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('UNARY_OPERATORS'), PyJs_Object_2754_)
    @Js
    def PyJs_get_2757_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2757_}, var)
        var.registers([])
        return var.get('_constants').get('INHERIT_KEYS')
    PyJs_get_2757_._set_name('get')
    PyJs_Object_2756_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2757_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('INHERIT_KEYS'), PyJs_Object_2756_)
    @Js
    def PyJs_get_2759_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2759_}, var)
        var.registers([])
        return var.get('_constants').get('BLOCK_SCOPED_SYMBOL')
    PyJs_get_2759_._set_name('get')
    PyJs_Object_2758_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2759_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('BLOCK_SCOPED_SYMBOL'), PyJs_Object_2758_)
    @Js
    def PyJs_get_2761_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2761_}, var)
        var.registers([])
        return var.get('_constants').get('NOT_LOCAL_BINDING')
    PyJs_get_2761_._set_name('get')
    PyJs_Object_2760_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2761_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('NOT_LOCAL_BINDING'), PyJs_Object_2760_)
    var.get('exports').put('is', var.get('is'))
    var.get('exports').put('isType', var.get('isType'))
    var.get('exports').put('validate', var.get('validate'))
    var.get('exports').put('shallowEqual', var.get('shallowEqual'))
    var.get('exports').put('appendToMemberExpression', var.get('appendToMemberExpression'))
    var.get('exports').put('prependToMemberExpression', var.get('prependToMemberExpression'))
    var.get('exports').put('ensureBlock', var.get('ensureBlock'))
    var.get('exports').put('clone', var.get('clone'))
    var.get('exports').put('cloneWithoutLoc', var.get('cloneWithoutLoc'))
    var.get('exports').put('cloneDeep', var.get('cloneDeep'))
    var.get('exports').put('buildMatchMemberExpression', var.get('buildMatchMemberExpression'))
    var.get('exports').put('removeComments', var.get('removeComments'))
    var.get('exports').put('inheritsComments', var.get('inheritsComments'))
    var.get('exports').put('inheritTrailingComments', var.get('inheritTrailingComments'))
    var.get('exports').put('inheritLeadingComments', var.get('inheritLeadingComments'))
    var.get('exports').put('inheritInnerComments', var.get('inheritInnerComments'))
    var.get('exports').put('inherits', var.get('inherits'))
    var.get('exports').put('assertNode', var.get('assertNode'))
    var.get('exports').put('isNode', var.get('isNode'))
    var.get('exports').put('traverseFast', var.get('traverseFast'))
    var.get('exports').put('removeProperties', var.get('removeProperties'))
    var.get('exports').put('removePropertiesDeep', var.get('removePropertiesDeep'))
    var.put('_retrievers', var.get('require')(Js('./retrievers')))
    @Js
    def PyJs_get_2763_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2763_}, var)
        var.registers([])
        return var.get('_retrievers').get('getBindingIdentifiers')
    PyJs_get_2763_._set_name('get')
    PyJs_Object_2762_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2763_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('getBindingIdentifiers'), PyJs_Object_2762_)
    @Js
    def PyJs_get_2765_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2765_}, var)
        var.registers([])
        return var.get('_retrievers').get('getOuterBindingIdentifiers')
    PyJs_get_2765_._set_name('get')
    PyJs_Object_2764_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2765_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('getOuterBindingIdentifiers'), PyJs_Object_2764_)
    var.put('_validators', var.get('require')(Js('./validators')))
    @Js
    def PyJs_get_2767_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2767_}, var)
        var.registers([])
        return var.get('_validators').get('isBinding')
    PyJs_get_2767_._set_name('get')
    PyJs_Object_2766_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2767_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isBinding'), PyJs_Object_2766_)
    @Js
    def PyJs_get_2769_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2769_}, var)
        var.registers([])
        return var.get('_validators').get('isReferenced')
    PyJs_get_2769_._set_name('get')
    PyJs_Object_2768_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2769_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isReferenced'), PyJs_Object_2768_)
    @Js
    def PyJs_get_2771_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2771_}, var)
        var.registers([])
        return var.get('_validators').get('isValidIdentifier')
    PyJs_get_2771_._set_name('get')
    PyJs_Object_2770_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2771_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isValidIdentifier'), PyJs_Object_2770_)
    @Js
    def PyJs_get_2773_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2773_}, var)
        var.registers([])
        return var.get('_validators').get('isLet')
    PyJs_get_2773_._set_name('get')
    PyJs_Object_2772_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2773_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isLet'), PyJs_Object_2772_)
    @Js
    def PyJs_get_2775_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2775_}, var)
        var.registers([])
        return var.get('_validators').get('isBlockScoped')
    PyJs_get_2775_._set_name('get')
    PyJs_Object_2774_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2775_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isBlockScoped'), PyJs_Object_2774_)
    @Js
    def PyJs_get_2777_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2777_}, var)
        var.registers([])
        return var.get('_validators').get('isVar')
    PyJs_get_2777_._set_name('get')
    PyJs_Object_2776_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2777_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isVar'), PyJs_Object_2776_)
    @Js
    def PyJs_get_2779_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2779_}, var)
        var.registers([])
        return var.get('_validators').get('isSpecifierDefault')
    PyJs_get_2779_._set_name('get')
    PyJs_Object_2778_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2779_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isSpecifierDefault'), PyJs_Object_2778_)
    @Js
    def PyJs_get_2781_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2781_}, var)
        var.registers([])
        return var.get('_validators').get('isScope')
    PyJs_get_2781_._set_name('get')
    PyJs_Object_2780_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2781_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isScope'), PyJs_Object_2780_)
    @Js
    def PyJs_get_2783_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2783_}, var)
        var.registers([])
        return var.get('_validators').get('isImmutable')
    PyJs_get_2783_._set_name('get')
    PyJs_Object_2782_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2783_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('isImmutable'), PyJs_Object_2782_)
    var.put('_converters', var.get('require')(Js('./converters')))
    @Js
    def PyJs_get_2785_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2785_}, var)
        var.registers([])
        return var.get('_converters').get('toComputedKey')
    PyJs_get_2785_._set_name('get')
    PyJs_Object_2784_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2785_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toComputedKey'), PyJs_Object_2784_)
    @Js
    def PyJs_get_2787_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2787_}, var)
        var.registers([])
        return var.get('_converters').get('toSequenceExpression')
    PyJs_get_2787_._set_name('get')
    PyJs_Object_2786_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2787_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toSequenceExpression'), PyJs_Object_2786_)
    @Js
    def PyJs_get_2789_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2789_}, var)
        var.registers([])
        return var.get('_converters').get('toKeyAlias')
    PyJs_get_2789_._set_name('get')
    PyJs_Object_2788_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2789_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toKeyAlias'), PyJs_Object_2788_)
    @Js
    def PyJs_get_2791_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2791_}, var)
        var.registers([])
        return var.get('_converters').get('toIdentifier')
    PyJs_get_2791_._set_name('get')
    PyJs_Object_2790_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2791_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toIdentifier'), PyJs_Object_2790_)
    @Js
    def PyJs_get_2793_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2793_}, var)
        var.registers([])
        return var.get('_converters').get('toBindingIdentifierName')
    PyJs_get_2793_._set_name('get')
    PyJs_Object_2792_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2793_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toBindingIdentifierName'), PyJs_Object_2792_)
    @Js
    def PyJs_get_2795_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2795_}, var)
        var.registers([])
        return var.get('_converters').get('toStatement')
    PyJs_get_2795_._set_name('get')
    PyJs_Object_2794_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2795_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toStatement'), PyJs_Object_2794_)
    @Js
    def PyJs_get_2797_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2797_}, var)
        var.registers([])
        return var.get('_converters').get('toExpression')
    PyJs_get_2797_._set_name('get')
    PyJs_Object_2796_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2797_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toExpression'), PyJs_Object_2796_)
    @Js
    def PyJs_get_2799_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2799_}, var)
        var.registers([])
        return var.get('_converters').get('toBlock')
    PyJs_get_2799_._set_name('get')
    PyJs_Object_2798_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2799_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('toBlock'), PyJs_Object_2798_)
    @Js
    def PyJs_get_2801_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2801_}, var)
        var.registers([])
        return var.get('_converters').get('valueToNode')
    PyJs_get_2801_._set_name('get')
    PyJs_Object_2800_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2801_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('valueToNode'), PyJs_Object_2800_)
    var.put('_flow', var.get('require')(Js('./flow')))
    @Js
    def PyJs_get_2803_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2803_}, var)
        var.registers([])
        return var.get('_flow').get('createUnionTypeAnnotation')
    PyJs_get_2803_._set_name('get')
    PyJs_Object_2802_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2803_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('createUnionTypeAnnotation'), PyJs_Object_2802_)
    @Js
    def PyJs_get_2805_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2805_}, var)
        var.registers([])
        return var.get('_flow').get('removeTypeDuplicates')
    PyJs_get_2805_._set_name('get')
    PyJs_Object_2804_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2805_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('removeTypeDuplicates'), PyJs_Object_2804_)
    @Js
    def PyJs_get_2807_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2807_}, var)
        var.registers([])
        return var.get('_flow').get('createTypeAnnotationBasedOnTypeof')
    PyJs_get_2807_._set_name('get')
    PyJs_Object_2806_ = Js({'enumerable':var.get('true'),'get':PyJs_get_2807_})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('createTypeAnnotationBasedOnTypeof'), PyJs_Object_2806_)
    var.put('_toFastProperties', var.get('require')(Js('to-fast-properties')))
    var.put('_toFastProperties2', var.get('_interopRequireDefault')(var.get('_toFastProperties')))
    var.put('_compact', var.get('require')(Js('lodash/compact')))
    var.put('_compact2', var.get('_interopRequireDefault')(var.get('_compact')))
    var.put('_clone', var.get('require')(Js('lodash/clone')))
    var.put('_clone2', var.get('_interopRequireDefault')(var.get('_clone')))
    var.put('_each', var.get('require')(Js('lodash/each')))
    var.put('_each2', var.get('_interopRequireDefault')(var.get('_each')))
    var.put('_uniq', var.get('require')(Js('lodash/uniq')))
    var.put('_uniq2', var.get('_interopRequireDefault')(var.get('_uniq')))
    var.get('require')(Js('./definitions/init'))
    var.put('_definitions', var.get('require')(Js('./definitions')))
    var.put('_react2', var.get('require')(Js('./react')))
    var.put('_react', var.get('_interopRequireWildcard')(var.get('_react2')))
    pass
    pass
    var.put('t', var.get('exports'))
    pass
    var.get('exports').put('VISITOR_KEYS', var.get('_definitions').get('VISITOR_KEYS'))
    var.get('exports').put('ALIAS_KEYS', var.get('_definitions').get('ALIAS_KEYS'))
    var.get('exports').put('NODE_FIELDS', var.get('_definitions').get('NODE_FIELDS'))
    var.get('exports').put('BUILDER_KEYS', var.get('_definitions').get('BUILDER_KEYS'))
    var.get('exports').put('DEPRECATED_KEYS', var.get('_definitions').get('DEPRECATED_KEYS'))
    var.get('exports').put('react', var.get('_react'))
    for PyJsTemp in var.get('t').get('VISITOR_KEYS'):
        var.put('type', PyJsTemp)
        var.get('registerType')(var.get('type'))
    PyJs_Object_2813_ = Js({})
    var.get('t').put('FLIPPED_ALIAS_KEYS', PyJs_Object_2813_)
    @Js
    def PyJs_anonymous_2814_(aliases, type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments, 'aliases':aliases}, var)
        var.registers(['type', 'aliases'])
        @Js
        def PyJs_anonymous_2815_(alias, this, arguments, var=var):
            var = Scope({'this':this, 'alias':alias, 'arguments':arguments}, var)
            var.registers(['alias', 'types'])
            var.put('types', var.get('t').get('FLIPPED_ALIAS_KEYS').put(var.get('alias'), (var.get('t').get('FLIPPED_ALIAS_KEYS').get(var.get('alias')) or Js([]))))
            var.get('types').callprop('push', var.get('type'))
        PyJs_anonymous_2815_._set_name('anonymous')
        PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('aliases'), PyJs_anonymous_2815_)
    PyJs_anonymous_2814_._set_name('anonymous')
    PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('t').get('ALIAS_KEYS'), PyJs_anonymous_2814_)
    @Js
    def PyJs_anonymous_2816_(types, type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments, 'types':types}, var)
        var.registers(['type', 'types'])
        var.get('t').put((var.get('type').callprop('toUpperCase')+Js('_TYPES')), var.get('types'))
        var.get('registerType')(var.get('type'))
    PyJs_anonymous_2816_._set_name('anonymous')
    PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('t').get('FLIPPED_ALIAS_KEYS'), PyJs_anonymous_2816_)
    var.put('TYPES', var.get('exports').put('TYPES', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('t').get('VISITOR_KEYS')).callprop('concat', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('t').get('FLIPPED_ALIAS_KEYS'))).callprop('concat', PyJsComma(Js(0.0),var.get('_keys2').get('default'))(var.get('t').get('DEPRECATED_KEYS')))))
    pass
    pass
    @Js
    def PyJs_anonymous_2817_(keys, type, this, arguments, var=var):
        var = Scope({'keys':keys, 'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['keys', 'builder', 'type'])
        @Js
        def PyJsHoisted_builder_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['node', '_isArray2', 'field', 'i', '_ref2', '_i2', '_key', 'key', 'arg', '_iterator2'])
            if (var.get('arguments').get('length')>var.get('keys').get('length')):
                PyJsTempException = JsToPyException(var.get('Error').create((((((Js('t.')+var.get('type'))+Js(': Too many arguments passed. Received '))+var.get('arguments').get('length'))+Js(' but can receive '))+(Js('no more than ')+var.get('keys').get('length')))))
                raise PyJsTempException
            PyJs_Object_2818_ = Js({})
            var.put('node', PyJs_Object_2818_)
            var.get('node').put('type', var.get('type'))
            var.put('i', Js(0.0))
            #for JS loop
            var.put('_iterator2', var.get('keys'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator2'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('_key', var.get('_ref2'))
                var.put('field', var.get('t').get('NODE_FIELDS').get(var.get('type')).get(var.get('_key')))
                var.put('arg', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                if PyJsStrictEq(var.get('arg'),var.get('undefined')):
                    var.put('arg', PyJsComma(Js(0.0),var.get('_clone2').get('default'))(var.get('field').get('default')))
                var.get('node').put(var.get('_key'), var.get('arg'))
            
            for PyJsTemp in var.get('node'):
                var.put('key', PyJsTemp)
                var.get('validate')(var.get('node'), var.get('key'), var.get('node').get(var.get('key')))
            return var.get('node')
        PyJsHoisted_builder_.__name__ = 'builder'
        var.put('builder', PyJsHoisted_builder_)
        pass
        var.get('t').put(var.get('type'), var.get('builder'))
        var.get('t').put((var.get('type').get('0').callprop('toLowerCase')+var.get('type').callprop('slice', Js(1.0))), var.get('builder'))
    PyJs_anonymous_2817_._set_name('anonymous')
    PyJsComma(Js(0.0),var.get('_each2').get('default'))(var.get('t').get('BUILDER_KEYS'), PyJs_anonymous_2817_)
    @Js
    def PyJs__loop_2819_(_type, this, arguments, var=var):
        var = Scope({'this':this, '_type':_type, '_loop':PyJs__loop_2819_, 'arguments':arguments}, var)
        var.registers(['_type', 'newType', 'proxy'])
        @Js
        def PyJsHoisted_proxy_(fn, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'fn':fn}, var)
            var.registers(['fn'])
            @Js
            def PyJs_anonymous_2820_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('console').callprop('trace', (((Js('The node type ')+var.get('_type'))+Js(' has been renamed to '))+var.get('newType')))
                return var.get('fn').callprop('apply', var.get("this"), var.get('arguments'))
            PyJs_anonymous_2820_._set_name('anonymous')
            return PyJs_anonymous_2820_
        PyJsHoisted_proxy_.__name__ = 'proxy'
        var.put('proxy', PyJsHoisted_proxy_)
        var.put('newType', var.get('t').get('DEPRECATED_KEYS').get(var.get('_type')))
        pass
        var.get('t').put(var.get('_type'), var.get('t').put((var.get('_type').get('0').callprop('toLowerCase')+var.get('_type').callprop('slice', Js(1.0))), var.get('proxy')(var.get('t').get(var.get('newType')))))
        var.get('t').put((Js('is')+var.get('_type')), var.get('proxy')(var.get('t').get((Js('is')+var.get('newType')))))
        var.get('t').put((Js('assert')+var.get('_type')), var.get('proxy')(var.get('t').get((Js('assert')+var.get('newType')))))
    PyJs__loop_2819_._set_name('_loop')
    var.put('_loop', PyJs__loop_2819_)
    for PyJsTemp in var.get('t').get('DEPRECATED_KEYS'):
        var.put('_type', PyJsTemp)
        var.get('_loop')(var.get('_type'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJsComma(Js(0.0),var.get('_toFastProperties2').get('default'))(var.get('t'))
    PyJsComma(Js(0.0),var.get('_toFastProperties2').get('default'))(var.get('t').get('VISITOR_KEYS'))
    pass
    var.put('CLEAR_KEYS', Js([Js('tokens'), Js('start'), Js('end'), Js('loc'), Js('raw'), Js('rawValue')]))
    var.put('CLEAR_KEYS_PLUS_COMMENTS', var.get('t').get('COMMENT_KEYS').callprop('concat', Js([Js('comments')])).callprop('concat', var.get('CLEAR_KEYS')))
    pass
    pass
PyJs_anonymous_2718_._set_name('anonymous')
PyJs_Object_2826_ = Js({'./constants':Js(247.0),'./converters':Js(248.0),'./definitions':Js(253.0),'./definitions/init':Js(254.0),'./flow':Js(257.0),'./react':Js(259.0),'./retrievers':Js(260.0),'./validators':Js(261.0),'babel-runtime/core-js/get-iterator':Js(96.0),'babel-runtime/core-js/json/stringify':Js(97.0),'babel-runtime/core-js/object/get-own-property-symbols':Js(102.0),'babel-runtime/core-js/object/keys':Js(103.0),'lodash/clone':Js(438.0),'lodash/compact':Js(441.0),'lodash/each':Js(443.0),'lodash/uniq':Js(495.0),'to-fast-properties':Js(522.0)})
@Js
def PyJs_anonymous_2827_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', '_interopRequireWildcard', '_index', 'cleanJSXElementLiteralChild', 'require', 'module', 'buildChildren', 't', 'isReactComponent', 'isCompatTag'])
    @Js
    def PyJsHoisted_cleanJSXElementLiteralChild_(child, args, this, arguments, var=var):
        var = Scope({'this':this, 'args':args, 'arguments':arguments, 'child':child}, var)
        var.registers(['isLastNonEmptyLine', 'str', 'i', 'isLastLine', 'args', 'lines', 'lastNonEmptyLine', 'isFirstLine', '_i', 'child', 'line', 'trimmedLine'])
        var.put('lines', var.get('child').get('value').callprop('split', JsRegExp('/\\r\\n|\\n|\\r/')))
        var.put('lastNonEmptyLine', Js(0.0))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('lines').get('length')):
            try:
                if var.get('lines').get(var.get('i')).callprop('match', JsRegExp('/[^ \\t]/')):
                    var.put('lastNonEmptyLine', var.get('i'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.put('str', Js(''))
        #for JS loop
        var.put('_i', Js(0.0))
        while (var.get('_i')<var.get('lines').get('length')):
            try:
                var.put('line', var.get('lines').get(var.get('_i')))
                var.put('isFirstLine', PyJsStrictEq(var.get('_i'),Js(0.0)))
                var.put('isLastLine', PyJsStrictEq(var.get('_i'),(var.get('lines').get('length')-Js(1.0))))
                var.put('isLastNonEmptyLine', PyJsStrictEq(var.get('_i'),var.get('lastNonEmptyLine')))
                var.put('trimmedLine', var.get('line').callprop('replace', JsRegExp('/\\t/g'), Js(' ')))
                if var.get('isFirstLine').neg():
                    var.put('trimmedLine', var.get('trimmedLine').callprop('replace', JsRegExp('/^[ ]+/'), Js('')))
                if var.get('isLastLine').neg():
                    var.put('trimmedLine', var.get('trimmedLine').callprop('replace', JsRegExp('/[ ]+$/'), Js('')))
                if var.get('trimmedLine'):
                    if var.get('isLastNonEmptyLine').neg():
                        var.put('trimmedLine', Js(' '), '+')
                    var.put('str', var.get('trimmedLine'), '+')
            finally:
                    (var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))
        if var.get('str'):
            var.get('args').callprop('push', var.get('t').callprop('stringLiteral', var.get('str')))
    PyJsHoisted_cleanJSXElementLiteralChild_.__name__ = 'cleanJSXElementLiteralChild'
    var.put('cleanJSXElementLiteralChild', PyJsHoisted_cleanJSXElementLiteralChild_)
    @Js
    def PyJsHoisted_buildChildren_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'node', 'elems', 'child'])
        var.put('elems', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('node').get('children').get('length')):
            try:
                var.put('child', var.get('node').get('children').get(var.get('i')))
                if var.get('t').callprop('isJSXText', var.get('child')):
                    var.get('cleanJSXElementLiteralChild')(var.get('child'), var.get('elems'))
                    continue
                if var.get('t').callprop('isJSXExpressionContainer', var.get('child')):
                    var.put('child', var.get('child').get('expression'))
                if var.get('t').callprop('isJSXEmptyExpression', var.get('child')):
                    continue
                var.get('elems').callprop('push', var.get('child'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('elems')
    PyJsHoisted_buildChildren_.__name__ = 'buildChildren'
    var.put('buildChildren', PyJsHoisted_buildChildren_)
    @Js
    def PyJsHoisted_isCompatTag_(tagName, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'tagName':tagName}, var)
        var.registers(['tagName'])
        return (var.get('tagName').neg().neg() and JsRegExp('/^[a-z]|\\-/').callprop('test', var.get('tagName')))
    PyJsHoisted_isCompatTag_.__name__ = 'isCompatTag'
    var.put('isCompatTag', PyJsHoisted_isCompatTag_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2828_ = Js({})
            var.put('newObj', PyJs_Object_2828_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.get('exports').put('isReactComponent', var.get('undefined'))
    var.get('exports').put('isCompatTag', var.get('isCompatTag'))
    var.get('exports').put('buildChildren', var.get('buildChildren'))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    pass
    var.put('isReactComponent', var.get('exports').put('isReactComponent', var.get('t').callprop('buildMatchMemberExpression', Js('React.Component'))))
    pass
    pass
    pass
PyJs_anonymous_2827_._set_name('anonymous')
PyJs_Object_2829_ = Js({'./index':Js(258.0)})
@Js
def PyJs_anonymous_2830_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_create', 'exports', '_interopRequireWildcard', '_index', 'getBindingIdentifiers', 'require', 'module', '_create2', 'getOuterBindingIdentifiers', 't', '_interopRequireDefault'])
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2832_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2832_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_getBindingIdentifiers_(node, duplicates, outerOnly, this, arguments, var=var):
        var = Scope({'node':node, 'duplicates':duplicates, 'this':this, 'arguments':arguments, 'outerOnly':outerOnly}, var)
        var.registers(['node', 'search', 'duplicates', 'outerOnly', 'keys', 'ids', 'i', 'key', 'id', '_ids'])
        var.put('search', Js([]).callprop('concat', var.get('node')))
        var.put('ids', PyJsComma(Js(0.0),var.get('_create2').get('default'))(var.get("null")))
        while var.get('search').get('length'):
            var.put('id', var.get('search').callprop('shift'))
            if var.get('id').neg():
                continue
            var.put('keys', var.get('t').get('getBindingIdentifiers').get('keys').get(var.get('id').get('type')))
            if var.get('t').callprop('isIdentifier', var.get('id')):
                if var.get('duplicates'):
                    var.put('_ids', var.get('ids').put(var.get('id').get('name'), (var.get('ids').get(var.get('id').get('name')) or Js([]))))
                    var.get('_ids').callprop('push', var.get('id'))
                else:
                    var.get('ids').put(var.get('id').get('name'), var.get('id'))
                continue
            if var.get('t').callprop('isExportDeclaration', var.get('id')):
                if var.get('t').callprop('isDeclaration', var.get('node').get('declaration')):
                    var.get('search').callprop('push', var.get('node').get('declaration'))
                continue
            if var.get('outerOnly'):
                if var.get('t').callprop('isFunctionDeclaration', var.get('id')):
                    var.get('search').callprop('push', var.get('id').get('id'))
                    continue
                if var.get('t').callprop('isFunctionExpression', var.get('id')):
                    continue
            if var.get('keys'):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('keys').get('length')):
                    try:
                        var.put('key', var.get('keys').get(var.get('i')))
                        if var.get('id').get(var.get('key')):
                            var.put('search', var.get('search').callprop('concat', var.get('id').get(var.get('key'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('ids')
    PyJsHoisted_getBindingIdentifiers_.__name__ = 'getBindingIdentifiers'
    var.put('getBindingIdentifiers', PyJsHoisted_getBindingIdentifiers_)
    @Js
    def PyJsHoisted_getOuterBindingIdentifiers_(node, duplicates, this, arguments, var=var):
        var = Scope({'node':node, 'duplicates':duplicates, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'duplicates'])
        return var.get('getBindingIdentifiers')(var.get('node'), var.get('duplicates'), var.get('true'))
    PyJsHoisted_getOuterBindingIdentifiers_.__name__ = 'getOuterBindingIdentifiers'
    var.put('getOuterBindingIdentifiers', PyJsHoisted_getOuterBindingIdentifiers_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2831_ = Js({})
            var.put('newObj', PyJs_Object_2831_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_create', var.get('require')(Js('babel-runtime/core-js/object/create')))
    var.put('_create2', var.get('_interopRequireDefault')(var.get('_create')))
    var.get('exports').put('getBindingIdentifiers', var.get('getBindingIdentifiers'))
    var.get('exports').put('getOuterBindingIdentifiers', var.get('getOuterBindingIdentifiers'))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    pass
    pass
    pass
    PyJs_Object_2833_ = Js({'DeclareClass':Js([Js('id')]),'DeclareFunction':Js([Js('id')]),'DeclareModule':Js([Js('id')]),'DeclareVariable':Js([Js('id')]),'InterfaceDeclaration':Js([Js('id')]),'TypeAlias':Js([Js('id')]),'CatchClause':Js([Js('param')]),'LabeledStatement':Js([Js('label')]),'UnaryExpression':Js([Js('argument')]),'AssignmentExpression':Js([Js('left')]),'ImportSpecifier':Js([Js('local')]),'ImportNamespaceSpecifier':Js([Js('local')]),'ImportDefaultSpecifier':Js([Js('local')]),'ImportDeclaration':Js([Js('specifiers')]),'ExportSpecifier':Js([Js('exported')]),'ExportNamespaceSpecifier':Js([Js('exported')]),'ExportDefaultSpecifier':Js([Js('exported')]),'FunctionDeclaration':Js([Js('id'), Js('params')]),'FunctionExpression':Js([Js('id'), Js('params')]),'ClassDeclaration':Js([Js('id')]),'ClassExpression':Js([Js('id')]),'RestElement':Js([Js('argument')]),'UpdateExpression':Js([Js('argument')]),'RestProperty':Js([Js('argument')]),'ObjectProperty':Js([Js('value')]),'AssignmentPattern':Js([Js('left')]),'ArrayPattern':Js([Js('elements')]),'ObjectPattern':Js([Js('properties')]),'VariableDeclaration':Js([Js('declarations')]),'VariableDeclarator':Js([Js('id')])})
    var.get('getBindingIdentifiers').put('keys', PyJs_Object_2833_)
    pass
PyJs_anonymous_2830_._set_name('anonymous')
PyJs_Object_2834_ = Js({'./index':Js(258.0),'babel-runtime/core-js/object/create':Js(101.0)})
@Js
def PyJs_anonymous_2835_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['_constants', 'module', 'isVar', '_interopRequireDefault', '_getIterator2', '_getIterator3', '_esutils2', 'isImmutable', 'isReferenced', 'isValidIdentifier', 'exports', 'isScope', '_interopRequireWildcard', 'isBinding', '_esutils', 'isSpecifierDefault', 'isBlockScoped', '_retrievers', '_index', 'require', 't', 'isLet'])
    @Js
    def PyJsHoisted_isScope_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'parent'])
        PyJs_Object_2840_ = Js({'body':var.get('node')})
        if (var.get('t').callprop('isBlockStatement', var.get('node')) and var.get('t').callprop('isFunction', var.get('parent'), PyJs_Object_2840_)):
            return Js(False)
        return var.get('t').callprop('isScopable', var.get('node'))
    PyJsHoisted_isScope_.__name__ = 'isScope'
    var.put('isScope', PyJsHoisted_isScope_)
    @Js
    def PyJsHoisted__interopRequireWildcard_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj', 'key', 'newObj'])
        if (var.get('obj') and var.get('obj').get('__esModule')):
            return var.get('obj')
        else:
            PyJs_Object_2836_ = Js({})
            var.put('newObj', PyJs_Object_2836_)
            if (var.get('obj')!=var.get("null")):
                for PyJsTemp in var.get('obj'):
                    var.put('key', PyJsTemp)
                    if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')):
                        var.get('newObj').put(var.get('key'), var.get('obj').get(var.get('key')))
            var.get('newObj').put('default', var.get('obj'))
            return var.get('newObj')
    PyJsHoisted__interopRequireWildcard_.__name__ = '_interopRequireWildcard'
    var.put('_interopRequireWildcard', PyJsHoisted__interopRequireWildcard_)
    @Js
    def PyJsHoisted_isImmutable_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get('t').callprop('isType', var.get('node').get('type'), Js('Immutable')):
            return var.get('true')
        if var.get('t').callprop('isIdentifier', var.get('node')):
            if PyJsStrictEq(var.get('node').get('name'),Js('undefined')):
                return var.get('true')
            else:
                return Js(False)
        return Js(False)
    PyJsHoisted_isImmutable_.__name__ = 'isImmutable'
    var.put('isImmutable', PyJsHoisted_isImmutable_)
    @Js
    def PyJsHoisted_isBinding_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', 'val', 'parent', 'keys', 'i', 'key'])
        var.put('keys', var.get('_retrievers').get('getBindingIdentifiers').get('keys').get(var.get('parent').get('type')))
        if var.get('keys'):
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('keys').get('length')):
                try:
                    var.put('key', var.get('keys').get(var.get('i')))
                    var.put('val', var.get('parent').get(var.get('key')))
                    if var.get('Array').callprop('isArray', var.get('val')):
                        if (var.get('val').callprop('indexOf', var.get('node'))>=Js(0.0)):
                            return var.get('true')
                    else:
                        if PyJsStrictEq(var.get('val'),var.get('node')):
                            return var.get('true')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return Js(False)
    PyJsHoisted_isBinding_.__name__ = 'isBinding'
    var.put('isBinding', PyJsHoisted_isBinding_)
    @Js
    def PyJsHoisted_isReferenced_(node, parent, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'parent':parent}, var)
        var.registers(['node', '_isArray', '_iterator', 'parent', 'param', '_i', '_ref'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get('parent').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('BindExpression')):
                SWITCHED = True
                return (PyJsStrictEq(var.get('parent').get('object'),var.get('node')) or PyJsStrictEq(var.get('parent').get('callee'),var.get('node')))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('MemberExpression')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('JSXMemberExpression')):
                SWITCHED = True
                if (PyJsStrictEq(var.get('parent').get('property'),var.get('node')) and var.get('parent').get('computed')):
                    return var.get('true')
                else:
                    if PyJsStrictEq(var.get('parent').get('object'),var.get('node')):
                        return var.get('true')
                    else:
                        return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('MetaProperty')):
                SWITCHED = True
                return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectProperty')):
                SWITCHED = True
                if PyJsStrictEq(var.get('parent').get('key'),var.get('node')):
                    return var.get('parent').get('computed')
            if SWITCHED or PyJsStrictEq(CONDITION, Js('VariableDeclarator')):
                SWITCHED = True
                return PyJsStrictNeq(var.get('parent').get('id'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrowFunctionExpression')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('FunctionDeclaration')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('FunctionExpression')):
                SWITCHED = True
                #for JS loop
                var.put('_iterator', var.get('parent').get('params'))
                var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                var.put('_i', Js(0.0))
                var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else PyJsComma(Js(0.0),var.get('_getIterator3').get('default'))(var.get('_iterator'))))
                while 1:
                    pass
                    if var.get('_isArray'):
                        if (var.get('_i')>=var.get('_iterator').get('length')):
                            break
                        var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i', var.get('_iterator').callprop('next'))
                        if var.get('_i').get('done'):
                            break
                        var.put('_ref', var.get('_i').get('value'))
                    var.put('param', var.get('_ref'))
                    if PyJsStrictEq(var.get('param'),var.get('node')):
                        return Js(False)
                
                return PyJsStrictNeq(var.get('parent').get('id'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ExportSpecifier')):
                SWITCHED = True
                if var.get('parent').get('source'):
                    return Js(False)
                else:
                    return PyJsStrictEq(var.get('parent').get('local'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ExportNamespaceSpecifier')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ExportDefaultSpecifier')):
                SWITCHED = True
                return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('JSXAttribute')):
                SWITCHED = True
                return PyJsStrictNeq(var.get('parent').get('name'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ClassProperty')):
                SWITCHED = True
                if PyJsStrictEq(var.get('parent').get('key'),var.get('node')):
                    return var.get('parent').get('computed')
                else:
                    return PyJsStrictEq(var.get('parent').get('value'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ImportDefaultSpecifier')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ImportNamespaceSpecifier')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ImportSpecifier')):
                SWITCHED = True
                return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ClassDeclaration')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ClassExpression')):
                SWITCHED = True
                return PyJsStrictNeq(var.get('parent').get('id'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ClassMethod')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectMethod')):
                SWITCHED = True
                return (PyJsStrictEq(var.get('parent').get('key'),var.get('node')) and var.get('parent').get('computed'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('LabeledStatement')):
                SWITCHED = True
                return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('CatchClause')):
                SWITCHED = True
                return PyJsStrictNeq(var.get('parent').get('param'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('RestElement')):
                SWITCHED = True
                return Js(False)
            if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentExpression')):
                SWITCHED = True
                return PyJsStrictEq(var.get('parent').get('right'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentPattern')):
                SWITCHED = True
                return PyJsStrictEq(var.get('parent').get('right'),var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectPattern')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayPattern')):
                SWITCHED = True
                return Js(False)
            SWITCHED = True
            break
        return var.get('true')
    PyJsHoisted_isReferenced_.__name__ = 'isReferenced'
    var.put('isReferenced', PyJsHoisted_isReferenced_)
    @Js
    def PyJsHoisted_isValidIdentifier_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        if (PyJsStrictNeq(var.get('name',throw=False).typeof(),Js('string')) or var.get('_esutils2').get('default').get('keyword').callprop('isReservedWordES6', var.get('name'), var.get('true'))):
            return Js(False)
        else:
            return var.get('_esutils2').get('default').get('keyword').callprop('isIdentifierNameES6', var.get('name'))
    PyJsHoisted_isValidIdentifier_.__name__ = 'isValidIdentifier'
    var.put('isValidIdentifier', PyJsHoisted_isValidIdentifier_)
    @Js
    def PyJsHoisted_isVar_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        PyJs_Object_2838_ = Js({'kind':Js('var')})
        return (var.get('t').callprop('isVariableDeclaration', var.get('node'), PyJs_Object_2838_) and var.get('node').get(var.get('_constants').get('BLOCK_SCOPED_SYMBOL')).neg())
    PyJsHoisted_isVar_.__name__ = 'isVar'
    var.put('isVar', PyJsHoisted_isVar_)
    @Js
    def PyJsHoisted__interopRequireDefault_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        PyJs_Object_2837_ = Js({'default':var.get('obj')})
        return (var.get('obj') if (var.get('obj') and var.get('obj').get('__esModule')) else PyJs_Object_2837_)
    PyJsHoisted__interopRequireDefault_.__name__ = '_interopRequireDefault'
    var.put('_interopRequireDefault', PyJsHoisted__interopRequireDefault_)
    @Js
    def PyJsHoisted_isLet_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return (var.get('t').callprop('isVariableDeclaration', var.get('node')) and (PyJsStrictNeq(var.get('node').get('kind'),Js('var')) or var.get('node').get(var.get('_constants').get('BLOCK_SCOPED_SYMBOL'))))
    PyJsHoisted_isLet_.__name__ = 'isLet'
    var.put('isLet', PyJsHoisted_isLet_)
    @Js
    def PyJsHoisted_isSpecifierDefault_(specifier, this, arguments, var=var):
        var = Scope({'this':this, 'specifier':specifier, 'arguments':arguments}, var)
        var.registers(['specifier'])
        PyJs_Object_2839_ = Js({'name':Js('default')})
        return (var.get('t').callprop('isImportDefaultSpecifier', var.get('specifier')) or var.get('t').callprop('isIdentifier', (var.get('specifier').get('imported') or var.get('specifier').get('exported')), PyJs_Object_2839_))
    PyJsHoisted_isSpecifierDefault_.__name__ = 'isSpecifierDefault'
    var.put('isSpecifierDefault', PyJsHoisted_isSpecifierDefault_)
    @Js
    def PyJsHoisted_isBlockScoped_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return ((var.get('t').callprop('isFunctionDeclaration', var.get('node')) or var.get('t').callprop('isClassDeclaration', var.get('node'))) or var.get('t').callprop('isLet', var.get('node')))
    PyJsHoisted_isBlockScoped_.__name__ = 'isBlockScoped'
    var.put('isBlockScoped', PyJsHoisted_isBlockScoped_)
    Js('use strict')
    var.get('exports').put('__esModule', var.get('true'))
    var.put('_getIterator2', var.get('require')(Js('babel-runtime/core-js/get-iterator')))
    var.put('_getIterator3', var.get('_interopRequireDefault')(var.get('_getIterator2')))
    var.get('exports').put('isBinding', var.get('isBinding'))
    var.get('exports').put('isReferenced', var.get('isReferenced'))
    var.get('exports').put('isValidIdentifier', var.get('isValidIdentifier'))
    var.get('exports').put('isLet', var.get('isLet'))
    var.get('exports').put('isBlockScoped', var.get('isBlockScoped'))
    var.get('exports').put('isVar', var.get('isVar'))
    var.get('exports').put('isSpecifierDefault', var.get('isSpecifierDefault'))
    var.get('exports').put('isScope', var.get('isScope'))
    var.get('exports').put('isImmutable', var.get('isImmutable'))
    var.put('_retrievers', var.get('require')(Js('./retrievers')))
    var.put('_esutils', var.get('require')(Js('esutils')))
    var.put('_esutils2', var.get('_interopRequireDefault')(var.get('_esutils')))
    var.put('_index', var.get('require')(Js('./index')))
    var.put('t', var.get('_interopRequireWildcard')(var.get('_index')))
    var.put('_constants', var.get('require')(Js('./constants')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_2835_._set_name('anonymous')
PyJs_Object_2841_ = Js({'./constants':Js(247.0),'./index':Js(258.0),'./retrievers':Js(260.0),'babel-runtime/core-js/get-iterator':Js(96.0),'esutils':Js(276.0)})
@Js
def PyJs_anonymous_2842_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['TokContext', 'reservedWords', 'parse$1', 'pp$4', 'isKeyword$1', 'getLineInfo', 'astralIdentifierStartCodes', 'isNewLine', 'module', '_typeof', 'isIdentifierChar', 'State', 'plugins', 'keywords', 'getOptions', 'Node', 'pp$8', 'isIdentifierStart', 'TokenType', 'types$1', 'beforeExpr', 'nonASCIIidentifierStartChars', 'DECIMAL_NUMBER', '_inherits', 'flowPlugin', '_possibleConstructorReturn', 'commentKeys', 'XHTMLEntities', 'isInAstralSet', 'empty', 'astralIdentifierCodes', 'exports', 'nonASCIIidentifierChars', 'binop', 'startsExpr', 'lineBreakG', 'pp', 'jsxPlugin', '_classCallCheck$6', '_classCallCheck$4', '_classCallCheck$5', '_classCallCheck$2', '_classCallCheck$3', '_classCallCheck$1', 'Position', 'getQualifiedJSXName', 'types', 'switchLabel', 'nonASCIIidentifier', 'lineBreak', 'HEX_NUMBER', 'last', 'loopLabel', 'Tokenizer', 'defaultOptions', '_classCallCheck', 'require', 'Parser', 'Token', 'nonASCIIidentifierStart', 'makePredicate', 'nonASCIIwhitespace', 'kw', 'codePointToString', 'finishNodeAt', 'pp$1', 'pp$2', 'pp$3', 'SourceLocation', 'pp$5', 'pp$6', 'pp$7'])
    @Js
    def PyJsHoisted_codePointToString_(code, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
        var.registers(['code'])
        if (var.get('code')<=Js(65535)):
            return var.get('String').callprop('fromCharCode', var.get('code'))
        else:
            return var.get('String').callprop('fromCharCode', (((var.get('code')-Js(65536))>>Js(10.0))+Js(55296)), (((var.get('code')-Js(65536))&Js(1023.0))+Js(56320)))
    PyJsHoisted_codePointToString_.__name__ = 'codePointToString'
    var.put('codePointToString', PyJsHoisted_codePointToString_)
    @Js
    def PyJsHoisted_isNewLine_(code, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
        var.registers(['code'])
        return (((PyJsStrictEq(var.get('code'),Js(10.0)) or PyJsStrictEq(var.get('code'),Js(13.0))) or PyJsStrictEq(var.get('code'),Js(8232))) or PyJsStrictEq(var.get('code'),Js(8233)))
    PyJsHoisted_isNewLine_.__name__ = 'isNewLine'
    var.put('isNewLine', PyJsHoisted_isNewLine_)
    @Js
    def PyJsHoisted_isIdentifierChar_(code, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
        var.registers(['code'])
        if (var.get('code')<Js(48.0)):
            return PyJsStrictEq(var.get('code'),Js(36.0))
        if (var.get('code')<Js(58.0)):
            return var.get('true')
        if (var.get('code')<Js(65.0)):
            return Js(False)
        if (var.get('code')<Js(91.0)):
            return var.get('true')
        if (var.get('code')<Js(97.0)):
            return PyJsStrictEq(var.get('code'),Js(95.0))
        if (var.get('code')<Js(123.0)):
            return var.get('true')
        if (var.get('code')<=Js(65535)):
            return ((var.get('code')>=Js(170)) and var.get('nonASCIIidentifier').callprop('test', var.get('String').callprop('fromCharCode', var.get('code'))))
        return (var.get('isInAstralSet')(var.get('code'), var.get('astralIdentifierStartCodes')) or var.get('isInAstralSet')(var.get('code'), var.get('astralIdentifierCodes')))
    PyJsHoisted_isIdentifierChar_.__name__ = 'isIdentifierChar'
    var.put('isIdentifierChar', PyJsHoisted_isIdentifierChar_)
    @Js
    def PyJsHoisted_getOptions_(opts, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'opts':opts}, var)
        var.registers(['opts', 'options', 'key'])
        PyJs_Object_2847_ = Js({})
        var.put('options', PyJs_Object_2847_)
        for PyJsTemp in var.get('defaultOptions'):
            var.put('key', PyJsTemp)
            var.get('options').put(var.get('key'), (var.get('opts').get(var.get('key')) if (var.get('opts') and var.get('opts').contains(var.get('key'))) else var.get('defaultOptions').get(var.get('key'))))
        return var.get('options')
    PyJsHoisted_getOptions_.__name__ = 'getOptions'
    var.put('getOptions', PyJsHoisted_getOptions_)
    @Js
    def PyJsHoisted_isIdentifierStart_(code, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
        var.registers(['code'])
        if (var.get('code')<Js(65.0)):
            return PyJsStrictEq(var.get('code'),Js(36.0))
        if (var.get('code')<Js(91.0)):
            return var.get('true')
        if (var.get('code')<Js(97.0)):
            return PyJsStrictEq(var.get('code'),Js(95.0))
        if (var.get('code')<Js(123.0)):
            return var.get('true')
        if (var.get('code')<=Js(65535)):
            return ((var.get('code')>=Js(170)) and var.get('nonASCIIidentifierStart').callprop('test', var.get('String').callprop('fromCharCode', var.get('code'))))
        return var.get('isInAstralSet')(var.get('code'), var.get('astralIdentifierStartCodes'))
    PyJsHoisted_isIdentifierStart_.__name__ = 'isIdentifierStart'
    var.put('isIdentifierStart', PyJsHoisted_isIdentifierStart_)
    @Js
    def PyJsHoisted__inherits_(subClass, superClass, this, arguments, var=var):
        var = Scope({'this':this, 'superClass':superClass, 'subClass':subClass, 'arguments':arguments}, var)
        var.registers(['superClass', 'subClass'])
        if (PyJsStrictNeq(var.get('superClass',throw=False).typeof(),Js('function')) and PyJsStrictNeq(var.get('superClass'),var.get("null"))):
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Super expression must either be null or a function, not ')+var.get('superClass',throw=False).typeof())))
            raise PyJsTempException
        PyJs_Object_2937_ = Js({'value':var.get('subClass'),'enumerable':Js(False),'writable':var.get('true'),'configurable':var.get('true')})
        PyJs_Object_2936_ = Js({'constructor':PyJs_Object_2937_})
        var.get('subClass').put('prototype', var.get('Object').callprop('create', (var.get('superClass') and var.get('superClass').get('prototype')), PyJs_Object_2936_))
        if var.get('superClass'):
            (var.get('Object').callprop('setPrototypeOf', var.get('subClass'), var.get('superClass')) if var.get('Object').get('setPrototypeOf') else var.get('subClass').put('__proto__', var.get('superClass')))
    PyJsHoisted__inherits_.__name__ = '_inherits'
    var.put('_inherits', PyJsHoisted__inherits_)
    @Js
    def PyJsHoisted__possibleConstructorReturn_(self, call, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'call':call, 'arguments':arguments}, var)
        var.registers(['self', 'call'])
        if var.get('self').neg():
            PyJsTempException = JsToPyException(var.get('ReferenceError').create(Js("this hasn't been initialised - super() hasn't been called")))
            raise PyJsTempException
        return (var.get('call') if (var.get('call') and (PyJsStrictEq(var.get('call',throw=False).typeof(),Js('object')) or PyJsStrictEq(var.get('call',throw=False).typeof(),Js('function')))) else var.get('self'))
    PyJsHoisted__possibleConstructorReturn_.__name__ = '_possibleConstructorReturn'
    var.put('_possibleConstructorReturn', PyJsHoisted__possibleConstructorReturn_)
    @Js
    def PyJsHoisted_isInAstralSet_(code, set, this, arguments, var=var):
        var = Scope({'this':this, 'code':code, 'set':set, 'arguments':arguments}, var)
        var.registers(['i', 'code', 'set', 'pos'])
        var.put('pos', Js(65536))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('set').get('length')):
            try:
                var.put('pos', var.get('set').get(var.get('i')), '+')
                if (var.get('pos')>var.get('code')):
                    return Js(False)
                var.put('pos', var.get('set').get((var.get('i')+Js(1.0))), '+')
                if (var.get('pos')>=var.get('code')):
                    return var.get('true')
            finally:
                    var.put('i', Js(2.0), '+')
    PyJsHoisted_isInAstralSet_.__name__ = 'isInAstralSet'
    var.put('isInAstralSet', PyJsHoisted_isInAstralSet_)
    @Js
    def PyJsHoisted_binop_(name, prec, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'prec':prec, 'arguments':arguments}, var)
        var.registers(['name', 'prec'])
        PyJs_Object_2850_ = Js({'beforeExpr':var.get('true'),'binop':var.get('prec')})
        return var.get('TokenType').create(var.get('name'), PyJs_Object_2850_)
    PyJsHoisted_binop_.__name__ = 'binop'
    var.put('binop', PyJsHoisted_binop_)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$6'
    var.put('_classCallCheck$6', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_finishNodeAt_(node, type, pos, loc, this, arguments, var=var):
        var = Scope({'node':node, 'loc':loc, 'arguments':arguments, 'this':this, 'type':type, 'pos':pos}, var)
        var.registers(['node', 'loc', 'type', 'pos'])
        var.get('node').put('type', var.get('type'))
        var.get('node').put('end', var.get('pos'))
        var.get('node').get('loc').put('end', var.get('loc'))
        var.get("this").callprop('processComment', var.get('node'))
        return var.get('node')
    PyJsHoisted_finishNodeAt_.__name__ = 'finishNodeAt'
    var.put('finishNodeAt', PyJsHoisted_finishNodeAt_)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$5'
    var.put('_classCallCheck$5', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$2'
    var.put('_classCallCheck$2', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$3'
    var.put('_classCallCheck$3', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$1'
    var.put('_classCallCheck$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_getQualifiedJSXName_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        if PyJsStrictEq(var.get('object').get('type'),Js('JSXIdentifier')):
            return var.get('object').get('name')
        if PyJsStrictEq(var.get('object').get('type'),Js('JSXNamespacedName')):
            return ((var.get('object').get('namespace').get('name')+Js(':'))+var.get('object').get('name').get('name'))
        if PyJsStrictEq(var.get('object').get('type'),Js('JSXMemberExpression')):
            return ((var.get('getQualifiedJSXName')(var.get('object').get('object'))+Js('.'))+var.get('getQualifiedJSXName')(var.get('object').get('property')))
    PyJsHoisted_getQualifiedJSXName_.__name__ = 'getQualifiedJSXName'
    var.put('getQualifiedJSXName', PyJsHoisted_getQualifiedJSXName_)
    @Js
    def PyJsHoisted_getLineInfo_(input, offset, this, arguments, var=var):
        var = Scope({'this':this, 'input':input, 'arguments':arguments, 'offset':offset}, var)
        var.registers(['input', 'line', 'cur', 'match', 'offset'])
        #for JS loop
        var.put('line', Js(1.0))
        var.put('cur', Js(0.0))
        while 1:
            var.get('lineBreakG').put('lastIndex', var.get('cur'))
            var.put('match', var.get('lineBreakG').callprop('exec', var.get('input')))
            if (var.get('match') and (var.get('match').get('index')<var.get('offset'))):
                var.put('line',Js(var.get('line').to_number())+Js(1))
                var.put('cur', (var.get('match').get('index')+var.get('match').get('0').get('length')))
            else:
                return var.get('Position').create(var.get('line'), (var.get('offset')-var.get('cur')))
        
    PyJsHoisted_getLineInfo_.__name__ = 'getLineInfo'
    var.put('getLineInfo', PyJsHoisted_getLineInfo_)
    @Js
    def PyJsHoisted_last_(stack, this, arguments, var=var):
        var = Scope({'this':this, 'stack':stack, 'arguments':arguments}, var)
        var.registers(['stack'])
        return var.get('stack').get((var.get('stack').get('length')-Js(1.0)))
    PyJsHoisted_last_.__name__ = 'last'
    var.put('last', PyJsHoisted_last_)
    @Js
    def PyJsHoistedNonPyName(input, options, this, arguments, var=var):
        var = Scope({'this':this, 'input':input, 'options':options, 'arguments':arguments}, var)
        var.registers(['input', 'options'])
        return var.get('Parser').create(var.get('options'), var.get('input')).callprop('parse')
    PyJsHoistedNonPyName.__name__ = 'parse$1'
    var.put('parse$1', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoistedNonPyName.__name__ = '_classCallCheck$4'
    var.put('_classCallCheck$4', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_makePredicate_(words, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'words':words}, var)
        var.registers(['words'])
        var.put('words', var.get('words').callprop('split', Js(' ')))
        @Js
        def PyJs_anonymous_2844_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            return (var.get('words').callprop('indexOf', var.get('str'))>=Js(0.0))
        PyJs_anonymous_2844_._set_name('anonymous')
        return PyJs_anonymous_2844_
    PyJsHoisted_makePredicate_.__name__ = 'makePredicate'
    var.put('makePredicate', PyJsHoisted_makePredicate_)
    @Js
    def PyJsHoisted_kw_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['options', 'name'])
        PyJs_Object_2866_ = Js({})
        var.put('options', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_2866_))
        var.get('options').put('keyword', var.get('name'))
        var.get('keywords').put(var.get('name'), var.get('types').put((Js('_')+var.get('name')), var.get('TokenType').create(var.get('name'), var.get('options'))))
    PyJsHoisted_kw_.__name__ = 'kw'
    var.put('kw', PyJsHoisted_kw_)
    @Js
    def PyJsHoisted__classCallCheck_(instance, Constructor, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments, 'Constructor':Constructor}, var)
        var.registers(['instance', 'Constructor'])
        if var.get('instance').instanceof(var.get('Constructor')).neg():
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
            raise PyJsTempException
    PyJsHoisted__classCallCheck_.__name__ = '_classCallCheck'
    var.put('_classCallCheck', PyJsHoisted__classCallCheck_)
    Js('use strict')
    PyJs_Object_2843_ = Js({'value':var.get('true')})
    var.get('Object').callprop('defineProperty', var.get('exports'), Js('__esModule'), PyJs_Object_2843_)
    pass
    PyJs_Object_2845_ = Js({'6':var.get('makePredicate')(Js('enum await')),'strict':var.get('makePredicate')(Js('implements interface let package private protected public static yield')),'strictBind':var.get('makePredicate')(Js('eval arguments'))})
    var.put('reservedWords', PyJs_Object_2845_)
    var.put('isKeyword$1', var.get('makePredicate')(Js('break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super')))
    var.put('nonASCIIidentifierStartChars', Js('\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc'))
    var.put('nonASCIIidentifierChars', Js('\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f'))
    var.put('nonASCIIidentifierStart', var.get('RegExp').create(((Js('[')+var.get('nonASCIIidentifierStartChars'))+Js(']'))))
    var.put('nonASCIIidentifier', var.get('RegExp').create((((Js('[')+var.get('nonASCIIidentifierStartChars'))+var.get('nonASCIIidentifierChars'))+Js(']'))))
    var.put('nonASCIIidentifierStartChars', var.put('nonASCIIidentifierChars', var.get("null")))
    var.put('astralIdentifierStartCodes', Js([Js(0.0), Js(11.0), Js(2.0), Js(25.0), Js(2.0), Js(18.0), Js(2.0), Js(1.0), Js(2.0), Js(14.0), Js(3.0), Js(13.0), Js(35.0), Js(122.0), Js(70.0), Js(52.0), Js(268.0), Js(28.0), Js(4.0), Js(48.0), Js(48.0), Js(31.0), Js(17.0), Js(26.0), Js(6.0), Js(37.0), Js(11.0), Js(29.0), Js(3.0), Js(35.0), Js(5.0), Js(7.0), Js(2.0), Js(4.0), Js(43.0), Js(157.0), Js(19.0), Js(35.0), Js(5.0), Js(35.0), Js(5.0), Js(39.0), Js(9.0), Js(51.0), Js(157.0), Js(310.0), Js(10.0), Js(21.0), Js(11.0), Js(7.0), Js(153.0), Js(5.0), Js(3.0), Js(0.0), Js(2.0), Js(43.0), Js(2.0), Js(1.0), Js(4.0), Js(0.0), Js(3.0), Js(22.0), Js(11.0), Js(22.0), Js(10.0), Js(30.0), Js(66.0), Js(18.0), Js(2.0), Js(1.0), Js(11.0), Js(21.0), Js(11.0), Js(25.0), Js(71.0), Js(55.0), Js(7.0), Js(1.0), Js(65.0), Js(0.0), Js(16.0), Js(3.0), Js(2.0), Js(2.0), Js(2.0), Js(26.0), Js(45.0), Js(28.0), Js(4.0), Js(28.0), Js(36.0), Js(7.0), Js(2.0), Js(27.0), Js(28.0), Js(53.0), Js(11.0), Js(21.0), Js(11.0), Js(18.0), Js(14.0), Js(17.0), Js(111.0), Js(72.0), Js(56.0), Js(50.0), Js(14.0), Js(50.0), Js(785.0), Js(52.0), Js(76.0), Js(44.0), Js(33.0), Js(24.0), Js(27.0), Js(35.0), Js(42.0), Js(34.0), Js(4.0), Js(0.0), Js(13.0), Js(47.0), Js(15.0), Js(3.0), Js(22.0), Js(0.0), Js(2.0), Js(0.0), Js(36.0), Js(17.0), Js(2.0), Js(24.0), Js(85.0), Js(6.0), Js(2.0), Js(0.0), Js(2.0), Js(3.0), Js(2.0), Js(14.0), Js(2.0), Js(9.0), Js(8.0), Js(46.0), Js(39.0), Js(7.0), Js(3.0), Js(1.0), Js(3.0), Js(21.0), Js(2.0), Js(6.0), Js(2.0), Js(1.0), Js(2.0), Js(4.0), Js(4.0), Js(0.0), Js(19.0), Js(0.0), Js(13.0), Js(4.0), Js(159.0), Js(52.0), Js(19.0), Js(3.0), Js(54.0), Js(47.0), Js(21.0), Js(1.0), Js(2.0), Js(0.0), Js(185.0), Js(46.0), Js(42.0), Js(3.0), Js(37.0), Js(47.0), Js(21.0), Js(0.0), Js(60.0), Js(42.0), Js(86.0), Js(25.0), Js(391.0), Js(63.0), Js(32.0), Js(0.0), Js(449.0), Js(56.0), Js(264.0), Js(8.0), Js(2.0), Js(36.0), Js(18.0), Js(0.0), Js(50.0), Js(29.0), Js(881.0), Js(921.0), Js(103.0), Js(110.0), Js(18.0), Js(195.0), Js(2749.0), Js(1070.0), Js(4050.0), Js(582.0), Js(8634.0), Js(568.0), Js(8.0), Js(30.0), Js(114.0), Js(29.0), Js(19.0), Js(47.0), Js(17.0), Js(3.0), Js(32.0), Js(20.0), Js(6.0), Js(18.0), Js(881.0), Js(68.0), Js(12.0), Js(0.0), Js(67.0), Js(12.0), Js(65.0), Js(0.0), Js(32.0), Js(6124.0), Js(20.0), Js(754.0), Js(9486.0), Js(1.0), Js(3071.0), Js(106.0), Js(6.0), Js(12.0), Js(4.0), Js(8.0), Js(8.0), Js(9.0), Js(5991.0), Js(84.0), Js(2.0), Js(70.0), Js(2.0), Js(1.0), Js(3.0), Js(0.0), Js(3.0), Js(1.0), Js(3.0), Js(3.0), Js(2.0), Js(11.0), Js(2.0), Js(0.0), Js(2.0), Js(6.0), Js(2.0), Js(64.0), Js(2.0), Js(3.0), Js(3.0), Js(7.0), Js(2.0), Js(6.0), Js(2.0), Js(27.0), Js(2.0), Js(3.0), Js(2.0), Js(4.0), Js(2.0), Js(0.0), Js(4.0), Js(6.0), Js(2.0), Js(339.0), Js(3.0), Js(24.0), Js(2.0), Js(24.0), Js(2.0), Js(30.0), Js(2.0), Js(24.0), Js(2.0), Js(30.0), Js(2.0), Js(24.0), Js(2.0), Js(30.0), Js(2.0), Js(24.0), Js(2.0), Js(30.0), Js(2.0), Js(24.0), Js(2.0), Js(7.0), Js(4149.0), Js(196.0), Js(60.0), Js(67.0), Js(1213.0), Js(3.0), Js(2.0), Js(26.0), Js(2.0), Js(1.0), Js(2.0), Js(0.0), Js(3.0), Js(0.0), Js(2.0), Js(9.0), Js(2.0), Js(3.0), Js(2.0), Js(0.0), Js(2.0), Js(0.0), Js(7.0), Js(0.0), Js(5.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(2.0), Js(2.0), Js(1.0), Js(2.0), Js(0.0), Js(3.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(0.0), Js(2.0), Js(1.0), Js(2.0), Js(0.0), Js(3.0), Js(3.0), Js(2.0), Js(6.0), Js(2.0), Js(3.0), Js(2.0), Js(3.0), Js(2.0), Js(0.0), Js(2.0), Js(9.0), Js(2.0), Js(16.0), Js(6.0), Js(2.0), Js(2.0), Js(4.0), Js(2.0), Js(16.0), Js(4421.0), Js(42710.0), Js(42.0), Js(4148.0), Js(12.0), Js(221.0), Js(3.0), Js(5761.0), Js(10591.0), Js(541.0)]))
    var.put('astralIdentifierCodes', Js([Js(509.0), Js(0.0), Js(227.0), Js(0.0), Js(150.0), Js(4.0), Js(294.0), Js(9.0), Js(1368.0), Js(2.0), Js(2.0), Js(1.0), Js(6.0), Js(3.0), Js(41.0), Js(2.0), Js(5.0), Js(0.0), Js(166.0), Js(1.0), Js(1306.0), Js(2.0), Js(54.0), Js(14.0), Js(32.0), Js(9.0), Js(16.0), Js(3.0), Js(46.0), Js(10.0), Js(54.0), Js(9.0), Js(7.0), Js(2.0), Js(37.0), Js(13.0), Js(2.0), Js(9.0), Js(52.0), Js(0.0), Js(13.0), Js(2.0), Js(49.0), Js(13.0), Js(10.0), Js(2.0), Js(4.0), Js(9.0), Js(83.0), Js(11.0), Js(7.0), Js(0.0), Js(161.0), Js(11.0), Js(6.0), Js(9.0), Js(7.0), Js(3.0), Js(57.0), Js(0.0), Js(2.0), Js(6.0), Js(3.0), Js(1.0), Js(3.0), Js(2.0), Js(10.0), Js(0.0), Js(11.0), Js(1.0), Js(3.0), Js(6.0), Js(4.0), Js(4.0), Js(193.0), Js(17.0), Js(10.0), Js(9.0), Js(87.0), Js(19.0), Js(13.0), Js(9.0), Js(214.0), Js(6.0), Js(3.0), Js(8.0), Js(28.0), Js(1.0), Js(83.0), Js(16.0), Js(16.0), Js(9.0), Js(82.0), Js(12.0), Js(9.0), Js(9.0), Js(84.0), Js(14.0), Js(5.0), Js(9.0), Js(423.0), Js(9.0), Js(838.0), Js(7.0), Js(2.0), Js(7.0), Js(17.0), Js(9.0), Js(57.0), Js(21.0), Js(2.0), Js(13.0), Js(19882.0), Js(9.0), Js(135.0), Js(4.0), Js(60.0), Js(6.0), Js(26.0), Js(9.0), Js(1016.0), Js(45.0), Js(17.0), Js(3.0), Js(19723.0), Js(1.0), Js(5319.0), Js(4.0), Js(4.0), Js(5.0), Js(9.0), Js(7.0), Js(3.0), Js(6.0), Js(31.0), Js(3.0), Js(149.0), Js(2.0), Js(1418.0), Js(49.0), Js(513.0), Js(54.0), Js(5.0), Js(49.0), Js(9.0), Js(0.0), Js(15.0), Js(0.0), Js(23.0), Js(4.0), Js(2.0), Js(14.0), Js(1361.0), Js(6.0), Js(2.0), Js(16.0), Js(3.0), Js(6.0), Js(2.0), Js(1.0), Js(2.0), Js(4.0), Js(2214.0), Js(6.0), Js(110.0), Js(6.0), Js(6.0), Js(9.0), Js(792487.0), Js(239.0)]))
    pass
    pass
    pass
    PyJs_Object_2846_ = Js({'sourceType':Js('script'),'sourceFilename':var.get('undefined'),'allowReturnOutsideFunction':Js(False),'allowImportExportEverywhere':Js(False),'allowSuperOutsideMethod':Js(False),'plugins':Js([]),'strictMode':var.get("null")})
    var.put('defaultOptions', PyJs_Object_2846_)
    pass
    pass
    @Js
    def PyJs_TokenType_2848_(label, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'TokenType':PyJs_TokenType_2848_, 'label':label}, var)
        var.registers(['conf', 'label'])
        PyJs_Object_2849_ = Js({})
        var.put('conf', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else PyJs_Object_2849_))
        var.get('_classCallCheck$2')(var.get("this"), var.get('TokenType'))
        var.get("this").put('label', var.get('label'))
        var.get("this").put('keyword', var.get('conf').get('keyword'))
        var.get("this").put('beforeExpr', var.get('conf').get('beforeExpr').neg().neg())
        var.get("this").put('startsExpr', var.get('conf').get('startsExpr').neg().neg())
        var.get("this").put('rightAssociative', var.get('conf').get('rightAssociative').neg().neg())
        var.get("this").put('isLoop', var.get('conf').get('isLoop').neg().neg())
        var.get("this").put('isAssign', var.get('conf').get('isAssign').neg().neg())
        var.get("this").put('prefix', var.get('conf').get('prefix').neg().neg())
        var.get("this").put('postfix', var.get('conf').get('postfix').neg().neg())
        var.get("this").put('binop', (var.get('conf').get('binop') or var.get("null")))
        var.get("this").put('updateContext', var.get("null"))
    PyJs_TokenType_2848_._set_name('TokenType')
    var.put('TokenType', PyJs_TokenType_2848_)
    pass
    PyJs_Object_2851_ = Js({'beforeExpr':var.get('true')})
    var.put('beforeExpr', PyJs_Object_2851_)
    PyJs_Object_2852_ = Js({'startsExpr':var.get('true')})
    var.put('startsExpr', PyJs_Object_2852_)
    PyJs_Object_2854_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2855_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2856_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2857_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2858_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2859_ = Js({'beforeExpr':var.get('true'),'isAssign':var.get('true')})
    PyJs_Object_2860_ = Js({'beforeExpr':var.get('true'),'isAssign':var.get('true')})
    PyJs_Object_2861_ = Js({'prefix':var.get('true'),'postfix':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2862_ = Js({'beforeExpr':var.get('true'),'prefix':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2863_ = Js({'beforeExpr':var.get('true'),'binop':Js(9.0),'prefix':var.get('true'),'startsExpr':var.get('true')})
    PyJs_Object_2864_ = Js({'beforeExpr':var.get('true'),'binop':Js(11.0),'rightAssociative':var.get('true')})
    PyJs_Object_2853_ = Js({'num':var.get('TokenType').create(Js('num'), var.get('startsExpr')),'regexp':var.get('TokenType').create(Js('regexp'), var.get('startsExpr')),'string':var.get('TokenType').create(Js('string'), var.get('startsExpr')),'name':var.get('TokenType').create(Js('name'), var.get('startsExpr')),'eof':var.get('TokenType').create(Js('eof')),'bracketL':var.get('TokenType').create(Js('['), PyJs_Object_2854_),'bracketR':var.get('TokenType').create(Js(']')),'braceL':var.get('TokenType').create(Js('{'), PyJs_Object_2855_),'braceBarL':var.get('TokenType').create(Js('{|'), PyJs_Object_2856_),'braceR':var.get('TokenType').create(Js('}')),'braceBarR':var.get('TokenType').create(Js('|}')),'parenL':var.get('TokenType').create(Js('('), PyJs_Object_2857_),'parenR':var.get('TokenType').create(Js(')')),'comma':var.get('TokenType').create(Js(','), var.get('beforeExpr')),'semi':var.get('TokenType').create(Js(';'), var.get('beforeExpr')),'colon':var.get('TokenType').create(Js(':'), var.get('beforeExpr')),'doubleColon':var.get('TokenType').create(Js('::'), var.get('beforeExpr')),'dot':var.get('TokenType').create(Js('.')),'question':var.get('TokenType').create(Js('?'), var.get('beforeExpr')),'arrow':var.get('TokenType').create(Js('=>'), var.get('beforeExpr')),'template':var.get('TokenType').create(Js('template')),'ellipsis':var.get('TokenType').create(Js('...'), var.get('beforeExpr')),'backQuote':var.get('TokenType').create(Js('`'), var.get('startsExpr')),'dollarBraceL':var.get('TokenType').create(Js('${'), PyJs_Object_2858_),'at':var.get('TokenType').create(Js('@')),'eq':var.get('TokenType').create(Js('='), PyJs_Object_2859_),'assign':var.get('TokenType').create(Js('_='), PyJs_Object_2860_),'incDec':var.get('TokenType').create(Js('++/--'), PyJs_Object_2861_),'prefix':var.get('TokenType').create(Js('prefix'), PyJs_Object_2862_),'logicalOR':var.get('binop')(Js('||'), Js(1.0)),'logicalAND':var.get('binop')(Js('&&'), Js(2.0)),'bitwiseOR':var.get('binop')(Js('|'), Js(3.0)),'bitwiseXOR':var.get('binop')(Js('^'), Js(4.0)),'bitwiseAND':var.get('binop')(Js('&'), Js(5.0)),'equality':var.get('binop')(Js('==/!='), Js(6.0)),'relational':var.get('binop')(Js('</>'), Js(7.0)),'bitShift':var.get('binop')(Js('<</>>'), Js(8.0)),'plusMin':var.get('TokenType').create(Js('+/-'), PyJs_Object_2863_),'modulo':var.get('binop')(Js('%'), Js(10.0)),'star':var.get('binop')(Js('*'), Js(10.0)),'slash':var.get('binop')(Js('/'), Js(10.0)),'exponent':var.get('TokenType').create(Js('**'), PyJs_Object_2864_)})
    var.put('types', PyJs_Object_2853_)
    PyJs_Object_2865_ = Js({})
    var.put('keywords', PyJs_Object_2865_)
    pass
    var.get('kw')(Js('break'))
    var.get('kw')(Js('case'), var.get('beforeExpr'))
    var.get('kw')(Js('catch'))
    var.get('kw')(Js('continue'))
    var.get('kw')(Js('debugger'))
    var.get('kw')(Js('default'), var.get('beforeExpr'))
    PyJs_Object_2867_ = Js({'isLoop':var.get('true'),'beforeExpr':var.get('true')})
    var.get('kw')(Js('do'), PyJs_Object_2867_)
    var.get('kw')(Js('else'), var.get('beforeExpr'))
    var.get('kw')(Js('finally'))
    PyJs_Object_2868_ = Js({'isLoop':var.get('true')})
    var.get('kw')(Js('for'), PyJs_Object_2868_)
    var.get('kw')(Js('function'), var.get('startsExpr'))
    var.get('kw')(Js('if'))
    var.get('kw')(Js('return'), var.get('beforeExpr'))
    var.get('kw')(Js('switch'))
    var.get('kw')(Js('throw'), var.get('beforeExpr'))
    var.get('kw')(Js('try'))
    var.get('kw')(Js('var'))
    var.get('kw')(Js('let'))
    var.get('kw')(Js('const'))
    PyJs_Object_2869_ = Js({'isLoop':var.get('true')})
    var.get('kw')(Js('while'), PyJs_Object_2869_)
    var.get('kw')(Js('with'))
    PyJs_Object_2870_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    var.get('kw')(Js('new'), PyJs_Object_2870_)
    var.get('kw')(Js('this'), var.get('startsExpr'))
    var.get('kw')(Js('super'), var.get('startsExpr'))
    var.get('kw')(Js('class'))
    var.get('kw')(Js('extends'), var.get('beforeExpr'))
    var.get('kw')(Js('export'))
    var.get('kw')(Js('import'))
    PyJs_Object_2871_ = Js({'beforeExpr':var.get('true'),'startsExpr':var.get('true')})
    var.get('kw')(Js('yield'), PyJs_Object_2871_)
    var.get('kw')(Js('null'), var.get('startsExpr'))
    var.get('kw')(Js('true'), var.get('startsExpr'))
    var.get('kw')(Js('false'), var.get('startsExpr'))
    PyJs_Object_2872_ = Js({'beforeExpr':var.get('true'),'binop':Js(7.0)})
    var.get('kw')(Js('in'), PyJs_Object_2872_)
    PyJs_Object_2873_ = Js({'beforeExpr':var.get('true'),'binop':Js(7.0)})
    var.get('kw')(Js('instanceof'), PyJs_Object_2873_)
    PyJs_Object_2874_ = Js({'beforeExpr':var.get('true'),'prefix':var.get('true'),'startsExpr':var.get('true')})
    var.get('kw')(Js('typeof'), PyJs_Object_2874_)
    PyJs_Object_2875_ = Js({'beforeExpr':var.get('true'),'prefix':var.get('true'),'startsExpr':var.get('true')})
    var.get('kw')(Js('void'), PyJs_Object_2875_)
    PyJs_Object_2876_ = Js({'beforeExpr':var.get('true'),'prefix':var.get('true'),'startsExpr':var.get('true')})
    var.get('kw')(Js('delete'), PyJs_Object_2876_)
    var.put('lineBreak', JsRegExp('/\\r\\n?|\\n|\\u2028|\\u2029/'))
    var.put('lineBreakG', var.get('RegExp').create(var.get('lineBreak').get('source'), Js('g')))
    pass
    var.put('nonASCIIwhitespace', JsRegExp('/[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/'))
    pass
    @Js
    def PyJs_TokContext_2877_(token, isExpr, preserveSpace, override, this, arguments, var=var):
        var = Scope({'TokContext':PyJs_TokContext_2877_, 'this':this, 'token':token, 'isExpr':isExpr, 'arguments':arguments, 'preserveSpace':preserveSpace, 'override':override}, var)
        var.registers(['override', 'token', 'isExpr', 'preserveSpace'])
        var.get('_classCallCheck$3')(var.get("this"), var.get('TokContext'))
        var.get("this").put('token', var.get('token'))
        var.get("this").put('isExpr', var.get('isExpr').neg().neg())
        var.get("this").put('preserveSpace', var.get('preserveSpace').neg().neg())
        var.get("this").put('override', var.get('override'))
    PyJs_TokContext_2877_._set_name('TokContext')
    var.put('TokContext', PyJs_TokContext_2877_)
    @Js
    def PyJs_anonymous_2879_(p, this, arguments, var=var):
        var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
        var.registers(['p'])
        return var.get('p').callprop('readTmplToken')
    PyJs_anonymous_2879_._set_name('anonymous')
    PyJs_Object_2878_ = Js({'braceStatement':var.get('TokContext').create(Js('{'), Js(False)),'braceExpression':var.get('TokContext').create(Js('{'), var.get('true')),'templateQuasi':var.get('TokContext').create(Js('${'), var.get('true')),'parenStatement':var.get('TokContext').create(Js('('), Js(False)),'parenExpression':var.get('TokContext').create(Js('('), var.get('true')),'template':var.get('TokContext').create(Js('`'), var.get('true'), var.get('true'), PyJs_anonymous_2879_),'functionExpression':var.get('TokContext').create(Js('function'), var.get('true'))})
    var.put('types$1', PyJs_Object_2878_)
    @Js
    def PyJs_anonymous_2880_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['out'])
        if PyJsStrictEq(var.get("this").get('state').get('context').get('length'),Js(1.0)):
            var.get("this").get('state').put('exprAllowed', var.get('true'))
            return var.get('undefined')
        var.put('out', var.get("this").get('state').get('context').callprop('pop'))
        if (PyJsStrictEq(var.get('out'),var.get('types$1').get('braceStatement')) and PyJsStrictEq(var.get("this").callprop('curContext'),var.get('types$1').get('functionExpression'))):
            var.get("this").get('state').get('context').callprop('pop')
            var.get("this").get('state').put('exprAllowed', Js(False))
        else:
            if PyJsStrictEq(var.get('out'),var.get('types$1').get('templateQuasi')):
                var.get("this").get('state').put('exprAllowed', var.get('true'))
            else:
                var.get("this").get('state').put('exprAllowed', var.get('out').get('isExpr').neg())
    PyJs_anonymous_2880_._set_name('anonymous')
    var.get('types').get('parenR').put('updateContext', var.get('types').get('braceR').put('updateContext', PyJs_anonymous_2880_))
    @Js
    def PyJs_anonymous_2881_(prevType, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'prevType':prevType}, var)
        var.registers(['prevType'])
        var.get("this").get('state').put('exprAllowed', Js(False))
        if ((PyJsStrictEq(var.get('prevType'),var.get('types').get('_let')) or PyJsStrictEq(var.get('prevType'),var.get('types').get('_const'))) or PyJsStrictEq(var.get('prevType'),var.get('types').get('_var'))):
            if var.get('lineBreak').callprop('test', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('end'))):
                var.get("this").get('state').put('exprAllowed', var.get('true'))
    PyJs_anonymous_2881_._set_name('anonymous')
    var.get('types').get('name').put('updateContext', PyJs_anonymous_2881_)
    @Js
    def PyJs_anonymous_2882_(prevType, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'prevType':prevType}, var)
        var.registers(['prevType'])
        var.get("this").get('state').get('context').callprop('push', (var.get('types$1').get('braceStatement') if var.get("this").callprop('braceIsBlock', var.get('prevType')) else var.get('types$1').get('braceExpression')))
        var.get("this").get('state').put('exprAllowed', var.get('true'))
    PyJs_anonymous_2882_._set_name('anonymous')
    var.get('types').get('braceL').put('updateContext', PyJs_anonymous_2882_)
    @Js
    def PyJs_anonymous_2883_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('templateQuasi'))
        var.get("this").get('state').put('exprAllowed', var.get('true'))
    PyJs_anonymous_2883_._set_name('anonymous')
    var.get('types').get('dollarBraceL').put('updateContext', PyJs_anonymous_2883_)
    @Js
    def PyJs_anonymous_2884_(prevType, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'prevType':prevType}, var)
        var.registers(['prevType', 'statementParens'])
        var.put('statementParens', (((PyJsStrictEq(var.get('prevType'),var.get('types').get('_if')) or PyJsStrictEq(var.get('prevType'),var.get('types').get('_for'))) or PyJsStrictEq(var.get('prevType'),var.get('types').get('_with'))) or PyJsStrictEq(var.get('prevType'),var.get('types').get('_while'))))
        var.get("this").get('state').get('context').callprop('push', (var.get('types$1').get('parenStatement') if var.get('statementParens') else var.get('types$1').get('parenExpression')))
        var.get("this").get('state').put('exprAllowed', var.get('true'))
    PyJs_anonymous_2884_._set_name('anonymous')
    var.get('types').get('parenL').put('updateContext', PyJs_anonymous_2884_)
    @Js
    def PyJs_anonymous_2885_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJs_anonymous_2885_._set_name('anonymous')
    var.get('types').get('incDec').put('updateContext', PyJs_anonymous_2885_)
    @Js
    def PyJs_anonymous_2886_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if PyJsStrictNeq(var.get("this").callprop('curContext'),var.get('types$1').get('braceStatement')):
            var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('functionExpression'))
        var.get("this").get('state').put('exprAllowed', Js(False))
    PyJs_anonymous_2886_._set_name('anonymous')
    var.get('types').get('_function').put('updateContext', PyJs_anonymous_2886_)
    @Js
    def PyJs_anonymous_2887_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if PyJsStrictEq(var.get("this").callprop('curContext'),var.get('types$1').get('template')):
            var.get("this").get('state').get('context').callprop('pop')
        else:
            var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('template'))
        var.get("this").get('state').put('exprAllowed', Js(False))
    PyJs_anonymous_2887_._set_name('anonymous')
    var.get('types').get('backQuote').put('updateContext', PyJs_anonymous_2887_)
    pass
    @Js
    def PyJs_Position_2888_(line, col, this, arguments, var=var):
        var = Scope({'this':this, 'Position':PyJs_Position_2888_, 'line':line, 'col':col, 'arguments':arguments}, var)
        var.registers(['line', 'col'])
        var.get('_classCallCheck$4')(var.get("this"), var.get('Position'))
        var.get("this").put('line', var.get('line'))
        var.get("this").put('column', var.get('col'))
    PyJs_Position_2888_._set_name('Position')
    var.put('Position', PyJs_Position_2888_)
    @Js
    def PyJs_SourceLocation_2889_(start, end, this, arguments, var=var):
        var = Scope({'this':this, 'start':start, 'end':end, 'arguments':arguments, 'SourceLocation':PyJs_SourceLocation_2889_}, var)
        var.registers(['start', 'end'])
        var.get('_classCallCheck$4')(var.get("this"), var.get('SourceLocation'))
        var.get("this").put('start', var.get('start'))
        var.get("this").put('end', var.get('end'))
    PyJs_SourceLocation_2889_._set_name('SourceLocation')
    var.put('SourceLocation', PyJs_SourceLocation_2889_)
    pass
    pass
    @Js
    def PyJs_anonymous_2890_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['State'])
        @Js
        def PyJsHoisted_State_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('_classCallCheck$5')(var.get("this"), var.get('State'))
        PyJsHoisted_State_.__name__ = 'State'
        var.put('State', PyJsHoisted_State_)
        pass
        @Js
        def PyJs_init_2891_(options, input, this, arguments, var=var):
            var = Scope({'this':this, 'input':input, 'init':PyJs_init_2891_, 'options':options, 'arguments':arguments}, var)
            var.registers(['input', 'options'])
            var.get("this").put('strict', (Js(False) if PyJsStrictEq(var.get('options').get('strictMode'),Js(False)) else PyJsStrictEq(var.get('options').get('sourceType'),Js('module'))))
            var.get("this").put('input', var.get('input'))
            var.get("this").put('potentialArrowAt', (-Js(1.0)))
            var.get("this").put('inMethod', var.get("this").put('inFunction', var.get("this").put('inGenerator', var.get("this").put('inAsync', var.get("this").put('inType', Js(False))))))
            var.get("this").put('labels', Js([]))
            var.get("this").put('decorators', Js([]))
            var.get("this").put('tokens', Js([]))
            var.get("this").put('comments', Js([]))
            var.get("this").put('trailingComments', Js([]))
            var.get("this").put('leadingComments', Js([]))
            var.get("this").put('commentStack', Js([]))
            var.get("this").put('pos', var.get("this").put('lineStart', Js(0.0)))
            var.get("this").put('curLine', Js(1.0))
            var.get("this").put('type', var.get('types').get('eof'))
            var.get("this").put('value', var.get("null"))
            var.get("this").put('start', var.get("this").put('end', var.get("this").get('pos')))
            var.get("this").put('startLoc', var.get("this").put('endLoc', var.get("this").callprop('curPosition')))
            var.get("this").put('lastTokEndLoc', var.get("this").put('lastTokStartLoc', var.get("null")))
            var.get("this").put('lastTokStart', var.get("this").put('lastTokEnd', var.get("this").get('pos')))
            var.get("this").put('context', Js([var.get('types$1').get('braceStatement')]))
            var.get("this").put('exprAllowed', var.get('true'))
            var.get("this").put('containsEsc', var.get("this").put('containsOctal', Js(False)))
            var.get("this").put('octalPosition', var.get("null"))
            var.get("this").put('exportedIdentifiers', Js([]))
            return var.get("this")
        PyJs_init_2891_._set_name('init')
        var.get('State').get('prototype').put('init', PyJs_init_2891_)
        @Js
        def PyJs_curPosition_2892_(this, arguments, var=var):
            var = Scope({'this':this, 'curPosition':PyJs_curPosition_2892_, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Position').create(var.get("this").get('curLine'), (var.get("this").get('pos')-var.get("this").get('lineStart')))
        PyJs_curPosition_2892_._set_name('curPosition')
        var.get('State').get('prototype').put('curPosition', PyJs_curPosition_2892_)
        @Js
        def PyJs_clone_2893_(skipArrays, this, arguments, var=var):
            var = Scope({'this':this, 'clone':PyJs_clone_2893_, 'skipArrays':skipArrays, 'arguments':arguments}, var)
            var.registers(['state', 'val', 'key', 'skipArrays'])
            var.put('state', var.get('State').create())
            for PyJsTemp in var.get("this"):
                var.put('key', PyJsTemp)
                var.put('val', var.get("this").get(var.get('key')))
                if ((var.get('skipArrays').neg() or PyJsStrictEq(var.get('key'),Js('context'))) and var.get('Array').callprop('isArray', var.get('val'))):
                    var.put('val', var.get('val').callprop('slice'))
                var.get('state').put(var.get('key'), var.get('val'))
            return var.get('state')
        PyJs_clone_2893_._set_name('clone')
        var.get('State').get('prototype').put('clone', PyJs_clone_2893_)
        return var.get('State')
    PyJs_anonymous_2890_._set_name('anonymous')
    var.put('State', PyJs_anonymous_2890_())
    pass
    @Js
    def PyJs_Token_2894_(state, this, arguments, var=var):
        var = Scope({'this':this, 'state':state, 'Token':PyJs_Token_2894_, 'arguments':arguments}, var)
        var.registers(['state'])
        var.get('_classCallCheck$1')(var.get("this"), var.get('Token'))
        var.get("this").put('type', var.get('state').get('type'))
        var.get("this").put('value', var.get('state').get('value'))
        var.get("this").put('start', var.get('state').get('start'))
        var.get("this").put('end', var.get('state').get('end'))
        var.get("this").put('loc', var.get('SourceLocation').create(var.get('state').get('startLoc'), var.get('state').get('endLoc')))
    PyJs_Token_2894_._set_name('Token')
    var.put('Token', PyJs_Token_2894_)
    pass
    @Js
    def PyJs_anonymous_2895_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Tokenizer'])
        @Js
        def PyJsHoisted_Tokenizer_(options, input, this, arguments, var=var):
            var = Scope({'this':this, 'input':input, 'options':options, 'arguments':arguments}, var)
            var.registers(['input', 'options'])
            var.get('_classCallCheck$1')(var.get("this"), var.get('Tokenizer'))
            var.get("this").put('state', var.get('State').create())
            var.get("this").get('state').callprop('init', var.get('options'), var.get('input'))
        PyJsHoisted_Tokenizer_.__name__ = 'Tokenizer'
        var.put('Tokenizer', PyJsHoisted_Tokenizer_)
        pass
        @Js
        def PyJs_next_2896_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_2896_}, var)
            var.registers([])
            if var.get("this").get('isLookahead').neg():
                var.get("this").get('state').get('tokens').callprop('push', var.get('Token').create(var.get("this").get('state')))
            var.get("this").get('state').put('lastTokEnd', var.get("this").get('state').get('end'))
            var.get("this").get('state').put('lastTokStart', var.get("this").get('state').get('start'))
            var.get("this").get('state').put('lastTokEndLoc', var.get("this").get('state').get('endLoc'))
            var.get("this").get('state').put('lastTokStartLoc', var.get("this").get('state').get('startLoc'))
            var.get("this").callprop('nextToken')
        PyJs_next_2896_._set_name('next')
        var.get('Tokenizer').get('prototype').put('next', PyJs_next_2896_)
        @Js
        def PyJs_eat_2897_(type, this, arguments, var=var):
            var = Scope({'this':this, 'type':type, 'arguments':arguments, 'eat':PyJs_eat_2897_}, var)
            var.registers(['type'])
            if var.get("this").callprop('match', var.get('type')):
                var.get("this").callprop('next')
                return var.get('true')
            else:
                return Js(False)
        PyJs_eat_2897_._set_name('eat')
        var.get('Tokenizer').get('prototype').put('eat', PyJs_eat_2897_)
        @Js
        def PyJs_match_2898_(type, this, arguments, var=var):
            var = Scope({'this':this, 'type':type, 'arguments':arguments, 'match':PyJs_match_2898_}, var)
            var.registers(['type'])
            return PyJsStrictEq(var.get("this").get('state').get('type'),var.get('type'))
        PyJs_match_2898_._set_name('match')
        var.get('Tokenizer').get('prototype').put('match', PyJs_match_2898_)
        @Js
        def PyJs_isKeyword_2899_(word, this, arguments, var=var):
            var = Scope({'this':this, 'isKeyword':PyJs_isKeyword_2899_, 'word':word, 'arguments':arguments}, var)
            var.registers(['word'])
            return var.get('isKeyword$1')(var.get('word'))
        PyJs_isKeyword_2899_._set_name('isKeyword')
        var.get('Tokenizer').get('prototype').put('isKeyword', PyJs_isKeyword_2899_)
        @Js
        def PyJs_lookahead_2900_(this, arguments, var=var):
            var = Scope({'this':this, 'lookahead':PyJs_lookahead_2900_, 'arguments':arguments}, var)
            var.registers(['curr', 'old'])
            var.put('old', var.get("this").get('state'))
            var.get("this").put('state', var.get('old').callprop('clone', var.get('true')))
            var.get("this").put('isLookahead', var.get('true'))
            var.get("this").callprop('next')
            var.get("this").put('isLookahead', Js(False))
            var.put('curr', var.get("this").get('state').callprop('clone', var.get('true')))
            var.get("this").put('state', var.get('old'))
            return var.get('curr')
        PyJs_lookahead_2900_._set_name('lookahead')
        var.get('Tokenizer').get('prototype').put('lookahead', PyJs_lookahead_2900_)
        @Js
        def PyJs_setStrict_2901_(strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'arguments':arguments, 'setStrict':PyJs_setStrict_2901_}, var)
            var.registers(['strict'])
            var.get("this").get('state').put('strict', var.get('strict'))
            if (var.get("this").callprop('match', var.get('types').get('num')).neg() and var.get("this").callprop('match', var.get('types').get('string')).neg()):
                return var.get('undefined')
            var.get("this").get('state').put('pos', var.get("this").get('state').get('start'))
            while (var.get("this").get('state').get('pos')<var.get("this").get('state').get('lineStart')):
                var.get("this").get('state').put('lineStart', (var.get("this").get('input').callprop('lastIndexOf', Js('\n'), (var.get("this").get('state').get('lineStart')-Js(2.0)))+Js(1.0)))
                var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())-Js(1))
            var.get("this").callprop('nextToken')
        PyJs_setStrict_2901_._set_name('setStrict')
        var.get('Tokenizer').get('prototype').put('setStrict', PyJs_setStrict_2901_)
        @Js
        def PyJs_curContext_2902_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'curContext':PyJs_curContext_2902_}, var)
            var.registers([])
            return var.get("this").get('state').get('context').get((var.get("this").get('state').get('context').get('length')-Js(1.0)))
        PyJs_curContext_2902_._set_name('curContext')
        var.get('Tokenizer').get('prototype').put('curContext', PyJs_curContext_2902_)
        @Js
        def PyJs_nextToken_2903_(this, arguments, var=var):
            var = Scope({'this':this, 'nextToken':PyJs_nextToken_2903_, 'arguments':arguments}, var)
            var.registers(['curContext'])
            var.put('curContext', var.get("this").callprop('curContext'))
            if (var.get('curContext').neg() or var.get('curContext').get('preserveSpace').neg()):
                var.get("this").callprop('skipSpace')
            var.get("this").get('state').put('containsOctal', Js(False))
            var.get("this").get('state').put('octalPosition', var.get("null"))
            var.get("this").get('state').put('start', var.get("this").get('state').get('pos'))
            var.get("this").get('state').put('startLoc', var.get("this").get('state').callprop('curPosition'))
            if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                return var.get("this").callprop('finishToken', var.get('types').get('eof'))
            if var.get('curContext').get('override'):
                return var.get('curContext').callprop('override', var.get("this"))
            else:
                return var.get("this").callprop('readToken', var.get("this").callprop('fullCharCodeAtPos'))
        PyJs_nextToken_2903_._set_name('nextToken')
        var.get('Tokenizer').get('prototype').put('nextToken', PyJs_nextToken_2903_)
        @Js
        def PyJs_readToken_2904_(code, this, arguments, var=var):
            var = Scope({'this':this, 'readToken':PyJs_readToken_2904_, 'code':code, 'arguments':arguments}, var)
            var.registers(['code'])
            if (var.get('isIdentifierStart')(var.get('code')) or PyJsStrictEq(var.get('code'),Js(92.0))):
                return var.get("this").callprop('readWord')
            else:
                return var.get("this").callprop('getTokenFromCode', var.get('code'))
        PyJs_readToken_2904_._set_name('readToken')
        var.get('Tokenizer').get('prototype').put('readToken', PyJs_readToken_2904_)
        @Js
        def PyJs_fullCharCodeAtPos_2905_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'fullCharCodeAtPos':PyJs_fullCharCodeAtPos_2905_}, var)
            var.registers(['code', 'next'])
            var.put('code', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            if ((var.get('code')<=Js(55295)) or (var.get('code')>=Js(57344))):
                return var.get('code')
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            return (((var.get('code')<<Js(10.0))+var.get('next'))-Js(56613888))
        PyJs_fullCharCodeAtPos_2905_._set_name('fullCharCodeAtPos')
        var.get('Tokenizer').get('prototype').put('fullCharCodeAtPos', PyJs_fullCharCodeAtPos_2905_)
        @Js
        def PyJs_pushComment_2906_(block, text, start, end, startLoc, endLoc, this, arguments, var=var):
            var = Scope({'end':end, 'this':this, 'text':text, 'pushComment':PyJs_pushComment_2906_, 'start':start, 'arguments':arguments, 'startLoc':startLoc, 'endLoc':endLoc, 'block':block}, var)
            var.registers(['comment', 'end', 'text', 'start', 'startLoc', 'endLoc', 'block'])
            PyJs_Object_2907_ = Js({'type':(Js('CommentBlock') if var.get('block') else Js('CommentLine')),'value':var.get('text'),'start':var.get('start'),'end':var.get('end'),'loc':var.get('SourceLocation').create(var.get('startLoc'), var.get('endLoc'))})
            var.put('comment', PyJs_Object_2907_)
            if var.get("this").get('isLookahead').neg():
                var.get("this").get('state').get('tokens').callprop('push', var.get('comment'))
                var.get("this").get('state').get('comments').callprop('push', var.get('comment'))
                var.get("this").callprop('addComment', var.get('comment'))
        PyJs_pushComment_2906_._set_name('pushComment')
        var.get('Tokenizer').get('prototype').put('pushComment', PyJs_pushComment_2906_)
        @Js
        def PyJs_skipBlockComment_2908_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'skipBlockComment':PyJs_skipBlockComment_2908_}, var)
            var.registers(['start', 'end', 'match', 'startLoc'])
            var.put('startLoc', var.get("this").get('state').callprop('curPosition'))
            var.put('start', var.get("this").get('state').get('pos'))
            var.put('end', var.get("this").get('input').callprop('indexOf', Js('*/'), var.get("this").get('state').put('pos', Js(2.0), '+')))
            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                var.get("this").callprop('raise', (var.get("this").get('state').get('pos')-Js(2.0)), Js('Unterminated comment'))
            var.get("this").get('state').put('pos', (var.get('end')+Js(2.0)))
            var.get('lineBreakG').put('lastIndex', var.get('start'))
            var.put('match', PyJsComma(Js(0.0), Js(None)))
            while (var.put('match', var.get('lineBreakG').callprop('exec', var.get("this").get('input'))) and (var.get('match').get('index')<var.get("this").get('state').get('pos'))):
                var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())+Js(1))
                var.get("this").get('state').put('lineStart', (var.get('match').get('index')+var.get('match').get('0').get('length')))
            var.get("this").callprop('pushComment', var.get('true'), var.get("this").get('input').callprop('slice', (var.get('start')+Js(2.0)), var.get('end')), var.get('start'), var.get("this").get('state').get('pos'), var.get('startLoc'), var.get("this").get('state').callprop('curPosition'))
        PyJs_skipBlockComment_2908_._set_name('skipBlockComment')
        var.get('Tokenizer').get('prototype').put('skipBlockComment', PyJs_skipBlockComment_2908_)
        @Js
        def PyJs_skipLineComment_2909_(startSkip, this, arguments, var=var):
            var = Scope({'startSkip':startSkip, 'this':this, 'arguments':arguments, 'skipLineComment':PyJs_skipLineComment_2909_}, var)
            var.registers(['startSkip', 'start', 'ch', 'startLoc'])
            var.put('start', var.get("this").get('state').get('pos'))
            var.put('startLoc', var.get("this").get('state').callprop('curPosition'))
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').put('pos', var.get('startSkip'), '+')))
            while (((((var.get("this").get('state').get('pos')<var.get("this").get('input').get('length')) and PyJsStrictNeq(var.get('ch'),Js(10.0))) and PyJsStrictNeq(var.get('ch'),Js(13.0))) and PyJsStrictNeq(var.get('ch'),Js(8232.0))) and PyJsStrictNeq(var.get('ch'),Js(8233.0))):
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            var.get("this").callprop('pushComment', Js(False), var.get("this").get('input').callprop('slice', (var.get('start')+var.get('startSkip')), var.get("this").get('state').get('pos')), var.get('start'), var.get("this").get('state').get('pos'), var.get('startLoc'), var.get("this").get('state').callprop('curPosition'))
        PyJs_skipLineComment_2909_._set_name('skipLineComment')
        var.get('Tokenizer').get('prototype').put('skipLineComment', PyJs_skipLineComment_2909_)
        @Js
        def PyJs_skipSpace_2910_(this, arguments, var=var):
            var = Scope({'this':this, 'skipSpace':PyJs_skipSpace_2910_, 'arguments':arguments}, var)
            var.registers(['ch'])
            class JS_CONTINUE_LABEL_6c6f6f70(Exception): pass
            class JS_BREAK_LABEL_6c6f6f70(Exception): pass
            try:
                while (var.get("this").get('state').get('pos')<var.get("this").get('input').get('length')):
                    try:
                        var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('ch'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(32.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(160.0)):
                                SWITCHED = True
                                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(13.0)):
                                SWITCHED = True
                                if PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))),Js(10.0)):
                                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8232.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8233.0)):
                                SWITCHED = True
                                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                                var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())+Js(1))
                                var.get("this").get('state').put('lineStart', var.get("this").get('state').get('pos'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(47.0)):
                                SWITCHED = True
                                while 1:
                                    SWITCHED = False
                                    CONDITION = (var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(42.0)):
                                        SWITCHED = True
                                        var.get("this").callprop('skipBlockComment')
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(47.0)):
                                        SWITCHED = True
                                        var.get("this").callprop('skipLineComment', Js(2.0))
                                        break
                                    if True:
                                        SWITCHED = True
                                        raise JS_BREAK_LABEL_6c6f6f70("Breaked")
                                    SWITCHED = True
                                    break
                                break
                            if True:
                                SWITCHED = True
                                if (((var.get('ch')>Js(8.0)) and (var.get('ch')<Js(14.0))) or ((var.get('ch')>=Js(5760.0)) and var.get('nonASCIIwhitespace').callprop('test', var.get('String').callprop('fromCharCode', var.get('ch'))))):
                                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                                else:
                                    raise JS_BREAK_LABEL_6c6f6f70("Breaked")
                            SWITCHED = True
                            break
                    except JS_CONTINUE_LABEL_6c6f6f70:
                        pass
            except JS_BREAK_LABEL_6c6f6f70:
                pass
        PyJs_skipSpace_2910_._set_name('skipSpace')
        var.get('Tokenizer').get('prototype').put('skipSpace', PyJs_skipSpace_2910_)
        @Js
        def PyJs_finishToken_2911_(type, val, this, arguments, var=var):
            var = Scope({'this':this, 'type':type, 'arguments':arguments, 'val':val, 'finishToken':PyJs_finishToken_2911_}, var)
            var.registers(['type', 'val', 'prevType'])
            var.get("this").get('state').put('end', var.get("this").get('state').get('pos'))
            var.get("this").get('state').put('endLoc', var.get("this").get('state').callprop('curPosition'))
            var.put('prevType', var.get("this").get('state').get('type'))
            var.get("this").get('state').put('type', var.get('type'))
            var.get("this").get('state').put('value', var.get('val'))
            var.get("this").callprop('updateContext', var.get('prevType'))
        PyJs_finishToken_2911_._set_name('finishToken')
        var.get('Tokenizer').get('prototype').put('finishToken', PyJs_finishToken_2911_)
        @Js
        def PyJs_readToken_dot_2912_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'readToken_dot':PyJs_readToken_dot_2912_}, var)
            var.registers(['next2', 'next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if ((var.get('next')>=Js(48.0)) and (var.get('next')<=Js(57.0))):
                return var.get("this").callprop('readNumber', var.get('true'))
            var.put('next2', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))))
            if (PyJsStrictEq(var.get('next'),Js(46.0)) and PyJsStrictEq(var.get('next2'),Js(46.0))):
                var.get("this").get('state').put('pos', Js(3.0), '+')
                return var.get("this").callprop('finishToken', var.get('types').get('ellipsis'))
            else:
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                return var.get("this").callprop('finishToken', var.get('types').get('dot'))
        PyJs_readToken_dot_2912_._set_name('readToken_dot')
        var.get('Tokenizer').get('prototype').put('readToken_dot', PyJs_readToken_dot_2912_)
        @Js
        def PyJs_readToken_slash_2913_(this, arguments, var=var):
            var = Scope({'this':this, 'readToken_slash':PyJs_readToken_slash_2913_, 'arguments':arguments}, var)
            var.registers(['next'])
            if var.get("this").get('state').get('exprAllowed'):
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                return var.get("this").callprop('readRegexp')
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                return var.get("this").callprop('finishOp', var.get('types').get('assign'), Js(2.0))
            else:
                return var.get("this").callprop('finishOp', var.get('types').get('slash'), Js(1.0))
        PyJs_readToken_slash_2913_._set_name('readToken_slash')
        var.get('Tokenizer').get('prototype').put('readToken_slash', PyJs_readToken_slash_2913_)
        @Js
        def PyJs_readToken_mult_modulo_2914_(code, this, arguments, var=var):
            var = Scope({'this':this, 'readToken_mult_modulo':PyJs_readToken_mult_modulo_2914_, 'code':code, 'arguments':arguments}, var)
            var.registers(['width', 'code', 'type', 'next'])
            var.put('type', (var.get('types').get('star') if PyJsStrictEq(var.get('code'),Js(42.0)) else var.get('types').get('modulo')))
            var.put('width', Js(1.0))
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),Js(42.0)):
                (var.put('width',Js(var.get('width').to_number())+Js(1))-Js(1))
                var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))))
                var.put('type', var.get('types').get('exponent'))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                (var.put('width',Js(var.get('width').to_number())+Js(1))-Js(1))
                var.put('type', var.get('types').get('assign'))
            return var.get("this").callprop('finishOp', var.get('type'), var.get('width'))
        PyJs_readToken_mult_modulo_2914_._set_name('readToken_mult_modulo')
        var.get('Tokenizer').get('prototype').put('readToken_mult_modulo', PyJs_readToken_mult_modulo_2914_)
        @Js
        def PyJs_readToken_pipe_amp_2915_(code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'readToken_pipe_amp':PyJs_readToken_pipe_amp_2915_}, var)
            var.registers(['code', 'next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),var.get('code')):
                return var.get("this").callprop('finishOp', (var.get('types').get('logicalOR') if PyJsStrictEq(var.get('code'),Js(124.0)) else var.get('types').get('logicalAND')), Js(2.0))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                return var.get("this").callprop('finishOp', var.get('types').get('assign'), Js(2.0))
            if ((PyJsStrictEq(var.get('code'),Js(124.0)) and PyJsStrictEq(var.get('next'),Js(125.0))) and var.get("this").callprop('hasPlugin', Js('flow'))):
                return var.get("this").callprop('finishOp', var.get('types').get('braceBarR'), Js(2.0))
            return var.get("this").callprop('finishOp', (var.get('types').get('bitwiseOR') if PyJsStrictEq(var.get('code'),Js(124.0)) else var.get('types').get('bitwiseAND')), Js(1.0))
        PyJs_readToken_pipe_amp_2915_._set_name('readToken_pipe_amp')
        var.get('Tokenizer').get('prototype').put('readToken_pipe_amp', PyJs_readToken_pipe_amp_2915_)
        @Js
        def PyJs_readToken_caret_2916_(this, arguments, var=var):
            var = Scope({'this':this, 'readToken_caret':PyJs_readToken_caret_2916_, 'arguments':arguments}, var)
            var.registers(['next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                return var.get("this").callprop('finishOp', var.get('types').get('assign'), Js(2.0))
            else:
                return var.get("this").callprop('finishOp', var.get('types').get('bitwiseXOR'), Js(1.0))
        PyJs_readToken_caret_2916_._set_name('readToken_caret')
        var.get('Tokenizer').get('prototype').put('readToken_caret', PyJs_readToken_caret_2916_)
        @Js
        def PyJs_readToken_plus_min_2917_(code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'readToken_plus_min':PyJs_readToken_plus_min_2917_}, var)
            var.registers(['code', 'next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),var.get('code')):
                if ((PyJsStrictEq(var.get('next'),Js(45.0)) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))),Js(62.0))) and var.get('lineBreak').callprop('test', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('lastTokEnd'), var.get("this").get('state').get('pos')))):
                    var.get("this").callprop('skipLineComment', Js(3.0))
                    var.get("this").callprop('skipSpace')
                    return var.get("this").callprop('nextToken')
                return var.get("this").callprop('finishOp', var.get('types').get('incDec'), Js(2.0))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                return var.get("this").callprop('finishOp', var.get('types').get('assign'), Js(2.0))
            else:
                return var.get("this").callprop('finishOp', var.get('types').get('plusMin'), Js(1.0))
        PyJs_readToken_plus_min_2917_._set_name('readToken_plus_min')
        var.get('Tokenizer').get('prototype').put('readToken_plus_min', PyJs_readToken_plus_min_2917_)
        @Js
        def PyJs_readToken_lt_gt_2918_(code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'arguments':arguments, 'readToken_lt_gt':PyJs_readToken_lt_gt_2918_}, var)
            var.registers(['code', 'size', 'next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            var.put('size', Js(1.0))
            if PyJsStrictEq(var.get('next'),var.get('code')):
                var.put('size', (Js(3.0) if (PyJsStrictEq(var.get('code'),Js(62.0)) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))),Js(62.0))) else Js(2.0)))
                if PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+var.get('size'))),Js(61.0)):
                    return var.get("this").callprop('finishOp', var.get('types').get('assign'), (var.get('size')+Js(1.0)))
                return var.get("this").callprop('finishOp', var.get('types').get('bitShift'), var.get('size'))
            if (((PyJsStrictEq(var.get('next'),Js(33.0)) and PyJsStrictEq(var.get('code'),Js(60.0))) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))),Js(45.0))) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(3.0))),Js(45.0))):
                if var.get("this").get('inModule'):
                    var.get("this").callprop('unexpected')
                var.get("this").callprop('skipLineComment', Js(4.0))
                var.get("this").callprop('skipSpace')
                return var.get("this").callprop('nextToken')
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                var.put('size', Js(2.0))
            return var.get("this").callprop('finishOp', var.get('types').get('relational'), var.get('size'))
        PyJs_readToken_lt_gt_2918_._set_name('readToken_lt_gt')
        var.get('Tokenizer').get('prototype').put('readToken_lt_gt', PyJs_readToken_lt_gt_2918_)
        @Js
        def PyJs_readToken_eq_excl_2919_(code, this, arguments, var=var):
            var = Scope({'this':this, 'readToken_eq_excl':PyJs_readToken_eq_excl_2919_, 'code':code, 'arguments':arguments}, var)
            var.registers(['code', 'next'])
            var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
            if PyJsStrictEq(var.get('next'),Js(61.0)):
                return var.get("this").callprop('finishOp', var.get('types').get('equality'), (Js(3.0) if PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(2.0))),Js(61.0)) else Js(2.0)))
            if (PyJsStrictEq(var.get('code'),Js(61.0)) and PyJsStrictEq(var.get('next'),Js(62.0))):
                var.get("this").get('state').put('pos', Js(2.0), '+')
                return var.get("this").callprop('finishToken', var.get('types').get('arrow'))
            return var.get("this").callprop('finishOp', (var.get('types').get('eq') if PyJsStrictEq(var.get('code'),Js(61.0)) else var.get('types').get('prefix')), Js(1.0))
        PyJs_readToken_eq_excl_2919_._set_name('readToken_eq_excl')
        var.get('Tokenizer').get('prototype').put('readToken_eq_excl', PyJs_readToken_eq_excl_2919_)
        @Js
        def PyJs_getTokenFromCode_2920_(code, this, arguments, var=var):
            var = Scope({'this':this, 'getTokenFromCode':PyJs_getTokenFromCode_2920_, 'code':code, 'arguments':arguments}, var)
            var.registers(['code', 'next'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(46.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_dot')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(40.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('parenL'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(41.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('parenR'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(59.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('semi'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(44.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('comma'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(91.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('bracketL'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(93.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('bracketR'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(123.0)):
                    SWITCHED = True
                    if (var.get("this").callprop('hasPlugin', Js('flow')) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))),Js(124.0))):
                        return var.get("this").callprop('finishOp', var.get('types').get('braceBarL'), Js(2.0))
                    else:
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                        return var.get("this").callprop('finishToken', var.get('types').get('braceL'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(125.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('braceR'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(58.0)):
                    SWITCHED = True
                    if (var.get("this").callprop('hasPlugin', Js('functionBind')) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))),Js(58.0))):
                        return var.get("this").callprop('finishOp', var.get('types').get('doubleColon'), Js(2.0))
                    else:
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                        return var.get("this").callprop('finishToken', var.get('types').get('colon'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(63.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('question'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(64.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('at'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(96.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('backQuote'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(48.0)):
                    SWITCHED = True
                    var.put('next', var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))))
                    if (PyJsStrictEq(var.get('next'),Js(120.0)) or PyJsStrictEq(var.get('next'),Js(88.0))):
                        return var.get("this").callprop('readRadixNumber', Js(16.0))
                    if (PyJsStrictEq(var.get('next'),Js(111.0)) or PyJsStrictEq(var.get('next'),Js(79.0))):
                        return var.get("this").callprop('readRadixNumber', Js(8.0))
                    if (PyJsStrictEq(var.get('next'),Js(98.0)) or PyJsStrictEq(var.get('next'),Js(66.0))):
                        return var.get("this").callprop('readRadixNumber', Js(2.0))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(49.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(50.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(51.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(52.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(53.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(54.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(55.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(56.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(57.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readNumber', Js(False))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(34.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(39.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readString', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(47.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_slash')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(37.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(42.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_mult_modulo', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(124.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(38.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_pipe_amp', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(94.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_caret')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(43.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(45.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_plus_min', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(60.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(62.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_lt_gt', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(61.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(33.0)):
                    SWITCHED = True
                    return var.get("this").callprop('readToken_eq_excl', var.get('code'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(126.0)):
                    SWITCHED = True
                    return var.get("this").callprop('finishOp', var.get('types').get('prefix'), Js(1.0))
                SWITCHED = True
                break
            var.get("this").callprop('raise', var.get("this").get('state').get('pos'), ((Js("Unexpected character '")+var.get('codePointToString')(var.get('code')))+Js("'")))
        PyJs_getTokenFromCode_2920_._set_name('getTokenFromCode')
        var.get('Tokenizer').get('prototype').put('getTokenFromCode', PyJs_getTokenFromCode_2920_)
        @Js
        def PyJs_finishOp_2921_(type, size, this, arguments, var=var):
            var = Scope({'this':this, 'finishOp':PyJs_finishOp_2921_, 'type':type, 'arguments':arguments, 'size':size}, var)
            var.registers(['type', 'str', 'size'])
            var.put('str', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('pos'), (var.get("this").get('state').get('pos')+var.get('size'))))
            var.get("this").get('state').put('pos', var.get('size'), '+')
            return var.get("this").callprop('finishToken', var.get('type'), var.get('str'))
        PyJs_finishOp_2921_._set_name('finishOp')
        var.get('Tokenizer').get('prototype').put('finishOp', PyJs_finishOp_2921_)
        @Js
        def PyJs_readRegexp_2922_(this, arguments, var=var):
            var = Scope({'this':this, 'readRegexp':PyJs_readRegexp_2922_, 'arguments':arguments}, var)
            var.registers(['content', 'ch', 'inClass', 'escaped', 'start', 'mods', 'validFlags'])
            var.put('escaped', PyJsComma(Js(0.0), Js(None)))
            var.put('inClass', PyJsComma(Js(0.0), Js(None)))
            var.put('start', var.get("this").get('state').get('pos'))
            #for JS loop
            
            while 1:
                if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                    var.get("this").callprop('raise', var.get('start'), Js('Unterminated regular expression'))
                var.put('ch', var.get("this").get('input').callprop('charAt', var.get("this").get('state').get('pos')))
                if var.get('lineBreak').callprop('test', var.get('ch')):
                    var.get("this").callprop('raise', var.get('start'), Js('Unterminated regular expression'))
                if var.get('escaped'):
                    var.put('escaped', Js(False))
                else:
                    if PyJsStrictEq(var.get('ch'),Js('[')):
                        var.put('inClass', var.get('true'))
                    else:
                        if (PyJsStrictEq(var.get('ch'),Js(']')) and var.get('inClass')):
                            var.put('inClass', Js(False))
                        else:
                            if (PyJsStrictEq(var.get('ch'),Js('/')) and var.get('inClass').neg()):
                                break
                    var.put('escaped', PyJsStrictEq(var.get('ch'),Js('\\')))
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            
            var.put('content', var.get("this").get('input').callprop('slice', var.get('start'), var.get("this").get('state').get('pos')))
            var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            var.put('mods', var.get("this").callprop('readWord1'))
            if var.get('mods'):
                var.put('validFlags', JsRegExp('/^[gmsiyu]*$/'))
                if var.get('validFlags').callprop('test', var.get('mods')).neg():
                    var.get("this").callprop('raise', var.get('start'), Js('Invalid regular expression flag'))
            PyJs_Object_2923_ = Js({'pattern':var.get('content'),'flags':var.get('mods')})
            return var.get("this").callprop('finishToken', var.get('types').get('regexp'), PyJs_Object_2923_)
        PyJs_readRegexp_2922_._set_name('readRegexp')
        var.get('Tokenizer').get('prototype').put('readRegexp', PyJs_readRegexp_2922_)
        @Js
        def PyJs_readInt_2924_(radix, len, this, arguments, var=var):
            var = Scope({'this':this, 'readInt':PyJs_readInt_2924_, 'radix':radix, 'arguments':arguments, 'len':len}, var)
            var.registers(['code', 'e', 'val', 'i', 'len', 'start', 'radix', 'total'])
            var.put('start', var.get("this").get('state').get('pos'))
            var.put('total', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('e', (var.get('Infinity') if (var.get('len')==var.get("null")) else var.get('len')))
            while (var.get('i')<var.get('e')):
                try:
                    var.put('code', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
                    var.put('val', PyJsComma(Js(0.0), Js(None)))
                    if (var.get('code')>=Js(97.0)):
                        var.put('val', ((var.get('code')-Js(97.0))+Js(10.0)))
                    else:
                        if (var.get('code')>=Js(65.0)):
                            var.put('val', ((var.get('code')-Js(65.0))+Js(10.0)))
                        else:
                            if ((var.get('code')>=Js(48.0)) and (var.get('code')<=Js(57.0))):
                                var.put('val', (var.get('code')-Js(48.0)))
                            else:
                                var.put('val', var.get('Infinity'))
                    if (var.get('val')>=var.get('radix')):
                        break
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    var.put('total', ((var.get('total')*var.get('radix'))+var.get('val')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (PyJsStrictEq(var.get("this").get('state').get('pos'),var.get('start')) or ((var.get('len')!=var.get("null")) and PyJsStrictNeq((var.get("this").get('state').get('pos')-var.get('start')),var.get('len')))):
                return var.get("null")
            return var.get('total')
        PyJs_readInt_2924_._set_name('readInt')
        var.get('Tokenizer').get('prototype').put('readInt', PyJs_readInt_2924_)
        @Js
        def PyJs_readRadixNumber_2925_(radix, this, arguments, var=var):
            var = Scope({'this':this, 'radix':radix, 'arguments':arguments, 'readRadixNumber':PyJs_readRadixNumber_2925_}, var)
            var.registers(['radix', 'val'])
            var.get("this").get('state').put('pos', Js(2.0), '+')
            var.put('val', var.get("this").callprop('readInt', var.get('radix')))
            if (var.get('val')==var.get("null")):
                var.get("this").callprop('raise', (var.get("this").get('state').get('start')+Js(2.0)), (Js('Expected number in radix ')+var.get('radix')))
            if var.get('isIdentifierStart')(var.get("this").callprop('fullCharCodeAtPos')):
                var.get("this").callprop('raise', var.get("this").get('state').get('pos'), Js('Identifier directly after number'))
            return var.get("this").callprop('finishToken', var.get('types').get('num'), var.get('val'))
        PyJs_readRadixNumber_2925_._set_name('readRadixNumber')
        var.get('Tokenizer').get('prototype').put('readRadixNumber', PyJs_readRadixNumber_2925_)
        @Js
        def PyJs_readNumber_2926_(startsWithDot, this, arguments, var=var):
            var = Scope({'this':this, 'startsWithDot':startsWithDot, 'arguments':arguments, 'readNumber':PyJs_readNumber_2926_}, var)
            var.registers(['isFloat', 'val', 'next', 'start', 'str', 'octal', 'startsWithDot'])
            var.put('start', var.get("this").get('state').get('pos'))
            var.put('isFloat', Js(False))
            var.put('octal', PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')),Js(48.0)))
            if (var.get('startsWithDot').neg() and PyJsStrictEq(var.get("this").callprop('readInt', Js(10.0)),var.get("null"))):
                var.get("this").callprop('raise', var.get('start'), Js('Invalid number'))
            var.put('next', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            if PyJsStrictEq(var.get('next'),Js(46.0)):
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                var.get("this").callprop('readInt', Js(10.0))
                var.put('isFloat', var.get('true'))
                var.put('next', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            if (PyJsStrictEq(var.get('next'),Js(69.0)) or PyJsStrictEq(var.get('next'),Js(101.0))):
                var.put('next', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))))
                if (PyJsStrictEq(var.get('next'),Js(43.0)) or PyJsStrictEq(var.get('next'),Js(45.0))):
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                if PyJsStrictEq(var.get("this").callprop('readInt', Js(10.0)),var.get("null")):
                    var.get("this").callprop('raise', var.get('start'), Js('Invalid number'))
                var.put('isFloat', var.get('true'))
            if var.get('isIdentifierStart')(var.get("this").callprop('fullCharCodeAtPos')):
                var.get("this").callprop('raise', var.get("this").get('state').get('pos'), Js('Identifier directly after number'))
            var.put('str', var.get("this").get('input').callprop('slice', var.get('start'), var.get("this").get('state').get('pos')))
            var.put('val', PyJsComma(Js(0.0), Js(None)))
            if var.get('isFloat'):
                var.put('val', var.get('parseFloat')(var.get('str')))
            else:
                if (var.get('octal').neg() or PyJsStrictEq(var.get('str').get('length'),Js(1.0))):
                    var.put('val', var.get('parseInt')(var.get('str'), Js(10.0)))
                else:
                    if (JsRegExp('/[89]/').callprop('test', var.get('str')) or var.get("this").get('state').get('strict')):
                        var.get("this").callprop('raise', var.get('start'), Js('Invalid number'))
                    else:
                        var.put('val', var.get('parseInt')(var.get('str'), Js(8.0)))
            return var.get("this").callprop('finishToken', var.get('types').get('num'), var.get('val'))
        PyJs_readNumber_2926_._set_name('readNumber')
        var.get('Tokenizer').get('prototype').put('readNumber', PyJs_readNumber_2926_)
        @Js
        def PyJs_readCodePoint_2927_(this, arguments, var=var):
            var = Scope({'this':this, 'readCodePoint':PyJs_readCodePoint_2927_, 'arguments':arguments}, var)
            var.registers(['code', 'ch', 'codePos'])
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            var.put('code', PyJsComma(Js(0.0), Js(None)))
            if PyJsStrictEq(var.get('ch'),Js(123.0)):
                var.put('codePos', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1)))
                var.put('code', var.get("this").callprop('readHexChar', (var.get("this").get('input').callprop('indexOf', Js('}'), var.get("this").get('state').get('pos'))-var.get("this").get('state').get('pos'))))
                var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                if (var.get('code')>Js(1114111)):
                    var.get("this").callprop('raise', var.get('codePos'), Js('Code point out of bounds'))
            else:
                var.put('code', var.get("this").callprop('readHexChar', Js(4.0)))
            return var.get('code')
        PyJs_readCodePoint_2927_._set_name('readCodePoint')
        var.get('Tokenizer').get('prototype').put('readCodePoint', PyJs_readCodePoint_2927_)
        @Js
        def PyJs_readString_2928_(quote, this, arguments, var=var):
            var = Scope({'this':this, 'quote':quote, 'arguments':arguments, 'readString':PyJs_readString_2928_}, var)
            var.registers(['ch', 'quote', 'chunkStart', 'out'])
            var.put('out', Js(''))
            var.put('chunkStart', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1)))
            #for JS loop
            
            while 1:
                if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                    var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Unterminated string constant'))
                var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
                if PyJsStrictEq(var.get('ch'),var.get('quote')):
                    break
                if PyJsStrictEq(var.get('ch'),Js(92.0)):
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    var.put('out', var.get("this").callprop('readEscapedChar', Js(False)), '+')
                    var.put('chunkStart', var.get("this").get('state').get('pos'))
                else:
                    if var.get('isNewLine')(var.get('ch')):
                        var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Unterminated string constant'))
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            
            var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), (var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))-Js(1))), '+')
            return var.get("this").callprop('finishToken', var.get('types').get('string'), var.get('out'))
        PyJs_readString_2928_._set_name('readString')
        var.get('Tokenizer').get('prototype').put('readString', PyJs_readString_2928_)
        @Js
        def PyJs_readTmplToken_2929_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'readTmplToken':PyJs_readTmplToken_2929_}, var)
            var.registers(['ch', 'chunkStart', 'out'])
            var.put('out', Js(''))
            var.put('chunkStart', var.get("this").get('state').get('pos'))
            #for JS loop
            
            while 1:
                if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                    var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Unterminated template'))
                var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
                if (PyJsStrictEq(var.get('ch'),Js(96.0)) or (PyJsStrictEq(var.get('ch'),Js(36.0)) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', (var.get("this").get('state').get('pos')+Js(1.0))),Js(123.0)))):
                    if (PyJsStrictEq(var.get("this").get('state').get('pos'),var.get("this").get('state').get('start')) and var.get("this").callprop('match', var.get('types').get('template'))):
                        if PyJsStrictEq(var.get('ch'),Js(36.0)):
                            var.get("this").get('state').put('pos', Js(2.0), '+')
                            return var.get("this").callprop('finishToken', var.get('types').get('dollarBraceL'))
                        else:
                            var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                            return var.get("this").callprop('finishToken', var.get('types').get('backQuote'))
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    return var.get("this").callprop('finishToken', var.get('types').get('template'), var.get('out'))
                if PyJsStrictEq(var.get('ch'),Js(92.0)):
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    var.put('out', var.get("this").callprop('readEscapedChar', var.get('true')), '+')
                    var.put('chunkStart', var.get("this").get('state').get('pos'))
                else:
                    if var.get('isNewLine')(var.get('ch')):
                        var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('ch'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(13.0)):
                                SWITCHED = True
                                if PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')),Js(10.0)):
                                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                                SWITCHED = True
                                var.put('out', Js('\n'), '+')
                                break
                            if True:
                                SWITCHED = True
                                var.put('out', var.get('String').callprop('fromCharCode', var.get('ch')), '+')
                                break
                            SWITCHED = True
                            break
                        var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())+Js(1))
                        var.get("this").get('state').put('lineStart', var.get("this").get('state').get('pos'))
                        var.put('chunkStart', var.get("this").get('state').get('pos'))
                    else:
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            
        PyJs_readTmplToken_2929_._set_name('readTmplToken')
        var.get('Tokenizer').get('prototype').put('readTmplToken', PyJs_readTmplToken_2929_)
        @Js
        def PyJs_readEscapedChar_2930_(inTemplate, this, arguments, var=var):
            var = Scope({'this':this, 'readEscapedChar':PyJs_readEscapedChar_2930_, 'inTemplate':inTemplate, 'arguments':arguments}, var)
            var.registers(['octal', 'octalStr', 'ch', 'inTemplate'])
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))))
            var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('ch'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(110.0)):
                    SWITCHED = True
                    return Js('\n')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(114.0)):
                    SWITCHED = True
                    return Js('\r')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(120.0)):
                    SWITCHED = True
                    return var.get('String').callprop('fromCharCode', var.get("this").callprop('readHexChar', Js(2.0)))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(117.0)):
                    SWITCHED = True
                    return var.get('codePointToString')(var.get("this").callprop('readCodePoint'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(116.0)):
                    SWITCHED = True
                    return Js('\t')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(98.0)):
                    SWITCHED = True
                    return Js('\x08')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(118.0)):
                    SWITCHED = True
                    return Js('\x0b')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(102.0)):
                    SWITCHED = True
                    return Js('\x0c')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(13.0)):
                    SWITCHED = True
                    if PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')),Js(10.0)):
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                    SWITCHED = True
                    var.get("this").get('state').put('lineStart', var.get("this").get('state').get('pos'))
                    var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())+Js(1))
                    return Js('')
                if True:
                    SWITCHED = True
                    if ((var.get('ch')>=Js(48.0)) and (var.get('ch')<=Js(55.0))):
                        var.put('octalStr', var.get("this").get('input').callprop('substr', (var.get("this").get('state').get('pos')-Js(1.0)), Js(3.0)).callprop('match', JsRegExp('/^[0-7]+/')).get('0'))
                        var.put('octal', var.get('parseInt')(var.get('octalStr'), Js(8.0)))
                        if (var.get('octal')>Js(255.0)):
                            var.put('octalStr', var.get('octalStr').callprop('slice', Js(0.0), (-Js(1.0))))
                            var.put('octal', var.get('parseInt')(var.get('octalStr'), Js(8.0)))
                        if (var.get('octal')>Js(0.0)):
                            if var.get("this").get('state').get('containsOctal').neg():
                                var.get("this").get('state').put('containsOctal', var.get('true'))
                                var.get("this").get('state').put('octalPosition', (var.get("this").get('state').get('pos')-Js(2.0)))
                            if (var.get("this").get('state').get('strict') or var.get('inTemplate')):
                                var.get("this").callprop('raise', (var.get("this").get('state').get('pos')-Js(2.0)), Js('Octal literal in strict mode'))
                        var.get("this").get('state').put('pos', (var.get('octalStr').get('length')-Js(1.0)), '+')
                        return var.get('String').callprop('fromCharCode', var.get('octal'))
                    return var.get('String').callprop('fromCharCode', var.get('ch'))
                SWITCHED = True
                break
        PyJs_readEscapedChar_2930_._set_name('readEscapedChar')
        var.get('Tokenizer').get('prototype').put('readEscapedChar', PyJs_readEscapedChar_2930_)
        @Js
        def PyJs_readHexChar_2931_(len, this, arguments, var=var):
            var = Scope({'this':this, 'readHexChar':PyJs_readHexChar_2931_, 'arguments':arguments, 'len':len}, var)
            var.registers(['codePos', 'len', 'n'])
            var.put('codePos', var.get("this").get('state').get('pos'))
            var.put('n', var.get("this").callprop('readInt', Js(16.0), var.get('len')))
            if PyJsStrictEq(var.get('n'),var.get("null")):
                var.get("this").callprop('raise', var.get('codePos'), Js('Bad character escape sequence'))
            return var.get('n')
        PyJs_readHexChar_2931_._set_name('readHexChar')
        var.get('Tokenizer').get('prototype').put('readHexChar', PyJs_readHexChar_2931_)
        @Js
        def PyJs_readWord1_2932_(this, arguments, var=var):
            var = Scope({'this':this, 'readWord1':PyJs_readWord1_2932_, 'arguments':arguments}, var)
            var.registers(['ch', 'word', 'chunkStart', 'escStart', 'esc', 'first'])
            var.get("this").get('state').put('containsEsc', Js(False))
            var.put('word', Js(''))
            var.put('first', var.get('true'))
            var.put('chunkStart', var.get("this").get('state').get('pos'))
            while (var.get("this").get('state').get('pos')<var.get("this").get('input').get('length')):
                var.put('ch', var.get("this").callprop('fullCharCodeAtPos'))
                if var.get('isIdentifierChar')(var.get('ch')):
                    var.get("this").get('state').put('pos', (Js(1.0) if (var.get('ch')<=Js(65535)) else Js(2.0)), '+')
                else:
                    if PyJsStrictEq(var.get('ch'),Js(92.0)):
                        var.get("this").get('state').put('containsEsc', var.get('true'))
                        var.put('word', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                        var.put('escStart', var.get("this").get('state').get('pos'))
                        if PyJsStrictNeq(var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))),Js(117.0)):
                            var.get("this").callprop('raise', var.get("this").get('state').get('pos'), Js('Expecting Unicode escape sequence \\uXXXX'))
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                        var.put('esc', var.get("this").callprop('readCodePoint'))
                        if (var.get('isIdentifierStart') if var.get('first') else var.get('isIdentifierChar'))(var.get('esc'), var.get('true')).neg():
                            var.get("this").callprop('raise', var.get('escStart'), Js('Invalid Unicode escape'))
                        var.put('word', var.get('codePointToString')(var.get('esc')), '+')
                        var.put('chunkStart', var.get("this").get('state').get('pos'))
                    else:
                        break
                var.put('first', Js(False))
            return (var.get('word')+var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')))
        PyJs_readWord1_2932_._set_name('readWord1')
        var.get('Tokenizer').get('prototype').put('readWord1', PyJs_readWord1_2932_)
        @Js
        def PyJs_readWord_2933_(this, arguments, var=var):
            var = Scope({'this':this, 'readWord':PyJs_readWord_2933_, 'arguments':arguments}, var)
            var.registers(['type', 'word'])
            var.put('word', var.get("this").callprop('readWord1'))
            var.put('type', var.get('types').get('name'))
            if (var.get("this").get('state').get('containsEsc').neg() and var.get("this").callprop('isKeyword', var.get('word'))):
                var.put('type', var.get('keywords').get(var.get('word')))
            return var.get("this").callprop('finishToken', var.get('type'), var.get('word'))
        PyJs_readWord_2933_._set_name('readWord')
        var.get('Tokenizer').get('prototype').put('readWord', PyJs_readWord_2933_)
        @Js
        def PyJs_braceIsBlock_2934_(prevType, this, arguments, var=var):
            var = Scope({'this':this, 'braceIsBlock':PyJs_braceIsBlock_2934_, 'arguments':arguments, 'prevType':prevType}, var)
            var.registers(['parent', 'prevType'])
            if PyJsStrictEq(var.get('prevType'),var.get('types').get('colon')):
                var.put('parent', var.get("this").callprop('curContext'))
                if (PyJsStrictEq(var.get('parent'),var.get('types$1').get('braceStatement')) or PyJsStrictEq(var.get('parent'),var.get('types$1').get('braceExpression'))):
                    return var.get('parent').get('isExpr').neg()
            if PyJsStrictEq(var.get('prevType'),var.get('types').get('_return')):
                return var.get('lineBreak').callprop('test', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('lastTokEnd'), var.get("this").get('state').get('start')))
            if (((PyJsStrictEq(var.get('prevType'),var.get('types').get('_else')) or PyJsStrictEq(var.get('prevType'),var.get('types').get('semi'))) or PyJsStrictEq(var.get('prevType'),var.get('types').get('eof'))) or PyJsStrictEq(var.get('prevType'),var.get('types').get('parenR'))):
                return var.get('true')
            if PyJsStrictEq(var.get('prevType'),var.get('types').get('braceL')):
                return PyJsStrictEq(var.get("this").callprop('curContext'),var.get('types$1').get('braceStatement'))
            return var.get("this").get('state').get('exprAllowed').neg()
        PyJs_braceIsBlock_2934_._set_name('braceIsBlock')
        var.get('Tokenizer').get('prototype').put('braceIsBlock', PyJs_braceIsBlock_2934_)
        @Js
        def PyJs_updateContext_2935_(prevType, this, arguments, var=var):
            var = Scope({'this':this, 'updateContext':PyJs_updateContext_2935_, 'arguments':arguments, 'prevType':prevType}, var)
            var.registers(['type', 'update', 'prevType'])
            var.put('update', PyJsComma(Js(0.0), Js(None)))
            var.put('type', var.get("this").get('state').get('type'))
            if (var.get('type').get('keyword') and PyJsStrictEq(var.get('prevType'),var.get('types').get('dot'))):
                var.get("this").get('state').put('exprAllowed', Js(False))
            else:
                if var.put('update', var.get('type').get('updateContext')):
                    var.get('update').callprop('call', var.get("this"), var.get('prevType'))
                else:
                    var.get("this").get('state').put('exprAllowed', var.get('type').get('beforeExpr'))
        PyJs_updateContext_2935_._set_name('updateContext')
        var.get('Tokenizer').get('prototype').put('updateContext', PyJs_updateContext_2935_)
        return var.get('Tokenizer')
    PyJs_anonymous_2895_._set_name('anonymous')
    var.put('Tokenizer', PyJs_anonymous_2895_())
    pass
    pass
    pass
    PyJs_Object_2938_ = Js({})
    var.put('plugins', PyJs_Object_2938_)
    @Js
    def PyJs_anonymous_2939_(_Tokenizer, this, arguments, var=var):
        var = Scope({'this':this, '_Tokenizer':_Tokenizer, 'arguments':arguments}, var)
        var.registers(['Parser', '_Tokenizer'])
        @Js
        def PyJsHoisted_Parser_(options, input, this, arguments, var=var):
            var = Scope({'this':this, 'input':input, 'options':options, 'arguments':arguments}, var)
            var.registers(['input', 'options', '_this'])
            var.get('_classCallCheck')(var.get("this"), var.get('Parser'))
            var.put('options', var.get('getOptions')(var.get('options')))
            var.put('_this', var.get('_possibleConstructorReturn')(var.get("this"), var.get('_Tokenizer').callprop('call', var.get("this"), var.get('options'), var.get('input'))))
            var.get('_this').put('options', var.get('options'))
            var.get('_this').put('inModule', PyJsStrictEq(var.get('_this').get('options').get('sourceType'),Js('module')))
            var.get('_this').put('isReservedWord', var.get('reservedWords').get('6'))
            var.get('_this').put('input', var.get('input'))
            var.get('_this').put('plugins', var.get('_this').callprop('loadPlugins', var.get('_this').get('options').get('plugins')))
            var.get('_this').put('filename', var.get('options').get('sourceFilename'))
            if ((PyJsStrictEq(var.get('_this').get('state').get('pos'),Js(0.0)) and PyJsStrictEq(var.get('_this').get('input').get('0'),Js('#'))) and PyJsStrictEq(var.get('_this').get('input').get('1'),Js('!'))):
                var.get('_this').callprop('skipLineComment', Js(2.0))
            return var.get('_this')
        PyJsHoisted_Parser_.__name__ = 'Parser'
        var.put('Parser', PyJsHoisted_Parser_)
        var.get('_inherits')(var.get('Parser'), var.get('_Tokenizer'))
        pass
        @Js
        def PyJs_hasPlugin_2940_(name, this, arguments, var=var):
            var = Scope({'this':this, 'hasPlugin':PyJs_hasPlugin_2940_, 'name':name, 'arguments':arguments}, var)
            var.registers(['name'])
            return (var.get("this").get('plugins').get('*') or var.get("this").get('plugins').get(var.get('name'))).neg().neg()
        PyJs_hasPlugin_2940_._set_name('hasPlugin')
        var.get('Parser').get('prototype').put('hasPlugin', PyJs_hasPlugin_2940_)
        @Js
        def PyJs_extend_2941_(name, f, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'name':name, 'extend':PyJs_extend_2941_, 'f':f}, var)
            var.registers(['name', 'f'])
            var.get("this").put(var.get('name'), var.get('f')(var.get("this").get(var.get('name'))))
        PyJs_extend_2941_._set_name('extend')
        var.get('Parser').get('prototype').put('extend', PyJs_extend_2941_)
        @Js
        def PyJs_loadPlugins_2942_(pluginList, this, arguments, var=var):
            var = Scope({'this':this, 'pluginList':pluginList, 'arguments':arguments, 'loadPlugins':PyJs_loadPlugins_2942_}, var)
            var.registers(['_isArray', 'pluginList', '_iterator', 'name', 'plugin', '_i', 'pluginMap', '_ref'])
            PyJs_Object_2943_ = Js({})
            var.put('pluginMap', PyJs_Object_2943_)
            if (var.get('pluginList').callprop('indexOf', Js('flow'))>=Js(0.0)):
                @Js
                def PyJs_anonymous_2944_(plugin, this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'plugin':plugin}, var)
                    var.registers(['plugin'])
                    return PyJsStrictNeq(var.get('plugin'),Js('flow'))
                PyJs_anonymous_2944_._set_name('anonymous')
                var.put('pluginList', var.get('pluginList').callprop('filter', PyJs_anonymous_2944_))
                var.get('pluginList').callprop('push', Js('flow'))
            #for JS loop
            var.put('_iterator', var.get('pluginList'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else var.get('_iterator').callprop(var.get('Symbol').get('iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('name', var.get('_ref'))
                if var.get('pluginMap').get(var.get('name')).neg():
                    var.get('pluginMap').put(var.get('name'), var.get('true'))
                    var.put('plugin', var.get('plugins').get(var.get('name')))
                    if var.get('plugin'):
                        var.get('plugin')(var.get("this"))
            
            return var.get('pluginMap')
        PyJs_loadPlugins_2942_._set_name('loadPlugins')
        var.get('Parser').get('prototype').put('loadPlugins', PyJs_loadPlugins_2942_)
        @Js
        def PyJs_parse_2945_(this, arguments, var=var):
            var = Scope({'this':this, 'parse':PyJs_parse_2945_, 'arguments':arguments}, var)
            var.registers(['program', 'file'])
            var.put('file', var.get("this").callprop('startNode'))
            var.put('program', var.get("this").callprop('startNode'))
            var.get("this").callprop('nextToken')
            return var.get("this").callprop('parseTopLevel', var.get('file'), var.get('program'))
        PyJs_parse_2945_._set_name('parse')
        var.get('Parser').get('prototype').put('parse', PyJs_parse_2945_)
        return var.get('Parser')
    PyJs_anonymous_2939_._set_name('anonymous')
    var.put('Parser', PyJs_anonymous_2939_(var.get('Tokenizer')))
    @Js
    def PyJs_anonymous_2946_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        return var.get('obj',throw=False).typeof()
    PyJs_anonymous_2946_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2947_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['obj'])
        return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
    PyJs_anonymous_2947_._set_name('anonymous')
    var.put('_typeof', (PyJs_anonymous_2946_ if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_2947_))
    var.put('pp', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_2948_(node, key, val, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'val':val, 'key':key, 'arguments':arguments}, var)
        var.registers(['node', 'val', 'key', 'extra'])
        if var.get('node').neg():
            return var.get('undefined')
        PyJs_Object_2949_ = Js({})
        var.put('extra', var.get('node').put('extra', (var.get('node').get('extra') or PyJs_Object_2949_)))
        var.get('extra').put(var.get('key'), var.get('val'))
    PyJs_anonymous_2948_._set_name('anonymous')
    var.get('pp').put('addExtra', PyJs_anonymous_2948_)
    @Js
    def PyJs_anonymous_2950_(op, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'op':op}, var)
        var.registers(['op'])
        return (var.get("this").callprop('match', var.get('types').get('relational')) and PyJsStrictEq(var.get("this").get('state').get('value'),var.get('op')))
    PyJs_anonymous_2950_._set_name('anonymous')
    var.get('pp').put('isRelational', PyJs_anonymous_2950_)
    @Js
    def PyJs_anonymous_2951_(op, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'op':op}, var)
        var.registers(['op'])
        if var.get("this").callprop('isRelational', var.get('op')):
            var.get("this").callprop('next')
        else:
            var.get("this").callprop('unexpected', var.get("null"), var.get('types').get('relational'))
    PyJs_anonymous_2951_._set_name('anonymous')
    var.get('pp').put('expectRelational', PyJs_anonymous_2951_)
    @Js
    def PyJs_anonymous_2952_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return (var.get("this").callprop('match', var.get('types').get('name')) and PyJsStrictEq(var.get("this").get('state').get('value'),var.get('name')))
    PyJs_anonymous_2952_._set_name('anonymous')
    var.get('pp').put('isContextual', PyJs_anonymous_2952_)
    @Js
    def PyJs_anonymous_2953_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        return (PyJsStrictEq(var.get("this").get('state').get('value'),var.get('name')) and var.get("this").callprop('eat', var.get('types').get('name')))
    PyJs_anonymous_2953_._set_name('anonymous')
    var.get('pp').put('eatContextual', PyJs_anonymous_2953_)
    @Js
    def PyJs_anonymous_2954_(name, message, this, arguments, var=var):
        var = Scope({'this':this, 'message':message, 'name':name, 'arguments':arguments}, var)
        var.registers(['message', 'name'])
        if var.get("this").callprop('eatContextual', var.get('name')).neg():
            var.get("this").callprop('unexpected', var.get("null"), var.get('message'))
    PyJs_anonymous_2954_._set_name('anonymous')
    var.get('pp').put('expectContextual', PyJs_anonymous_2954_)
    @Js
    def PyJs_anonymous_2955_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return ((var.get("this").callprop('match', var.get('types').get('eof')) or var.get("this").callprop('match', var.get('types').get('braceR'))) or var.get('lineBreak').callprop('test', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('lastTokEnd'), var.get("this").get('state').get('start'))))
    PyJs_anonymous_2955_._set_name('anonymous')
    var.get('pp').put('canInsertSemicolon', PyJs_anonymous_2955_)
    @Js
    def PyJs_anonymous_2956_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return (var.get("this").callprop('eat', var.get('types').get('semi')) or var.get("this").callprop('canInsertSemicolon'))
    PyJs_anonymous_2956_._set_name('anonymous')
    var.get('pp').put('isLineTerminator', PyJs_anonymous_2956_)
    @Js
    def PyJs_anonymous_2957_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").callprop('isLineTerminator').neg():
            var.get("this").callprop('unexpected', var.get("null"), var.get('types').get('semi'))
    PyJs_anonymous_2957_._set_name('anonymous')
    var.get('pp').put('semicolon', PyJs_anonymous_2957_)
    @Js
    def PyJs_anonymous_2958_(type, pos, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'pos':pos, 'arguments':arguments}, var)
        var.registers(['type', 'pos'])
        return (var.get("this").callprop('eat', var.get('type')) or var.get("this").callprop('unexpected', var.get('pos'), var.get('type')))
    PyJs_anonymous_2958_._set_name('anonymous')
    var.get('pp').put('expect', PyJs_anonymous_2958_)
    @Js
    def PyJs_anonymous_2959_(pos, this, arguments, var=var):
        var = Scope({'this':this, 'pos':pos, 'arguments':arguments}, var)
        var.registers(['pos', 'messageOrType'])
        var.put('messageOrType', (var.get('arguments').get('1') if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('arguments').get('1'),var.get('undefined'))) else Js('Unexpected token')))
        if ((var.get('messageOrType') and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('messageOrType',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('messageOrType'))),Js('object'))) and var.get('messageOrType').get('label')):
            var.put('messageOrType', (Js('Unexpected token, expected ')+var.get('messageOrType').get('label')))
        var.get("this").callprop('raise', (var.get('pos') if (var.get('pos')!=var.get("null")) else var.get("this").get('state').get('start')), var.get('messageOrType'))
    PyJs_anonymous_2959_._set_name('anonymous')
    var.get('pp').put('unexpected', PyJs_anonymous_2959_)
    var.put('pp$1', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_2960_(file, program, this, arguments, var=var):
        var = Scope({'this':this, 'program':program, 'arguments':arguments, 'file':file}, var)
        var.registers(['program', 'file'])
        var.get('program').put('sourceType', var.get("this").get('options').get('sourceType'))
        var.get("this").callprop('parseBlockBody', var.get('program'), var.get('true'), var.get('true'), var.get('types').get('eof'))
        var.get('file').put('program', var.get("this").callprop('finishNode', var.get('program'), Js('Program')))
        var.get('file').put('comments', var.get("this").get('state').get('comments'))
        var.get('file').put('tokens', var.get("this").get('state').get('tokens'))
        return var.get("this").callprop('finishNode', var.get('file'), Js('File'))
    PyJs_anonymous_2960_._set_name('anonymous')
    var.get('pp$1').put('parseTopLevel', PyJs_anonymous_2960_)
    PyJs_Object_2961_ = Js({'kind':Js('loop')})
    var.put('loopLabel', PyJs_Object_2961_)
    PyJs_Object_2962_ = Js({'kind':Js('switch')})
    var.put('switchLabel', PyJs_Object_2962_)
    @Js
    def PyJs_anonymous_2963_(stmt, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'stmt':stmt}, var)
        var.registers(['directiveLiteral', 'directive', 'val', 'expr', 'stmt', 'raw'])
        var.put('expr', var.get('stmt').get('expression'))
        var.put('directiveLiteral', var.get("this").callprop('startNodeAt', var.get('expr').get('start'), var.get('expr').get('loc').get('start')))
        var.put('directive', var.get("this").callprop('startNodeAt', var.get('stmt').get('start'), var.get('stmt').get('loc').get('start')))
        var.put('raw', var.get("this").get('input').callprop('slice', var.get('expr').get('start'), var.get('expr').get('end')))
        var.put('val', var.get('directiveLiteral').put('value', var.get('raw').callprop('slice', Js(1.0), (-Js(1.0)))))
        var.get("this").callprop('addExtra', var.get('directiveLiteral'), Js('raw'), var.get('raw'))
        var.get("this").callprop('addExtra', var.get('directiveLiteral'), Js('rawValue'), var.get('val'))
        var.get('directive').put('value', var.get("this").callprop('finishNodeAt', var.get('directiveLiteral'), Js('DirectiveLiteral'), var.get('expr').get('end'), var.get('expr').get('loc').get('end')))
        return var.get("this").callprop('finishNodeAt', var.get('directive'), Js('Directive'), var.get('stmt').get('end'), var.get('stmt').get('loc').get('end'))
    PyJs_anonymous_2963_._set_name('anonymous')
    var.get('pp$1').put('stmtToDirective', PyJs_anonymous_2963_)
    @Js
    def PyJs_anonymous_2964_(declaration, topLevel, this, arguments, var=var):
        var = Scope({'this':this, 'topLevel':topLevel, 'arguments':arguments, 'declaration':declaration}, var)
        var.registers(['node', 'expr', 'topLevel', 'state', 'starttype', 'declaration', 'maybeName'])
        if var.get("this").callprop('match', var.get('types').get('at')):
            var.get("this").callprop('parseDecorators', var.get('true'))
        var.put('starttype', var.get("this").get('state').get('type'))
        var.put('node', var.get("this").callprop('startNode'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('starttype'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_break')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_continue')):
                SWITCHED = True
                return var.get("this").callprop('parseBreakContinueStatement', var.get('node'), var.get('starttype').get('keyword'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_debugger')):
                SWITCHED = True
                return var.get("this").callprop('parseDebuggerStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_do')):
                SWITCHED = True
                return var.get("this").callprop('parseDoStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_for')):
                SWITCHED = True
                return var.get("this").callprop('parseForStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_function')):
                SWITCHED = True
                if var.get('declaration').neg():
                    var.get("this").callprop('unexpected')
                return var.get("this").callprop('parseFunctionStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_class')):
                SWITCHED = True
                if var.get('declaration').neg():
                    var.get("this").callprop('unexpected')
                var.get("this").callprop('takeDecorators', var.get('node'))
                return var.get("this").callprop('parseClass', var.get('node'), var.get('true'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_if')):
                SWITCHED = True
                return var.get("this").callprop('parseIfStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_return')):
                SWITCHED = True
                return var.get("this").callprop('parseReturnStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_switch')):
                SWITCHED = True
                return var.get("this").callprop('parseSwitchStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_throw')):
                SWITCHED = True
                return var.get("this").callprop('parseThrowStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_try')):
                SWITCHED = True
                return var.get("this").callprop('parseTryStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_let')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_const')):
                SWITCHED = True
                if var.get('declaration').neg():
                    var.get("this").callprop('unexpected')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_var')):
                SWITCHED = True
                return var.get("this").callprop('parseVarStatement', var.get('node'), var.get('starttype'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_while')):
                SWITCHED = True
                return var.get("this").callprop('parseWhileStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_with')):
                SWITCHED = True
                return var.get("this").callprop('parseWithStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                SWITCHED = True
                return var.get("this").callprop('parseBlock')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('semi')):
                SWITCHED = True
                return var.get("this").callprop('parseEmptyStatement', var.get('node'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_export')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_import')):
                SWITCHED = True
                if (var.get("this").callprop('hasPlugin', Js('dynamicImport')) and PyJsStrictEq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('parenL'))):
                    break
                if var.get("this").get('options').get('allowImportExportEverywhere').neg():
                    if var.get('topLevel').neg():
                        var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js("'import' and 'export' may only appear at the top level"))
                    if var.get("this").get('inModule').neg():
                        var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js("'import' and 'export' may appear only with 'sourceType: module'"))
                return (var.get("this").callprop('parseImport', var.get('node')) if PyJsStrictEq(var.get('starttype'),var.get('types').get('_import')) else var.get("this").callprop('parseExport', var.get('node')))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('name')):
                SWITCHED = True
                if PyJsStrictEq(var.get("this").get('state').get('value'),Js('async')):
                    var.put('state', var.get("this").get('state').callprop('clone'))
                    var.get("this").callprop('next')
                    if (var.get("this").callprop('match', var.get('types').get('_function')) and var.get("this").callprop('canInsertSemicolon').neg()):
                        var.get("this").callprop('expect', var.get('types').get('_function'))
                        return var.get("this").callprop('parseFunction', var.get('node'), var.get('true'), Js(False), var.get('true'))
                    else:
                        var.get("this").put('state', var.get('state'))
            SWITCHED = True
            break
        var.put('maybeName', var.get("this").get('state').get('value'))
        var.put('expr', var.get("this").callprop('parseExpression'))
        if ((PyJsStrictEq(var.get('starttype'),var.get('types').get('name')) and PyJsStrictEq(var.get('expr').get('type'),Js('Identifier'))) and var.get("this").callprop('eat', var.get('types').get('colon'))):
            return var.get("this").callprop('parseLabeledStatement', var.get('node'), var.get('maybeName'), var.get('expr'))
        else:
            return var.get("this").callprop('parseExpressionStatement', var.get('node'), var.get('expr'))
    PyJs_anonymous_2964_._set_name('anonymous')
    var.get('pp$1').put('parseStatement', PyJs_anonymous_2964_)
    @Js
    def PyJs_anonymous_2965_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").get('state').get('decorators').get('length'):
            var.get('node').put('decorators', var.get("this").get('state').get('decorators'))
            var.get("this").get('state').put('decorators', Js([]))
    PyJs_anonymous_2965_._set_name('anonymous')
    var.get('pp$1').put('takeDecorators', PyJs_anonymous_2965_)
    @Js
    def PyJs_anonymous_2966_(allowExport, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'allowExport':allowExport}, var)
        var.registers(['allowExport'])
        while var.get("this").callprop('match', var.get('types').get('at')):
            var.get("this").get('state').get('decorators').callprop('push', var.get("this").callprop('parseDecorator'))
        if (var.get('allowExport') and var.get("this").callprop('match', var.get('types').get('_export'))):
            return var.get('undefined')
        if var.get("this").callprop('match', var.get('types').get('_class')).neg():
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Leading decorators must be attached to a class declaration'))
    PyJs_anonymous_2966_._set_name('anonymous')
    var.get('pp$1').put('parseDecorators', PyJs_anonymous_2966_)
    @Js
    def PyJs_anonymous_2967_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('hasPlugin', Js('decorators')).neg():
            var.get("this").callprop('unexpected')
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        var.get('node').put('expression', var.get("this").callprop('parseMaybeAssign'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('Decorator'))
    PyJs_anonymous_2967_._set_name('anonymous')
    var.get('pp$1').put('parseDecorator', PyJs_anonymous_2967_)
    @Js
    def PyJs_anonymous_2968_(node, keyword, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'keyword':keyword}, var)
        var.registers(['i', 'node', 'isBreak', 'keyword', 'lab'])
        var.put('isBreak', PyJsStrictEq(var.get('keyword'),Js('break')))
        var.get("this").callprop('next')
        if var.get("this").callprop('isLineTerminator'):
            var.get('node').put('label', var.get("null"))
        else:
            if var.get("this").callprop('match', var.get('types').get('name')).neg():
                var.get("this").callprop('unexpected')
            else:
                var.get('node').put('label', var.get("this").callprop('parseIdentifier'))
                var.get("this").callprop('semicolon')
        var.put('i', PyJsComma(Js(0.0), Js(None)))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get("this").get('state').get('labels').get('length')):
            try:
                var.put('lab', var.get("this").get('state').get('labels').get(var.get('i')))
                if ((var.get('node').get('label')==var.get("null")) or PyJsStrictEq(var.get('lab').get('name'),var.get('node').get('label').get('name'))):
                    if ((var.get('lab').get('kind')!=var.get("null")) and (var.get('isBreak') or PyJsStrictEq(var.get('lab').get('kind'),Js('loop')))):
                        break
                    if (var.get('node').get('label') and var.get('isBreak')):
                        break
            finally:
                    var.put('i',Js(var.get('i').to_number())+Js(1))
        if PyJsStrictEq(var.get('i'),var.get("this").get('state').get('labels').get('length')):
            var.get("this").callprop('raise', var.get('node').get('start'), (Js('Unsyntactic ')+var.get('keyword')))
        return var.get("this").callprop('finishNode', var.get('node'), (Js('BreakStatement') if var.get('isBreak') else Js('ContinueStatement')))
    PyJs_anonymous_2968_._set_name('anonymous')
    var.get('pp$1').put('parseBreakContinueStatement', PyJs_anonymous_2968_)
    @Js
    def PyJs_anonymous_2969_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('DebuggerStatement'))
    PyJs_anonymous_2969_._set_name('anonymous')
    var.get('pp$1').put('parseDebuggerStatement', PyJs_anonymous_2969_)
    @Js
    def PyJs_anonymous_2970_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get("this").get('state').get('labels').callprop('push', var.get('loopLabel'))
        var.get('node').put('body', var.get("this").callprop('parseStatement', Js(False)))
        var.get("this").get('state').get('labels').callprop('pop')
        var.get("this").callprop('expect', var.get('types').get('_while'))
        var.get('node').put('test', var.get("this").callprop('parseParenExpression'))
        var.get("this").callprop('eat', var.get('types').get('semi'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DoWhileStatement'))
    PyJs_anonymous_2970_._set_name('anonymous')
    var.get('pp$1').put('parseDoStatement', PyJs_anonymous_2970_)
    @Js
    def PyJs_anonymous_2971_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'description', '_init', 'init', 'varKind', 'refShorthandDefaultPos', 'forAwait'])
        var.get("this").callprop('next')
        var.get("this").get('state').get('labels').callprop('push', var.get('loopLabel'))
        var.put('forAwait', Js(False))
        if ((var.get("this").callprop('hasPlugin', Js('asyncGenerators')) and var.get("this").get('state').get('inAsync')) and var.get("this").callprop('isContextual', Js('await'))):
            var.put('forAwait', var.get('true'))
            var.get("this").callprop('next')
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        if var.get("this").callprop('match', var.get('types').get('semi')):
            if var.get('forAwait'):
                var.get("this").callprop('unexpected')
            return var.get("this").callprop('parseFor', var.get('node'), var.get("null"))
        if ((var.get("this").callprop('match', var.get('types').get('_var')) or var.get("this").callprop('match', var.get('types').get('_let'))) or var.get("this").callprop('match', var.get('types').get('_const'))):
            var.put('_init', var.get("this").callprop('startNode'))
            var.put('varKind', var.get("this").get('state').get('type'))
            var.get("this").callprop('next')
            var.get("this").callprop('parseVar', var.get('_init'), var.get('true'), var.get('varKind'))
            var.get("this").callprop('finishNode', var.get('_init'), Js('VariableDeclaration'))
            if (var.get("this").callprop('match', var.get('types').get('_in')) or var.get("this").callprop('isContextual', Js('of'))):
                if (PyJsStrictEq(var.get('_init').get('declarations').get('length'),Js(1.0)) and var.get('_init').get('declarations').get('0').get('init').neg()):
                    return var.get("this").callprop('parseForIn', var.get('node'), var.get('_init'), var.get('forAwait'))
            if var.get('forAwait'):
                var.get("this").callprop('unexpected')
            return var.get("this").callprop('parseFor', var.get('node'), var.get('_init'))
        PyJs_Object_2972_ = Js({'start':Js(0.0)})
        var.put('refShorthandDefaultPos', PyJs_Object_2972_)
        var.put('init', var.get("this").callprop('parseExpression', var.get('true'), var.get('refShorthandDefaultPos')))
        if (var.get("this").callprop('match', var.get('types').get('_in')) or var.get("this").callprop('isContextual', Js('of'))):
            var.put('description', (Js('for-of statement') if var.get("this").callprop('isContextual', Js('of')) else Js('for-in statement')))
            var.get("this").callprop('toAssignable', var.get('init'), var.get('undefined'), var.get('description'))
            var.get("this").callprop('checkLVal', var.get('init'), var.get('undefined'), var.get('undefined'), var.get('description'))
            return var.get("this").callprop('parseForIn', var.get('node'), var.get('init'), var.get('forAwait'))
        else:
            if var.get('refShorthandDefaultPos').get('start'):
                var.get("this").callprop('unexpected', var.get('refShorthandDefaultPos').get('start'))
        if var.get('forAwait'):
            var.get("this").callprop('unexpected')
        return var.get("this").callprop('parseFor', var.get('node'), var.get('init'))
    PyJs_anonymous_2971_._set_name('anonymous')
    var.get('pp$1').put('parseForStatement', PyJs_anonymous_2971_)
    @Js
    def PyJs_anonymous_2973_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        return var.get("this").callprop('parseFunction', var.get('node'), var.get('true'))
    PyJs_anonymous_2973_._set_name('anonymous')
    var.get('pp$1').put('parseFunctionStatement', PyJs_anonymous_2973_)
    @Js
    def PyJs_anonymous_2974_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get('node').put('test', var.get("this").callprop('parseParenExpression'))
        var.get('node').put('consequent', var.get("this").callprop('parseStatement', Js(False)))
        var.get('node').put('alternate', (var.get("this").callprop('parseStatement', Js(False)) if var.get("this").callprop('eat', var.get('types').get('_else')) else var.get("null")))
        return var.get("this").callprop('finishNode', var.get('node'), Js('IfStatement'))
    PyJs_anonymous_2974_._set_name('anonymous')
    var.get('pp$1').put('parseIfStatement', PyJs_anonymous_2974_)
    @Js
    def PyJs_anonymous_2975_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if (var.get("this").get('state').get('inFunction').neg() and var.get("this").get('options').get('allowReturnOutsideFunction').neg()):
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js("'return' outside of function"))
        var.get("this").callprop('next')
        if var.get("this").callprop('isLineTerminator'):
            var.get('node').put('argument', var.get("null"))
        else:
            var.get('node').put('argument', var.get("this").callprop('parseExpression'))
            var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ReturnStatement'))
    PyJs_anonymous_2975_._set_name('anonymous')
    var.get('pp$1').put('parseReturnStatement', PyJs_anonymous_2975_)
    @Js
    def PyJs_anonymous_2976_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['sawDefault', 'node', 'isCase', 'cur'])
        var.get("this").callprop('next')
        var.get('node').put('discriminant', var.get("this").callprop('parseParenExpression'))
        var.get('node').put('cases', Js([]))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        var.get("this").get('state').get('labels').callprop('push', var.get('switchLabel'))
        var.put('cur', PyJsComma(Js(0.0), Js(None)))
        #for JS loop
        pass
        while var.get("this").callprop('match', var.get('types').get('braceR')).neg():
            if (var.get("this").callprop('match', var.get('types').get('_case')) or var.get("this").callprop('match', var.get('types').get('_default'))):
                var.put('isCase', var.get("this").callprop('match', var.get('types').get('_case')))
                if var.get('cur'):
                    var.get("this").callprop('finishNode', var.get('cur'), Js('SwitchCase'))
                var.get('node').get('cases').callprop('push', var.put('cur', var.get("this").callprop('startNode')))
                var.get('cur').put('consequent', Js([]))
                var.get("this").callprop('next')
                if var.get('isCase'):
                    var.get('cur').put('test', var.get("this").callprop('parseExpression'))
                else:
                    if var.get('sawDefault'):
                        var.get("this").callprop('raise', var.get("this").get('state').get('lastTokStart'), Js('Multiple default clauses'))
                    var.put('sawDefault', var.get('true'))
                    var.get('cur').put('test', var.get("null"))
                var.get("this").callprop('expect', var.get('types').get('colon'))
            else:
                if var.get('cur'):
                    var.get('cur').get('consequent').callprop('push', var.get("this").callprop('parseStatement', var.get('true')))
                else:
                    var.get("this").callprop('unexpected')
        
        if var.get('cur'):
            var.get("this").callprop('finishNode', var.get('cur'), Js('SwitchCase'))
        var.get("this").callprop('next')
        var.get("this").get('state').get('labels').callprop('pop')
        return var.get("this").callprop('finishNode', var.get('node'), Js('SwitchStatement'))
    PyJs_anonymous_2976_._set_name('anonymous')
    var.get('pp$1').put('parseSwitchStatement', PyJs_anonymous_2976_)
    @Js
    def PyJs_anonymous_2977_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        if var.get('lineBreak').callprop('test', var.get("this").get('input').callprop('slice', var.get("this").get('state').get('lastTokEnd'), var.get("this").get('state').get('start'))):
            var.get("this").callprop('raise', var.get("this").get('state').get('lastTokEnd'), Js('Illegal newline after throw'))
        var.get('node').put('argument', var.get("this").callprop('parseExpression'))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ThrowStatement'))
    PyJs_anonymous_2977_._set_name('anonymous')
    var.get('pp$1').put('parseThrowStatement', PyJs_anonymous_2977_)
    var.put('empty', Js([]))
    @Js
    def PyJs_anonymous_2978_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'clause'])
        var.get("this").callprop('next')
        var.get('node').put('block', var.get("this").callprop('parseBlock'))
        var.get('node').put('handler', var.get("null"))
        if var.get("this").callprop('match', var.get('types').get('_catch')):
            var.put('clause', var.get("this").callprop('startNode'))
            var.get("this").callprop('next')
            var.get("this").callprop('expect', var.get('types').get('parenL'))
            var.get('clause').put('param', var.get("this").callprop('parseBindingAtom'))
            var.get("this").callprop('checkLVal', var.get('clause').get('param'), var.get('true'), var.get('Object').callprop('create', var.get("null")), Js('catch clause'))
            var.get("this").callprop('expect', var.get('types').get('parenR'))
            var.get('clause').put('body', var.get("this").callprop('parseBlock'))
            var.get('node').put('handler', var.get("this").callprop('finishNode', var.get('clause'), Js('CatchClause')))
        var.get('node').put('guardedHandlers', var.get('empty'))
        var.get('node').put('finalizer', (var.get("this").callprop('parseBlock') if var.get("this").callprop('eat', var.get('types').get('_finally')) else var.get("null")))
        if (var.get('node').get('handler').neg() and var.get('node').get('finalizer').neg()):
            var.get("this").callprop('raise', var.get('node').get('start'), Js('Missing catch or finally clause'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TryStatement'))
    PyJs_anonymous_2978_._set_name('anonymous')
    var.get('pp$1').put('parseTryStatement', PyJs_anonymous_2978_)
    @Js
    def PyJs_anonymous_2979_(node, kind, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'kind':kind, 'arguments':arguments}, var)
        var.registers(['node', 'kind'])
        var.get("this").callprop('next')
        var.get("this").callprop('parseVar', var.get('node'), Js(False), var.get('kind'))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('VariableDeclaration'))
    PyJs_anonymous_2979_._set_name('anonymous')
    var.get('pp$1').put('parseVarStatement', PyJs_anonymous_2979_)
    @Js
    def PyJs_anonymous_2980_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get('node').put('test', var.get("this").callprop('parseParenExpression'))
        var.get("this").get('state').get('labels').callprop('push', var.get('loopLabel'))
        var.get('node').put('body', var.get("this").callprop('parseStatement', Js(False)))
        var.get("this").get('state').get('labels').callprop('pop')
        return var.get("this").callprop('finishNode', var.get('node'), Js('WhileStatement'))
    PyJs_anonymous_2980_._set_name('anonymous')
    var.get('pp$1').put('parseWhileStatement', PyJs_anonymous_2980_)
    @Js
    def PyJs_anonymous_2981_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").get('state').get('strict'):
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js("'with' in strict mode"))
        var.get("this").callprop('next')
        var.get('node').put('object', var.get("this").callprop('parseParenExpression'))
        var.get('node').put('body', var.get("this").callprop('parseStatement', Js(False)))
        return var.get("this").callprop('finishNode', var.get('node'), Js('WithStatement'))
    PyJs_anonymous_2981_._set_name('anonymous')
    var.get('pp$1').put('parseWithStatement', PyJs_anonymous_2981_)
    @Js
    def PyJs_anonymous_2982_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        return var.get("this").callprop('finishNode', var.get('node'), Js('EmptyStatement'))
    PyJs_anonymous_2982_._set_name('anonymous')
    var.get('pp$1').put('parseEmptyStatement', PyJs_anonymous_2982_)
    @Js
    def PyJs_anonymous_2983_(node, maybeName, expr, this, arguments, var=var):
        var = Scope({'node':node, 'expr':expr, 'this':this, 'maybeName':maybeName, 'arguments':arguments}, var)
        var.registers(['node', '_label', '_isArray', '_iterator', 'i', 'expr', 'kind', 'label', '_i', '_ref', 'maybeName'])
        #for JS loop
        var.put('_iterator', var.get("this").get('state').get('labels'))
        var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
        var.put('_i', Js(0.0))
        var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else var.get('_iterator').callprop(var.get('Symbol').get('iterator'))))
        while 1:
            pass
            if var.get('_isArray'):
                if (var.get('_i')>=var.get('_iterator').get('length')):
                    break
                var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
            else:
                var.put('_i', var.get('_iterator').callprop('next'))
                if var.get('_i').get('done'):
                    break
                var.put('_ref', var.get('_i').get('value'))
            var.put('_label', var.get('_ref'))
            if PyJsStrictEq(var.get('_label').get('name'),var.get('maybeName')):
                var.get("this").callprop('raise', var.get('expr').get('start'), ((Js("Label '")+var.get('maybeName'))+Js("' is already declared")))
        
        var.put('kind', (Js('loop') if var.get("this").get('state').get('type').get('isLoop') else (Js('switch') if var.get("this").callprop('match', var.get('types').get('_switch')) else var.get("null"))))
        #for JS loop
        var.put('i', (var.get("this").get('state').get('labels').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                var.put('label', var.get("this").get('state').get('labels').get(var.get('i')))
                if PyJsStrictEq(var.get('label').get('statementStart'),var.get('node').get('start')):
                    var.get('label').put('statementStart', var.get("this").get('state').get('start'))
                    var.get('label').put('kind', var.get('kind'))
                else:
                    break
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        PyJs_Object_2984_ = Js({'name':var.get('maybeName'),'kind':var.get('kind'),'statementStart':var.get("this").get('state').get('start')})
        var.get("this").get('state').get('labels').callprop('push', PyJs_Object_2984_)
        var.get('node').put('body', var.get("this").callprop('parseStatement', var.get('true')))
        var.get("this").get('state').get('labels').callprop('pop')
        var.get('node').put('label', var.get('expr'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('LabeledStatement'))
    PyJs_anonymous_2983_._set_name('anonymous')
    var.get('pp$1').put('parseLabeledStatement', PyJs_anonymous_2983_)
    @Js
    def PyJs_anonymous_2985_(node, expr, this, arguments, var=var):
        var = Scope({'node':node, 'expr':expr, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'expr'])
        var.get('node').put('expression', var.get('expr'))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ExpressionStatement'))
    PyJs_anonymous_2985_._set_name('anonymous')
    var.get('pp$1').put('parseExpressionStatement', PyJs_anonymous_2985_)
    @Js
    def PyJs_anonymous_2986_(allowDirectives, this, arguments, var=var):
        var = Scope({'this':this, 'allowDirectives':allowDirectives, 'arguments':arguments}, var)
        var.registers(['node', 'allowDirectives'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        var.get("this").callprop('parseBlockBody', var.get('node'), var.get('allowDirectives'), Js(False), var.get('types').get('braceR'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('BlockStatement'))
    PyJs_anonymous_2986_._set_name('anonymous')
    var.get('pp$1').put('parseBlock', PyJs_anonymous_2986_)
    @Js
    def PyJs_anonymous_2987_(node, allowDirectives, topLevel, end, this, arguments, var=var):
        var = Scope({'node':node, 'topLevel':topLevel, 'allowDirectives':allowDirectives, 'end':end, 'arguments':arguments, 'this':this}, var)
        var.registers(['node', 'allowDirectives', 'end', 'parsedNonDirective', 'directive', 'topLevel', 'stmt', 'octalPosition', 'oldStrict'])
        var.get('node').put('body', Js([]))
        var.get('node').put('directives', Js([]))
        var.put('parsedNonDirective', Js(False))
        var.put('oldStrict', PyJsComma(Js(0.0), Js(None)))
        var.put('octalPosition', PyJsComma(Js(0.0), Js(None)))
        while var.get("this").callprop('eat', var.get('end')).neg():
            if ((var.get('parsedNonDirective').neg() and var.get("this").get('state').get('containsOctal')) and var.get('octalPosition').neg()):
                var.put('octalPosition', var.get("this").get('state').get('octalPosition'))
            var.put('stmt', var.get("this").callprop('parseStatement', var.get('true'), var.get('topLevel')))
            if ((((var.get('allowDirectives') and var.get('parsedNonDirective').neg()) and PyJsStrictEq(var.get('stmt').get('type'),Js('ExpressionStatement'))) and PyJsStrictEq(var.get('stmt').get('expression').get('type'),Js('StringLiteral'))) and var.get('stmt').get('expression').get('extra').get('parenthesized').neg()):
                var.put('directive', var.get("this").callprop('stmtToDirective', var.get('stmt')))
                var.get('node').get('directives').callprop('push', var.get('directive'))
                if (PyJsStrictEq(var.get('oldStrict'),var.get('undefined')) and PyJsStrictEq(var.get('directive').get('value').get('value'),Js('use strict'))):
                    var.put('oldStrict', var.get("this").get('state').get('strict'))
                    var.get("this").callprop('setStrict', var.get('true'))
                    if var.get('octalPosition'):
                        var.get("this").callprop('raise', var.get('octalPosition'), Js('Octal literal in strict mode'))
                continue
            var.put('parsedNonDirective', var.get('true'))
            var.get('node').get('body').callprop('push', var.get('stmt'))
        if PyJsStrictEq(var.get('oldStrict'),Js(False)):
            var.get("this").callprop('setStrict', Js(False))
    PyJs_anonymous_2987_._set_name('anonymous')
    var.get('pp$1').put('parseBlockBody', PyJs_anonymous_2987_)
    @Js
    def PyJs_anonymous_2988_(node, init, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'init':init, 'arguments':arguments}, var)
        var.registers(['node', 'init'])
        var.get('node').put('init', var.get('init'))
        var.get("this").callprop('expect', var.get('types').get('semi'))
        var.get('node').put('test', (var.get("null") if var.get("this").callprop('match', var.get('types').get('semi')) else var.get("this").callprop('parseExpression')))
        var.get("this").callprop('expect', var.get('types').get('semi'))
        var.get('node').put('update', (var.get("null") if var.get("this").callprop('match', var.get('types').get('parenR')) else var.get("this").callprop('parseExpression')))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        var.get('node').put('body', var.get("this").callprop('parseStatement', Js(False)))
        var.get("this").get('state').get('labels').callprop('pop')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ForStatement'))
    PyJs_anonymous_2988_._set_name('anonymous')
    var.get('pp$1').put('parseFor', PyJs_anonymous_2988_)
    @Js
    def PyJs_anonymous_2989_(node, init, forAwait, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'init':init, 'forAwait':forAwait, 'arguments':arguments}, var)
        var.registers(['node', 'init', 'type', 'forAwait'])
        var.put('type', PyJsComma(Js(0.0), Js(None)))
        if var.get('forAwait'):
            var.get("this").callprop('eatContextual', Js('of'))
            var.put('type', Js('ForAwaitStatement'))
        else:
            var.put('type', (Js('ForInStatement') if var.get("this").callprop('match', var.get('types').get('_in')) else Js('ForOfStatement')))
            var.get("this").callprop('next')
        var.get('node').put('left', var.get('init'))
        var.get('node').put('right', var.get("this").callprop('parseExpression'))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        var.get('node').put('body', var.get("this").callprop('parseStatement', Js(False)))
        var.get("this").get('state').get('labels').callprop('pop')
        return var.get("this").callprop('finishNode', var.get('node'), var.get('type'))
    PyJs_anonymous_2989_._set_name('anonymous')
    var.get('pp$1').put('parseForIn', PyJs_anonymous_2989_)
    @Js
    def PyJs_anonymous_2990_(node, isFor, kind, this, arguments, var=var):
        var = Scope({'node':node, 'isFor':isFor, 'kind':kind, 'this':this, 'arguments':arguments}, var)
        var.registers(['decl', 'node', 'kind', 'isFor'])
        var.get('node').put('declarations', Js([]))
        var.get('node').put('kind', var.get('kind').get('keyword'))
        #for JS loop
        
        while 1:
            var.put('decl', var.get("this").callprop('startNode'))
            var.get("this").callprop('parseVarHead', var.get('decl'))
            if var.get("this").callprop('eat', var.get('types').get('eq')):
                var.get('decl').put('init', var.get("this").callprop('parseMaybeAssign', var.get('isFor')))
            else:
                if (PyJsStrictEq(var.get('kind'),var.get('types').get('_const')) and (var.get("this").callprop('match', var.get('types').get('_in')) or var.get("this").callprop('isContextual', Js('of'))).neg()):
                    var.get("this").callprop('unexpected')
                else:
                    if (PyJsStrictNeq(var.get('decl').get('id').get('type'),Js('Identifier')) and (var.get('isFor') and (var.get("this").callprop('match', var.get('types').get('_in')) or var.get("this").callprop('isContextual', Js('of')))).neg()):
                        var.get("this").callprop('raise', var.get("this").get('state').get('lastTokEnd'), Js('Complex binding patterns require an initialization value'))
                    else:
                        var.get('decl').put('init', var.get("null"))
            var.get('node').get('declarations').callprop('push', var.get("this").callprop('finishNode', var.get('decl'), Js('VariableDeclarator')))
            if var.get("this").callprop('eat', var.get('types').get('comma')).neg():
                break
        
        return var.get('node')
    PyJs_anonymous_2990_._set_name('anonymous')
    var.get('pp$1').put('parseVar', PyJs_anonymous_2990_)
    @Js
    def PyJs_anonymous_2991_(decl, this, arguments, var=var):
        var = Scope({'decl':decl, 'this':this, 'arguments':arguments}, var)
        var.registers(['decl'])
        var.get('decl').put('id', var.get("this").callprop('parseBindingAtom'))
        var.get("this").callprop('checkLVal', var.get('decl').get('id'), var.get('true'), var.get('undefined'), Js('variable declaration'))
    PyJs_anonymous_2991_._set_name('anonymous')
    var.get('pp$1').put('parseVarHead', PyJs_anonymous_2991_)
    @Js
    def PyJs_anonymous_2992_(node, isStatement, allowExpressionBody, isAsync, optionalId, this, arguments, var=var):
        var = Scope({'node':node, 'optionalId':optionalId, 'isAsync':isAsync, 'arguments':arguments, 'this':this, 'isStatement':isStatement, 'allowExpressionBody':allowExpressionBody}, var)
        var.registers(['node', 'optionalId', 'isAsync', 'oldInMethod', 'isStatement', 'allowExpressionBody'])
        var.put('oldInMethod', var.get("this").get('state').get('inMethod'))
        var.get("this").get('state').put('inMethod', Js(False))
        var.get("this").callprop('initFunction', var.get('node'), var.get('isAsync'))
        if var.get("this").callprop('match', var.get('types').get('star')):
            if (var.get('node').get('async') and var.get("this").callprop('hasPlugin', Js('asyncGenerators')).neg()):
                var.get("this").callprop('unexpected')
            else:
                var.get('node').put('generator', var.get('true'))
                var.get("this").callprop('next')
        if (((var.get('isStatement') and var.get('optionalId').neg()) and var.get("this").callprop('match', var.get('types').get('name')).neg()) and var.get("this").callprop('match', var.get('types').get('_yield')).neg()):
            var.get("this").callprop('unexpected')
        if (var.get("this").callprop('match', var.get('types').get('name')) or var.get("this").callprop('match', var.get('types').get('_yield'))):
            var.get('node').put('id', var.get("this").callprop('parseBindingIdentifier'))
        var.get("this").callprop('parseFunctionParams', var.get('node'))
        var.get("this").callprop('parseFunctionBody', var.get('node'), var.get('allowExpressionBody'))
        var.get("this").get('state').put('inMethod', var.get('oldInMethod'))
        return var.get("this").callprop('finishNode', var.get('node'), (Js('FunctionDeclaration') if var.get('isStatement') else Js('FunctionExpression')))
    PyJs_anonymous_2992_._set_name('anonymous')
    var.get('pp$1').put('parseFunction', PyJs_anonymous_2992_)
    @Js
    def PyJs_anonymous_2993_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        var.get('node').put('params', var.get("this").callprop('parseBindingList', var.get('types').get('parenR')))
    PyJs_anonymous_2993_._set_name('anonymous')
    var.get('pp$1').put('parseFunctionParams', PyJs_anonymous_2993_)
    @Js
    def PyJs_anonymous_2994_(node, isStatement, optionalId, this, arguments, var=var):
        var = Scope({'node':node, 'optionalId':optionalId, 'this':this, 'isStatement':isStatement, 'arguments':arguments}, var)
        var.registers(['node', 'optionalId', 'isStatement'])
        var.get("this").callprop('next')
        var.get("this").callprop('parseClassId', var.get('node'), var.get('isStatement'), var.get('optionalId'))
        var.get("this").callprop('parseClassSuper', var.get('node'))
        var.get("this").callprop('parseClassBody', var.get('node'))
        return var.get("this").callprop('finishNode', var.get('node'), (Js('ClassDeclaration') if var.get('isStatement') else Js('ClassExpression')))
    PyJs_anonymous_2994_._set_name('anonymous')
    var.get('pp$1').put('parseClass', PyJs_anonymous_2994_)
    @Js
    def PyJs_anonymous_2995_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return (var.get("this").callprop('match', var.get('types').get('eq')) or var.get("this").callprop('isLineTerminator'))
    PyJs_anonymous_2995_._set_name('anonymous')
    var.get('pp$1').put('isClassProperty', PyJs_anonymous_2995_)
    @Js
    def PyJs_anonymous_2996_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js(False)
    PyJs_anonymous_2996_._set_name('anonymous')
    var.get('pp$1').put('isClassMutatorStarter', PyJs_anonymous_2996_)
    @Js
    def PyJs_anonymous_2997_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'isStaticPrototype', 'hadConstructor', 'isConstructorCall', 'isGetSet', 'isGenerator', 'start', 'paramCount', 'isMaybeStatic', 'classBody', 'key', 'isConstructor', 'isAsync', 'isAsyncMethod', 'hadConstructorCall', 'decorators', 'method', 'oldStrict'])
        var.put('oldStrict', var.get("this").get('state').get('strict'))
        var.get("this").get('state').put('strict', var.get('true'))
        var.put('hadConstructorCall', Js(False))
        var.put('hadConstructor', Js(False))
        var.put('decorators', Js([]))
        var.put('classBody', var.get("this").callprop('startNode'))
        var.get('classBody').put('body', Js([]))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        while var.get("this").callprop('eat', var.get('types').get('braceR')).neg():
            if var.get("this").callprop('eat', var.get('types').get('semi')):
                continue
            if var.get("this").callprop('match', var.get('types').get('at')):
                var.get('decorators').callprop('push', var.get("this").callprop('parseDecorator'))
                continue
            var.put('method', var.get("this").callprop('startNode'))
            if var.get('decorators').get('length'):
                var.get('method').put('decorators', var.get('decorators'))
                var.put('decorators', Js([]))
            var.put('isConstructorCall', Js(False))
            var.put('isMaybeStatic', (var.get("this").callprop('match', var.get('types').get('name')) and PyJsStrictEq(var.get("this").get('state').get('value'),Js('static'))))
            var.put('isGenerator', var.get("this").callprop('eat', var.get('types').get('star')))
            var.put('isGetSet', Js(False))
            var.put('isAsync', Js(False))
            var.get("this").callprop('parsePropertyName', var.get('method'))
            var.get('method').put('static', (var.get('isMaybeStatic') and var.get("this").callprop('match', var.get('types').get('parenL')).neg()))
            if var.get('method').get('static'):
                var.put('isGenerator', var.get("this").callprop('eat', var.get('types').get('star')))
                var.get("this").callprop('parsePropertyName', var.get('method'))
            if var.get('isGenerator').neg():
                if var.get("this").callprop('isClassProperty'):
                    var.get('classBody').get('body').callprop('push', var.get("this").callprop('parseClassProperty', var.get('method')))
                    continue
                def PyJs_LONG_2998_(var=var):
                    return (((((PyJsStrictEq(var.get('method').get('key').get('type'),Js('Identifier')) and var.get('method').get('computed').neg()) and var.get("this").callprop('hasPlugin', Js('classConstructorCall'))) and PyJsStrictEq(var.get('method').get('key').get('name'),Js('call'))) and var.get("this").callprop('match', var.get('types').get('name'))) and PyJsStrictEq(var.get("this").get('state').get('value'),Js('constructor')))
                if PyJs_LONG_2998_():
                    var.put('isConstructorCall', var.get('true'))
                    var.get("this").callprop('parsePropertyName', var.get('method'))
            var.put('isAsyncMethod', (((var.get("this").callprop('match', var.get('types').get('parenL')).neg() and var.get('method').get('computed').neg()) and PyJsStrictEq(var.get('method').get('key').get('type'),Js('Identifier'))) and PyJsStrictEq(var.get('method').get('key').get('name'),Js('async'))))
            if var.get('isAsyncMethod'):
                if (var.get("this").callprop('hasPlugin', Js('asyncGenerators')) and var.get("this").callprop('eat', var.get('types').get('star'))):
                    var.put('isGenerator', var.get('true'))
                var.put('isAsync', var.get('true'))
                var.get("this").callprop('parsePropertyName', var.get('method'))
            var.get('method').put('kind', Js('method'))
            if var.get('method').get('computed').neg():
                var.put('key', var.get('method').get('key'))
                if (((((var.get('isAsync').neg() and var.get('isGenerator').neg()) and var.get("this").callprop('isClassMutatorStarter').neg()) and PyJsStrictEq(var.get('key').get('type'),Js('Identifier'))) and var.get("this").callprop('match', var.get('types').get('parenL')).neg()) and (PyJsStrictEq(var.get('key').get('name'),Js('get')) or PyJsStrictEq(var.get('key').get('name'),Js('set')))):
                    var.put('isGetSet', var.get('true'))
                    var.get('method').put('kind', var.get('key').get('name'))
                    var.put('key', var.get("this").callprop('parsePropertyName', var.get('method')))
                var.put('isConstructor', ((var.get('isConstructorCall').neg() and var.get('method').get('static').neg()) and ((PyJsStrictEq(var.get('key').get('type'),Js('Identifier')) and PyJsStrictEq(var.get('key').get('name'),Js('constructor'))) or (PyJsStrictEq(var.get('key').get('type'),Js('StringLiteral')) and PyJsStrictEq(var.get('key').get('value'),Js('constructor'))))))
                if var.get('isConstructor'):
                    if var.get('hadConstructor'):
                        var.get("this").callprop('raise', var.get('key').get('start'), Js('Duplicate constructor in the same class'))
                    if var.get('isGetSet'):
                        var.get("this").callprop('raise', var.get('key').get('start'), Js("Constructor can't have get/set modifier"))
                    if var.get('isGenerator'):
                        var.get("this").callprop('raise', var.get('key').get('start'), Js("Constructor can't be a generator"))
                    if var.get('isAsync'):
                        var.get("this").callprop('raise', var.get('key').get('start'), Js("Constructor can't be an async function"))
                    var.get('method').put('kind', Js('constructor'))
                    var.put('hadConstructor', var.get('true'))
                var.put('isStaticPrototype', (var.get('method').get('static') and ((PyJsStrictEq(var.get('key').get('type'),Js('Identifier')) and PyJsStrictEq(var.get('key').get('name'),Js('prototype'))) or (PyJsStrictEq(var.get('key').get('type'),Js('StringLiteral')) and PyJsStrictEq(var.get('key').get('value'),Js('prototype'))))))
                if var.get('isStaticPrototype'):
                    var.get("this").callprop('raise', var.get('key').get('start'), Js('Classes may not have static property named prototype'))
            if var.get('isConstructorCall'):
                if var.get('hadConstructorCall'):
                    var.get("this").callprop('raise', var.get('method').get('start'), Js('Duplicate constructor call in the same class'))
                var.get('method').put('kind', Js('constructorCall'))
                var.put('hadConstructorCall', var.get('true'))
            if ((PyJsStrictEq(var.get('method').get('kind'),Js('constructor')) or PyJsStrictEq(var.get('method').get('kind'),Js('constructorCall'))) and var.get('method').get('decorators')):
                var.get("this").callprop('raise', var.get('method').get('start'), Js("You can't attach decorators to a class constructor"))
            var.get("this").callprop('parseClassMethod', var.get('classBody'), var.get('method'), var.get('isGenerator'), var.get('isAsync'))
            if var.get('isGetSet'):
                var.put('paramCount', (Js(0.0) if PyJsStrictEq(var.get('method').get('kind'),Js('get')) else Js(1.0)))
                if PyJsStrictNeq(var.get('method').get('params').get('length'),var.get('paramCount')):
                    var.put('start', var.get('method').get('start'))
                    if PyJsStrictEq(var.get('method').get('kind'),Js('get')):
                        var.get("this").callprop('raise', var.get('start'), Js('getter should have no params'))
                    else:
                        var.get("this").callprop('raise', var.get('start'), Js('setter should have exactly one param'))
        if var.get('decorators').get('length'):
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('You have trailing decorators with no method'))
        var.get('node').put('body', var.get("this").callprop('finishNode', var.get('classBody'), Js('ClassBody')))
        var.get("this").get('state').put('strict', var.get('oldStrict'))
    PyJs_anonymous_2997_._set_name('anonymous')
    var.get('pp$1').put('parseClassBody', PyJs_anonymous_2997_)
    @Js
    def PyJs_anonymous_2999_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('match', var.get('types').get('eq')):
            if var.get("this").callprop('hasPlugin', Js('classProperties')).neg():
                var.get("this").callprop('unexpected')
            var.get("this").callprop('next')
            var.get('node').put('value', var.get("this").callprop('parseMaybeAssign'))
        else:
            var.get('node').put('value', var.get("null"))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ClassProperty'))
    PyJs_anonymous_2999_._set_name('anonymous')
    var.get('pp$1').put('parseClassProperty', PyJs_anonymous_2999_)
    @Js
    def PyJs_anonymous_3000_(classBody, method, isGenerator, isAsync, this, arguments, var=var):
        var = Scope({'isAsync':isAsync, 'classBody':classBody, 'this':this, 'isGenerator':isGenerator, 'method':method, 'arguments':arguments}, var)
        var.registers(['isAsync', 'isGenerator', 'classBody', 'method'])
        var.get("this").callprop('parseMethod', var.get('method'), var.get('isGenerator'), var.get('isAsync'))
        var.get('classBody').get('body').callprop('push', var.get("this").callprop('finishNode', var.get('method'), Js('ClassMethod')))
    PyJs_anonymous_3000_._set_name('anonymous')
    var.get('pp$1').put('parseClassMethod', PyJs_anonymous_3000_)
    @Js
    def PyJs_anonymous_3001_(node, isStatement, optionalId, this, arguments, var=var):
        var = Scope({'node':node, 'optionalId':optionalId, 'this':this, 'isStatement':isStatement, 'arguments':arguments}, var)
        var.registers(['node', 'optionalId', 'isStatement'])
        if var.get("this").callprop('match', var.get('types').get('name')):
            var.get('node').put('id', var.get("this").callprop('parseIdentifier'))
        else:
            if (var.get('optionalId') or var.get('isStatement').neg()):
                var.get('node').put('id', var.get("null"))
            else:
                var.get("this").callprop('unexpected')
    PyJs_anonymous_3001_._set_name('anonymous')
    var.get('pp$1').put('parseClassId', PyJs_anonymous_3001_)
    @Js
    def PyJs_anonymous_3002_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get('node').put('superClass', (var.get("this").callprop('parseExprSubscripts') if var.get("this").callprop('eat', var.get('types').get('_extends')) else var.get("null")))
    PyJs_anonymous_3002_._set_name('anonymous')
    var.get('pp$1').put('parseClassSuper', PyJs_anonymous_3002_)
    @Js
    def PyJs_anonymous_3003_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'specifier', 'expr', '_specifier', '_specifier2', 'needsSemi'])
        var.get("this").callprop('next')
        if var.get("this").callprop('match', var.get('types').get('star')):
            var.put('specifier', var.get("this").callprop('startNode'))
            var.get("this").callprop('next')
            if (var.get("this").callprop('hasPlugin', Js('exportExtensions')) and var.get("this").callprop('eatContextual', Js('as'))):
                var.get('specifier').put('exported', var.get("this").callprop('parseIdentifier'))
                var.get('node').put('specifiers', Js([var.get("this").callprop('finishNode', var.get('specifier'), Js('ExportNamespaceSpecifier'))]))
                var.get("this").callprop('parseExportSpecifiersMaybe', var.get('node'))
                var.get("this").callprop('parseExportFrom', var.get('node'), var.get('true'))
            else:
                var.get("this").callprop('parseExportFrom', var.get('node'), var.get('true'))
                return var.get("this").callprop('finishNode', var.get('node'), Js('ExportAllDeclaration'))
        else:
            if (var.get("this").callprop('hasPlugin', Js('exportExtensions')) and var.get("this").callprop('isExportDefaultSpecifier')):
                var.put('_specifier', var.get("this").callprop('startNode'))
                var.get('_specifier').put('exported', var.get("this").callprop('parseIdentifier', var.get('true')))
                var.get('node').put('specifiers', Js([var.get("this").callprop('finishNode', var.get('_specifier'), Js('ExportDefaultSpecifier'))]))
                if (var.get("this").callprop('match', var.get('types').get('comma')) and PyJsStrictEq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('star'))):
                    var.get("this").callprop('expect', var.get('types').get('comma'))
                    var.put('_specifier2', var.get("this").callprop('startNode'))
                    var.get("this").callprop('expect', var.get('types').get('star'))
                    var.get("this").callprop('expectContextual', Js('as'))
                    var.get('_specifier2').put('exported', var.get("this").callprop('parseIdentifier'))
                    var.get('node').get('specifiers').callprop('push', var.get("this").callprop('finishNode', var.get('_specifier2'), Js('ExportNamespaceSpecifier')))
                else:
                    var.get("this").callprop('parseExportSpecifiersMaybe', var.get('node'))
                var.get("this").callprop('parseExportFrom', var.get('node'), var.get('true'))
            else:
                if var.get("this").callprop('eat', var.get('types').get('_default')):
                    var.put('expr', var.get("this").callprop('startNode'))
                    var.put('needsSemi', Js(False))
                    if var.get("this").callprop('eat', var.get('types').get('_function')):
                        var.put('expr', var.get("this").callprop('parseFunction', var.get('expr'), var.get('true'), Js(False), Js(False), var.get('true')))
                    else:
                        if var.get("this").callprop('match', var.get('types').get('_class')):
                            var.put('expr', var.get("this").callprop('parseClass', var.get('expr'), var.get('true'), var.get('true')))
                        else:
                            var.put('needsSemi', var.get('true'))
                            var.put('expr', var.get("this").callprop('parseMaybeAssign'))
                    var.get('node').put('declaration', var.get('expr'))
                    if var.get('needsSemi'):
                        var.get("this").callprop('semicolon')
                    var.get("this").callprop('checkExport', var.get('node'), var.get('true'), var.get('true'))
                    return var.get("this").callprop('finishNode', var.get('node'), Js('ExportDefaultDeclaration'))
                else:
                    if (var.get("this").get('state').get('type').get('keyword') or var.get("this").callprop('shouldParseExportDeclaration')):
                        var.get('node').put('specifiers', Js([]))
                        var.get('node').put('source', var.get("null"))
                        var.get('node').put('declaration', var.get("this").callprop('parseExportDeclaration', var.get('node')))
                    else:
                        var.get('node').put('declaration', var.get("null"))
                        var.get('node').put('specifiers', var.get("this").callprop('parseExportSpecifiers'))
                        var.get("this").callprop('parseExportFrom', var.get('node'))
        var.get("this").callprop('checkExport', var.get('node'), var.get('true'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('ExportNamedDeclaration'))
    PyJs_anonymous_3003_._set_name('anonymous')
    var.get('pp$1').put('parseExport', PyJs_anonymous_3003_)
    @Js
    def PyJs_anonymous_3004_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('parseStatement', var.get('true'))
    PyJs_anonymous_3004_._set_name('anonymous')
    var.get('pp$1').put('parseExportDeclaration', PyJs_anonymous_3004_)
    @Js
    def PyJs_anonymous_3005_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['lookahead'])
        if var.get("this").callprop('match', var.get('types').get('name')):
            return ((PyJsStrictNeq(var.get("this").get('state').get('value'),Js('type')) and PyJsStrictNeq(var.get("this").get('state').get('value'),Js('async'))) and PyJsStrictNeq(var.get("this").get('state').get('value'),Js('interface')))
        if var.get("this").callprop('match', var.get('types').get('_default')).neg():
            return Js(False)
        var.put('lookahead', var.get("this").callprop('lookahead'))
        return (PyJsStrictEq(var.get('lookahead').get('type'),var.get('types').get('comma')) or (PyJsStrictEq(var.get('lookahead').get('type'),var.get('types').get('name')) and PyJsStrictEq(var.get('lookahead').get('value'),Js('from'))))
    PyJs_anonymous_3005_._set_name('anonymous')
    var.get('pp$1').put('isExportDefaultSpecifier', PyJs_anonymous_3005_)
    @Js
    def PyJs_anonymous_3006_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('eat', var.get('types').get('comma')):
            var.get('node').put('specifiers', var.get('node').get('specifiers').callprop('concat', var.get("this").callprop('parseExportSpecifiers')))
    PyJs_anonymous_3006_._set_name('anonymous')
    var.get('pp$1').put('parseExportSpecifiersMaybe', PyJs_anonymous_3006_)
    @Js
    def PyJs_anonymous_3007_(node, expect, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'expect':expect, 'arguments':arguments}, var)
        var.registers(['node', 'expect'])
        if var.get("this").callprop('eatContextual', Js('from')):
            var.get('node').put('source', (var.get("this").callprop('parseExprAtom') if var.get("this").callprop('match', var.get('types').get('string')) else var.get("this").callprop('unexpected')))
            var.get("this").callprop('checkExport', var.get('node'))
        else:
            if var.get('expect'):
                var.get("this").callprop('unexpected')
            else:
                var.get('node').put('source', var.get("null"))
        var.get("this").callprop('semicolon')
    PyJs_anonymous_3007_._set_name('anonymous')
    var.get('pp$1').put('parseExportFrom', PyJs_anonymous_3007_)
    @Js
    def PyJs_anonymous_3008_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('isContextual', Js('async'))
    PyJs_anonymous_3008_._set_name('anonymous')
    var.get('pp$1').put('shouldParseExportDeclaration', PyJs_anonymous_3008_)
    @Js
    def PyJs_anonymous_3009_(node, checkNames, isDefault, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'checkNames':checkNames, 'arguments':arguments, 'isDefault':isDefault}, var)
        var.registers(['node', 'specifier', '_isArray3', '_isArray2', 'isClass', '_ref3', '_i3', '_i2', '_ref2', 'checkNames', 'isDefault', 'declaration', '_iterator3', '_iterator2'])
        if var.get('checkNames'):
            if var.get('isDefault'):
                var.get("this").callprop('checkDuplicateExports', var.get('node'), Js('default'))
            else:
                if (var.get('node').get('specifiers') and var.get('node').get('specifiers').get('length')):
                    #for JS loop
                    var.put('_iterator2', var.get('node').get('specifiers'))
                    var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                    var.put('_i2', Js(0.0))
                    var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else var.get('_iterator2').callprop(var.get('Symbol').get('iterator'))))
                    while 1:
                        pass
                        if var.get('_isArray2'):
                            if (var.get('_i2')>=var.get('_iterator2').get('length')):
                                break
                            var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i2', var.get('_iterator2').callprop('next'))
                            if var.get('_i2').get('done'):
                                break
                            var.put('_ref2', var.get('_i2').get('value'))
                        var.put('specifier', var.get('_ref2'))
                        var.get("this").callprop('checkDuplicateExports', var.get('specifier'), var.get('specifier').get('exported').get('name'))
                    
                else:
                    if var.get('node').get('declaration'):
                        if (PyJsStrictEq(var.get('node').get('declaration').get('type'),Js('FunctionDeclaration')) or PyJsStrictEq(var.get('node').get('declaration').get('type'),Js('ClassDeclaration'))):
                            var.get("this").callprop('checkDuplicateExports', var.get('node'), var.get('node').get('declaration').get('id').get('name'))
                        else:
                            if PyJsStrictEq(var.get('node').get('declaration').get('type'),Js('VariableDeclaration')):
                                #for JS loop
                                var.put('_iterator3', var.get('node').get('declaration').get('declarations'))
                                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                                var.put('_i3', Js(0.0))
                                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else var.get('_iterator3').callprop(var.get('Symbol').get('iterator'))))
                                while 1:
                                    pass
                                    if var.get('_isArray3'):
                                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                                            break
                                        var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                                    else:
                                        var.put('_i3', var.get('_iterator3').callprop('next'))
                                        if var.get('_i3').get('done'):
                                            break
                                        var.put('_ref3', var.get('_i3').get('value'))
                                    var.put('declaration', var.get('_ref3'))
                                    var.get("this").callprop('checkDeclaration', var.get('declaration').get('id'))
                                
        if var.get("this").get('state').get('decorators').get('length'):
            var.put('isClass', (var.get('node').get('declaration') and (PyJsStrictEq(var.get('node').get('declaration').get('type'),Js('ClassDeclaration')) or PyJsStrictEq(var.get('node').get('declaration').get('type'),Js('ClassExpression')))))
            if (var.get('node').get('declaration').neg() or var.get('isClass').neg()):
                var.get("this").callprop('raise', var.get('node').get('start'), Js('You can only use decorators on an export when exporting a class'))
            var.get("this").callprop('takeDecorators', var.get('node').get('declaration'))
    PyJs_anonymous_3009_._set_name('anonymous')
    var.get('pp$1').put('checkExport', PyJs_anonymous_3009_)
    @Js
    def PyJs_anonymous_3010_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', '_isArray5', '_isArray4', '_i5', '_i4', 'elem', 'prop', '_iterator5', '_iterator4', '_ref5', '_ref4'])
        if PyJsStrictEq(var.get('node').get('type'),Js('ObjectPattern')):
            #for JS loop
            var.put('_iterator4', var.get('node').get('properties'))
            var.put('_isArray4', var.get('Array').callprop('isArray', var.get('_iterator4')))
            var.put('_i4', Js(0.0))
            var.put('_iterator4', (var.get('_iterator4') if var.get('_isArray4') else var.get('_iterator4').callprop(var.get('Symbol').get('iterator'))))
            while 1:
                pass
                if var.get('_isArray4'):
                    if (var.get('_i4')>=var.get('_iterator4').get('length')):
                        break
                    var.put('_ref4', var.get('_iterator4').get((var.put('_i4',Js(var.get('_i4').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i4', var.get('_iterator4').callprop('next'))
                    if var.get('_i4').get('done'):
                        break
                    var.put('_ref4', var.get('_i4').get('value'))
                var.put('prop', var.get('_ref4'))
                var.get("this").callprop('checkDeclaration', var.get('prop'))
            
        else:
            if PyJsStrictEq(var.get('node').get('type'),Js('ArrayPattern')):
                #for JS loop
                var.put('_iterator5', var.get('node').get('elements'))
                var.put('_isArray5', var.get('Array').callprop('isArray', var.get('_iterator5')))
                var.put('_i5', Js(0.0))
                var.put('_iterator5', (var.get('_iterator5') if var.get('_isArray5') else var.get('_iterator5').callprop(var.get('Symbol').get('iterator'))))
                while 1:
                    pass
                    if var.get('_isArray5'):
                        if (var.get('_i5')>=var.get('_iterator5').get('length')):
                            break
                        var.put('_ref5', var.get('_iterator5').get((var.put('_i5',Js(var.get('_i5').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i5', var.get('_iterator5').callprop('next'))
                        if var.get('_i5').get('done'):
                            break
                        var.put('_ref5', var.get('_i5').get('value'))
                    var.put('elem', var.get('_ref5'))
                    if var.get('elem'):
                        var.get("this").callprop('checkDeclaration', var.get('elem'))
                
            else:
                if PyJsStrictEq(var.get('node').get('type'),Js('ObjectProperty')):
                    var.get("this").callprop('checkDeclaration', var.get('node').get('value'))
                else:
                    if (PyJsStrictEq(var.get('node').get('type'),Js('RestElement')) or PyJsStrictEq(var.get('node').get('type'),Js('RestProperty'))):
                        var.get("this").callprop('checkDeclaration', var.get('node').get('argument'))
                    else:
                        if PyJsStrictEq(var.get('node').get('type'),Js('Identifier')):
                            var.get("this").callprop('checkDuplicateExports', var.get('node'), var.get('node').get('name'))
    PyJs_anonymous_3010_._set_name('anonymous')
    var.get('pp$1').put('checkDeclaration', PyJs_anonymous_3010_)
    @Js
    def PyJs_anonymous_3011_(node, name, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['node', 'name'])
        if (var.get("this").get('state').get('exportedIdentifiers').callprop('indexOf', var.get('name'))>(-Js(1.0))):
            var.get("this").callprop('raiseDuplicateExportError', var.get('node'), var.get('name'))
        var.get("this").get('state').get('exportedIdentifiers').callprop('push', var.get('name'))
    PyJs_anonymous_3011_._set_name('anonymous')
    var.get('pp$1').put('checkDuplicateExports', PyJs_anonymous_3011_)
    @Js
    def PyJs_anonymous_3012_(node, name, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['node', 'name'])
        var.get("this").callprop('raise', var.get('node').get('start'), (Js('Only one default export allowed per module.') if PyJsStrictEq(var.get('name'),Js('default')) else ((Js('`')+var.get('name'))+Js('` has already been exported. Exported identifiers must be unique.'))))
    PyJs_anonymous_3012_._set_name('anonymous')
    var.get('pp$1').put('raiseDuplicateExportError', PyJs_anonymous_3012_)
    @Js
    def PyJs_anonymous_3013_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'nodes', 'isDefault', 'needsFrom', 'first'])
        var.put('nodes', Js([]))
        var.put('first', var.get('true'))
        var.put('needsFrom', PyJsComma(Js(0.0), Js(None)))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        while var.get("this").callprop('eat', var.get('types').get('braceR')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
                if var.get("this").callprop('eat', var.get('types').get('braceR')):
                    break
            var.put('isDefault', var.get("this").callprop('match', var.get('types').get('_default')))
            if (var.get('isDefault') and var.get('needsFrom').neg()):
                var.put('needsFrom', var.get('true'))
            var.put('node', var.get("this").callprop('startNode'))
            var.get('node').put('local', var.get("this").callprop('parseIdentifier', var.get('isDefault')))
            var.get('node').put('exported', (var.get("this").callprop('parseIdentifier', var.get('true')) if var.get("this").callprop('eatContextual', Js('as')) else var.get('node').get('local').callprop('__clone')))
            var.get('nodes').callprop('push', var.get("this").callprop('finishNode', var.get('node'), Js('ExportSpecifier')))
        if (var.get('needsFrom') and var.get("this").callprop('isContextual', Js('from')).neg()):
            var.get("this").callprop('unexpected')
        return var.get('nodes')
    PyJs_anonymous_3013_._set_name('anonymous')
    var.get('pp$1').put('parseExportSpecifiers', PyJs_anonymous_3013_)
    @Js
    def PyJs_anonymous_3014_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        if var.get("this").callprop('match', var.get('types').get('string')):
            var.get('node').put('specifiers', Js([]))
            var.get('node').put('source', var.get("this").callprop('parseExprAtom'))
        else:
            var.get('node').put('specifiers', Js([]))
            var.get("this").callprop('parseImportSpecifiers', var.get('node'))
            var.get("this").callprop('expectContextual', Js('from'))
            var.get('node').put('source', (var.get("this").callprop('parseExprAtom') if var.get("this").callprop('match', var.get('types').get('string')) else var.get("this").callprop('unexpected')))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ImportDeclaration'))
    PyJs_anonymous_3014_._set_name('anonymous')
    var.get('pp$1').put('parseImport', PyJs_anonymous_3014_)
    @Js
    def PyJs_anonymous_3015_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'specifier', 'startLoc', '_specifier3', 'startPos', 'first'])
        var.put('first', var.get('true'))
        if var.get("this").callprop('match', var.get('types').get('name')):
            var.put('startPos', var.get("this").get('state').get('start'))
            var.put('startLoc', var.get("this").get('state').get('startLoc'))
            var.get('node').get('specifiers').callprop('push', var.get("this").callprop('parseImportSpecifierDefault', var.get("this").callprop('parseIdentifier'), var.get('startPos'), var.get('startLoc')))
            if var.get("this").callprop('eat', var.get('types').get('comma')).neg():
                return var.get('undefined')
        if var.get("this").callprop('match', var.get('types').get('star')):
            var.put('specifier', var.get("this").callprop('startNode'))
            var.get("this").callprop('next')
            var.get("this").callprop('expectContextual', Js('as'))
            var.get('specifier').put('local', var.get("this").callprop('parseIdentifier'))
            var.get("this").callprop('checkLVal', var.get('specifier').get('local'), var.get('true'), var.get('undefined'), Js('import namespace specifier'))
            var.get('node').get('specifiers').callprop('push', var.get("this").callprop('finishNode', var.get('specifier'), Js('ImportNamespaceSpecifier')))
            return var.get('undefined')
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        while var.get("this").callprop('eat', var.get('types').get('braceR')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
                if var.get("this").callprop('eat', var.get('types').get('braceR')):
                    break
            var.put('_specifier3', var.get("this").callprop('startNode'))
            var.get('_specifier3').put('imported', var.get("this").callprop('parseIdentifier', var.get('true')))
            var.get('_specifier3').put('local', (var.get("this").callprop('parseIdentifier') if var.get("this").callprop('eatContextual', Js('as')) else var.get('_specifier3').get('imported').callprop('__clone')))
            var.get("this").callprop('checkLVal', var.get('_specifier3').get('local'), var.get('true'), var.get('undefined'), Js('import specifier'))
            var.get('node').get('specifiers').callprop('push', var.get("this").callprop('finishNode', var.get('_specifier3'), Js('ImportSpecifier')))
    PyJs_anonymous_3015_._set_name('anonymous')
    var.get('pp$1').put('parseImportSpecifiers', PyJs_anonymous_3015_)
    @Js
    def PyJs_anonymous_3016_(id, startPos, startLoc, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'id':id, 'startLoc':startLoc, 'arguments':arguments}, var)
        var.registers(['node', 'startPos', 'id', 'startLoc'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('local', var.get('id'))
        var.get("this").callprop('checkLVal', var.get('node').get('local'), var.get('true'), var.get('undefined'), Js('default import specifier'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('ImportDefaultSpecifier'))
    PyJs_anonymous_3016_._set_name('anonymous')
    var.get('pp$1').put('parseImportSpecifierDefault', PyJs_anonymous_3016_)
    var.put('pp$2', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3017_(node, isBinding, contextDescription, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'isBinding':isBinding, 'arguments':arguments, 'contextDescription':contextDescription}, var)
        var.registers(['node', '_isArray', '_iterator', 'isBinding', 'prop', '_i', 'message', 'contextDescription', '_ref'])
        if var.get('node'):
            while 1:
                SWITCHED = False
                CONDITION = (var.get('node').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('Identifier')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectPattern')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayPattern')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentPattern')):
                    SWITCHED = True
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectExpression')):
                    SWITCHED = True
                    var.get('node').put('type', Js('ObjectPattern'))
                    #for JS loop
                    var.put('_iterator', var.get('node').get('properties'))
                    var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
                    var.put('_i', Js(0.0))
                    var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else var.get('_iterator').callprop(var.get('Symbol').get('iterator'))))
                    while 1:
                        pass
                        if var.get('_isArray'):
                            if (var.get('_i')>=var.get('_iterator').get('length')):
                                break
                            var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                        else:
                            var.put('_i', var.get('_iterator').callprop('next'))
                            if var.get('_i').get('done'):
                                break
                            var.put('_ref', var.get('_i').get('value'))
                        var.put('prop', var.get('_ref'))
                        if PyJsStrictEq(var.get('prop').get('type'),Js('ObjectMethod')):
                            if (PyJsStrictEq(var.get('prop').get('kind'),Js('get')) or PyJsStrictEq(var.get('prop').get('kind'),Js('set'))):
                                var.get("this").callprop('raise', var.get('prop').get('key').get('start'), Js("Object pattern can't contain getter or setter"))
                            else:
                                var.get("this").callprop('raise', var.get('prop').get('key').get('start'), Js("Object pattern can't contain methods"))
                        else:
                            var.get("this").callprop('toAssignable', var.get('prop'), var.get('isBinding'), Js('object destructuring pattern'))
                    
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectProperty')):
                    SWITCHED = True
                    var.get("this").callprop('toAssignable', var.get('node').get('value'), var.get('isBinding'), var.get('contextDescription'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('SpreadProperty')):
                    SWITCHED = True
                    var.get('node').put('type', Js('RestProperty'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayExpression')):
                    SWITCHED = True
                    var.get('node').put('type', Js('ArrayPattern'))
                    var.get("this").callprop('toAssignableList', var.get('node').get('elements'), var.get('isBinding'), var.get('contextDescription'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentExpression')):
                    SWITCHED = True
                    if PyJsStrictEq(var.get('node').get('operator'),Js('=')):
                        var.get('node').put('type', Js('AssignmentPattern'))
                        var.get('node').delete('operator')
                    else:
                        var.get("this").callprop('raise', var.get('node').get('left').get('end'), Js("Only '=' operator can be used for specifying default value."))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('MemberExpression')):
                    SWITCHED = True
                    if var.get('isBinding').neg():
                        break
                if True:
                    SWITCHED = True
                    var.put('message', (Js('Invalid left-hand side')+((Js(' in ')+var.get('contextDescription')) if var.get('contextDescription') else Js('expression'))))
                    var.get("this").callprop('raise', var.get('node').get('start'), var.get('message'))
                SWITCHED = True
                break
        return var.get('node')
    PyJs_anonymous_3017_._set_name('anonymous')
    var.get('pp$2').put('toAssignable', PyJs_anonymous_3017_)
    @Js
    def PyJs_anonymous_3018_(exprList, isBinding, contextDescription, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'isBinding':isBinding, 'exprList':exprList, 'contextDescription':contextDescription}, var)
        var.registers(['last', 'i', 'isBinding', 'contextDescription', 'arg', 'end', 'exprList', 'elt'])
        var.put('end', var.get('exprList').get('length'))
        if var.get('end'):
            var.put('last', var.get('exprList').get((var.get('end')-Js(1.0))))
            if (var.get('last') and PyJsStrictEq(var.get('last').get('type'),Js('RestElement'))):
                var.put('end',Js(var.get('end').to_number())-Js(1))
            else:
                if (var.get('last') and PyJsStrictEq(var.get('last').get('type'),Js('SpreadElement'))):
                    var.get('last').put('type', Js('RestElement'))
                    var.put('arg', var.get('last').get('argument'))
                    var.get("this").callprop('toAssignable', var.get('arg'), var.get('isBinding'), var.get('contextDescription'))
                    if ((PyJsStrictNeq(var.get('arg').get('type'),Js('Identifier')) and PyJsStrictNeq(var.get('arg').get('type'),Js('MemberExpression'))) and PyJsStrictNeq(var.get('arg').get('type'),Js('ArrayPattern'))):
                        var.get("this").callprop('unexpected', var.get('arg').get('start'))
                    var.put('end',Js(var.get('end').to_number())-Js(1))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('end')):
            try:
                var.put('elt', var.get('exprList').get(var.get('i')))
                if var.get('elt'):
                    var.get("this").callprop('toAssignable', var.get('elt'), var.get('isBinding'), var.get('contextDescription'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('exprList')
    PyJs_anonymous_3018_._set_name('anonymous')
    var.get('pp$2').put('toAssignableList', PyJs_anonymous_3018_)
    @Js
    def PyJs_anonymous_3019_(exprList, this, arguments, var=var):
        var = Scope({'this':this, 'exprList':exprList, 'arguments':arguments}, var)
        var.registers(['exprList'])
        return var.get('exprList')
    PyJs_anonymous_3019_._set_name('anonymous')
    var.get('pp$2').put('toReferencedList', PyJs_anonymous_3019_)
    @Js
    def PyJs_anonymous_3020_(refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['node', 'refShorthandDefaultPos'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        var.get('node').put('argument', var.get("this").callprop('parseMaybeAssign', Js(False), var.get('refShorthandDefaultPos')))
        return var.get("this").callprop('finishNode', var.get('node'), Js('SpreadElement'))
    PyJs_anonymous_3020_._set_name('anonymous')
    var.get('pp$2').put('parseSpread', PyJs_anonymous_3020_)
    @Js
    def PyJs_anonymous_3021_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        var.get('node').put('argument', var.get("this").callprop('parseBindingIdentifier'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('RestElement'))
    PyJs_anonymous_3021_._set_name('anonymous')
    var.get('pp$2').put('parseRest', PyJs_anonymous_3021_)
    @Js
    def PyJs_anonymous_3022_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return ((var.get("this").callprop('match', var.get('types').get('_yield')) and var.get("this").get('state').get('strict').neg()) and var.get("this").get('state').get('inGenerator').neg())
    PyJs_anonymous_3022_._set_name('anonymous')
    var.get('pp$2').put('shouldAllowYieldIdentifier', PyJs_anonymous_3022_)
    @Js
    def PyJs_anonymous_3023_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('parseIdentifier', var.get("this").callprop('shouldAllowYieldIdentifier'))
    PyJs_anonymous_3023_._set_name('anonymous')
    var.get('pp$2').put('parseBindingIdentifier', PyJs_anonymous_3023_)
    @Js
    def PyJs_anonymous_3024_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get("this").get('state').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_yield')):
                SWITCHED = True
                if (var.get("this").get('state').get('strict') or var.get("this").get('state').get('inGenerator')):
                    var.get("this").callprop('unexpected')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('name')):
                SWITCHED = True
                return var.get("this").callprop('parseIdentifier', var.get('true'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('bracketL')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                var.get('node').put('elements', var.get("this").callprop('parseBindingList', var.get('types').get('bracketR'), var.get('true')))
                return var.get("this").callprop('finishNode', var.get('node'), Js('ArrayPattern'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                SWITCHED = True
                return var.get("this").callprop('parseObj', var.get('true'))
            if True:
                SWITCHED = True
                var.get("this").callprop('unexpected')
            SWITCHED = True
            break
    PyJs_anonymous_3024_._set_name('anonymous')
    var.get('pp$2').put('parseBindingAtom', PyJs_anonymous_3024_)
    @Js
    def PyJs_anonymous_3025_(close, allowEmpty, this, arguments, var=var):
        var = Scope({'this':this, 'close':close, 'allowEmpty':allowEmpty, 'arguments':arguments}, var)
        var.registers(['elts', 'decorators', 'close', 'first', 'allowEmpty', 'left'])
        var.put('elts', Js([]))
        var.put('first', var.get('true'))
        while var.get("this").callprop('eat', var.get('close')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
            if (var.get('allowEmpty') and var.get("this").callprop('match', var.get('types').get('comma'))):
                var.get('elts').callprop('push', var.get("null"))
            else:
                if var.get("this").callprop('eat', var.get('close')):
                    break
                else:
                    if var.get("this").callprop('match', var.get('types').get('ellipsis')):
                        var.get('elts').callprop('push', var.get("this").callprop('parseAssignableListItemTypes', var.get("this").callprop('parseRest')))
                        var.get("this").callprop('expect', var.get('close'))
                        break
                    else:
                        var.put('decorators', Js([]))
                        while var.get("this").callprop('match', var.get('types').get('at')):
                            var.get('decorators').callprop('push', var.get("this").callprop('parseDecorator'))
                        var.put('left', var.get("this").callprop('parseMaybeDefault'))
                        if var.get('decorators').get('length'):
                            var.get('left').put('decorators', var.get('decorators'))
                        var.get("this").callprop('parseAssignableListItemTypes', var.get('left'))
                        var.get('elts').callprop('push', var.get("this").callprop('parseMaybeDefault', var.get('left').get('start'), var.get('left').get('loc').get('start'), var.get('left')))
        return var.get('elts')
    PyJs_anonymous_3025_._set_name('anonymous')
    var.get('pp$2').put('parseBindingList', PyJs_anonymous_3025_)
    @Js
    def PyJs_anonymous_3026_(param, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'param':param}, var)
        var.registers(['param'])
        return var.get('param')
    PyJs_anonymous_3026_._set_name('anonymous')
    var.get('pp$2').put('parseAssignableListItemTypes', PyJs_anonymous_3026_)
    @Js
    def PyJs_anonymous_3027_(startPos, startLoc, left, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'arguments':arguments, 'startLoc':startLoc, 'left':left}, var)
        var.registers(['node', 'startPos', 'startLoc', 'left'])
        var.put('startLoc', (var.get('startLoc') or var.get("this").get('state').get('startLoc')))
        var.put('startPos', (var.get('startPos') or var.get("this").get('state').get('start')))
        var.put('left', (var.get('left') or var.get("this").callprop('parseBindingAtom')))
        if var.get("this").callprop('eat', var.get('types').get('eq')).neg():
            return var.get('left')
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('left', var.get('left'))
        var.get('node').put('right', var.get("this").callprop('parseMaybeAssign'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('AssignmentPattern'))
    PyJs_anonymous_3027_._set_name('anonymous')
    var.get('pp$2').put('parseMaybeDefault', PyJs_anonymous_3027_)
    @Js
    def PyJs_anonymous_3028_(expr, isBinding, checkClashes, contextDescription, this, arguments, var=var):
        var = Scope({'checkClashes':checkClashes, 'arguments':arguments, 'this':this, 'expr':expr, 'isBinding':isBinding, 'contextDescription':contextDescription}, var)
        var.registers(['_isArray3', '_isArray2', '_ref3', 'isBinding', '_i3', '_i2', 'contextDescription', 'prop', 'checkClashes', 'key', 'expr', 'elem', 'message', '_ref2', '_iterator3', '_iterator2'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get('expr').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('Identifier')):
                SWITCHED = True
                if (var.get("this").get('state').get('strict') and (var.get('reservedWords').callprop('strictBind', var.get('expr').get('name')) or var.get('reservedWords').callprop('strict', var.get('expr').get('name')))):
                    var.get("this").callprop('raise', var.get('expr').get('start'), (((Js('Binding ') if var.get('isBinding') else Js('Assigning to '))+var.get('expr').get('name'))+Js(' in strict mode')))
                if var.get('checkClashes'):
                    var.put('key', (Js('_')+var.get('expr').get('name')))
                    if var.get('checkClashes').get(var.get('key')):
                        var.get("this").callprop('raise', var.get('expr').get('start'), Js('Argument name clash in strict mode'))
                    else:
                        var.get('checkClashes').put(var.get('key'), var.get('true'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('MemberExpression')):
                SWITCHED = True
                if var.get('isBinding'):
                    var.get("this").callprop('raise', var.get('expr').get('start'), ((Js('Binding') if var.get('isBinding') else Js('Assigning to'))+Js(' member expression')))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectPattern')):
                SWITCHED = True
                #for JS loop
                var.put('_iterator2', var.get('expr').get('properties'))
                var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
                var.put('_i2', Js(0.0))
                var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else var.get('_iterator2').callprop(var.get('Symbol').get('iterator'))))
                while 1:
                    pass
                    if var.get('_isArray2'):
                        if (var.get('_i2')>=var.get('_iterator2').get('length')):
                            break
                        var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i2', var.get('_iterator2').callprop('next'))
                        if var.get('_i2').get('done'):
                            break
                        var.put('_ref2', var.get('_i2').get('value'))
                    var.put('prop', var.get('_ref2'))
                    if PyJsStrictEq(var.get('prop').get('type'),Js('ObjectProperty')):
                        var.put('prop', var.get('prop').get('value'))
                    var.get("this").callprop('checkLVal', var.get('prop'), var.get('isBinding'), var.get('checkClashes'), Js('object destructuring pattern'))
                
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayPattern')):
                SWITCHED = True
                #for JS loop
                var.put('_iterator3', var.get('expr').get('elements'))
                var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
                var.put('_i3', Js(0.0))
                var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else var.get('_iterator3').callprop(var.get('Symbol').get('iterator'))))
                while 1:
                    pass
                    if var.get('_isArray3'):
                        if (var.get('_i3')>=var.get('_iterator3').get('length')):
                            break
                        var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                    else:
                        var.put('_i3', var.get('_iterator3').callprop('next'))
                        if var.get('_i3').get('done'):
                            break
                        var.put('_ref3', var.get('_i3').get('value'))
                    var.put('elem', var.get('_ref3'))
                    if var.get('elem'):
                        var.get("this").callprop('checkLVal', var.get('elem'), var.get('isBinding'), var.get('checkClashes'), Js('array destructuring pattern'))
                
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentPattern')):
                SWITCHED = True
                var.get("this").callprop('checkLVal', var.get('expr').get('left'), var.get('isBinding'), var.get('checkClashes'), Js('assignment pattern'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('RestProperty')):
                SWITCHED = True
                var.get("this").callprop('checkLVal', var.get('expr').get('argument'), var.get('isBinding'), var.get('checkClashes'), Js('rest property'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('RestElement')):
                SWITCHED = True
                var.get("this").callprop('checkLVal', var.get('expr').get('argument'), var.get('isBinding'), var.get('checkClashes'), Js('rest element'))
                break
            if True:
                SWITCHED = True
                var.put('message', (((Js('Binding invalid') if var.get('isBinding') else Js('Invalid'))+Js(' left-hand side'))+((Js(' in ')+var.get('contextDescription')) if var.get('contextDescription') else Js('expression'))))
                var.get("this").callprop('raise', var.get('expr').get('start'), var.get('message'))
            SWITCHED = True
            break
    PyJs_anonymous_3028_._set_name('anonymous')
    var.get('pp$2').put('checkLVal', PyJs_anonymous_3028_)
    var.put('pp$3', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3029_(prop, propHash, this, arguments, var=var):
        var = Scope({'this':this, 'propHash':propHash, 'arguments':arguments, 'prop':prop}, var)
        var.registers(['propHash', 'name', 'key', 'prop'])
        if var.get('prop').get('computed'):
            return var.get('undefined')
        var.put('key', var.get('prop').get('key'))
        var.put('name', PyJsComma(Js(0.0), Js(None)))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('key').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('Identifier')):
                SWITCHED = True
                var.put('name', var.get('key').get('name'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('StringLiteral')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('NumericLiteral')):
                SWITCHED = True
                var.put('name', var.get('String')(var.get('key').get('value')))
                break
            if True:
                SWITCHED = True
                return var.get('undefined')
            SWITCHED = True
            break
        if (PyJsStrictEq(var.get('name'),Js('__proto__')) and var.get('prop').get('kind').neg()):
            if var.get('propHash').get('proto'):
                var.get("this").callprop('raise', var.get('key').get('start'), Js('Redefinition of __proto__ property'))
            var.get('propHash').put('proto', var.get('true'))
    PyJs_anonymous_3029_._set_name('anonymous')
    var.get('pp$3').put('checkPropClash', PyJs_anonymous_3029_)
    @Js
    def PyJs_anonymous_3030_(noIn, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'noIn':noIn, 'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['node', 'expr', 'refShorthandDefaultPos', 'startLoc', 'noIn', 'startPos'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('expr', var.get("this").callprop('parseMaybeAssign', var.get('noIn'), var.get('refShorthandDefaultPos')))
        if var.get("this").callprop('match', var.get('types').get('comma')):
            var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('node').put('expressions', Js([var.get('expr')]))
            while var.get("this").callprop('eat', var.get('types').get('comma')):
                var.get('node').get('expressions').callprop('push', var.get("this").callprop('parseMaybeAssign', var.get('noIn'), var.get('refShorthandDefaultPos')))
            var.get("this").callprop('toReferencedList', var.get('node').get('expressions'))
            return var.get("this").callprop('finishNode', var.get('node'), Js('SequenceExpression'))
        return var.get('expr')
    PyJs_anonymous_3030_._set_name('anonymous')
    var.get('pp$3').put('parseExpression', PyJs_anonymous_3030_)
    @Js
    def PyJs_anonymous_3031_(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos, this, arguments, var=var):
        var = Scope({'afterLeftParse':afterLeftParse, 'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'noIn':noIn, 'arguments':arguments, 'refNeedsArrowPos':refNeedsArrowPos}, var)
        var.registers(['node', 'afterLeftParse', 'startLoc', 'errorMsg', 'refNeedsArrowPos', 'refShorthandDefaultPos', 'failOnShorthandAssign', 'noIn', 'startPos', '_left', 'left'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        if (var.get("this").callprop('match', var.get('types').get('_yield')) and var.get("this").get('state').get('inGenerator')):
            var.put('_left', var.get("this").callprop('parseYield'))
            if var.get('afterLeftParse'):
                var.put('_left', var.get('afterLeftParse').callprop('call', var.get("this"), var.get('_left'), var.get('startPos'), var.get('startLoc')))
            return var.get('_left')
        var.put('failOnShorthandAssign', PyJsComma(Js(0.0), Js(None)))
        if var.get('refShorthandDefaultPos'):
            var.put('failOnShorthandAssign', Js(False))
        else:
            PyJs_Object_3032_ = Js({'start':Js(0.0)})
            var.put('refShorthandDefaultPos', PyJs_Object_3032_)
            var.put('failOnShorthandAssign', var.get('true'))
        if (var.get("this").callprop('match', var.get('types').get('parenL')) or var.get("this").callprop('match', var.get('types').get('name'))):
            var.get("this").get('state').put('potentialArrowAt', var.get("this").get('state').get('start'))
        var.put('left', var.get("this").callprop('parseMaybeConditional', var.get('noIn'), var.get('refShorthandDefaultPos'), var.get('refNeedsArrowPos')))
        if var.get('afterLeftParse'):
            var.put('left', var.get('afterLeftParse').callprop('call', var.get("this"), var.get('left'), var.get('startPos'), var.get('startLoc')))
        if var.get("this").get('state').get('type').get('isAssign'):
            var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('node').put('operator', var.get("this").get('state').get('value'))
            var.get('node').put('left', (var.get("this").callprop('toAssignable', var.get('left'), var.get('undefined'), Js('assignment expression')) if var.get("this").callprop('match', var.get('types').get('eq')) else var.get('left')))
            var.get('refShorthandDefaultPos').put('start', Js(0.0))
            var.get("this").callprop('checkLVal', var.get('left'), var.get('undefined'), var.get('undefined'), Js('assignment expression'))
            if (var.get('left').get('extra') and var.get('left').get('extra').get('parenthesized')):
                var.put('errorMsg', PyJsComma(Js(0.0), Js(None)))
                if PyJsStrictEq(var.get('left').get('type'),Js('ObjectPattern')):
                    var.put('errorMsg', Js('`({a}) = 0` use `({a} = 0)`'))
                else:
                    if PyJsStrictEq(var.get('left').get('type'),Js('ArrayPattern')):
                        var.put('errorMsg', Js('`([a]) = 0` use `([a] = 0)`'))
                if var.get('errorMsg'):
                    var.get("this").callprop('raise', var.get('left').get('start'), (Js("You're trying to assign to a parenthesized expression, eg. instead of ")+var.get('errorMsg')))
            var.get("this").callprop('next')
            var.get('node').put('right', var.get("this").callprop('parseMaybeAssign', var.get('noIn')))
            return var.get("this").callprop('finishNode', var.get('node'), Js('AssignmentExpression'))
        else:
            if (var.get('failOnShorthandAssign') and var.get('refShorthandDefaultPos').get('start')):
                var.get("this").callprop('unexpected', var.get('refShorthandDefaultPos').get('start'))
        return var.get('left')
    PyJs_anonymous_3031_._set_name('anonymous')
    var.get('pp$3').put('parseMaybeAssign', PyJs_anonymous_3031_)
    @Js
    def PyJs_anonymous_3033_(noIn, refShorthandDefaultPos, refNeedsArrowPos, this, arguments, var=var):
        var = Scope({'noIn':noIn, 'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments, 'refNeedsArrowPos':refNeedsArrowPos}, var)
        var.registers(['expr', 'refShorthandDefaultPos', 'startLoc', 'noIn', 'startPos', 'refNeedsArrowPos'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('expr', var.get("this").callprop('parseExprOps', var.get('noIn'), var.get('refShorthandDefaultPos')))
        if (var.get('refShorthandDefaultPos') and var.get('refShorthandDefaultPos').get('start')):
            return var.get('expr')
        return var.get("this").callprop('parseConditional', var.get('expr'), var.get('noIn'), var.get('startPos'), var.get('startLoc'), var.get('refNeedsArrowPos'))
    PyJs_anonymous_3033_._set_name('anonymous')
    var.get('pp$3').put('parseMaybeConditional', PyJs_anonymous_3033_)
    @Js
    def PyJs_anonymous_3034_(expr, noIn, startPos, startLoc, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'startLoc':startLoc, 'noIn':noIn, 'expr':expr, 'startPos':startPos}, var)
        var.registers(['node', 'expr', 'startPos', 'noIn', 'startLoc'])
        if var.get("this").callprop('eat', var.get('types').get('question')):
            var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('node').put('test', var.get('expr'))
            var.get('node').put('consequent', var.get("this").callprop('parseMaybeAssign'))
            var.get("this").callprop('expect', var.get('types').get('colon'))
            var.get('node').put('alternate', var.get("this").callprop('parseMaybeAssign', var.get('noIn')))
            return var.get("this").callprop('finishNode', var.get('node'), Js('ConditionalExpression'))
        return var.get('expr')
    PyJs_anonymous_3034_._set_name('anonymous')
    var.get('pp$3').put('parseConditional', PyJs_anonymous_3034_)
    @Js
    def PyJs_anonymous_3035_(noIn, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'noIn':noIn, 'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['noIn', 'expr', 'startPos', 'refShorthandDefaultPos', 'startLoc'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('expr', var.get("this").callprop('parseMaybeUnary', var.get('refShorthandDefaultPos')))
        if (var.get('refShorthandDefaultPos') and var.get('refShorthandDefaultPos').get('start')):
            return var.get('expr')
        else:
            return var.get("this").callprop('parseExprOp', var.get('expr'), var.get('startPos'), var.get('startLoc'), (-Js(1.0)), var.get('noIn'))
    PyJs_anonymous_3035_._set_name('anonymous')
    var.get('pp$3').put('parseExprOps', PyJs_anonymous_3035_)
    @Js
    def PyJs_anonymous_3036_(left, leftStartPos, leftStartLoc, minPrec, noIn, this, arguments, var=var):
        var = Scope({'minPrec':minPrec, 'arguments':arguments, 'noIn':noIn, 'leftStartLoc':leftStartLoc, 'this':this, 'leftStartPos':leftStartPos, 'left':left}, var)
        var.registers(['node', 'minPrec', 'leftStartPos', 'prec', 'startLoc', 'noIn', 'leftStartLoc', 'startPos', 'op', 'left'])
        var.put('prec', var.get("this").get('state').get('type').get('binop'))
        if ((var.get('prec')!=var.get("null")) and (var.get('noIn').neg() or var.get("this").callprop('match', var.get('types').get('_in')).neg())):
            if (var.get('prec')>var.get('minPrec')):
                var.put('node', var.get("this").callprop('startNodeAt', var.get('leftStartPos'), var.get('leftStartLoc')))
                var.get('node').put('left', var.get('left'))
                var.get('node').put('operator', var.get("this").get('state').get('value'))
                if ((((PyJsStrictEq(var.get('node').get('operator'),Js('**')) and PyJsStrictEq(var.get('left').get('type'),Js('UnaryExpression'))) and var.get('left').get('extra')) and var.get('left').get('extra').get('parenthesizedArgument').neg()) and var.get('left').get('extra').get('parenthesized').neg()):
                    var.get("this").callprop('raise', var.get('left').get('argument').get('start'), Js('Illegal expression. Wrap left hand side or entire exponentiation in parentheses.'))
                var.put('op', var.get("this").get('state').get('type'))
                var.get("this").callprop('next')
                var.put('startPos', var.get("this").get('state').get('start'))
                var.put('startLoc', var.get("this").get('state').get('startLoc'))
                var.get('node').put('right', var.get("this").callprop('parseExprOp', var.get("this").callprop('parseMaybeUnary'), var.get('startPos'), var.get('startLoc'), ((var.get('prec')-Js(1.0)) if var.get('op').get('rightAssociative') else var.get('prec')), var.get('noIn')))
                var.get("this").callprop('finishNode', var.get('node'), (Js('LogicalExpression') if (PyJsStrictEq(var.get('op'),var.get('types').get('logicalOR')) or PyJsStrictEq(var.get('op'),var.get('types').get('logicalAND'))) else Js('BinaryExpression')))
                return var.get("this").callprop('parseExprOp', var.get('node'), var.get('leftStartPos'), var.get('leftStartLoc'), var.get('minPrec'), var.get('noIn'))
        return var.get('left')
    PyJs_anonymous_3036_._set_name('anonymous')
    var.get('pp$3').put('parseExprOp', PyJs_anonymous_3036_)
    @Js
    def PyJs_anonymous_3037_(refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['node', 'expr', 'update', '_node', 'refShorthandDefaultPos', 'startLoc', 'startPos', 'argType'])
        if var.get("this").get('state').get('type').get('prefix'):
            var.put('node', var.get("this").callprop('startNode'))
            var.put('update', var.get("this").callprop('match', var.get('types').get('incDec')))
            var.get('node').put('operator', var.get("this").get('state').get('value'))
            var.get('node').put('prefix', var.get('true'))
            var.get("this").callprop('next')
            var.put('argType', var.get("this").get('state').get('type'))
            var.get('node').put('argument', var.get("this").callprop('parseMaybeUnary'))
            var.get("this").callprop('addExtra', var.get('node'), Js('parenthesizedArgument'), (PyJsStrictEq(var.get('argType'),var.get('types').get('parenL')) and (var.get('node').get('argument').get('extra').neg() or var.get('node').get('argument').get('extra').get('parenthesized').neg())))
            if (var.get('refShorthandDefaultPos') and var.get('refShorthandDefaultPos').get('start')):
                var.get("this").callprop('unexpected', var.get('refShorthandDefaultPos').get('start'))
            if var.get('update'):
                var.get("this").callprop('checkLVal', var.get('node').get('argument'), var.get('undefined'), var.get('undefined'), Js('prefix operation'))
            else:
                if ((var.get("this").get('state').get('strict') and PyJsStrictEq(var.get('node').get('operator'),Js('delete'))) and PyJsStrictEq(var.get('node').get('argument').get('type'),Js('Identifier'))):
                    var.get("this").callprop('raise', var.get('node').get('start'), Js('Deleting local variable in strict mode'))
            return var.get("this").callprop('finishNode', var.get('node'), (Js('UpdateExpression') if var.get('update') else Js('UnaryExpression')))
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('expr', var.get("this").callprop('parseExprSubscripts', var.get('refShorthandDefaultPos')))
        if (var.get('refShorthandDefaultPos') and var.get('refShorthandDefaultPos').get('start')):
            return var.get('expr')
        while (var.get("this").get('state').get('type').get('postfix') and var.get("this").callprop('canInsertSemicolon').neg()):
            var.put('_node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('_node').put('operator', var.get("this").get('state').get('value'))
            var.get('_node').put('prefix', Js(False))
            var.get('_node').put('argument', var.get('expr'))
            var.get("this").callprop('checkLVal', var.get('expr'), var.get('undefined'), var.get('undefined'), Js('postfix operation'))
            var.get("this").callprop('next')
            var.put('expr', var.get("this").callprop('finishNode', var.get('_node'), Js('UpdateExpression')))
        return var.get('expr')
    PyJs_anonymous_3037_._set_name('anonymous')
    var.get('pp$3').put('parseMaybeUnary', PyJs_anonymous_3037_)
    @Js
    def PyJs_anonymous_3038_(refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['expr', 'startPos', 'potentialArrowAt', 'startLoc', 'refShorthandDefaultPos'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('potentialArrowAt', var.get("this").get('state').get('potentialArrowAt'))
        var.put('expr', var.get("this").callprop('parseExprAtom', var.get('refShorthandDefaultPos')))
        if (PyJsStrictEq(var.get('expr').get('type'),Js('ArrowFunctionExpression')) and PyJsStrictEq(var.get('expr').get('start'),var.get('potentialArrowAt'))):
            return var.get('expr')
        if (var.get('refShorthandDefaultPos') and var.get('refShorthandDefaultPos').get('start')):
            return var.get('expr')
        return var.get("this").callprop('parseSubscripts', var.get('expr'), var.get('startPos'), var.get('startLoc'))
    PyJs_anonymous_3038_._set_name('anonymous')
    var.get('pp$3').put('parseExprSubscripts', PyJs_anonymous_3038_)
    @Js
    def PyJs_anonymous_3039_(base, startPos, startLoc, noCalls, this, arguments, var=var):
        var = Scope({'base':base, 'arguments':arguments, 'startLoc':startLoc, 'this':this, 'startPos':startPos, 'noCalls':noCalls}, var)
        var.registers(['node', 'startLoc', 'possibleAsync', '_node3', '_node2', 'base', '_node5', '_node4', 'startPos', 'noCalls'])
        #for JS loop
        
        while 1:
            if (var.get('noCalls').neg() and var.get("this").callprop('eat', var.get('types').get('doubleColon'))):
                var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
                var.get('node').put('object', var.get('base'))
                var.get('node').put('callee', var.get("this").callprop('parseNoCallExpr'))
                return var.get("this").callprop('parseSubscripts', var.get("this").callprop('finishNode', var.get('node'), Js('BindExpression')), var.get('startPos'), var.get('startLoc'), var.get('noCalls'))
            else:
                if var.get("this").callprop('eat', var.get('types').get('dot')):
                    var.put('_node2', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
                    var.get('_node2').put('object', var.get('base'))
                    var.get('_node2').put('property', var.get("this").callprop('parseIdentifier', var.get('true')))
                    var.get('_node2').put('computed', Js(False))
                    var.put('base', var.get("this").callprop('finishNode', var.get('_node2'), Js('MemberExpression')))
                else:
                    if var.get("this").callprop('eat', var.get('types').get('bracketL')):
                        var.put('_node3', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
                        var.get('_node3').put('object', var.get('base'))
                        var.get('_node3').put('property', var.get("this").callprop('parseExpression'))
                        var.get('_node3').put('computed', var.get('true'))
                        var.get("this").callprop('expect', var.get('types').get('bracketR'))
                        var.put('base', var.get("this").callprop('finishNode', var.get('_node3'), Js('MemberExpression')))
                    else:
                        if (var.get('noCalls').neg() and var.get("this").callprop('match', var.get('types').get('parenL'))):
                            var.put('possibleAsync', (((PyJsStrictEq(var.get("this").get('state').get('potentialArrowAt'),var.get('base').get('start')) and PyJsStrictEq(var.get('base').get('type'),Js('Identifier'))) and PyJsStrictEq(var.get('base').get('name'),Js('async'))) and var.get("this").callprop('canInsertSemicolon').neg()))
                            var.get("this").callprop('next')
                            var.put('_node4', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
                            var.get('_node4').put('callee', var.get('base'))
                            var.get('_node4').put('arguments', var.get("this").callprop('parseCallExpressionArguments', var.get('types').get('parenR'), var.get('possibleAsync')))
                            if (PyJsStrictEq(var.get('_node4').get('callee').get('type'),Js('Import')) and PyJsStrictNeq(var.get('_node4').get('arguments').get('length'),Js(1.0))):
                                var.get("this").callprop('raise', var.get('_node4').get('start'), Js('import() requires exactly one argument'))
                            var.put('base', var.get("this").callprop('finishNode', var.get('_node4'), Js('CallExpression')))
                            if (var.get('possibleAsync') and var.get("this").callprop('shouldParseAsyncArrow')):
                                return var.get("this").callprop('parseAsyncArrowFromCallExpression', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')), var.get('_node4'))
                            else:
                                var.get("this").callprop('toReferencedList', var.get('_node4').get('arguments'))
                        else:
                            if var.get("this").callprop('match', var.get('types').get('backQuote')):
                                var.put('_node5', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
                                var.get('_node5').put('tag', var.get('base'))
                                var.get('_node5').put('quasi', var.get("this").callprop('parseTemplate'))
                                var.put('base', var.get("this").callprop('finishNode', var.get('_node5'), Js('TaggedTemplateExpression')))
                            else:
                                return var.get('base')
        
    PyJs_anonymous_3039_._set_name('anonymous')
    var.get('pp$3').put('parseSubscripts', PyJs_anonymous_3039_)
    @Js
    def PyJs_anonymous_3040_(close, possibleAsyncArrow, this, arguments, var=var):
        var = Scope({'this':this, 'close':close, 'possibleAsyncArrow':possibleAsyncArrow, 'arguments':arguments}, var)
        var.registers(['elts', 'close', 'first', 'possibleAsyncArrow', 'innerParenStart'])
        var.put('innerParenStart', PyJsComma(Js(0.0), Js(None)))
        var.put('elts', Js([]))
        var.put('first', var.get('true'))
        while var.get("this").callprop('eat', var.get('close')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
                if var.get("this").callprop('eat', var.get('close')):
                    break
            if (var.get("this").callprop('match', var.get('types').get('parenL')) and var.get('innerParenStart').neg()):
                var.put('innerParenStart', var.get("this").get('state').get('start'))
            PyJs_Object_3041_ = Js({'start':Js(0.0)})
            var.get('elts').callprop('push', var.get("this").callprop('parseExprListItem', var.get('undefined'), (PyJs_Object_3041_ if var.get('possibleAsyncArrow') else var.get('undefined'))))
        if ((var.get('possibleAsyncArrow') and var.get('innerParenStart')) and var.get("this").callprop('shouldParseAsyncArrow')):
            var.get("this").callprop('unexpected')
        return var.get('elts')
    PyJs_anonymous_3040_._set_name('anonymous')
    var.get('pp$3').put('parseCallExpressionArguments', PyJs_anonymous_3040_)
    @Js
    def PyJs_anonymous_3042_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('match', var.get('types').get('arrow'))
    PyJs_anonymous_3042_._set_name('anonymous')
    var.get('pp$3').put('shouldParseAsyncArrow', PyJs_anonymous_3042_)
    @Js
    def PyJs_anonymous_3043_(node, call, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'call':call, 'arguments':arguments}, var)
        var.registers(['node', 'call'])
        var.get("this").callprop('expect', var.get('types').get('arrow'))
        return var.get("this").callprop('parseArrowExpression', var.get('node'), var.get('call').get('arguments'), var.get('true'))
    PyJs_anonymous_3043_._set_name('anonymous')
    var.get('pp$3').put('parseAsyncArrowFromCallExpression', PyJs_anonymous_3043_)
    @Js
    def PyJs_anonymous_3044_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['startPos', 'startLoc'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        return var.get("this").callprop('parseSubscripts', var.get("this").callprop('parseExprAtom'), var.get('startPos'), var.get('startLoc'), var.get('true'))
    PyJs_anonymous_3044_._set_name('anonymous')
    var.get('pp$3').put('parseNoCallExpr', PyJs_anonymous_3044_)
    @Js
    def PyJs_anonymous_3045_(refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['node', 'oldLabels', 'allowAwait', 'oldInFunction', 'allowYield', 'value', 'params', '_node6', 'callee', 'id', 'canBeArrow', 'refShorthandDefaultPos'])
        var.put('node', PyJsComma(Js(0.0), Js(None)))
        var.put('canBeArrow', PyJsStrictEq(var.get("this").get('state').get('potentialArrowAt'),var.get("this").get('state').get('start')))
        while 1:
            SWITCHED = False
            CONDITION = (var.get("this").get('state').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_super')):
                SWITCHED = True
                if (var.get("this").get('state').get('inMethod').neg() and var.get("this").get('options').get('allowSuperOutsideMethod').neg()):
                    var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js("'super' outside of function or class"))
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                if ((var.get("this").callprop('match', var.get('types').get('parenL')).neg() and var.get("this").callprop('match', var.get('types').get('bracketL')).neg()) and var.get("this").callprop('match', var.get('types').get('dot')).neg()):
                    var.get("this").callprop('unexpected')
                if ((var.get("this").callprop('match', var.get('types').get('parenL')) and PyJsStrictNeq(var.get("this").get('state').get('inMethod'),Js('constructor'))) and var.get("this").get('options').get('allowSuperOutsideMethod').neg()):
                    var.get("this").callprop('raise', var.get('node').get('start'), Js('super() outside of class constructor'))
                return var.get("this").callprop('finishNode', var.get('node'), Js('Super'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_import')):
                SWITCHED = True
                if var.get("this").callprop('hasPlugin', Js('dynamicImport')).neg():
                    var.get("this").callprop('unexpected')
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                if var.get("this").callprop('match', var.get('types').get('parenL')).neg():
                    var.get("this").callprop('unexpected', var.get("null"), var.get('types').get('parenL'))
                return var.get("this").callprop('finishNode', var.get('node'), Js('Import'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_this')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('ThisExpression'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_yield')):
                SWITCHED = True
                if var.get("this").get('state').get('inGenerator'):
                    var.get("this").callprop('unexpected')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('name')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.put('allowAwait', (PyJsStrictEq(var.get("this").get('state').get('value'),Js('await')) and var.get("this").get('state').get('inAsync')))
                var.put('allowYield', var.get("this").callprop('shouldAllowYieldIdentifier'))
                var.put('id', var.get("this").callprop('parseIdentifier', (var.get('allowAwait') or var.get('allowYield'))))
                if PyJsStrictEq(var.get('id').get('name'),Js('await')):
                    if (var.get("this").get('state').get('inAsync') or var.get("this").get('inModule')):
                        return var.get("this").callprop('parseAwait', var.get('node'))
                else:
                    if ((PyJsStrictEq(var.get('id').get('name'),Js('async')) and var.get("this").callprop('match', var.get('types').get('_function'))) and var.get("this").callprop('canInsertSemicolon').neg()):
                        var.get("this").callprop('next')
                        return var.get("this").callprop('parseFunction', var.get('node'), Js(False), Js(False), var.get('true'))
                    else:
                        if ((var.get('canBeArrow') and PyJsStrictEq(var.get('id').get('name'),Js('async'))) and var.get("this").callprop('match', var.get('types').get('name'))):
                            var.put('params', Js([var.get("this").callprop('parseIdentifier')]))
                            var.get("this").callprop('expect', var.get('types').get('arrow'))
                            return var.get("this").callprop('parseArrowExpression', var.get('node'), var.get('params'), var.get('true'))
                if ((var.get('canBeArrow') and var.get("this").callprop('canInsertSemicolon').neg()) and var.get("this").callprop('eat', var.get('types').get('arrow'))):
                    return var.get("this").callprop('parseArrowExpression', var.get('node'), Js([var.get('id')]))
                return var.get('id')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_do')):
                SWITCHED = True
                if var.get("this").callprop('hasPlugin', Js('doExpressions')):
                    var.put('_node6', var.get("this").callprop('startNode'))
                    var.get("this").callprop('next')
                    var.put('oldInFunction', var.get("this").get('state').get('inFunction'))
                    var.put('oldLabels', var.get("this").get('state').get('labels'))
                    var.get("this").get('state').put('labels', Js([]))
                    var.get("this").get('state').put('inFunction', Js(False))
                    var.get('_node6').put('body', var.get("this").callprop('parseBlock', Js(False), var.get('true')))
                    var.get("this").get('state').put('inFunction', var.get('oldInFunction'))
                    var.get("this").get('state').put('labels', var.get('oldLabels'))
                    return var.get("this").callprop('finishNode', var.get('_node6'), Js('DoExpression'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('regexp')):
                SWITCHED = True
                var.put('value', var.get("this").get('state').get('value'))
                var.put('node', var.get("this").callprop('parseLiteral', var.get('value').get('value'), Js('RegExpLiteral')))
                var.get('node').put('pattern', var.get('value').get('pattern'))
                var.get('node').put('flags', var.get('value').get('flags'))
                return var.get('node')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('num')):
                SWITCHED = True
                return var.get("this").callprop('parseLiteral', var.get("this").get('state').get('value'), Js('NumericLiteral'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('string')):
                SWITCHED = True
                return var.get("this").callprop('parseLiteral', var.get("this").get('state').get('value'), Js('StringLiteral'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_null')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('NullLiteral'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_true')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_false')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get('node').put('value', var.get("this").callprop('match', var.get('types').get('_true')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('BooleanLiteral'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('parenL')):
                SWITCHED = True
                return var.get("this").callprop('parseParenAndDistinguishExpression', var.get("null"), var.get("null"), var.get('canBeArrow'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('bracketL')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                var.get('node').put('elements', var.get("this").callprop('parseExprList', var.get('types').get('bracketR'), var.get('true'), var.get('refShorthandDefaultPos')))
                var.get("this").callprop('toReferencedList', var.get('node').get('elements'))
                return var.get("this").callprop('finishNode', var.get('node'), Js('ArrayExpression'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                SWITCHED = True
                return var.get("this").callprop('parseObj', Js(False), var.get('refShorthandDefaultPos'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_function')):
                SWITCHED = True
                return var.get("this").callprop('parseFunctionExpression')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('at')):
                SWITCHED = True
                var.get("this").callprop('parseDecorators')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_class')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('takeDecorators', var.get('node'))
                return var.get("this").callprop('parseClass', var.get('node'), Js(False))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_new')):
                SWITCHED = True
                return var.get("this").callprop('parseNew')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('backQuote')):
                SWITCHED = True
                return var.get("this").callprop('parseTemplate')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('doubleColon')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('startNode'))
                var.get("this").callprop('next')
                var.get('node').put('object', var.get("null"))
                var.put('callee', var.get('node').put('callee', var.get("this").callprop('parseNoCallExpr')))
                if PyJsStrictEq(var.get('callee').get('type'),Js('MemberExpression')):
                    return var.get("this").callprop('finishNode', var.get('node'), Js('BindExpression'))
                else:
                    var.get("this").callprop('raise', var.get('callee').get('start'), Js('Binding should be performed on object property.'))
            if True:
                SWITCHED = True
                var.get("this").callprop('unexpected')
            SWITCHED = True
            break
    PyJs_anonymous_3045_._set_name('anonymous')
    var.get('pp$3').put('parseExprAtom', PyJs_anonymous_3045_)
    @Js
    def PyJs_anonymous_3046_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'meta'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('meta', var.get("this").callprop('parseIdentifier', var.get('true')))
        if ((var.get("this").get('state').get('inGenerator') and var.get("this").callprop('eat', var.get('types').get('dot'))) and var.get("this").callprop('hasPlugin', Js('functionSent'))):
            return var.get("this").callprop('parseMetaProperty', var.get('node'), var.get('meta'), Js('sent'))
        else:
            return var.get("this").callprop('parseFunction', var.get('node'), Js(False))
    PyJs_anonymous_3046_._set_name('anonymous')
    var.get('pp$3').put('parseFunctionExpression', PyJs_anonymous_3046_)
    @Js
    def PyJs_anonymous_3047_(node, meta, propertyName, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'propertyName':propertyName, 'meta':meta, 'arguments':arguments}, var)
        var.registers(['node', 'propertyName', 'meta'])
        var.get('node').put('meta', var.get('meta'))
        var.get('node').put('property', var.get("this").callprop('parseIdentifier', var.get('true')))
        if PyJsStrictNeq(var.get('node').get('property').get('name'),var.get('propertyName')):
            var.get("this").callprop('raise', var.get('node').get('property').get('start'), (((Js('The only valid meta property for new is ')+var.get('meta').get('name'))+Js('.'))+var.get('propertyName')))
        return var.get("this").callprop('finishNode', var.get('node'), Js('MetaProperty'))
    PyJs_anonymous_3047_._set_name('anonymous')
    var.get('pp$3').put('parseMetaProperty', PyJs_anonymous_3047_)
    @Js
    def PyJs_anonymous_3048_(value, type, this, arguments, var=var):
        var = Scope({'this':this, 'type':type, 'arguments':arguments, 'value':value}, var)
        var.registers(['node', 'type', 'value'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('addExtra', var.get('node'), Js('rawValue'), var.get('value'))
        var.get("this").callprop('addExtra', var.get('node'), Js('raw'), var.get("this").get('input').callprop('slice', var.get("this").get('state').get('start'), var.get("this").get('state').get('end')))
        var.get('node').put('value', var.get('value'))
        var.get("this").callprop('next')
        return var.get("this").callprop('finishNode', var.get('node'), var.get('type'))
    PyJs_anonymous_3048_._set_name('anonymous')
    var.get('pp$3').put('parseLiteral', PyJs_anonymous_3048_)
    @Js
    def PyJs_anonymous_3049_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['val'])
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        var.put('val', var.get("this").callprop('parseExpression'))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        return var.get('val')
    PyJs_anonymous_3049_._set_name('anonymous')
    var.get('pp$3').put('parseParenExpression', PyJs_anonymous_3049_)
    @Js
    def PyJs_anonymous_3050_(startPos, startLoc, canBeArrow, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'canBeArrow':canBeArrow, 'startLoc':startLoc, 'arguments':arguments}, var)
        var.registers(['innerStartLoc', 'optionalCommaStart', '_ref', 'startPos', 'arrowNode', '_iterator', 'val', 'param', 'innerStartPos', 'spreadNodeStartPos', 'refShorthandDefaultPos', '_i', 'spreadStart', 'exprList', 'canBeArrow', 'innerEndPos', 'spreadNodeStartLoc', 'refNeedsArrowPos', '_isArray', 'innerEndLoc', 'startLoc', 'first'])
        var.put('startPos', (var.get('startPos') or var.get("this").get('state').get('start')))
        var.put('startLoc', (var.get('startLoc') or var.get("this").get('state').get('startLoc')))
        var.put('val', PyJsComma(Js(0.0), Js(None)))
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        var.put('innerStartPos', var.get("this").get('state').get('start'))
        var.put('innerStartLoc', var.get("this").get('state').get('startLoc'))
        var.put('exprList', Js([]))
        var.put('first', var.get('true'))
        PyJs_Object_3051_ = Js({'start':Js(0.0)})
        var.put('refShorthandDefaultPos', PyJs_Object_3051_)
        var.put('spreadStart', PyJsComma(Js(0.0), Js(None)))
        var.put('optionalCommaStart', PyJsComma(Js(0.0), Js(None)))
        PyJs_Object_3052_ = Js({'start':Js(0.0)})
        var.put('refNeedsArrowPos', PyJs_Object_3052_)
        while var.get("this").callprop('match', var.get('types').get('parenR')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'), (var.get('refNeedsArrowPos').get('start') or var.get("null")))
                if var.get("this").callprop('match', var.get('types').get('parenR')):
                    var.put('optionalCommaStart', var.get("this").get('state').get('start'))
                    break
            if var.get("this").callprop('match', var.get('types').get('ellipsis')):
                var.put('spreadNodeStartPos', var.get("this").get('state').get('start'))
                var.put('spreadNodeStartLoc', var.get("this").get('state').get('startLoc'))
                var.put('spreadStart', var.get("this").get('state').get('start'))
                var.get('exprList').callprop('push', var.get("this").callprop('parseParenItem', var.get("this").callprop('parseRest'), var.get('spreadNodeStartLoc'), var.get('spreadNodeStartPos')))
                break
            else:
                var.get('exprList').callprop('push', var.get("this").callprop('parseMaybeAssign', Js(False), var.get('refShorthandDefaultPos'), var.get("this").get('parseParenItem'), var.get('refNeedsArrowPos')))
        var.put('innerEndPos', var.get("this").get('state').get('start'))
        var.put('innerEndLoc', var.get("this").get('state').get('startLoc'))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        var.put('arrowNode', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        if ((var.get('canBeArrow') and var.get("this").callprop('shouldParseArrow')) and var.put('arrowNode', var.get("this").callprop('parseArrow', var.get('arrowNode')))):
            #for JS loop
            var.put('_iterator', var.get('exprList'))
            var.put('_isArray', var.get('Array').callprop('isArray', var.get('_iterator')))
            var.put('_i', Js(0.0))
            var.put('_iterator', (var.get('_iterator') if var.get('_isArray') else var.get('_iterator').callprop(var.get('Symbol').get('iterator'))))
            while 1:
                pass
                if var.get('_isArray'):
                    if (var.get('_i')>=var.get('_iterator').get('length')):
                        break
                    var.put('_ref', var.get('_iterator').get((var.put('_i',Js(var.get('_i').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i', var.get('_iterator').callprop('next'))
                    if var.get('_i').get('done'):
                        break
                    var.put('_ref', var.get('_i').get('value'))
                var.put('param', var.get('_ref'))
                if (var.get('param').get('extra') and var.get('param').get('extra').get('parenthesized')):
                    var.get("this").callprop('unexpected', var.get('param').get('extra').get('parenStart'))
            
            return var.get("this").callprop('parseArrowExpression', var.get('arrowNode'), var.get('exprList'))
        if var.get('exprList').get('length').neg():
            var.get("this").callprop('unexpected', var.get("this").get('state').get('lastTokStart'))
        if var.get('optionalCommaStart'):
            var.get("this").callprop('unexpected', var.get('optionalCommaStart'))
        if var.get('spreadStart'):
            var.get("this").callprop('unexpected', var.get('spreadStart'))
        if var.get('refShorthandDefaultPos').get('start'):
            var.get("this").callprop('unexpected', var.get('refShorthandDefaultPos').get('start'))
        if var.get('refNeedsArrowPos').get('start'):
            var.get("this").callprop('unexpected', var.get('refNeedsArrowPos').get('start'))
        if (var.get('exprList').get('length')>Js(1.0)):
            var.put('val', var.get("this").callprop('startNodeAt', var.get('innerStartPos'), var.get('innerStartLoc')))
            var.get('val').put('expressions', var.get('exprList'))
            var.get("this").callprop('toReferencedList', var.get('val').get('expressions'))
            var.get("this").callprop('finishNodeAt', var.get('val'), Js('SequenceExpression'), var.get('innerEndPos'), var.get('innerEndLoc'))
        else:
            var.put('val', var.get('exprList').get('0'))
        var.get("this").callprop('addExtra', var.get('val'), Js('parenthesized'), var.get('true'))
        var.get("this").callprop('addExtra', var.get('val'), Js('parenStart'), var.get('startPos'))
        return var.get('val')
    PyJs_anonymous_3050_._set_name('anonymous')
    var.get('pp$3').put('parseParenAndDistinguishExpression', PyJs_anonymous_3050_)
    @Js
    def PyJs_anonymous_3053_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").callprop('canInsertSemicolon').neg()
    PyJs_anonymous_3053_._set_name('anonymous')
    var.get('pp$3').put('shouldParseArrow', PyJs_anonymous_3053_)
    @Js
    def PyJs_anonymous_3054_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('eat', var.get('types').get('arrow')):
            return var.get('node')
    PyJs_anonymous_3054_._set_name('anonymous')
    var.get('pp$3').put('parseArrow', PyJs_anonymous_3054_)
    @Js
    def PyJs_anonymous_3055_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        return var.get('node')
    PyJs_anonymous_3055_._set_name('anonymous')
    var.get('pp$3').put('parseParenItem', PyJs_anonymous_3055_)
    @Js
    def PyJs_anonymous_3056_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'meta'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('meta', var.get("this").callprop('parseIdentifier', var.get('true')))
        if var.get("this").callprop('eat', var.get('types').get('dot')):
            return var.get("this").callprop('parseMetaProperty', var.get('node'), var.get('meta'), Js('target'))
        var.get('node').put('callee', var.get("this").callprop('parseNoCallExpr'))
        if var.get("this").callprop('eat', var.get('types').get('parenL')):
            var.get('node').put('arguments', var.get("this").callprop('parseExprList', var.get('types').get('parenR')))
            var.get("this").callprop('toReferencedList', var.get('node').get('arguments'))
        else:
            var.get('node').put('arguments', Js([]))
        return var.get("this").callprop('finishNode', var.get('node'), Js('NewExpression'))
    PyJs_anonymous_3056_._set_name('anonymous')
    var.get('pp$3').put('parseNew', PyJs_anonymous_3056_)
    @Js
    def PyJs_anonymous_3057_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['elem'])
        var.put('elem', var.get("this").callprop('startNode'))
        PyJs_Object_3058_ = Js({'raw':var.get("this").get('input').callprop('slice', var.get("this").get('state').get('start'), var.get("this").get('state').get('end')).callprop('replace', JsRegExp('/\\r\\n?/g'), Js('\n')),'cooked':var.get("this").get('state').get('value')})
        var.get('elem').put('value', PyJs_Object_3058_)
        var.get("this").callprop('next')
        var.get('elem').put('tail', var.get("this").callprop('match', var.get('types').get('backQuote')))
        return var.get("this").callprop('finishNode', var.get('elem'), Js('TemplateElement'))
    PyJs_anonymous_3057_._set_name('anonymous')
    var.get('pp$3').put('parseTemplateElement', PyJs_anonymous_3057_)
    @Js
    def PyJs_anonymous_3059_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'curElt'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        var.get('node').put('expressions', Js([]))
        var.put('curElt', var.get("this").callprop('parseTemplateElement'))
        var.get('node').put('quasis', Js([var.get('curElt')]))
        while var.get('curElt').get('tail').neg():
            var.get("this").callprop('expect', var.get('types').get('dollarBraceL'))
            var.get('node').get('expressions').callprop('push', var.get("this").callprop('parseExpression'))
            var.get("this").callprop('expect', var.get('types').get('braceR'))
            var.get('node').get('quasis').callprop('push', var.put('curElt', var.get("this").callprop('parseTemplateElement')))
        var.get("this").callprop('next')
        return var.get("this").callprop('finishNode', var.get('node'), Js('TemplateLiteral'))
    PyJs_anonymous_3059_._set_name('anonymous')
    var.get('pp$3').put('parseTemplate', PyJs_anonymous_3059_)
    @Js
    def PyJs_anonymous_3060_(isPattern, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'refShorthandDefaultPos':refShorthandDefaultPos, 'isPattern':isPattern}, var)
        var.registers(['node', 'firstRestLocation', 'isGenerator', 'prop', 'isAsync', 'asyncId', 'refShorthandDefaultPos', 'startLoc', 'propHash', 'position', 'startPos', 'isPattern', 'decorators', 'first'])
        var.put('decorators', Js([]))
        var.put('propHash', var.get('Object').callprop('create', var.get("null")))
        var.put('first', var.get('true'))
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('properties', Js([]))
        var.get("this").callprop('next')
        var.put('firstRestLocation', var.get("null"))
        while var.get("this").callprop('eat', var.get('types').get('braceR')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
                if var.get("this").callprop('eat', var.get('types').get('braceR')):
                    break
            while var.get("this").callprop('match', var.get('types').get('at')):
                var.get('decorators').callprop('push', var.get("this").callprop('parseDecorator'))
            var.put('prop', var.get("this").callprop('startNode'))
            var.put('isGenerator', Js(False))
            var.put('isAsync', Js(False))
            var.put('startPos', PyJsComma(Js(0.0), Js(None)))
            var.put('startLoc', PyJsComma(Js(0.0), Js(None)))
            if var.get('decorators').get('length'):
                var.get('prop').put('decorators', var.get('decorators'))
                var.put('decorators', Js([]))
            if (var.get("this").callprop('hasPlugin', Js('objectRestSpread')) and var.get("this").callprop('match', var.get('types').get('ellipsis'))):
                var.put('prop', var.get("this").callprop('parseSpread'))
                var.get('prop').put('type', (Js('RestProperty') if var.get('isPattern') else Js('SpreadProperty')))
                var.get('node').get('properties').callprop('push', var.get('prop'))
                if var.get('isPattern'):
                    var.put('position', var.get("this").get('state').get('start'))
                    if PyJsStrictNeq(var.get('firstRestLocation'),var.get("null")):
                        var.get("this").callprop('unexpected', var.get('firstRestLocation'), Js('Cannot have multiple rest elements when destructuring'))
                    else:
                        if var.get("this").callprop('eat', var.get('types').get('braceR')):
                            break
                        else:
                            if (var.get("this").callprop('match', var.get('types').get('comma')) and PyJsStrictEq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('braceR'))):
                                continue
                            else:
                                var.put('firstRestLocation', var.get('position'))
                                continue
                else:
                    continue
            var.get('prop').put('method', Js(False))
            var.get('prop').put('shorthand', Js(False))
            if (var.get('isPattern') or var.get('refShorthandDefaultPos')):
                var.put('startPos', var.get("this").get('state').get('start'))
                var.put('startLoc', var.get("this").get('state').get('startLoc'))
            if var.get('isPattern').neg():
                var.put('isGenerator', var.get("this").callprop('eat', var.get('types').get('star')))
            if (var.get('isPattern').neg() and var.get("this").callprop('isContextual', Js('async'))):
                if var.get('isGenerator'):
                    var.get("this").callprop('unexpected')
                var.put('asyncId', var.get("this").callprop('parseIdentifier'))
                if ((((var.get("this").callprop('match', var.get('types').get('colon')) or var.get("this").callprop('match', var.get('types').get('parenL'))) or var.get("this").callprop('match', var.get('types').get('braceR'))) or var.get("this").callprop('match', var.get('types').get('eq'))) or var.get("this").callprop('match', var.get('types').get('comma'))):
                    var.get('prop').put('key', var.get('asyncId'))
                else:
                    var.put('isAsync', var.get('true'))
                    if var.get("this").callprop('hasPlugin', Js('asyncGenerators')):
                        var.put('isGenerator', var.get("this").callprop('eat', var.get('types').get('star')))
                    var.get("this").callprop('parsePropertyName', var.get('prop'))
            else:
                var.get("this").callprop('parsePropertyName', var.get('prop'))
            var.get("this").callprop('parseObjPropValue', var.get('prop'), var.get('startPos'), var.get('startLoc'), var.get('isGenerator'), var.get('isAsync'), var.get('isPattern'), var.get('refShorthandDefaultPos'))
            var.get("this").callprop('checkPropClash', var.get('prop'), var.get('propHash'))
            if var.get('prop').get('shorthand'):
                var.get("this").callprop('addExtra', var.get('prop'), Js('shorthand'), var.get('true'))
            var.get('node').get('properties').callprop('push', var.get('prop'))
        if PyJsStrictNeq(var.get('firstRestLocation'),var.get("null")):
            var.get("this").callprop('unexpected', var.get('firstRestLocation'), Js('The rest element has to be the last element when destructuring'))
        if var.get('decorators').get('length'):
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('You have trailing decorators with no property'))
        return var.get("this").callprop('finishNode', var.get('node'), (Js('ObjectPattern') if var.get('isPattern') else Js('ObjectExpression')))
    PyJs_anonymous_3060_._set_name('anonymous')
    var.get('pp$3').put('parseObj', PyJs_anonymous_3060_)
    @Js
    def PyJs_anonymous_3061_(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'isGenerator':isGenerator, 'prop':prop, 'isAsync':isAsync, 'refShorthandDefaultPos':refShorthandDefaultPos, 'startLoc':startLoc, 'startPos':startPos, 'isPattern':isPattern}, var)
        var.registers(['isGenerator', 'prop', 'start', 'paramCount', 'illegalBinding', 'refShorthandDefaultPos', 'startLoc', 'isAsync', 'startPos', 'isPattern'])
        if ((var.get('isAsync') or var.get('isGenerator')) or var.get("this").callprop('match', var.get('types').get('parenL'))):
            if var.get('isPattern'):
                var.get("this").callprop('unexpected')
            var.get('prop').put('kind', Js('method'))
            var.get('prop').put('method', var.get('true'))
            var.get("this").callprop('parseMethod', var.get('prop'), var.get('isGenerator'), var.get('isAsync'))
            return var.get("this").callprop('finishNode', var.get('prop'), Js('ObjectMethod'))
        if var.get("this").callprop('eat', var.get('types').get('colon')):
            var.get('prop').put('value', (var.get("this").callprop('parseMaybeDefault', var.get("this").get('state').get('start'), var.get("this").get('state').get('startLoc')) if var.get('isPattern') else var.get("this").callprop('parseMaybeAssign', Js(False), var.get('refShorthandDefaultPos'))))
            return var.get("this").callprop('finishNode', var.get('prop'), Js('ObjectProperty'))
        def PyJs_LONG_3062_(var=var):
            return (((((var.get('isPattern').neg() and var.get('prop').get('computed').neg()) and PyJsStrictEq(var.get('prop').get('key').get('type'),Js('Identifier'))) and (PyJsStrictEq(var.get('prop').get('key').get('name'),Js('get')) or PyJsStrictEq(var.get('prop').get('key').get('name'),Js('set')))) and var.get("this").callprop('match', var.get('types').get('comma')).neg()) and var.get("this").callprop('match', var.get('types').get('braceR')).neg())
        if PyJs_LONG_3062_():
            if (var.get('isGenerator') or var.get('isAsync')):
                var.get("this").callprop('unexpected')
            var.get('prop').put('kind', var.get('prop').get('key').get('name'))
            var.get("this").callprop('parsePropertyName', var.get('prop'))
            var.get("this").callprop('parseMethod', var.get('prop'), Js(False))
            var.put('paramCount', (Js(0.0) if PyJsStrictEq(var.get('prop').get('kind'),Js('get')) else Js(1.0)))
            if PyJsStrictNeq(var.get('prop').get('params').get('length'),var.get('paramCount')):
                var.put('start', var.get('prop').get('start'))
                if PyJsStrictEq(var.get('prop').get('kind'),Js('get')):
                    var.get("this").callprop('raise', var.get('start'), Js('getter should have no params'))
                else:
                    var.get("this").callprop('raise', var.get('start'), Js('setter should have exactly one param'))
            return var.get("this").callprop('finishNode', var.get('prop'), Js('ObjectMethod'))
        if (var.get('prop').get('computed').neg() and PyJsStrictEq(var.get('prop').get('key').get('type'),Js('Identifier'))):
            if var.get('isPattern'):
                var.put('illegalBinding', var.get("this").callprop('isKeyword', var.get('prop').get('key').get('name')))
                if (var.get('illegalBinding').neg() and var.get("this").get('state').get('strict')):
                    var.put('illegalBinding', (var.get('reservedWords').callprop('strictBind', var.get('prop').get('key').get('name')) or var.get('reservedWords').callprop('strict', var.get('prop').get('key').get('name'))))
                if var.get('illegalBinding'):
                    var.get("this").callprop('raise', var.get('prop').get('key').get('start'), (Js('Binding ')+var.get('prop').get('key').get('name')))
                var.get('prop').put('value', var.get("this").callprop('parseMaybeDefault', var.get('startPos'), var.get('startLoc'), var.get('prop').get('key').callprop('__clone')))
            else:
                if (var.get("this").callprop('match', var.get('types').get('eq')) and var.get('refShorthandDefaultPos')):
                    if var.get('refShorthandDefaultPos').get('start').neg():
                        var.get('refShorthandDefaultPos').put('start', var.get("this").get('state').get('start'))
                    var.get('prop').put('value', var.get("this").callprop('parseMaybeDefault', var.get('startPos'), var.get('startLoc'), var.get('prop').get('key').callprop('__clone')))
                else:
                    var.get('prop').put('value', var.get('prop').get('key').callprop('__clone'))
            var.get('prop').put('shorthand', var.get('true'))
            return var.get("this").callprop('finishNode', var.get('prop'), Js('ObjectProperty'))
        var.get("this").callprop('unexpected')
    PyJs_anonymous_3061_._set_name('anonymous')
    var.get('pp$3').put('parseObjPropValue', PyJs_anonymous_3061_)
    @Js
    def PyJs_anonymous_3063_(prop, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'prop':prop}, var)
        var.registers(['prop'])
        if var.get("this").callprop('eat', var.get('types').get('bracketL')):
            var.get('prop').put('computed', var.get('true'))
            var.get('prop').put('key', var.get("this").callprop('parseMaybeAssign'))
            var.get("this").callprop('expect', var.get('types').get('bracketR'))
            return var.get('prop').get('key')
        else:
            var.get('prop').put('computed', Js(False))
            return var.get('prop').put('key', (var.get("this").callprop('parseExprAtom') if (var.get("this").callprop('match', var.get('types').get('num')) or var.get("this").callprop('match', var.get('types').get('string'))) else var.get("this").callprop('parseIdentifier', var.get('true'))))
    PyJs_anonymous_3063_._set_name('anonymous')
    var.get('pp$3').put('parsePropertyName', PyJs_anonymous_3063_)
    @Js
    def PyJs_anonymous_3064_(node, isAsync, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'isAsync':isAsync, 'arguments':arguments}, var)
        var.registers(['node', 'isAsync'])
        var.get('node').put('id', var.get("null"))
        var.get('node').put('generator', Js(False))
        var.get('node').put('expression', Js(False))
        var.get('node').put('async', var.get('isAsync').neg().neg())
    PyJs_anonymous_3064_._set_name('anonymous')
    var.get('pp$3').put('initFunction', PyJs_anonymous_3064_)
    @Js
    def PyJs_anonymous_3065_(node, isGenerator, isAsync, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'isAsync':isAsync, 'isGenerator':isGenerator, 'arguments':arguments}, var)
        var.registers(['node', 'oldInMethod', 'isAsync', 'isGenerator'])
        var.put('oldInMethod', var.get("this").get('state').get('inMethod'))
        var.get("this").get('state').put('inMethod', (var.get('node').get('kind') or var.get('true')))
        var.get("this").callprop('initFunction', var.get('node'), var.get('isAsync'))
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        var.get('node').put('params', var.get("this").callprop('parseBindingList', var.get('types').get('parenR')))
        var.get('node').put('generator', var.get('isGenerator'))
        var.get("this").callprop('parseFunctionBody', var.get('node'))
        var.get("this").get('state').put('inMethod', var.get('oldInMethod'))
        return var.get('node')
    PyJs_anonymous_3065_._set_name('anonymous')
    var.get('pp$3').put('parseMethod', PyJs_anonymous_3065_)
    @Js
    def PyJs_anonymous_3066_(node, params, isAsync, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'isAsync':isAsync, 'params':params, 'arguments':arguments}, var)
        var.registers(['node', 'isAsync', 'params'])
        var.get("this").callprop('initFunction', var.get('node'), var.get('isAsync'))
        var.get('node').put('params', var.get("this").callprop('toAssignableList', var.get('params'), var.get('true'), Js('arrow function parameters')))
        var.get("this").callprop('parseFunctionBody', var.get('node'), var.get('true'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('ArrowFunctionExpression'))
    PyJs_anonymous_3066_._set_name('anonymous')
    var.get('pp$3').put('parseArrowExpression', PyJs_anonymous_3066_)
    @Js
    def PyJs_anonymous_3067_(node, allowExpression, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'allowExpression':allowExpression, 'arguments':arguments}, var)
        var.registers(['node', '_isArray3', '_isArray2', 'directive', 'oldLabels', 'checkLVal', 'oldInAsync', 'allowExpression', 'isStrict', '_i3', '_i2', 'param', '_ref2', 'oldInFunc', 'isExpression', 'oldStrict', 'nameHash', 'oldInGen', '_ref3', '_iterator3', '_iterator2'])
        var.put('isExpression', (var.get('allowExpression') and var.get("this").callprop('match', var.get('types').get('braceL')).neg()))
        var.put('oldInAsync', var.get("this").get('state').get('inAsync'))
        var.get("this").get('state').put('inAsync', var.get('node').get('async'))
        if var.get('isExpression'):
            var.get('node').put('body', var.get("this").callprop('parseMaybeAssign'))
            var.get('node').put('expression', var.get('true'))
        else:
            var.put('oldInFunc', var.get("this").get('state').get('inFunction'))
            var.put('oldInGen', var.get("this").get('state').get('inGenerator'))
            var.put('oldLabels', var.get("this").get('state').get('labels'))
            var.get("this").get('state').put('inFunction', var.get('true'))
            var.get("this").get('state').put('inGenerator', var.get('node').get('generator'))
            var.get("this").get('state').put('labels', Js([]))
            var.get('node').put('body', var.get("this").callprop('parseBlock', var.get('true')))
            var.get('node').put('expression', Js(False))
            var.get("this").get('state').put('inFunction', var.get('oldInFunc'))
            var.get("this").get('state').put('inGenerator', var.get('oldInGen'))
            var.get("this").get('state').put('labels', var.get('oldLabels'))
        var.get("this").get('state').put('inAsync', var.get('oldInAsync'))
        var.put('checkLVal', var.get("this").get('state').get('strict'))
        var.put('isStrict', Js(False))
        if var.get('allowExpression'):
            var.put('checkLVal', var.get('true'))
        if (var.get('isExpression').neg() and var.get('node').get('body').get('directives').get('length')):
            #for JS loop
            var.put('_iterator2', var.get('node').get('body').get('directives'))
            var.put('_isArray2', var.get('Array').callprop('isArray', var.get('_iterator2')))
            var.put('_i2', Js(0.0))
            var.put('_iterator2', (var.get('_iterator2') if var.get('_isArray2') else var.get('_iterator2').callprop(var.get('Symbol').get('iterator'))))
            while 1:
                pass
                if var.get('_isArray2'):
                    if (var.get('_i2')>=var.get('_iterator2').get('length')):
                        break
                    var.put('_ref2', var.get('_iterator2').get((var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i2', var.get('_iterator2').callprop('next'))
                    if var.get('_i2').get('done'):
                        break
                    var.put('_ref2', var.get('_i2').get('value'))
                var.put('directive', var.get('_ref2'))
                if PyJsStrictEq(var.get('directive').get('value').get('value'),Js('use strict')):
                    var.put('isStrict', var.get('true'))
                    var.put('checkLVal', var.get('true'))
                    break
            
        if (((var.get('isStrict') and var.get('node').get('id')) and PyJsStrictEq(var.get('node').get('id').get('type'),Js('Identifier'))) and PyJsStrictEq(var.get('node').get('id').get('name'),Js('yield'))):
            var.get("this").callprop('raise', var.get('node').get('id').get('start'), Js('Binding yield in strict mode'))
        if var.get('checkLVal'):
            var.put('nameHash', var.get('Object').callprop('create', var.get("null")))
            var.put('oldStrict', var.get("this").get('state').get('strict'))
            if var.get('isStrict'):
                var.get("this").get('state').put('strict', var.get('true'))
            if var.get('node').get('id'):
                var.get("this").callprop('checkLVal', var.get('node').get('id'), var.get('true'), var.get('undefined'), Js('function name'))
            #for JS loop
            var.put('_iterator3', var.get('node').get('params'))
            var.put('_isArray3', var.get('Array').callprop('isArray', var.get('_iterator3')))
            var.put('_i3', Js(0.0))
            var.put('_iterator3', (var.get('_iterator3') if var.get('_isArray3') else var.get('_iterator3').callprop(var.get('Symbol').get('iterator'))))
            while 1:
                pass
                if var.get('_isArray3'):
                    if (var.get('_i3')>=var.get('_iterator3').get('length')):
                        break
                    var.put('_ref3', var.get('_iterator3').get((var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))))
                else:
                    var.put('_i3', var.get('_iterator3').callprop('next'))
                    if var.get('_i3').get('done'):
                        break
                    var.put('_ref3', var.get('_i3').get('value'))
                var.put('param', var.get('_ref3'))
                if (var.get('isStrict') and PyJsStrictNeq(var.get('param').get('type'),Js('Identifier'))):
                    var.get("this").callprop('raise', var.get('param').get('start'), Js('Non-simple parameter in strict mode'))
                var.get("this").callprop('checkLVal', var.get('param'), var.get('true'), var.get('nameHash'), Js('function parameter list'))
            
            var.get("this").get('state').put('strict', var.get('oldStrict'))
    PyJs_anonymous_3067_._set_name('anonymous')
    var.get('pp$3').put('parseFunctionBody', PyJs_anonymous_3067_)
    @Js
    def PyJs_anonymous_3068_(close, allowEmpty, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'close':close, 'allowEmpty':allowEmpty, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['elts', 'close', 'allowEmpty', 'refShorthandDefaultPos', 'first'])
        var.put('elts', Js([]))
        var.put('first', var.get('true'))
        while var.get("this").callprop('eat', var.get('close')).neg():
            if var.get('first'):
                var.put('first', Js(False))
            else:
                var.get("this").callprop('expect', var.get('types').get('comma'))
                if var.get("this").callprop('eat', var.get('close')):
                    break
            var.get('elts').callprop('push', var.get("this").callprop('parseExprListItem', var.get('allowEmpty'), var.get('refShorthandDefaultPos')))
        return var.get('elts')
    PyJs_anonymous_3068_._set_name('anonymous')
    var.get('pp$3').put('parseExprList', PyJs_anonymous_3068_)
    @Js
    def PyJs_anonymous_3069_(allowEmpty, refShorthandDefaultPos, this, arguments, var=var):
        var = Scope({'this':this, 'allowEmpty':allowEmpty, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
        var.registers(['allowEmpty', 'refShorthandDefaultPos', 'elt'])
        var.put('elt', PyJsComma(Js(0.0), Js(None)))
        if (var.get('allowEmpty') and var.get("this").callprop('match', var.get('types').get('comma'))):
            var.put('elt', var.get("null"))
        else:
            if var.get("this").callprop('match', var.get('types').get('ellipsis')):
                var.put('elt', var.get("this").callprop('parseSpread', var.get('refShorthandDefaultPos')))
            else:
                var.put('elt', var.get("this").callprop('parseMaybeAssign', Js(False), var.get('refShorthandDefaultPos'), var.get("this").get('parseParenItem')))
        return var.get('elt')
    PyJs_anonymous_3069_._set_name('anonymous')
    var.get('pp$3').put('parseExprListItem', PyJs_anonymous_3069_)
    @Js
    def PyJs_anonymous_3070_(liberal, this, arguments, var=var):
        var = Scope({'this':this, 'liberal':liberal, 'arguments':arguments}, var)
        var.registers(['node', 'liberal'])
        var.put('node', var.get("this").callprop('startNode'))
        if var.get("this").callprop('match', var.get('types').get('name')):
            if ((var.get('liberal').neg() and var.get("this").get('state').get('strict')) and var.get('reservedWords').callprop('strict', var.get("this").get('state').get('value'))):
                var.get("this").callprop('raise', var.get("this").get('state').get('start'), ((Js("The keyword '")+var.get("this").get('state').get('value'))+Js("' is reserved")))
            var.get('node').put('name', var.get("this").get('state').get('value'))
        else:
            if (var.get('liberal') and var.get("this").get('state').get('type').get('keyword')):
                var.get('node').put('name', var.get("this").get('state').get('type').get('keyword'))
            else:
                var.get("this").callprop('unexpected')
        if ((var.get('liberal').neg() and PyJsStrictEq(var.get('node').get('name'),Js('await'))) and var.get("this").get('state').get('inAsync')):
            var.get("this").callprop('raise', var.get('node').get('start'), Js('invalid use of await inside of an async function'))
        var.get('node').get('loc').put('identifierName', var.get('node').get('name'))
        var.get("this").callprop('next')
        return var.get("this").callprop('finishNode', var.get('node'), Js('Identifier'))
    PyJs_anonymous_3070_._set_name('anonymous')
    var.get('pp$3').put('parseIdentifier', PyJs_anonymous_3070_)
    @Js
    def PyJs_anonymous_3071_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").get('state').get('inAsync').neg():
            var.get("this").callprop('unexpected')
        if var.get("this").callprop('match', var.get('types').get('star')):
            var.get("this").callprop('raise', var.get('node').get('start'), Js('await* has been removed from the async functions proposal. Use Promise.all() instead.'))
        var.get('node').put('argument', var.get("this").callprop('parseMaybeUnary'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('AwaitExpression'))
    PyJs_anonymous_3071_._set_name('anonymous')
    var.get('pp$3').put('parseAwait', PyJs_anonymous_3071_)
    @Js
    def PyJs_anonymous_3072_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        if ((var.get("this").callprop('match', var.get('types').get('semi')) or var.get("this").callprop('canInsertSemicolon')) or (var.get("this").callprop('match', var.get('types').get('star')).neg() and var.get("this").get('state').get('type').get('startsExpr').neg())):
            var.get('node').put('delegate', Js(False))
            var.get('node').put('argument', var.get("null"))
        else:
            var.get('node').put('delegate', var.get("this").callprop('eat', var.get('types').get('star')))
            var.get('node').put('argument', var.get("this").callprop('parseMaybeAssign'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('YieldExpression'))
    PyJs_anonymous_3072_._set_name('anonymous')
    var.get('pp$3').put('parseYield', PyJs_anonymous_3072_)
    pass
    var.put('pp$4', var.get('Parser').get('prototype'))
    var.put('commentKeys', Js([Js('leadingComments'), Js('trailingComments'), Js('innerComments')]))
    @Js
    def PyJs_anonymous_3073_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['Node'])
        @Js
        def PyJsHoisted_Node_(pos, loc, filename, this, arguments, var=var):
            var = Scope({'this':this, 'loc':loc, 'pos':pos, 'arguments':arguments, 'filename':filename}, var)
            var.registers(['loc', 'pos', 'filename'])
            var.get('_classCallCheck$6')(var.get("this"), var.get('Node'))
            var.get("this").put('type', Js(''))
            var.get("this").put('start', var.get('pos'))
            var.get("this").put('end', Js(0.0))
            var.get("this").put('loc', var.get('SourceLocation').create(var.get('loc')))
            if var.get('filename'):
                var.get("this").get('loc').put('filename', var.get('filename'))
        PyJsHoisted_Node_.__name__ = 'Node'
        var.put('Node', PyJsHoisted_Node_)
        pass
        @Js
        def PyJs___clone_3074_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '__clone':PyJs___clone_3074_}, var)
            var.registers(['node2', 'key'])
            var.put('node2', var.get('Node').create())
            for PyJsTemp in var.get("this"):
                var.put('key', PyJsTemp)
                if (var.get('commentKeys').callprop('indexOf', var.get('key'))<Js(0.0)):
                    var.get('node2').put(var.get('key'), var.get("this").get(var.get('key')))
            return var.get('node2')
        PyJs___clone_3074_._set_name('__clone')
        var.get('Node').get('prototype').put('__clone', PyJs___clone_3074_)
        return var.get('Node')
    PyJs_anonymous_3073_._set_name('anonymous')
    var.put('Node', PyJs_anonymous_3073_())
    @Js
    def PyJs_anonymous_3075_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('Node').create(var.get("this").get('state').get('start'), var.get("this").get('state').get('startLoc'), var.get("this").get('filename'))
    PyJs_anonymous_3075_._set_name('anonymous')
    var.get('pp$4').put('startNode', PyJs_anonymous_3075_)
    @Js
    def PyJs_anonymous_3076_(pos, loc, this, arguments, var=var):
        var = Scope({'this':this, 'loc':loc, 'pos':pos, 'arguments':arguments}, var)
        var.registers(['loc', 'pos'])
        return var.get('Node').create(var.get('pos'), var.get('loc'), var.get("this").get('filename'))
    PyJs_anonymous_3076_._set_name('anonymous')
    var.get('pp$4').put('startNodeAt', PyJs_anonymous_3076_)
    pass
    @Js
    def PyJs_anonymous_3077_(node, type, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'type':type, 'arguments':arguments}, var)
        var.registers(['node', 'type'])
        return var.get('finishNodeAt').callprop('call', var.get("this"), var.get('node'), var.get('type'), var.get("this").get('state').get('lastTokEnd'), var.get("this").get('state').get('lastTokEndLoc'))
    PyJs_anonymous_3077_._set_name('anonymous')
    var.get('pp$4').put('finishNode', PyJs_anonymous_3077_)
    @Js
    def PyJs_anonymous_3078_(node, type, pos, loc, this, arguments, var=var):
        var = Scope({'node':node, 'loc':loc, 'arguments':arguments, 'this':this, 'type':type, 'pos':pos}, var)
        var.registers(['node', 'loc', 'type', 'pos'])
        return var.get('finishNodeAt').callprop('call', var.get("this"), var.get('node'), var.get('type'), var.get('pos'), var.get('loc'))
    PyJs_anonymous_3078_._set_name('anonymous')
    var.get('pp$4').put('finishNodeAt', PyJs_anonymous_3078_)
    var.put('pp$5', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3079_(pos, message, this, arguments, var=var):
        var = Scope({'this':this, 'message':message, 'pos':pos, 'arguments':arguments}, var)
        var.registers(['loc', 'message', 'pos', 'err'])
        var.put('loc', var.get('getLineInfo')(var.get("this").get('input'), var.get('pos')))
        var.put('message', ((((Js(' (')+var.get('loc').get('line'))+Js(':'))+var.get('loc').get('column'))+Js(')')), '+')
        var.put('err', var.get('SyntaxError').create(var.get('message')))
        var.get('err').put('pos', var.get('pos'))
        var.get('err').put('loc', var.get('loc'))
        PyJsTempException = JsToPyException(var.get('err'))
        raise PyJsTempException
    PyJs_anonymous_3079_._set_name('anonymous')
    var.get('pp$5').put('raise', PyJs_anonymous_3079_)
    pass
    var.put('pp$6', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3080_(comment, this, arguments, var=var):
        var = Scope({'comment':comment, 'this':this, 'arguments':arguments}, var)
        var.registers(['comment'])
        if var.get("this").get('filename'):
            var.get('comment').get('loc').put('filename', var.get("this").get('filename'))
        var.get("this").get('state').get('trailingComments').callprop('push', var.get('comment'))
        var.get("this").get('state').get('leadingComments').callprop('push', var.get('comment'))
    PyJs_anonymous_3080_._set_name('anonymous')
    var.get('pp$6').put('addComment', PyJs_anonymous_3080_)
    @Js
    def PyJs_anonymous_3081_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'i', 'trailingComments', 'j', 'lastInStack', 'lastChild', 'stack'])
        if (PyJsStrictEq(var.get('node').get('type'),Js('Program')) and (var.get('node').get('body').get('length')>Js(0.0))):
            return var.get('undefined')
        var.put('stack', var.get("this").get('state').get('commentStack'))
        var.put('lastChild', PyJsComma(Js(0.0), Js(None)))
        var.put('trailingComments', PyJsComma(Js(0.0), Js(None)))
        var.put('i', PyJsComma(Js(0.0), Js(None)))
        var.put('j', PyJsComma(Js(0.0), Js(None)))
        if (var.get("this").get('state').get('trailingComments').get('length')>Js(0.0)):
            if (var.get("this").get('state').get('trailingComments').get('0').get('start')>=var.get('node').get('end')):
                var.put('trailingComments', var.get("this").get('state').get('trailingComments'))
                var.get("this").get('state').put('trailingComments', Js([]))
            else:
                var.get("this").get('state').get('trailingComments').put('length', Js(0.0))
        else:
            var.put('lastInStack', var.get('last')(var.get('stack')))
            if (((var.get('stack').get('length')>Js(0.0)) and var.get('lastInStack').get('trailingComments')) and (var.get('lastInStack').get('trailingComments').get('0').get('start')>=var.get('node').get('end'))):
                var.put('trailingComments', var.get('lastInStack').get('trailingComments'))
                var.get('lastInStack').put('trailingComments', var.get("null"))
        while ((var.get('stack').get('length')>Js(0.0)) and (var.get('last')(var.get('stack')).get('start')>=var.get('node').get('start'))):
            var.put('lastChild', var.get('stack').callprop('pop'))
        if var.get('lastChild'):
            if var.get('lastChild').get('leadingComments'):
                if (PyJsStrictNeq(var.get('lastChild'),var.get('node')) and (var.get('last')(var.get('lastChild').get('leadingComments')).get('end')<=var.get('node').get('start'))):
                    var.get('node').put('leadingComments', var.get('lastChild').get('leadingComments'))
                    var.get('lastChild').put('leadingComments', var.get("null"))
                else:
                    #for JS loop
                    var.put('i', (var.get('lastChild').get('leadingComments').get('length')-Js(2.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            if (var.get('lastChild').get('leadingComments').get(var.get('i')).get('end')<=var.get('node').get('start')):
                                var.get('node').put('leadingComments', var.get('lastChild').get('leadingComments').callprop('splice', Js(0.0), (var.get('i')+Js(1.0))))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
        else:
            if (var.get("this").get('state').get('leadingComments').get('length')>Js(0.0)):
                if (var.get('last')(var.get("this").get('state').get('leadingComments')).get('end')<=var.get('node').get('start')):
                    if var.get("this").get('state').get('commentPreviousNode'):
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get("this").get('state').get('leadingComments').get('length')):
                            try:
                                if (var.get("this").get('state').get('leadingComments').get(var.get('j')).get('end')<var.get("this").get('state').get('commentPreviousNode').get('end')):
                                    var.get("this").get('state').get('leadingComments').callprop('splice', var.get('j'), Js(1.0))
                                    (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    if (var.get("this").get('state').get('leadingComments').get('length')>Js(0.0)):
                        var.get('node').put('leadingComments', var.get("this").get('state').get('leadingComments'))
                        var.get("this").get('state').put('leadingComments', Js([]))
                else:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get("this").get('state').get('leadingComments').get('length')):
                        try:
                            if (var.get("this").get('state').get('leadingComments').get(var.get('i')).get('end')>var.get('node').get('start')):
                                break
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('node').put('leadingComments', var.get("this").get('state').get('leadingComments').callprop('slice', Js(0.0), var.get('i')))
                    if PyJsStrictEq(var.get('node').get('leadingComments').get('length'),Js(0.0)):
                        var.get('node').put('leadingComments', var.get("null"))
                    var.put('trailingComments', var.get("this").get('state').get('leadingComments').callprop('slice', var.get('i')))
                    if PyJsStrictEq(var.get('trailingComments').get('length'),Js(0.0)):
                        var.put('trailingComments', var.get("null"))
        var.get("this").get('state').put('commentPreviousNode', var.get('node'))
        if var.get('trailingComments'):
            if ((var.get('trailingComments').get('length') and (var.get('trailingComments').get('0').get('start')>=var.get('node').get('start'))) and (var.get('last')(var.get('trailingComments')).get('end')<=var.get('node').get('end'))):
                var.get('node').put('innerComments', var.get('trailingComments'))
            else:
                var.get('node').put('trailingComments', var.get('trailingComments'))
        var.get('stack').callprop('push', var.get('node'))
    PyJs_anonymous_3081_._set_name('anonymous')
    var.get('pp$6').put('processComment', PyJs_anonymous_3081_)
    var.put('pp$7', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3082_(tok, allowLeadingPipeOrAnd, this, arguments, var=var):
        var = Scope({'this':this, 'tok':tok, 'arguments':arguments, 'allowLeadingPipeOrAnd':allowLeadingPipeOrAnd}, var)
        var.registers(['tok', 'oldInType', 'type', 'allowLeadingPipeOrAnd'])
        var.put('oldInType', var.get("this").get('state').get('inType'))
        var.get("this").get('state').put('inType', var.get('true'))
        var.get("this").callprop('expect', (var.get('tok') or var.get('types').get('colon')))
        if var.get('allowLeadingPipeOrAnd'):
            if (var.get("this").callprop('match', var.get('types').get('bitwiseAND')) or var.get("this").callprop('match', var.get('types').get('bitwiseOR'))):
                var.get("this").callprop('next')
        var.put('type', var.get("this").callprop('flowParseType'))
        var.get("this").get('state').put('inType', var.get('oldInType'))
        return var.get('type')
    PyJs_anonymous_3082_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeInitialiser', PyJs_anonymous_3082_)
    @Js
    def PyJs_anonymous_3083_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get("this").callprop('flowParseInterfaceish', var.get('node'), var.get('true'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareClass'))
    PyJs_anonymous_3083_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareClass', PyJs_anonymous_3083_)
    @Js
    def PyJs_anonymous_3084_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['typeContainer', 'tmp', 'typeNode', 'id', 'node'])
        var.get("this").callprop('next')
        var.put('id', var.get('node').put('id', var.get("this").callprop('parseIdentifier')))
        var.put('typeNode', var.get("this").callprop('startNode'))
        var.put('typeContainer', var.get("this").callprop('startNode'))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('typeNode').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
        else:
            var.get('typeNode').put('typeParameters', var.get("null"))
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        var.put('tmp', var.get("this").callprop('flowParseFunctionTypeParams'))
        var.get('typeNode').put('params', var.get('tmp').get('params'))
        var.get('typeNode').put('rest', var.get('tmp').get('rest'))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        var.get('typeNode').put('returnType', var.get("this").callprop('flowParseTypeInitialiser'))
        var.get('typeContainer').put('typeAnnotation', var.get("this").callprop('finishNode', var.get('typeNode'), Js('FunctionTypeAnnotation')))
        var.get('id').put('typeAnnotation', var.get("this").callprop('finishNode', var.get('typeContainer'), Js('TypeAnnotation')))
        var.get("this").callprop('finishNode', var.get('id'), var.get('id').get('type'))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareFunction'))
    PyJs_anonymous_3084_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareFunction', PyJs_anonymous_3084_)
    @Js
    def PyJs_anonymous_3085_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        if var.get("this").callprop('match', var.get('types').get('_class')):
            return var.get("this").callprop('flowParseDeclareClass', var.get('node'))
        else:
            if var.get("this").callprop('match', var.get('types').get('_function')):
                return var.get("this").callprop('flowParseDeclareFunction', var.get('node'))
            else:
                if var.get("this").callprop('match', var.get('types').get('_var')):
                    return var.get("this").callprop('flowParseDeclareVariable', var.get('node'))
                else:
                    if var.get("this").callprop('isContextual', Js('module')):
                        if PyJsStrictEq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('dot')):
                            return var.get("this").callprop('flowParseDeclareModuleExports', var.get('node'))
                        else:
                            return var.get("this").callprop('flowParseDeclareModule', var.get('node'))
                    else:
                        if var.get("this").callprop('isContextual', Js('type')):
                            return var.get("this").callprop('flowParseDeclareTypeAlias', var.get('node'))
                        else:
                            if var.get("this").callprop('isContextual', Js('interface')):
                                return var.get("this").callprop('flowParseDeclareInterface', var.get('node'))
                            else:
                                var.get("this").callprop('unexpected')
    PyJs_anonymous_3085_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclare', PyJs_anonymous_3085_)
    @Js
    def PyJs_anonymous_3086_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get('node').put('id', var.get("this").callprop('flowParseTypeAnnotatableIdentifier'))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareVariable'))
    PyJs_anonymous_3086_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareVariable', PyJs_anonymous_3086_)
    @Js
    def PyJs_anonymous_3087_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['bodyNode', 'body', 'node2', 'node'])
        var.get("this").callprop('next')
        if var.get("this").callprop('match', var.get('types').get('string')):
            var.get('node').put('id', var.get("this").callprop('parseExprAtom'))
        else:
            var.get('node').put('id', var.get("this").callprop('parseIdentifier'))
        var.put('bodyNode', var.get('node').put('body', var.get("this").callprop('startNode')))
        var.put('body', var.get('bodyNode').put('body', Js([])))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        while var.get("this").callprop('match', var.get('types').get('braceR')).neg():
            var.put('node2', var.get("this").callprop('startNode'))
            var.get("this").callprop('expectContextual', Js('declare'), Js('Unexpected token. Only declares are allowed inside declare module'))
            var.get('body').callprop('push', var.get("this").callprop('flowParseDeclare', var.get('node2')))
        var.get("this").callprop('expect', var.get('types').get('braceR'))
        var.get("this").callprop('finishNode', var.get('bodyNode'), Js('BlockStatement'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareModule'))
    PyJs_anonymous_3087_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareModule', PyJs_anonymous_3087_)
    @Js
    def PyJs_anonymous_3088_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('expectContextual', Js('module'))
        var.get("this").callprop('expect', var.get('types').get('dot'))
        var.get("this").callprop('expectContextual', Js('exports'))
        var.get('node').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareModuleExports'))
    PyJs_anonymous_3088_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareModuleExports', PyJs_anonymous_3088_)
    @Js
    def PyJs_anonymous_3089_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get("this").callprop('flowParseTypeAlias', var.get('node'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareTypeAlias'))
    PyJs_anonymous_3089_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareTypeAlias', PyJs_anonymous_3089_)
    @Js
    def PyJs_anonymous_3090_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('next')
        var.get("this").callprop('flowParseInterfaceish', var.get('node'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('DeclareInterface'))
    PyJs_anonymous_3090_._set_name('anonymous')
    var.get('pp$7').put('flowParseDeclareInterface', PyJs_anonymous_3090_)
    @Js
    def PyJs_anonymous_3091_(node, allowStatic, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments, 'allowStatic':allowStatic}, var)
        var.registers(['node', 'allowStatic'])
        var.get('node').put('id', var.get("this").callprop('parseIdentifier'))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
        else:
            var.get('node').put('typeParameters', var.get("null"))
        var.get('node').put('extends', Js([]))
        var.get('node').put('mixins', Js([]))
        if var.get("this").callprop('eat', var.get('types').get('_extends')):
            while 1:
                var.get('node').get('extends').callprop('push', var.get("this").callprop('flowParseInterfaceExtends'))
                if not var.get("this").callprop('eat', var.get('types').get('comma')):
                    break
        if var.get("this").callprop('isContextual', Js('mixins')):
            var.get("this").callprop('next')
            while 1:
                var.get('node').get('mixins').callprop('push', var.get("this").callprop('flowParseInterfaceExtends'))
                if not var.get("this").callprop('eat', var.get('types').get('comma')):
                    break
        var.get('node').put('body', var.get("this").callprop('flowParseObjectType', var.get('allowStatic')))
    PyJs_anonymous_3091_._set_name('anonymous')
    var.get('pp$7').put('flowParseInterfaceish', PyJs_anonymous_3091_)
    @Js
    def PyJs_anonymous_3092_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('id', var.get("this").callprop('flowParseQualifiedTypeIdentifier'))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterInstantiation'))
        else:
            var.get('node').put('typeParameters', var.get("null"))
        return var.get("this").callprop('finishNode', var.get('node'), Js('InterfaceExtends'))
    PyJs_anonymous_3092_._set_name('anonymous')
    var.get('pp$7').put('flowParseInterfaceExtends', PyJs_anonymous_3092_)
    @Js
    def PyJs_anonymous_3093_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get("this").callprop('flowParseInterfaceish', var.get('node'), Js(False))
        return var.get("this").callprop('finishNode', var.get('node'), Js('InterfaceDeclaration'))
    PyJs_anonymous_3093_._set_name('anonymous')
    var.get('pp$7').put('flowParseInterface', PyJs_anonymous_3093_)
    @Js
    def PyJs_anonymous_3094_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get('node').put('id', var.get("this").callprop('parseIdentifier'))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
        else:
            var.get('node').put('typeParameters', var.get("null"))
        var.get('node').put('right', var.get("this").callprop('flowParseTypeInitialiser', var.get('types').get('eq'), var.get('true')))
        var.get("this").callprop('semicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeAlias'))
    PyJs_anonymous_3094_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeAlias', PyJs_anonymous_3094_)
    @Js
    def PyJs_anonymous_3095_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'variance', 'ident'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('variance', var.get("this").callprop('flowParseVariance'))
        var.put('ident', var.get("this").callprop('flowParseTypeAnnotatableIdentifier'))
        var.get('node').put('name', var.get('ident').get('name'))
        var.get('node').put('variance', var.get('variance'))
        var.get('node').put('bound', var.get('ident').get('typeAnnotation'))
        if var.get("this").callprop('match', var.get('types').get('eq')):
            var.get("this").callprop('eat', var.get('types').get('eq'))
            var.get('node').put('default', var.get("this").callprop('flowParseType'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeParameter'))
    PyJs_anonymous_3095_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeParameter', PyJs_anonymous_3095_)
    @Js
    def PyJs_anonymous_3096_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'oldInType'])
        var.put('oldInType', var.get("this").get('state').get('inType'))
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('params', Js([]))
        var.get("this").get('state').put('inType', var.get('true'))
        if (var.get("this").callprop('isRelational', Js('<')) or var.get("this").callprop('match', var.get('types').get('jsxTagStart'))):
            var.get("this").callprop('next')
        else:
            var.get("this").callprop('unexpected')
        while 1:
            var.get('node').get('params').callprop('push', var.get("this").callprop('flowParseTypeParameter'))
            if var.get("this").callprop('isRelational', Js('>')).neg():
                var.get("this").callprop('expect', var.get('types').get('comma'))
            if not var.get("this").callprop('isRelational', Js('>')).neg():
                break
        var.get("this").callprop('expectRelational', Js('>'))
        var.get("this").get('state').put('inType', var.get('oldInType'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeParameterDeclaration'))
    PyJs_anonymous_3096_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeParameterDeclaration', PyJs_anonymous_3096_)
    @Js
    def PyJs_anonymous_3097_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'oldInType'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('oldInType', var.get("this").get('state').get('inType'))
        var.get('node').put('params', Js([]))
        var.get("this").get('state').put('inType', var.get('true'))
        var.get("this").callprop('expectRelational', Js('<'))
        while var.get("this").callprop('isRelational', Js('>')).neg():
            var.get('node').get('params').callprop('push', var.get("this").callprop('flowParseType'))
            if var.get("this").callprop('isRelational', Js('>')).neg():
                var.get("this").callprop('expect', var.get('types').get('comma'))
        var.get("this").callprop('expectRelational', Js('>'))
        var.get("this").get('state').put('inType', var.get('oldInType'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeParameterInstantiation'))
    PyJs_anonymous_3097_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeParameterInstantiation', PyJs_anonymous_3097_)
    @Js
    def PyJs_anonymous_3098_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return (var.get("this").callprop('parseExprAtom') if (var.get("this").callprop('match', var.get('types').get('num')) or var.get("this").callprop('match', var.get('types').get('string'))) else var.get("this").callprop('parseIdentifier', var.get('true')))
    PyJs_anonymous_3098_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectPropertyKey', PyJs_anonymous_3098_)
    @Js
    def PyJs_anonymous_3099_(node, isStatic, variance, this, arguments, var=var):
        var = Scope({'node':node, 'variance':variance, 'isStatic':isStatic, 'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'variance', 'isStatic'])
        var.get('node').put('static', var.get('isStatic'))
        var.get("this").callprop('expect', var.get('types').get('bracketL'))
        var.get('node').put('id', var.get("this").callprop('flowParseObjectPropertyKey'))
        var.get('node').put('key', var.get("this").callprop('flowParseTypeInitialiser'))
        var.get("this").callprop('expect', var.get('types').get('bracketR'))
        var.get('node').put('value', var.get("this").callprop('flowParseTypeInitialiser'))
        var.get('node').put('variance', var.get('variance'))
        var.get("this").callprop('flowObjectTypeSemicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ObjectTypeIndexer'))
    PyJs_anonymous_3099_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectTypeIndexer', PyJs_anonymous_3099_)
    @Js
    def PyJs_anonymous_3100_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get('node').put('params', Js([]))
        var.get('node').put('rest', var.get("null"))
        var.get('node').put('typeParameters', var.get("null"))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
        var.get("this").callprop('expect', var.get('types').get('parenL'))
        while var.get("this").callprop('match', var.get('types').get('name')):
            var.get('node').get('params').callprop('push', var.get("this").callprop('flowParseFunctionTypeParam'))
            if var.get("this").callprop('match', var.get('types').get('parenR')).neg():
                var.get("this").callprop('expect', var.get('types').get('comma'))
        if var.get("this").callprop('eat', var.get('types').get('ellipsis')):
            var.get('node').put('rest', var.get("this").callprop('flowParseFunctionTypeParam'))
        var.get("this").callprop('expect', var.get('types').get('parenR'))
        var.get('node').put('returnType', var.get("this").callprop('flowParseTypeInitialiser'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('FunctionTypeAnnotation'))
    PyJs_anonymous_3100_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectTypeMethodish', PyJs_anonymous_3100_)
    @Js
    def PyJs_anonymous_3101_(startPos, startLoc, isStatic, key, this, arguments, var=var):
        var = Scope({'isStatic':isStatic, 'startLoc':startLoc, 'key':key, 'this':this, 'startPos':startPos, 'arguments':arguments}, var)
        var.registers(['node', 'key', 'startPos', 'isStatic', 'startLoc'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('value', var.get("this").callprop('flowParseObjectTypeMethodish', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc'))))
        var.get('node').put('static', var.get('isStatic'))
        var.get('node').put('key', var.get('key'))
        var.get('node').put('optional', Js(False))
        var.get("this").callprop('flowObjectTypeSemicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ObjectTypeProperty'))
    PyJs_anonymous_3101_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectTypeMethod', PyJs_anonymous_3101_)
    @Js
    def PyJs_anonymous_3102_(node, isStatic, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'isStatic':isStatic, 'arguments':arguments}, var)
        var.registers(['node', 'valueNode', 'isStatic'])
        var.put('valueNode', var.get("this").callprop('startNode'))
        var.get('node').put('static', var.get('isStatic'))
        var.get('node').put('value', var.get("this").callprop('flowParseObjectTypeMethodish', var.get('valueNode')))
        var.get("this").callprop('flowObjectTypeSemicolon')
        return var.get("this").callprop('finishNode', var.get('node'), Js('ObjectTypeCallProperty'))
    PyJs_anonymous_3102_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectTypeCallProperty', PyJs_anonymous_3102_)
    @Js
    def PyJs_anonymous_3103_(allowStatic, allowExact, this, arguments, var=var):
        var = Scope({'this':this, 'allowExact':allowExact, 'arguments':arguments, 'allowStatic':allowStatic}, var)
        var.registers(['node', 'isStatic', 'nodeStart', 'variancePos', 'propertyKey', 'endDelim', 'oldInType', 'optional', 'startLoc', 'variance', 'startPos', 'exact', 'allowExact', 'allowStatic', 'out'])
        var.put('oldInType', var.get("this").get('state').get('inType'))
        var.get("this").get('state').put('inType', var.get('true'))
        var.put('nodeStart', var.get("this").callprop('startNode'))
        var.put('node', PyJsComma(Js(0.0), Js(None)))
        var.put('propertyKey', PyJsComma(Js(0.0), Js(None)))
        var.put('isStatic', Js(False))
        var.get('nodeStart').put('callProperties', Js([]))
        var.get('nodeStart').put('properties', Js([]))
        var.get('nodeStart').put('indexers', Js([]))
        var.put('endDelim', PyJsComma(Js(0.0), Js(None)))
        var.put('exact', PyJsComma(Js(0.0), Js(None)))
        if (var.get('allowExact') and var.get("this").callprop('match', var.get('types').get('braceBarL'))):
            var.get("this").callprop('expect', var.get('types').get('braceBarL'))
            var.put('endDelim', var.get('types').get('braceBarR'))
            var.put('exact', var.get('true'))
        else:
            var.get("this").callprop('expect', var.get('types').get('braceL'))
            var.put('endDelim', var.get('types').get('braceR'))
            var.put('exact', Js(False))
        var.get('nodeStart').put('exact', var.get('exact'))
        while var.get("this").callprop('match', var.get('endDelim')).neg():
            var.put('optional', Js(False))
            var.put('startPos', var.get("this").get('state').get('start'))
            var.put('startLoc', var.get("this").get('state').get('startLoc'))
            var.put('node', var.get("this").callprop('startNode'))
            if ((var.get('allowStatic') and var.get("this").callprop('isContextual', Js('static'))) and PyJsStrictNeq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('colon'))):
                var.get("this").callprop('next')
                var.put('isStatic', var.get('true'))
            var.put('variancePos', var.get("this").get('state').get('start'))
            var.put('variance', var.get("this").callprop('flowParseVariance'))
            if var.get("this").callprop('match', var.get('types').get('bracketL')):
                var.get('nodeStart').get('indexers').callprop('push', var.get("this").callprop('flowParseObjectTypeIndexer', var.get('node'), var.get('isStatic'), var.get('variance')))
            else:
                if (var.get("this").callprop('match', var.get('types').get('parenL')) or var.get("this").callprop('isRelational', Js('<'))):
                    if var.get('variance'):
                        var.get("this").callprop('unexpected', var.get('variancePos'))
                    var.get('nodeStart').get('callProperties').callprop('push', var.get("this").callprop('flowParseObjectTypeCallProperty', var.get('node'), var.get('allowStatic')))
                else:
                    var.put('propertyKey', var.get("this").callprop('flowParseObjectPropertyKey'))
                    if (var.get("this").callprop('isRelational', Js('<')) or var.get("this").callprop('match', var.get('types').get('parenL'))):
                        if var.get('variance'):
                            var.get("this").callprop('unexpected', var.get('variancePos'))
                        var.get('nodeStart').get('properties').callprop('push', var.get("this").callprop('flowParseObjectTypeMethod', var.get('startPos'), var.get('startLoc'), var.get('isStatic'), var.get('propertyKey')))
                    else:
                        if var.get("this").callprop('eat', var.get('types').get('question')):
                            var.put('optional', var.get('true'))
                        var.get('node').put('key', var.get('propertyKey'))
                        var.get('node').put('value', var.get("this").callprop('flowParseTypeInitialiser'))
                        var.get('node').put('optional', var.get('optional'))
                        var.get('node').put('static', var.get('isStatic'))
                        var.get('node').put('variance', var.get('variance'))
                        var.get("this").callprop('flowObjectTypeSemicolon')
                        var.get('nodeStart').get('properties').callprop('push', var.get("this").callprop('finishNode', var.get('node'), Js('ObjectTypeProperty')))
            var.put('isStatic', Js(False))
        var.get("this").callprop('expect', var.get('endDelim'))
        var.put('out', var.get("this").callprop('finishNode', var.get('nodeStart'), Js('ObjectTypeAnnotation')))
        var.get("this").get('state').put('inType', var.get('oldInType'))
        return var.get('out')
    PyJs_anonymous_3103_._set_name('anonymous')
    var.get('pp$7').put('flowParseObjectType', PyJs_anonymous_3103_)
    @Js
    def PyJs_anonymous_3104_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if (((var.get("this").callprop('eat', var.get('types').get('semi')).neg() and var.get("this").callprop('eat', var.get('types').get('comma')).neg()) and var.get("this").callprop('match', var.get('types').get('braceR')).neg()) and var.get("this").callprop('match', var.get('types').get('braceBarR')).neg()):
            var.get("this").callprop('unexpected')
    PyJs_anonymous_3104_._set_name('anonymous')
    var.get('pp$7').put('flowObjectTypeSemicolon', PyJs_anonymous_3104_)
    @Js
    def PyJs_anonymous_3105_(startPos, startLoc, id, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'id':id, 'startLoc':startLoc, 'arguments':arguments}, var)
        var.registers(['node', 'startPos', 'node2', 'id', 'startLoc'])
        var.put('startPos', (var.get('startPos') or var.get("this").get('state').get('start')))
        var.put('startLoc', (var.get('startLoc') or var.get("this").get('state').get('startLoc')))
        var.put('node', (var.get('id') or var.get("this").callprop('parseIdentifier')))
        while var.get("this").callprop('eat', var.get('types').get('dot')):
            var.put('node2', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('node2').put('qualification', var.get('node'))
            var.get('node2').put('id', var.get("this").callprop('parseIdentifier'))
            var.put('node', var.get("this").callprop('finishNode', var.get('node2'), Js('QualifiedTypeIdentifier')))
        return var.get('node')
    PyJs_anonymous_3105_._set_name('anonymous')
    var.get('pp$7').put('flowParseQualifiedTypeIdentifier', PyJs_anonymous_3105_)
    @Js
    def PyJs_anonymous_3106_(startPos, startLoc, id, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'id':id, 'startLoc':startLoc, 'arguments':arguments}, var)
        var.registers(['node', 'startPos', 'id', 'startLoc'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('typeParameters', var.get("null"))
        var.get('node').put('id', var.get("this").callprop('flowParseQualifiedTypeIdentifier', var.get('startPos'), var.get('startLoc'), var.get('id')))
        if var.get("this").callprop('isRelational', Js('<')):
            var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterInstantiation'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('GenericTypeAnnotation'))
    PyJs_anonymous_3106_._set_name('anonymous')
    var.get('pp$7').put('flowParseGenericType', PyJs_anonymous_3106_)
    @Js
    def PyJs_anonymous_3107_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('expect', var.get('types').get('_typeof'))
        var.get('node').put('argument', var.get("this").callprop('flowParsePrimaryType'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeofTypeAnnotation'))
    PyJs_anonymous_3107_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeofType', PyJs_anonymous_3107_)
    @Js
    def PyJs_anonymous_3108_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('types', Js([]))
        var.get("this").callprop('expect', var.get('types').get('bracketL'))
        while ((var.get("this").get('state').get('pos')<var.get("this").get('input').get('length')) and var.get("this").callprop('match', var.get('types').get('bracketR')).neg()):
            var.get('node').get('types').callprop('push', var.get("this").callprop('flowParseType'))
            if var.get("this").callprop('match', var.get('types').get('bracketR')):
                break
            var.get("this").callprop('expect', var.get('types').get('comma'))
        var.get("this").callprop('expect', var.get('types').get('bracketR'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TupleTypeAnnotation'))
    PyJs_anonymous_3108_._set_name('anonymous')
    var.get('pp$7').put('flowParseTupleType', PyJs_anonymous_3108_)
    @Js
    def PyJs_anonymous_3109_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'optional'])
        var.put('optional', Js(False))
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('name', var.get("this").callprop('parseIdentifier'))
        if var.get("this").callprop('eat', var.get('types').get('question')):
            var.put('optional', var.get('true'))
        var.get('node').put('optional', var.get('optional'))
        var.get('node').put('typeAnnotation', var.get("this").callprop('flowParseTypeInitialiser'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('FunctionTypeParam'))
    PyJs_anonymous_3109_._set_name('anonymous')
    var.get('pp$7').put('flowParseFunctionTypeParam', PyJs_anonymous_3109_)
    @Js
    def PyJs_anonymous_3110_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['ret'])
        PyJs_Object_3111_ = Js({'params':Js([]),'rest':var.get("null")})
        var.put('ret', PyJs_Object_3111_)
        while var.get("this").callprop('match', var.get('types').get('name')):
            var.get('ret').get('params').callprop('push', var.get("this").callprop('flowParseFunctionTypeParam'))
            if var.get("this").callprop('match', var.get('types').get('parenR')).neg():
                var.get("this").callprop('expect', var.get('types').get('comma'))
        if var.get("this").callprop('eat', var.get('types').get('ellipsis')):
            var.get('ret').put('rest', var.get("this").callprop('flowParseFunctionTypeParam'))
        return var.get('ret')
    PyJs_anonymous_3110_._set_name('anonymous')
    var.get('pp$7').put('flowParseFunctionTypeParams', PyJs_anonymous_3110_)
    @Js
    def PyJs_anonymous_3112_(startPos, startLoc, node, id, this, arguments, var=var):
        var = Scope({'node':node, 'arguments':arguments, 'startLoc':startLoc, 'this':this, 'startPos':startPos, 'id':id}, var)
        var.registers(['node', 'startPos', 'id', 'startLoc'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get('id').get('name'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('any')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('AnyTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('void')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('VoidTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('bool')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('boolean')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('BooleanTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('mixed')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('MixedTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('empty')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('EmptyTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('number')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('NumberTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('string')):
                SWITCHED = True
                return var.get("this").callprop('finishNode', var.get('node'), Js('StringTypeAnnotation'))
            if True:
                SWITCHED = True
                return var.get("this").callprop('flowParseGenericType', var.get('startPos'), var.get('startLoc'), var.get('id'))
            SWITCHED = True
            break
    PyJs_anonymous_3112_._set_name('anonymous')
    var.get('pp$7').put('flowIdentToTypeAnnotation', PyJs_anonymous_3112_)
    @Js
    def PyJs_anonymous_3113_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'tmp', 'token', 'isGroupedType', 'startLoc', 'startPos', 'type'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('node', var.get("this").callprop('startNode'))
        var.put('tmp', PyJsComma(Js(0.0), Js(None)))
        var.put('type', PyJsComma(Js(0.0), Js(None)))
        var.put('isGroupedType', Js(False))
        while 1:
            SWITCHED = False
            CONDITION = (var.get("this").get('state').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('name')):
                SWITCHED = True
                return var.get("this").callprop('flowIdentToTypeAnnotation', var.get('startPos'), var.get('startLoc'), var.get('node'), var.get("this").callprop('parseIdentifier'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                SWITCHED = True
                return var.get("this").callprop('flowParseObjectType', Js(False), Js(False))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceBarL')):
                SWITCHED = True
                return var.get("this").callprop('flowParseObjectType', Js(False), var.get('true'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('bracketL')):
                SWITCHED = True
                return var.get("this").callprop('flowParseTupleType')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('relational')):
                SWITCHED = True
                if PyJsStrictEq(var.get("this").get('state').get('value'),Js('<')):
                    var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
                    var.get("this").callprop('expect', var.get('types').get('parenL'))
                    var.put('tmp', var.get("this").callprop('flowParseFunctionTypeParams'))
                    var.get('node').put('params', var.get('tmp').get('params'))
                    var.get('node').put('rest', var.get('tmp').get('rest'))
                    var.get("this").callprop('expect', var.get('types').get('parenR'))
                    var.get("this").callprop('expect', var.get('types').get('arrow'))
                    var.get('node').put('returnType', var.get("this").callprop('flowParseType'))
                    return var.get("this").callprop('finishNode', var.get('node'), Js('FunctionTypeAnnotation'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('parenL')):
                SWITCHED = True
                var.get("this").callprop('next')
                if (var.get("this").callprop('match', var.get('types').get('parenR')).neg() and var.get("this").callprop('match', var.get('types').get('ellipsis')).neg()):
                    if var.get("this").callprop('match', var.get('types').get('name')):
                        var.put('token', var.get("this").callprop('lookahead').get('type'))
                        var.put('isGroupedType', (PyJsStrictNeq(var.get('token'),var.get('types').get('question')) and PyJsStrictNeq(var.get('token'),var.get('types').get('colon'))))
                    else:
                        var.put('isGroupedType', var.get('true'))
                if var.get('isGroupedType'):
                    var.put('type', var.get("this").callprop('flowParseType'))
                    var.get("this").callprop('expect', var.get('types').get('parenR'))
                    return var.get('type')
                var.put('tmp', var.get("this").callprop('flowParseFunctionTypeParams'))
                var.get('node').put('params', var.get('tmp').get('params'))
                var.get('node').put('rest', var.get('tmp').get('rest'))
                var.get("this").callprop('expect', var.get('types').get('parenR'))
                var.get("this").callprop('expect', var.get('types').get('arrow'))
                var.get('node').put('returnType', var.get("this").callprop('flowParseType'))
                var.get('node').put('typeParameters', var.get("null"))
                return var.get("this").callprop('finishNode', var.get('node'), Js('FunctionTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('string')):
                SWITCHED = True
                var.get('node').put('value', var.get("this").get('state').get('value'))
                var.get("this").callprop('addExtra', var.get('node'), Js('rawValue'), var.get('node').get('value'))
                var.get("this").callprop('addExtra', var.get('node'), Js('raw'), var.get("this").get('input').callprop('slice', var.get("this").get('state').get('start'), var.get("this").get('state').get('end')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('StringLiteralTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_true')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_false')):
                SWITCHED = True
                var.get('node').put('value', var.get("this").callprop('match', var.get('types').get('_true')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('BooleanLiteralTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('plusMin')):
                SWITCHED = True
                if PyJsStrictEq(var.get("this").get('state').get('value'),Js('-')):
                    var.get("this").callprop('next')
                    if var.get("this").callprop('match', var.get('types').get('num')).neg():
                        var.get("this").callprop('unexpected')
                    var.get('node').put('value', (-var.get("this").get('state').get('value')))
                    var.get("this").callprop('addExtra', var.get('node'), Js('rawValue'), var.get('node').get('value'))
                    var.get("this").callprop('addExtra', var.get('node'), Js('raw'), var.get("this").get('input').callprop('slice', var.get("this").get('state').get('start'), var.get("this").get('state').get('end')))
                    var.get("this").callprop('next')
                    return var.get("this").callprop('finishNode', var.get('node'), Js('NumericLiteralTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('num')):
                SWITCHED = True
                var.get('node').put('value', var.get("this").get('state').get('value'))
                var.get("this").callprop('addExtra', var.get('node'), Js('rawValue'), var.get('node').get('value'))
                var.get("this").callprop('addExtra', var.get('node'), Js('raw'), var.get("this").get('input').callprop('slice', var.get("this").get('state').get('start'), var.get("this").get('state').get('end')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('NumericLiteralTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_null')):
                SWITCHED = True
                var.get('node').put('value', var.get("this").callprop('match', var.get('types').get('_null')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('NullLiteralTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('_this')):
                SWITCHED = True
                var.get('node').put('value', var.get("this").callprop('match', var.get('types').get('_this')))
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('ThisTypeAnnotation'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('star')):
                SWITCHED = True
                var.get("this").callprop('next')
                return var.get("this").callprop('finishNode', var.get('node'), Js('ExistentialTypeParam'))
            if True:
                SWITCHED = True
                if PyJsStrictEq(var.get("this").get('state').get('type').get('keyword'),Js('typeof')):
                    return var.get("this").callprop('flowParseTypeofType')
            SWITCHED = True
            break
        var.get("this").callprop('unexpected')
    PyJs_anonymous_3113_._set_name('anonymous')
    var.get('pp$7').put('flowParsePrimaryType', PyJs_anonymous_3113_)
    @Js
    def PyJs_anonymous_3114_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'type'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('type', var.get('node').put('elementType', var.get("this").callprop('flowParsePrimaryType')))
        if var.get("this").callprop('match', var.get('types').get('bracketL')):
            var.get("this").callprop('expect', var.get('types').get('bracketL'))
            var.get("this").callprop('expect', var.get('types').get('bracketR'))
            return var.get("this").callprop('finishNode', var.get('node'), Js('ArrayTypeAnnotation'))
        else:
            return var.get('type')
    PyJs_anonymous_3114_._set_name('anonymous')
    var.get('pp$7').put('flowParsePostfixType', PyJs_anonymous_3114_)
    @Js
    def PyJs_anonymous_3115_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        if var.get("this").callprop('eat', var.get('types').get('question')):
            var.get('node').put('typeAnnotation', var.get("this").callprop('flowParsePrefixType'))
            return var.get("this").callprop('finishNode', var.get('node'), Js('NullableTypeAnnotation'))
        else:
            return var.get("this").callprop('flowParsePostfixType')
    PyJs_anonymous_3115_._set_name('anonymous')
    var.get('pp$7').put('flowParsePrefixType', PyJs_anonymous_3115_)
    @Js
    def PyJs_anonymous_3116_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'type'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('type', var.get("this").callprop('flowParsePrefixType'))
        var.get('node').put('types', Js([var.get('type')]))
        while var.get("this").callprop('eat', var.get('types').get('bitwiseAND')):
            var.get('node').get('types').callprop('push', var.get("this").callprop('flowParsePrefixType'))
        return (var.get('type') if PyJsStrictEq(var.get('node').get('types').get('length'),Js(1.0)) else var.get("this").callprop('finishNode', var.get('node'), Js('IntersectionTypeAnnotation')))
    PyJs_anonymous_3116_._set_name('anonymous')
    var.get('pp$7').put('flowParseIntersectionType', PyJs_anonymous_3116_)
    @Js
    def PyJs_anonymous_3117_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'type'])
        var.put('node', var.get("this").callprop('startNode'))
        var.put('type', var.get("this").callprop('flowParseIntersectionType'))
        var.get('node').put('types', Js([var.get('type')]))
        while var.get("this").callprop('eat', var.get('types').get('bitwiseOR')):
            var.get('node').get('types').callprop('push', var.get("this").callprop('flowParseIntersectionType'))
        return (var.get('type') if PyJsStrictEq(var.get('node').get('types').get('length'),Js(1.0)) else var.get("this").callprop('finishNode', var.get('node'), Js('UnionTypeAnnotation')))
    PyJs_anonymous_3117_._set_name('anonymous')
    var.get('pp$7').put('flowParseUnionType', PyJs_anonymous_3117_)
    @Js
    def PyJs_anonymous_3118_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['oldInType', 'type'])
        var.put('oldInType', var.get("this").get('state').get('inType'))
        var.get("this").get('state').put('inType', var.get('true'))
        var.put('type', var.get("this").callprop('flowParseUnionType'))
        var.get("this").get('state').put('inType', var.get('oldInType'))
        return var.get('type')
    PyJs_anonymous_3118_._set_name('anonymous')
    var.get('pp$7').put('flowParseType', PyJs_anonymous_3118_)
    @Js
    def PyJs_anonymous_3119_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get('node').put('typeAnnotation', var.get("this").callprop('flowParseTypeInitialiser'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('TypeAnnotation'))
    PyJs_anonymous_3119_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeAnnotation', PyJs_anonymous_3119_)
    @Js
    def PyJs_anonymous_3120_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['ident'])
        var.put('ident', var.get("this").callprop('parseIdentifier'))
        if var.get("this").callprop('match', var.get('types').get('colon')):
            var.get('ident').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
            var.get("this").callprop('finishNode', var.get('ident'), var.get('ident').get('type'))
        return var.get('ident')
    PyJs_anonymous_3120_._set_name('anonymous')
    var.get('pp$7').put('flowParseTypeAnnotatableIdentifier', PyJs_anonymous_3120_)
    @Js
    def PyJs_anonymous_3121_(node, this, arguments, var=var):
        var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.get('node').get('expression').put('typeAnnotation', var.get('node').get('typeAnnotation'))
        return var.get("this").callprop('finishNodeAt', var.get('node').get('expression'), var.get('node').get('expression').get('type'), var.get('node').get('typeAnnotation').get('end'), var.get('node').get('typeAnnotation').get('loc').get('end'))
    PyJs_anonymous_3121_._set_name('anonymous')
    var.get('pp$7').put('typeCastToParameter', PyJs_anonymous_3121_)
    @Js
    def PyJs_anonymous_3122_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['variance'])
        var.put('variance', var.get("null"))
        if var.get("this").callprop('match', var.get('types').get('plusMin')):
            if PyJsStrictEq(var.get("this").get('state').get('value'),Js('+')):
                var.put('variance', Js('plus'))
            else:
                if PyJsStrictEq(var.get("this").get('state').get('value'),Js('-')):
                    var.put('variance', Js('minus'))
            var.get("this").callprop('next')
        return var.get('variance')
    PyJs_anonymous_3122_._set_name('anonymous')
    var.get('pp$7').put('flowParseVariance', PyJs_anonymous_3122_)
    @Js
    def PyJs_anonymous_3123_(instance, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments}, var)
        var.registers(['instance'])
        @Js
        def PyJs_anonymous_3124_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3125_(node, allowExpression, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'allowExpression':allowExpression, 'arguments':arguments}, var)
                var.registers(['node', 'allowExpression'])
                if (var.get("this").callprop('match', var.get('types').get('colon')) and var.get('allowExpression').neg()):
                    var.get('node').put('returnType', var.get("this").callprop('flowParseTypeAnnotation'))
                return var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('allowExpression'))
            PyJs_anonymous_3125_._set_name('anonymous')
            return PyJs_anonymous_3125_
        PyJs_anonymous_3124_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseFunctionBody'), PyJs_anonymous_3124_)
        @Js
        def PyJs_anonymous_3126_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3127_(declaration, topLevel, this, arguments, var=var):
                var = Scope({'this':this, 'topLevel':topLevel, 'arguments':arguments, 'declaration':declaration}, var)
                var.registers(['node', 'topLevel', 'declaration'])
                if ((var.get("this").get('state').get('strict') and var.get("this").callprop('match', var.get('types').get('name'))) and PyJsStrictEq(var.get("this").get('state').get('value'),Js('interface'))):
                    var.put('node', var.get("this").callprop('startNode'))
                    var.get("this").callprop('next')
                    return var.get("this").callprop('flowParseInterface', var.get('node'))
                else:
                    return var.get('inner').callprop('call', var.get("this"), var.get('declaration'), var.get('topLevel'))
            PyJs_anonymous_3127_._set_name('anonymous')
            return PyJs_anonymous_3127_
        PyJs_anonymous_3126_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseStatement'), PyJs_anonymous_3126_)
        @Js
        def PyJs_anonymous_3128_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3129_(node, expr, this, arguments, var=var):
                var = Scope({'node':node, 'expr':expr, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'expr'])
                if PyJsStrictEq(var.get('expr').get('type'),Js('Identifier')):
                    if PyJsStrictEq(var.get('expr').get('name'),Js('declare')):
                        if (((var.get("this").callprop('match', var.get('types').get('_class')) or var.get("this").callprop('match', var.get('types').get('name'))) or var.get("this").callprop('match', var.get('types').get('_function'))) or var.get("this").callprop('match', var.get('types').get('_var'))):
                            return var.get("this").callprop('flowParseDeclare', var.get('node'))
                    else:
                        if var.get("this").callprop('match', var.get('types').get('name')):
                            if PyJsStrictEq(var.get('expr').get('name'),Js('interface')):
                                return var.get("this").callprop('flowParseInterface', var.get('node'))
                            else:
                                if PyJsStrictEq(var.get('expr').get('name'),Js('type')):
                                    return var.get("this").callprop('flowParseTypeAlias', var.get('node'))
                return var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('expr'))
            PyJs_anonymous_3129_._set_name('anonymous')
            return PyJs_anonymous_3129_
        PyJs_anonymous_3128_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseExpressionStatement'), PyJs_anonymous_3128_)
        @Js
        def PyJs_anonymous_3130_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3131_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return ((var.get("this").callprop('isContextual', Js('type')) or var.get("this").callprop('isContextual', Js('interface'))) or var.get('inner').callprop('call', var.get("this")))
            PyJs_anonymous_3131_._set_name('anonymous')
            return PyJs_anonymous_3131_
        PyJs_anonymous_3130_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('shouldParseExportDeclaration'), PyJs_anonymous_3130_)
        @Js
        def PyJs_anonymous_3132_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3133_(expr, noIn, startPos, startLoc, refNeedsArrowPos, this, arguments, var=var):
                var = Scope({'this':this, 'refNeedsArrowPos':refNeedsArrowPos, 'startLoc':startLoc, 'noIn':noIn, 'expr':expr, 'startPos':startPos, 'arguments':arguments}, var)
                var.registers(['expr', 'state', 'refNeedsArrowPos', 'startLoc', 'noIn', 'startPos'])
                if (var.get('refNeedsArrowPos') and var.get("this").callprop('match', var.get('types').get('question'))):
                    var.put('state', var.get("this").get('state').callprop('clone'))
                    try:
                        return var.get('inner').callprop('call', var.get("this"), var.get('expr'), var.get('noIn'), var.get('startPos'), var.get('startLoc'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_30891008 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('err').instanceof(var.get('SyntaxError')):
                                var.get("this").put('state', var.get('state'))
                                var.get('refNeedsArrowPos').put('start', (var.get('err').get('pos') or var.get("this").get('state').get('start')))
                                return var.get('expr')
                            else:
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_30891008 is not None:
                                var.own['err'] = PyJsHolder_657272_30891008
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_30891008
                return var.get('inner').callprop('call', var.get("this"), var.get('expr'), var.get('noIn'), var.get('startPos'), var.get('startLoc'))
            PyJs_anonymous_3133_._set_name('anonymous')
            return PyJs_anonymous_3133_
        PyJs_anonymous_3132_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseConditional'), PyJs_anonymous_3132_)
        @Js
        def PyJs_anonymous_3134_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3135_(node, startLoc, startPos, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'startPos':startPos, 'arguments':arguments, 'startLoc':startLoc}, var)
                var.registers(['node', 'typeCastNode', 'startPos', 'startLoc'])
                var.put('node', var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('startLoc'), var.get('startPos')))
                if var.get("this").callprop('eat', var.get('types').get('question')):
                    var.get('node').put('optional', var.get('true'))
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.put('typeCastNode', var.get("this").callprop('startNodeAt', var.get('startLoc'), var.get('startPos')))
                    var.get('typeCastNode').put('expression', var.get('node'))
                    var.get('typeCastNode').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
                    return var.get("this").callprop('finishNode', var.get('typeCastNode'), Js('TypeCastExpression'))
                return var.get('node')
            PyJs_anonymous_3135_._set_name('anonymous')
            return PyJs_anonymous_3135_
        PyJs_anonymous_3134_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseParenItem'), PyJs_anonymous_3134_)
        @Js
        def PyJs_anonymous_3136_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3137_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.put('node', var.get('inner').callprop('call', var.get("this"), var.get('node')))
                if PyJsStrictEq(var.get('node').get('type'),Js('ExportNamedDeclaration')):
                    var.get('node').put('exportKind', (var.get('node').get('exportKind') or Js('value')))
                return var.get('node')
            PyJs_anonymous_3137_._set_name('anonymous')
            return PyJs_anonymous_3137_
        PyJs_anonymous_3136_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseExport'), PyJs_anonymous_3136_)
        @Js
        def PyJs_anonymous_3138_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3139_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', '_declarationNode', 'declarationNode'])
                if var.get("this").callprop('isContextual', Js('type')):
                    var.get('node').put('exportKind', Js('type'))
                    var.put('declarationNode', var.get("this").callprop('startNode'))
                    var.get("this").callprop('next')
                    if var.get("this").callprop('match', var.get('types').get('braceL')):
                        var.get('node').put('specifiers', var.get("this").callprop('parseExportSpecifiers'))
                        var.get("this").callprop('parseExportFrom', var.get('node'))
                        return var.get("null")
                    else:
                        return var.get("this").callprop('flowParseTypeAlias', var.get('declarationNode'))
                else:
                    if var.get("this").callprop('isContextual', Js('interface')):
                        var.get('node').put('exportKind', Js('type'))
                        var.put('_declarationNode', var.get("this").callprop('startNode'))
                        var.get("this").callprop('next')
                        return var.get("this").callprop('flowParseInterface', var.get('_declarationNode'))
                    else:
                        return var.get('inner').callprop('call', var.get("this"), var.get('node'))
            PyJs_anonymous_3139_._set_name('anonymous')
            return PyJs_anonymous_3139_
        PyJs_anonymous_3138_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseExportDeclaration'), PyJs_anonymous_3138_)
        @Js
        def PyJs_anonymous_3140_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3141_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('inner').callprop('apply', var.get("this"), var.get('arguments'))
                if var.get("this").callprop('isRelational', Js('<')):
                    var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
            PyJs_anonymous_3141_._set_name('anonymous')
            return PyJs_anonymous_3141_
        PyJs_anonymous_3140_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseClassId'), PyJs_anonymous_3140_)
        @Js
        def PyJs_anonymous_3142_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3143_(name, this, arguments, var=var):
                var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
                var.registers(['name'])
                if (var.get("this").get('state').get('inType') and PyJsStrictEq(var.get('name'),Js('void'))):
                    return Js(False)
                else:
                    return var.get('inner').callprop('call', var.get("this"), var.get('name'))
            PyJs_anonymous_3143_._set_name('anonymous')
            return PyJs_anonymous_3143_
        PyJs_anonymous_3142_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('isKeyword'), PyJs_anonymous_3142_)
        @Js
        def PyJs_anonymous_3144_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3145_(prop, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'prop':prop}, var)
                var.registers(['oldInType', 'prop', 'out'])
                var.put('oldInType', var.get("this").get('state').get('inType'))
                var.get("this").get('state').put('inType', var.get('true'))
                var.put('out', var.get('inner').callprop('call', var.get("this"), var.get('prop')))
                var.get("this").get('state').put('inType', var.get('oldInType'))
                return var.get('out')
            PyJs_anonymous_3145_._set_name('anonymous')
            return PyJs_anonymous_3145_
        PyJs_anonymous_3144_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parsePropertyName'), PyJs_anonymous_3144_)
        @Js
        def PyJs_anonymous_3146_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3147_(code, this, arguments, var=var):
                var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
                var.registers(['code'])
                if (var.get("this").get('state').get('inType') and (PyJsStrictEq(var.get('code'),Js(62.0)) or PyJsStrictEq(var.get('code'),Js(60.0)))):
                    return var.get("this").callprop('finishOp', var.get('types').get('relational'), Js(1.0))
                else:
                    return var.get('inner').callprop('call', var.get("this"), var.get('code'))
            PyJs_anonymous_3147_._set_name('anonymous')
            return PyJs_anonymous_3147_
        PyJs_anonymous_3146_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('readToken'), PyJs_anonymous_3146_)
        @Js
        def PyJs_anonymous_3148_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3149_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get("this").get('state').get('inType').neg():
                    return var.get('inner').callprop('call', var.get("this"))
            PyJs_anonymous_3149_._set_name('anonymous')
            return PyJs_anonymous_3149_
        PyJs_anonymous_3148_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('jsx_readToken'), PyJs_anonymous_3148_)
        @Js
        def PyJs_anonymous_3150_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3151_(node, isBinding, contextDescription, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'isBinding':isBinding, 'arguments':arguments, 'contextDescription':contextDescription}, var)
                var.registers(['node', 'isBinding', 'contextDescription'])
                if PyJsStrictEq(var.get('node').get('type'),Js('TypeCastExpression')):
                    return var.get('inner').callprop('call', var.get("this"), var.get("this").callprop('typeCastToParameter', var.get('node')), var.get('isBinding'), var.get('contextDescription'))
                else:
                    return var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('isBinding'), var.get('contextDescription'))
            PyJs_anonymous_3151_._set_name('anonymous')
            return PyJs_anonymous_3151_
        PyJs_anonymous_3150_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('toAssignable'), PyJs_anonymous_3150_)
        @Js
        def PyJs_anonymous_3152_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3153_(exprList, isBinding, contextDescription, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isBinding':isBinding, 'exprList':exprList, 'contextDescription':contextDescription}, var)
                var.registers(['i', 'expr', 'isBinding', 'exprList', 'contextDescription'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('exprList').get('length')):
                    try:
                        var.put('expr', var.get('exprList').get(var.get('i')))
                        if (var.get('expr') and PyJsStrictEq(var.get('expr').get('type'),Js('TypeCastExpression'))):
                            var.get('exprList').put(var.get('i'), var.get("this").callprop('typeCastToParameter', var.get('expr')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('inner').callprop('call', var.get("this"), var.get('exprList'), var.get('isBinding'), var.get('contextDescription'))
            PyJs_anonymous_3153_._set_name('anonymous')
            return PyJs_anonymous_3153_
        PyJs_anonymous_3152_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('toAssignableList'), PyJs_anonymous_3152_)
        @Js
        def PyJs_anonymous_3154_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_3155_(exprList, this, arguments, var=var):
                var = Scope({'this':this, 'exprList':exprList, 'arguments':arguments}, var)
                var.registers(['i', 'expr', 'exprList'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('exprList').get('length')):
                    try:
                        var.put('expr', var.get('exprList').get(var.get('i')))
                        if ((var.get('expr') and var.get('expr').get('_exprListItem')) and PyJsStrictEq(var.get('expr').get('type'),Js('TypeCastExpression'))):
                            var.get("this").callprop('raise', var.get('expr').get('start'), Js('Unexpected type cast'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('exprList')
            PyJs_anonymous_3155_._set_name('anonymous')
            return PyJs_anonymous_3155_
        PyJs_anonymous_3154_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('toReferencedList'), PyJs_anonymous_3154_)
        @Js
        def PyJs_anonymous_3156_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3157_(allowEmpty, refShorthandDefaultPos, this, arguments, var=var):
                var = Scope({'this':this, 'allowEmpty':allowEmpty, 'refShorthandDefaultPos':refShorthandDefaultPos, 'arguments':arguments}, var)
                var.registers(['node', 'allowEmpty', 'container', 'refShorthandDefaultPos'])
                var.put('container', var.get("this").callprop('startNode'))
                var.put('node', var.get('inner').callprop('call', var.get("this"), var.get('allowEmpty'), var.get('refShorthandDefaultPos')))
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.get('container').put('_exprListItem', var.get('true'))
                    var.get('container').put('expression', var.get('node'))
                    var.get('container').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
                    return var.get("this").callprop('finishNode', var.get('container'), Js('TypeCastExpression'))
                else:
                    return var.get('node')
            PyJs_anonymous_3157_._set_name('anonymous')
            return PyJs_anonymous_3157_
        PyJs_anonymous_3156_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseExprListItem'), PyJs_anonymous_3156_)
        @Js
        def PyJs_anonymous_3158_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3159_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                if PyJsStrictNeq(var.get('node').get('type'),Js('TypeCastExpression')):
                    return var.get('inner').callprop('apply', var.get("this"), var.get('arguments'))
            PyJs_anonymous_3159_._set_name('anonymous')
            return PyJs_anonymous_3159_
        PyJs_anonymous_3158_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('checkLVal'), PyJs_anonymous_3158_)
        @Js
        def PyJs_anonymous_3160_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3161_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('node').delete('variancePos')
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.get('node').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
                return var.get('inner').callprop('call', var.get("this"), var.get('node'))
            PyJs_anonymous_3161_._set_name('anonymous')
            return PyJs_anonymous_3161_
        PyJs_anonymous_3160_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseClassProperty'), PyJs_anonymous_3160_)
        @Js
        def PyJs_anonymous_3162_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3163_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get("this").callprop('match', var.get('types').get('colon')) or var.get('inner').callprop('call', var.get("this")))
            PyJs_anonymous_3163_._set_name('anonymous')
            return PyJs_anonymous_3163_
        PyJs_anonymous_3162_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('isClassProperty'), PyJs_anonymous_3162_)
        @Js
        def PyJs_anonymous_3164_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_3165_(classBody, method, isGenerator, isAsync, this, arguments, var=var):
                var = Scope({'isAsync':isAsync, 'classBody':classBody, 'this':this, 'isGenerator':isGenerator, 'method':method, 'arguments':arguments}, var)
                var.registers(['isAsync', 'isGenerator', 'classBody', 'method'])
                if var.get('method').get('variance'):
                    var.get("this").callprop('unexpected', var.get('method').get('variancePos'))
                var.get('method').delete('variance')
                var.get('method').delete('variancePos')
                if var.get("this").callprop('isRelational', Js('<')):
                    var.get('method').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
                var.get("this").callprop('parseMethod', var.get('method'), var.get('isGenerator'), var.get('isAsync'))
                var.get('classBody').get('body').callprop('push', var.get("this").callprop('finishNode', var.get('method'), Js('ClassMethod')))
            PyJs_anonymous_3165_._set_name('anonymous')
            return PyJs_anonymous_3165_
        PyJs_anonymous_3164_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseClassMethod'), PyJs_anonymous_3164_)
        @Js
        def PyJs_anonymous_3166_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3167_(node, isStatement, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'isStatement':isStatement, 'arguments':arguments}, var)
                var.registers(['node', '_node', 'implemented', 'isStatement'])
                var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('isStatement'))
                if (var.get('node').get('superClass') and var.get("this").callprop('isRelational', Js('<'))):
                    var.get('node').put('superTypeParameters', var.get("this").callprop('flowParseTypeParameterInstantiation'))
                if var.get("this").callprop('isContextual', Js('implements')):
                    var.get("this").callprop('next')
                    var.put('implemented', var.get('node').put('implements', Js([])))
                    while 1:
                        var.put('_node', var.get("this").callprop('startNode'))
                        var.get('_node').put('id', var.get("this").callprop('parseIdentifier'))
                        if var.get("this").callprop('isRelational', Js('<')):
                            var.get('_node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterInstantiation'))
                        else:
                            var.get('_node').put('typeParameters', var.get("null"))
                        var.get('implemented').callprop('push', var.get("this").callprop('finishNode', var.get('_node'), Js('ClassImplements')))
                        if not var.get("this").callprop('eat', var.get('types').get('comma')):
                            break
            PyJs_anonymous_3167_._set_name('anonymous')
            return PyJs_anonymous_3167_
        PyJs_anonymous_3166_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseClassSuper'), PyJs_anonymous_3166_)
        @Js
        def PyJs_anonymous_3168_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3169_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'variance', 'variancePos', 'key'])
                var.put('variancePos', var.get("this").get('state').get('start'))
                var.put('variance', var.get("this").callprop('flowParseVariance'))
                var.put('key', var.get('inner').callprop('call', var.get("this"), var.get('node')))
                var.get('node').put('variance', var.get('variance'))
                var.get('node').put('variancePos', var.get('variancePos'))
                return var.get('key')
            PyJs_anonymous_3169_._set_name('anonymous')
            return PyJs_anonymous_3169_
        PyJs_anonymous_3168_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parsePropertyName'), PyJs_anonymous_3168_)
        @Js
        def PyJs_anonymous_3170_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3171_(prop, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'prop':prop}, var)
                var.registers(['typeParameters', 'prop'])
                if var.get('prop').get('variance'):
                    var.get("this").callprop('unexpected', var.get('prop').get('variancePos'))
                var.get('prop').delete('variance')
                var.get('prop').delete('variancePos')
                var.put('typeParameters', PyJsComma(Js(0.0), Js(None)))
                if var.get("this").callprop('isRelational', Js('<')):
                    var.put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
                    if var.get("this").callprop('match', var.get('types').get('parenL')).neg():
                        var.get("this").callprop('unexpected')
                var.get('inner').callprop('apply', var.get("this"), var.get('arguments'))
                if var.get('typeParameters'):
                    (var.get('prop').get('value') or var.get('prop')).put('typeParameters', var.get('typeParameters'))
            PyJs_anonymous_3171_._set_name('anonymous')
            return PyJs_anonymous_3171_
        PyJs_anonymous_3170_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseObjPropValue'), PyJs_anonymous_3170_)
        @Js
        def PyJs_anonymous_3172_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_3173_(param, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'param':param}, var)
                var.registers(['param'])
                if var.get("this").callprop('eat', var.get('types').get('question')):
                    var.get('param').put('optional', var.get('true'))
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.get('param').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
                var.get("this").callprop('finishNode', var.get('param'), var.get('param').get('type'))
                return var.get('param')
            PyJs_anonymous_3173_._set_name('anonymous')
            return PyJs_anonymous_3173_
        PyJs_anonymous_3172_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseAssignableListItemTypes'), PyJs_anonymous_3172_)
        @Js
        def PyJs_anonymous_3174_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3175_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_len', '_key', 'args', 'node'])
                #for JS loop
                var.put('_len', var.get('arguments').get('length'))
                var.put('args', var.get('Array')(var.get('_len')))
                var.put('_key', Js(0.0))
                while (var.get('_key')<var.get('_len')):
                    try:
                        var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                    finally:
                            (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
                var.put('node', var.get('inner').callprop('apply', var.get("this"), var.get('args')))
                if ((PyJsStrictEq(var.get('node').get('type'),Js('AssignmentPattern')) and var.get('node').get('typeAnnotation')) and (var.get('node').get('right').get('start')<var.get('node').get('typeAnnotation').get('start'))):
                    var.get("this").callprop('raise', var.get('node').get('typeAnnotation').get('start'), Js('Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`'))
                return var.get('node')
            PyJs_anonymous_3175_._set_name('anonymous')
            return PyJs_anonymous_3175_
        PyJs_anonymous_3174_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseMaybeDefault'), PyJs_anonymous_3174_)
        @Js
        def PyJs_anonymous_3176_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3177_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'kind', 'lh'])
                var.get('node').put('importKind', Js('value'))
                var.put('kind', var.get("null"))
                if var.get("this").callprop('match', var.get('types').get('_typeof')):
                    var.put('kind', Js('typeof'))
                else:
                    if var.get("this").callprop('isContextual', Js('type')):
                        var.put('kind', Js('type'))
                if var.get('kind'):
                    var.put('lh', var.get("this").callprop('lookahead'))
                    if (((PyJsStrictEq(var.get('lh').get('type'),var.get('types').get('name')) and PyJsStrictNeq(var.get('lh').get('value'),Js('from'))) or PyJsStrictEq(var.get('lh').get('type'),var.get('types').get('braceL'))) or PyJsStrictEq(var.get('lh').get('type'),var.get('types').get('star'))):
                        var.get("this").callprop('next')
                        var.get('node').put('importKind', var.get('kind'))
                var.get('inner').callprop('call', var.get("this"), var.get('node'))
            PyJs_anonymous_3177_._set_name('anonymous')
            return PyJs_anonymous_3177_
        PyJs_anonymous_3176_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseImportSpecifiers'), PyJs_anonymous_3176_)
        @Js
        def PyJs_anonymous_3178_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3179_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                if var.get("this").callprop('isRelational', Js('<')):
                    var.get('node').put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
                var.get('inner').callprop('call', var.get("this"), var.get('node'))
            PyJs_anonymous_3179_._set_name('anonymous')
            return PyJs_anonymous_3179_
        PyJs_anonymous_3178_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseFunctionParams'), PyJs_anonymous_3178_)
        @Js
        def PyJs_anonymous_3180_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3181_(decl, this, arguments, var=var):
                var = Scope({'decl':decl, 'this':this, 'arguments':arguments}, var)
                var.registers(['decl'])
                var.get('inner').callprop('call', var.get("this"), var.get('decl'))
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.get('decl').get('id').put('typeAnnotation', var.get("this").callprop('flowParseTypeAnnotation'))
                    var.get("this").callprop('finishNode', var.get('decl').get('id'), var.get('decl').get('id').get('type'))
            PyJs_anonymous_3181_._set_name('anonymous')
            return PyJs_anonymous_3181_
        PyJs_anonymous_3180_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseVarHead'), PyJs_anonymous_3180_)
        @Js
        def PyJs_anonymous_3182_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3183_(node, call, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'call':call, 'arguments':arguments}, var)
                var.registers(['node', 'call'])
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.get('node').put('returnType', var.get("this").callprop('flowParseTypeAnnotation'))
                return var.get('inner').callprop('call', var.get("this"), var.get('node'), var.get('call'))
            PyJs_anonymous_3183_._set_name('anonymous')
            return PyJs_anonymous_3183_
        PyJs_anonymous_3182_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseAsyncArrowFromCallExpression'), PyJs_anonymous_3182_)
        @Js
        def PyJs_anonymous_3184_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3185_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get("this").callprop('match', var.get('types').get('colon')) or var.get('inner').callprop('call', var.get("this")))
            PyJs_anonymous_3185_._set_name('anonymous')
            return PyJs_anonymous_3185_
        PyJs_anonymous_3184_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('shouldParseAsyncArrow'), PyJs_anonymous_3184_)
        @Js
        def PyJs_anonymous_3186_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3187_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['args', 'arrowExpression', 'jsxError', '_key2', 'state', '_len2', 'typeParameters'])
                var.put('jsxError', var.get("null"))
                #for JS loop
                var.put('_len2', var.get('arguments').get('length'))
                var.put('args', var.get('Array')(var.get('_len2')))
                var.put('_key2', Js(0.0))
                while (var.get('_key2')<var.get('_len2')):
                    try:
                        var.get('args').put(var.get('_key2'), var.get('arguments').get(var.get('_key2')))
                    finally:
                            (var.put('_key2',Js(var.get('_key2').to_number())+Js(1))-Js(1))
                if (var.get('types').get('jsxTagStart') and var.get("this").callprop('match', var.get('types').get('jsxTagStart'))):
                    var.put('state', var.get("this").get('state').callprop('clone'))
                    try:
                        return var.get('inner').callprop('apply', var.get("this"), var.get('args'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_79758696 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('err').instanceof(var.get('SyntaxError')):
                                var.get("this").put('state', var.get('state'))
                                var.put('jsxError', var.get('err'))
                            else:
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_79758696 is not None:
                                var.own['err'] = PyJsHolder_657272_79758696
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_79758696
                var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('parenExpression'))
                if ((var.get('jsxError')!=var.get("null")) or var.get("this").callprop('isRelational', Js('<'))):
                    var.put('arrowExpression', PyJsComma(Js(0.0), Js(None)))
                    var.put('typeParameters', PyJsComma(Js(0.0), Js(None)))
                    try:
                        var.put('typeParameters', var.get("this").callprop('flowParseTypeParameterDeclaration'))
                        var.put('arrowExpression', var.get('inner').callprop('apply', var.get("this"), var.get('args')))
                        var.get('arrowExpression').put('typeParameters', var.get('typeParameters'))
                        var.get('arrowExpression').put('start', var.get('typeParameters').get('start'))
                        var.get('arrowExpression').get('loc').put('start', var.get('typeParameters').get('loc').get('start'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_54478765 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            PyJsTempException = JsToPyException((var.get('jsxError') or var.get('err')))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_54478765 is not None:
                                var.own['err'] = PyJsHolder_657272_54478765
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_54478765
                    if PyJsStrictEq(var.get('arrowExpression').get('type'),Js('ArrowFunctionExpression')):
                        return var.get('arrowExpression')
                    else:
                        if (var.get('jsxError')!=var.get("null")):
                            PyJsTempException = JsToPyException(var.get('jsxError'))
                            raise PyJsTempException
                        else:
                            var.get("this").callprop('raise', var.get('typeParameters').get('start'), Js('Expected an arrow function after this type parameter declaration'))
                var.get("this").get('state').get('context').callprop('pop')
                return var.get('inner').callprop('apply', var.get("this"), var.get('args'))
            PyJs_anonymous_3187_._set_name('anonymous')
            return PyJs_anonymous_3187_
        PyJs_anonymous_3186_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseMaybeAssign'), PyJs_anonymous_3186_)
        @Js
        def PyJs_anonymous_3188_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3189_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['returnType', 'node', 'state'])
                if var.get("this").callprop('match', var.get('types').get('colon')):
                    var.put('state', var.get("this").get('state').callprop('clone'))
                    try:
                        var.put('returnType', var.get("this").callprop('flowParseTypeAnnotation'))
                        if var.get("this").callprop('canInsertSemicolon'):
                            var.get("this").callprop('unexpected')
                        if var.get("this").callprop('match', var.get('types').get('arrow')).neg():
                            var.get("this").callprop('unexpected')
                        var.get('node').put('returnType', var.get('returnType'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_34966532 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('err').instanceof(var.get('SyntaxError')):
                                var.get("this").put('state', var.get('state'))
                            else:
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_34966532 is not None:
                                var.own['err'] = PyJsHolder_657272_34966532
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_34966532
                return var.get('inner').callprop('call', var.get("this"), var.get('node'))
            PyJs_anonymous_3189_._set_name('anonymous')
            return PyJs_anonymous_3189_
        PyJs_anonymous_3188_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseArrow'), PyJs_anonymous_3188_)
        @Js
        def PyJs_anonymous_3190_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3191_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get("this").callprop('match', var.get('types').get('colon')) or var.get('inner').callprop('call', var.get("this")))
            PyJs_anonymous_3191_._set_name('anonymous')
            return PyJs_anonymous_3191_
        PyJs_anonymous_3190_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('shouldParseArrow'), PyJs_anonymous_3190_)
        @Js
        def PyJs_anonymous_3192_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3193_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get("this").callprop('isRelational', Js('<')):
                    return var.get('true')
                else:
                    return var.get('inner').callprop('call', var.get("this"))
            PyJs_anonymous_3193_._set_name('anonymous')
            return PyJs_anonymous_3193_
        PyJs_anonymous_3192_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('isClassMutatorStarter'), PyJs_anonymous_3192_)
    PyJs_anonymous_3123_._set_name('anonymous')
    var.put('flowPlugin', PyJs_anonymous_3123_)
    PyJs_Object_3194_ = Js({'quot':Js('"'),'amp':Js('&'),'apos':Js("'"),'lt':Js('<'),'gt':Js('>'),'nbsp':Js('\xa0'),'iexcl':Js('\xa1'),'cent':Js('\xa2'),'pound':Js('\xa3'),'curren':Js('\xa4'),'yen':Js('\xa5'),'brvbar':Js('\xa6'),'sect':Js('\xa7'),'uml':Js('\xa8'),'copy':Js('\xa9'),'ordf':Js('\xaa'),'laquo':Js('\xab'),'not':Js('\xac'),'shy':Js('\xad'),'reg':Js('\xae'),'macr':Js('\xaf'),'deg':Js('\xb0'),'plusmn':Js('\xb1'),'sup2':Js('\xb2'),'sup3':Js('\xb3'),'acute':Js('\xb4'),'micro':Js('\xb5'),'para':Js('\xb6'),'middot':Js('\xb7'),'cedil':Js('\xb8'),'sup1':Js('\xb9'),'ordm':Js('\xba'),'raquo':Js('\xbb'),'frac14':Js('\xbc'),'frac12':Js('\xbd'),'frac34':Js('\xbe'),'iquest':Js('\xbf'),'Agrave':Js('\xc0'),'Aacute':Js('\xc1'),'Acirc':Js('\xc2'),'Atilde':Js('\xc3'),'Auml':Js('\xc4'),'Aring':Js('\xc5'),'AElig':Js('\xc6'),'Ccedil':Js('\xc7'),'Egrave':Js('\xc8'),'Eacute':Js('\xc9'),'Ecirc':Js('\xca'),'Euml':Js('\xcb'),'Igrave':Js('\xcc'),'Iacute':Js('\xcd'),'Icirc':Js('\xce'),'Iuml':Js('\xcf'),'ETH':Js('\xd0'),'Ntilde':Js('\xd1'),'Ograve':Js('\xd2'),'Oacute':Js('\xd3'),'Ocirc':Js('\xd4'),'Otilde':Js('\xd5'),'Ouml':Js('\xd6'),'times':Js('\xd7'),'Oslash':Js('\xd8'),'Ugrave':Js('\xd9'),'Uacute':Js('\xda'),'Ucirc':Js('\xdb'),'Uuml':Js('\xdc'),'Yacute':Js('\xdd'),'THORN':Js('\xde'),'szlig':Js('\xdf'),'agrave':Js('\xe0'),'aacute':Js('\xe1'),'acirc':Js('\xe2'),'atilde':Js('\xe3'),'auml':Js('\xe4'),'aring':Js('\xe5'),'aelig':Js('\xe6'),'ccedil':Js('\xe7'),'egrave':Js('\xe8'),'eacute':Js('\xe9'),'ecirc':Js('\xea'),'euml':Js('\xeb'),'igrave':Js('\xec'),'iacute':Js('\xed'),'icirc':Js('\xee'),'iuml':Js('\xef'),'eth':Js('\xf0'),'ntilde':Js('\xf1'),'ograve':Js('\xf2'),'oacute':Js('\xf3'),'ocirc':Js('\xf4'),'otilde':Js('\xf5'),'ouml':Js('\xf6'),'divide':Js('\xf7'),'oslash':Js('\xf8'),'ugrave':Js('\xf9'),'uacute':Js('\xfa'),'ucirc':Js('\xfb'),'uuml':Js('\xfc'),'yacute':Js('\xfd'),'thorn':Js('\xfe'),'yuml':Js('\xff'),'OElig':Js('\u0152'),'oelig':Js('\u0153'),'Scaron':Js('\u0160'),'scaron':Js('\u0161'),'Yuml':Js('\u0178'),'fnof':Js('\u0192'),'circ':Js('\u02c6'),'tilde':Js('\u02dc'),'Alpha':Js('\u0391'),'Beta':Js('\u0392'),'Gamma':Js('\u0393'),'Delta':Js('\u0394'),'Epsilon':Js('\u0395'),'Zeta':Js('\u0396'),'Eta':Js('\u0397'),'Theta':Js('\u0398'),'Iota':Js('\u0399'),'Kappa':Js('\u039a'),'Lambda':Js('\u039b'),'Mu':Js('\u039c'),'Nu':Js('\u039d'),'Xi':Js('\u039e'),'Omicron':Js('\u039f'),'Pi':Js('\u03a0'),'Rho':Js('\u03a1'),'Sigma':Js('\u03a3'),'Tau':Js('\u03a4'),'Upsilon':Js('\u03a5'),'Phi':Js('\u03a6'),'Chi':Js('\u03a7'),'Psi':Js('\u03a8'),'Omega':Js('\u03a9'),'alpha':Js('\u03b1'),'beta':Js('\u03b2'),'gamma':Js('\u03b3'),'delta':Js('\u03b4'),'epsilon':Js('\u03b5'),'zeta':Js('\u03b6'),'eta':Js('\u03b7'),'theta':Js('\u03b8'),'iota':Js('\u03b9'),'kappa':Js('\u03ba'),'lambda':Js('\u03bb'),'mu':Js('\u03bc'),'nu':Js('\u03bd'),'xi':Js('\u03be'),'omicron':Js('\u03bf'),'pi':Js('\u03c0'),'rho':Js('\u03c1'),'sigmaf':Js('\u03c2'),'sigma':Js('\u03c3'),'tau':Js('\u03c4'),'upsilon':Js('\u03c5'),'phi':Js('\u03c6'),'chi':Js('\u03c7'),'psi':Js('\u03c8'),'omega':Js('\u03c9'),'thetasym':Js('\u03d1'),'upsih':Js('\u03d2'),'piv':Js('\u03d6'),'ensp':Js('\u2002'),'emsp':Js('\u2003'),'thinsp':Js('\u2009'),'zwnj':Js('\u200c'),'zwj':Js('\u200d'),'lrm':Js('\u200e'),'rlm':Js('\u200f'),'ndash':Js('\u2013'),'mdash':Js('\u2014'),'lsquo':Js('\u2018'),'rsquo':Js('\u2019'),'sbquo':Js('\u201a'),'ldquo':Js('\u201c'),'rdquo':Js('\u201d'),'bdquo':Js('\u201e'),'dagger':Js('\u2020'),'Dagger':Js('\u2021'),'bull':Js('\u2022'),'hellip':Js('\u2026'),'permil':Js('\u2030'),'prime':Js('\u2032'),'Prime':Js('\u2033'),'lsaquo':Js('\u2039'),'rsaquo':Js('\u203a'),'oline':Js('\u203e'),'frasl':Js('\u2044'),'euro':Js('\u20ac'),'image':Js('\u2111'),'weierp':Js('\u2118'),'real':Js('\u211c'),'trade':Js('\u2122'),'alefsym':Js('\u2135'),'larr':Js('\u2190'),'uarr':Js('\u2191'),'rarr':Js('\u2192'),'darr':Js('\u2193'),'harr':Js('\u2194'),'crarr':Js('\u21b5'),'lArr':Js('\u21d0'),'uArr':Js('\u21d1'),'rArr':Js('\u21d2'),'dArr':Js('\u21d3'),'hArr':Js('\u21d4'),'forall':Js('\u2200'),'part':Js('\u2202'),'exist':Js('\u2203'),'empty':Js('\u2205'),'nabla':Js('\u2207'),'isin':Js('\u2208'),'notin':Js('\u2209'),'ni':Js('\u220b'),'prod':Js('\u220f'),'sum':Js('\u2211'),'minus':Js('\u2212'),'lowast':Js('\u2217'),'radic':Js('\u221a'),'prop':Js('\u221d'),'infin':Js('\u221e'),'ang':Js('\u2220'),'and':Js('\u2227'),'or':Js('\u2228'),'cap':Js('\u2229'),'cup':Js('\u222a'),'int':Js('\u222b'),'there4':Js('\u2234'),'sim':Js('\u223c'),'cong':Js('\u2245'),'asymp':Js('\u2248'),'ne':Js('\u2260'),'equiv':Js('\u2261'),'le':Js('\u2264'),'ge':Js('\u2265'),'sub':Js('\u2282'),'sup':Js('\u2283'),'nsub':Js('\u2284'),'sube':Js('\u2286'),'supe':Js('\u2287'),'oplus':Js('\u2295'),'otimes':Js('\u2297'),'perp':Js('\u22a5'),'sdot':Js('\u22c5'),'lceil':Js('\u2308'),'rceil':Js('\u2309'),'lfloor':Js('\u230a'),'rfloor':Js('\u230b'),'lang':Js('\u2329'),'rang':Js('\u232a'),'loz':Js('\u25ca'),'spades':Js('\u2660'),'clubs':Js('\u2663'),'hearts':Js('\u2665'),'diams':Js('\u2666')})
    var.put('XHTMLEntities', PyJs_Object_3194_)
    var.put('HEX_NUMBER', JsRegExp('/^[\\da-fA-F]+$/'))
    var.put('DECIMAL_NUMBER', JsRegExp('/^\\d+$/'))
    var.get('types$1').put('j_oTag', var.get('TokContext').create(Js('<tag'), Js(False)))
    var.get('types$1').put('j_cTag', var.get('TokContext').create(Js('</tag'), Js(False)))
    var.get('types$1').put('j_expr', var.get('TokContext').create(Js('<tag>...</tag>'), var.get('true'), var.get('true')))
    var.get('types').put('jsxName', var.get('TokenType').create(Js('jsxName')))
    PyJs_Object_3195_ = Js({'beforeExpr':var.get('true')})
    var.get('types').put('jsxText', var.get('TokenType').create(Js('jsxText'), PyJs_Object_3195_))
    PyJs_Object_3196_ = Js({'startsExpr':var.get('true')})
    var.get('types').put('jsxTagStart', var.get('TokenType').create(Js('jsxTagStart'), PyJs_Object_3196_))
    var.get('types').put('jsxTagEnd', var.get('TokenType').create(Js('jsxTagEnd')))
    @Js
    def PyJs_anonymous_3197_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('j_expr'))
        var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('j_oTag'))
        var.get("this").get('state').put('exprAllowed', Js(False))
    PyJs_anonymous_3197_._set_name('anonymous')
    var.get('types').get('jsxTagStart').put('updateContext', PyJs_anonymous_3197_)
    @Js
    def PyJs_anonymous_3198_(prevType, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'prevType':prevType}, var)
        var.registers(['prevType', 'out'])
        var.put('out', var.get("this").get('state').get('context').callprop('pop'))
        if ((PyJsStrictEq(var.get('out'),var.get('types$1').get('j_oTag')) and PyJsStrictEq(var.get('prevType'),var.get('types').get('slash'))) or PyJsStrictEq(var.get('out'),var.get('types$1').get('j_cTag'))):
            var.get("this").get('state').get('context').callprop('pop')
            var.get("this").get('state').put('exprAllowed', PyJsStrictEq(var.get("this").callprop('curContext'),var.get('types$1').get('j_expr')))
        else:
            var.get("this").get('state').put('exprAllowed', var.get('true'))
    PyJs_anonymous_3198_._set_name('anonymous')
    var.get('types').get('jsxTagEnd').put('updateContext', PyJs_anonymous_3198_)
    var.put('pp$8', var.get('Parser').get('prototype'))
    @Js
    def PyJs_anonymous_3199_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['ch', 'chunkStart', 'out'])
        var.put('out', Js(''))
        var.put('chunkStart', var.get("this").get('state').get('pos'))
        #for JS loop
        
        while 1:
            if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Unterminated JSX contents'))
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('ch'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(60.0)):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(123.0)):
                    SWITCHED = True
                    if PyJsStrictEq(var.get("this").get('state').get('pos'),var.get("this").get('state').get('start')):
                        if (PyJsStrictEq(var.get('ch'),Js(60.0)) and var.get("this").get('state').get('exprAllowed')):
                            var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                            return var.get("this").callprop('finishToken', var.get('types').get('jsxTagStart'))
                        return var.get("this").callprop('getTokenFromCode', var.get('ch'))
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    return var.get("this").callprop('finishToken', var.get('types').get('jsxText'), var.get('out'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(38.0)):
                    SWITCHED = True
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    var.put('out', var.get("this").callprop('jsxReadEntity'), '+')
                    var.put('chunkStart', var.get("this").get('state').get('pos'))
                    break
                if True:
                    SWITCHED = True
                    if var.get('isNewLine')(var.get('ch')):
                        var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                        var.put('out', var.get("this").callprop('jsxReadNewLine', var.get('true')), '+')
                        var.put('chunkStart', var.get("this").get('state').get('pos'))
                    else:
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                SWITCHED = True
                break
        
    PyJs_anonymous_3199_._set_name('anonymous')
    var.get('pp$8').put('jsxReadToken', PyJs_anonymous_3199_)
    @Js
    def PyJs_anonymous_3200_(normalizeCRLF, this, arguments, var=var):
        var = Scope({'this':this, 'normalizeCRLF':normalizeCRLF, 'arguments':arguments}, var)
        var.registers(['ch', 'normalizeCRLF', 'out'])
        var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
        var.put('out', PyJsComma(Js(0.0), Js(None)))
        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
        if (PyJsStrictEq(var.get('ch'),Js(13.0)) and PyJsStrictEq(var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')),Js(10.0))):
            var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
            var.put('out', (Js('\n') if var.get('normalizeCRLF') else Js('\r\n')))
        else:
            var.put('out', var.get('String').callprop('fromCharCode', var.get('ch')))
        var.get("this").get('state').put('curLine',Js(var.get("this").get('state').get('curLine').to_number())+Js(1))
        var.get("this").get('state').put('lineStart', var.get("this").get('state').get('pos'))
        return var.get('out')
    PyJs_anonymous_3200_._set_name('anonymous')
    var.get('pp$8').put('jsxReadNewLine', PyJs_anonymous_3200_)
    @Js
    def PyJs_anonymous_3201_(quote, this, arguments, var=var):
        var = Scope({'this':this, 'quote':quote, 'arguments':arguments}, var)
        var.registers(['ch', 'quote', 'chunkStart', 'out'])
        var.put('out', Js(''))
        var.put('chunkStart', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1)))
        #for JS loop
        
        while 1:
            if (var.get("this").get('state').get('pos')>=var.get("this").get('input').get('length')):
                var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Unterminated string constant'))
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').get('pos')))
            if PyJsStrictEq(var.get('ch'),var.get('quote')):
                break
            if PyJsStrictEq(var.get('ch'),Js(38.0)):
                var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                var.put('out', var.get("this").callprop('jsxReadEntity'), '+')
                var.put('chunkStart', var.get("this").get('state').get('pos'))
            else:
                if var.get('isNewLine')(var.get('ch')):
                    var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), var.get("this").get('state').get('pos')), '+')
                    var.put('out', var.get("this").callprop('jsxReadNewLine', Js(False)), '+')
                    var.put('chunkStart', var.get("this").get('state').get('pos'))
                else:
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
        
        var.put('out', var.get("this").get('input').callprop('slice', var.get('chunkStart'), (var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))-Js(1))), '+')
        return var.get("this").callprop('finishToken', var.get('types').get('string'), var.get('out'))
    PyJs_anonymous_3201_._set_name('anonymous')
    var.get('pp$8').put('jsxReadString', PyJs_anonymous_3201_)
    @Js
    def PyJs_anonymous_3202_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['count', 'startPos', 'ch', 'str', 'entity'])
        var.put('str', Js(''))
        var.put('count', Js(0.0))
        var.put('entity', PyJsComma(Js(0.0), Js(None)))
        var.put('ch', var.get("this").get('input').get(var.get("this").get('state').get('pos')))
        var.put('startPos', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1)))
        while ((var.get("this").get('state').get('pos')<var.get("this").get('input').get('length')) and ((var.put('count',Js(var.get('count').to_number())+Js(1))-Js(1))<Js(10.0))):
            var.put('ch', var.get("this").get('input').get((var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))-Js(1))))
            if PyJsStrictEq(var.get('ch'),Js(';')):
                if PyJsStrictEq(var.get('str').get('0'),Js('#')):
                    if PyJsStrictEq(var.get('str').get('1'),Js('x')):
                        var.put('str', var.get('str').callprop('substr', Js(2.0)))
                        if var.get('HEX_NUMBER').callprop('test', var.get('str')):
                            var.put('entity', var.get('String').callprop('fromCharCode', var.get('parseInt')(var.get('str'), Js(16.0))))
                    else:
                        var.put('str', var.get('str').callprop('substr', Js(1.0)))
                        if var.get('DECIMAL_NUMBER').callprop('test', var.get('str')):
                            var.put('entity', var.get('String').callprop('fromCharCode', var.get('parseInt')(var.get('str'), Js(10.0))))
                else:
                    var.put('entity', var.get('XHTMLEntities').get(var.get('str')))
                break
            var.put('str', var.get('ch'), '+')
        if var.get('entity').neg():
            var.get("this").get('state').put('pos', var.get('startPos'))
            return Js('&')
        return var.get('entity')
    PyJs_anonymous_3202_._set_name('anonymous')
    var.get('pp$8').put('jsxReadEntity', PyJs_anonymous_3202_)
    @Js
    def PyJs_anonymous_3203_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['start', 'ch'])
        var.put('ch', PyJsComma(Js(0.0), Js(None)))
        var.put('start', var.get("this").get('state').get('pos'))
        while 1:
            var.put('ch', var.get("this").get('input').callprop('charCodeAt', var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))))
            if not (var.get('isIdentifierChar')(var.get('ch')) or PyJsStrictEq(var.get('ch'),Js(45.0))):
                break
        return var.get("this").callprop('finishToken', var.get('types').get('jsxName'), var.get("this").get('input').callprop('slice', var.get('start'), var.get("this").get('state').get('pos')))
    PyJs_anonymous_3203_._set_name('anonymous')
    var.get('pp$8').put('jsxReadWord', PyJs_anonymous_3203_)
    pass
    @Js
    def PyJs_anonymous_3204_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        if var.get("this").callprop('match', var.get('types').get('jsxName')):
            var.get('node').put('name', var.get("this").get('state').get('value'))
        else:
            if var.get("this").get('state').get('type').get('keyword'):
                var.get('node').put('name', var.get("this").get('state').get('type').get('keyword'))
            else:
                var.get("this").callprop('unexpected')
        var.get("this").callprop('next')
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXIdentifier'))
    PyJs_anonymous_3204_._set_name('anonymous')
    var.get('pp$8').put('jsxParseIdentifier', PyJs_anonymous_3204_)
    @Js
    def PyJs_anonymous_3205_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'startPos', 'name', 'startLoc'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('name', var.get("this").callprop('jsxParseIdentifier'))
        if var.get("this").callprop('eat', var.get('types').get('colon')).neg():
            return var.get('name')
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('namespace', var.get('name'))
        var.get('node').put('name', var.get("this").callprop('jsxParseIdentifier'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXNamespacedName'))
    PyJs_anonymous_3205_._set_name('anonymous')
    var.get('pp$8').put('jsxParseNamespacedName', PyJs_anonymous_3205_)
    @Js
    def PyJs_anonymous_3206_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node', 'newNode', 'startPos', 'startLoc'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.put('node', var.get("this").callprop('jsxParseNamespacedName'))
        while var.get("this").callprop('eat', var.get('types').get('dot')):
            var.put('newNode', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
            var.get('newNode').put('object', var.get('node'))
            var.get('newNode').put('property', var.get("this").callprop('jsxParseIdentifier'))
            var.put('node', var.get("this").callprop('finishNode', var.get('newNode'), Js('JSXMemberExpression')))
        return var.get('node')
    PyJs_anonymous_3206_._set_name('anonymous')
    var.get('pp$8').put('jsxParseElementName', PyJs_anonymous_3206_)
    @Js
    def PyJs_anonymous_3207_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', PyJsComma(Js(0.0), Js(None)))
        while 1:
            SWITCHED = False
            CONDITION = (var.get("this").get('state').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('jsxParseExpressionContainer'))
                if PyJsStrictEq(var.get('node').get('expression').get('type'),Js('JSXEmptyExpression')):
                    var.get("this").callprop('raise', var.get('node').get('start'), Js('JSX attributes must only be assigned a non-empty expression'))
                else:
                    return var.get('node')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('jsxTagStart')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('string')):
                SWITCHED = True
                var.put('node', var.get("this").callprop('parseExprAtom'))
                var.get('node').put('extra', var.get("null"))
                return var.get('node')
            if True:
                SWITCHED = True
                var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('JSX value should be either an expression or a quoted JSX text'))
            SWITCHED = True
            break
    PyJs_anonymous_3207_._set_name('anonymous')
    var.get('pp$8').put('jsxParseAttributeValue', PyJs_anonymous_3207_)
    @Js
    def PyJs_anonymous_3208_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get("this").get('lastTokEnd'), var.get("this").get('lastTokEndLoc')))
        return var.get("this").callprop('finishNodeAt', var.get('node'), Js('JSXEmptyExpression'), var.get("this").get('start'), var.get("this").get('startLoc'))
    PyJs_anonymous_3208_._set_name('anonymous')
    var.get('pp$8').put('jsxParseEmptyExpression', PyJs_anonymous_3208_)
    @Js
    def PyJs_anonymous_3209_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('expect', var.get('types').get('braceL'))
        var.get("this").callprop('expect', var.get('types').get('ellipsis'))
        var.get('node').put('expression', var.get("this").callprop('parseExpression'))
        var.get("this").callprop('expect', var.get('types').get('braceR'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXSpreadChild'))
    PyJs_anonymous_3209_._set_name('anonymous')
    var.get('pp$8').put('jsxParseSpreadChild', PyJs_anonymous_3209_)
    @Js
    def PyJs_anonymous_3210_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        var.get("this").callprop('next')
        if var.get("this").callprop('match', var.get('types').get('braceR')):
            var.get('node').put('expression', var.get("this").callprop('jsxParseEmptyExpression'))
        else:
            var.get('node').put('expression', var.get("this").callprop('parseExpression'))
        var.get("this").callprop('expect', var.get('types').get('braceR'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXExpressionContainer'))
    PyJs_anonymous_3210_._set_name('anonymous')
    var.get('pp$8').put('jsxParseExpressionContainer', PyJs_anonymous_3210_)
    @Js
    def PyJs_anonymous_3211_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['node'])
        var.put('node', var.get("this").callprop('startNode'))
        if var.get("this").callprop('eat', var.get('types').get('braceL')):
            var.get("this").callprop('expect', var.get('types').get('ellipsis'))
            var.get('node').put('argument', var.get("this").callprop('parseMaybeAssign'))
            var.get("this").callprop('expect', var.get('types').get('braceR'))
            return var.get("this").callprop('finishNode', var.get('node'), Js('JSXSpreadAttribute'))
        var.get('node').put('name', var.get("this").callprop('jsxParseNamespacedName'))
        var.get('node').put('value', (var.get("this").callprop('jsxParseAttributeValue') if var.get("this").callprop('eat', var.get('types').get('eq')) else var.get("null")))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXAttribute'))
    PyJs_anonymous_3211_._set_name('anonymous')
    var.get('pp$8').put('jsxParseAttribute', PyJs_anonymous_3211_)
    @Js
    def PyJs_anonymous_3212_(startPos, startLoc, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'arguments':arguments, 'startLoc':startLoc}, var)
        var.registers(['node', 'startPos', 'startLoc'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('attributes', Js([]))
        var.get('node').put('name', var.get("this").callprop('jsxParseElementName'))
        while (var.get("this").callprop('match', var.get('types').get('slash')).neg() and var.get("this").callprop('match', var.get('types').get('jsxTagEnd')).neg()):
            var.get('node').get('attributes').callprop('push', var.get("this").callprop('jsxParseAttribute'))
        var.get('node').put('selfClosing', var.get("this").callprop('eat', var.get('types').get('slash')))
        var.get("this").callprop('expect', var.get('types').get('jsxTagEnd'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXOpeningElement'))
    PyJs_anonymous_3212_._set_name('anonymous')
    var.get('pp$8').put('jsxParseOpeningElementAt', PyJs_anonymous_3212_)
    @Js
    def PyJs_anonymous_3213_(startPos, startLoc, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'arguments':arguments, 'startLoc':startLoc}, var)
        var.registers(['node', 'startPos', 'startLoc'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.get('node').put('name', var.get("this").callprop('jsxParseElementName'))
        var.get("this").callprop('expect', var.get('types').get('jsxTagEnd'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXClosingElement'))
    PyJs_anonymous_3213_._set_name('anonymous')
    var.get('pp$8').put('jsxParseClosingElementAt', PyJs_anonymous_3213_)
    @Js
    def PyJs_anonymous_3214_(startPos, startLoc, this, arguments, var=var):
        var = Scope({'this':this, 'startPos':startPos, 'arguments':arguments, 'startLoc':startLoc}, var)
        var.registers(['node', 'openingElement', 'closingElement', 'startLoc', 'startPos', 'children'])
        var.put('node', var.get("this").callprop('startNodeAt', var.get('startPos'), var.get('startLoc')))
        var.put('children', Js([]))
        var.put('openingElement', var.get("this").callprop('jsxParseOpeningElementAt', var.get('startPos'), var.get('startLoc')))
        var.put('closingElement', var.get("null"))
        if var.get('openingElement').get('selfClosing').neg():
            class JS_CONTINUE_LABEL_636f6e74656e7473(Exception): pass
            class JS_BREAK_LABEL_636f6e74656e7473(Exception): pass
            try:
                #for JS loop
                
                while 1:
                    try:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get("this").get('state').get('type'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('jsxTagStart')):
                                SWITCHED = True
                                var.put('startPos', var.get("this").get('state').get('start'))
                                var.put('startLoc', var.get("this").get('state').get('startLoc'))
                                var.get("this").callprop('next')
                                if var.get("this").callprop('eat', var.get('types').get('slash')):
                                    var.put('closingElement', var.get("this").callprop('jsxParseClosingElementAt', var.get('startPos'), var.get('startLoc')))
                                    raise JS_BREAK_LABEL_636f6e74656e7473("Breaked")
                                var.get('children').callprop('push', var.get("this").callprop('jsxParseElementAt', var.get('startPos'), var.get('startLoc')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('jsxText')):
                                SWITCHED = True
                                var.get('children').callprop('push', var.get("this").callprop('parseExprAtom'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('types').get('braceL')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get("this").callprop('lookahead').get('type'),var.get('types').get('ellipsis')):
                                    var.get('children').callprop('push', var.get("this").callprop('jsxParseSpreadChild'))
                                else:
                                    var.get('children').callprop('push', var.get("this").callprop('jsxParseExpressionContainer'))
                                break
                            if True:
                                SWITCHED = True
                                var.get("this").callprop('unexpected')
                            SWITCHED = True
                            break
                    
                    except JS_CONTINUE_LABEL_636f6e74656e7473:
                        pass
            except JS_BREAK_LABEL_636f6e74656e7473:
                pass
            if PyJsStrictNeq(var.get('getQualifiedJSXName')(var.get('closingElement').get('name')),var.get('getQualifiedJSXName')(var.get('openingElement').get('name'))):
                var.get("this").callprop('raise', var.get('closingElement').get('start'), ((Js('Expected corresponding JSX closing tag for <')+var.get('getQualifiedJSXName')(var.get('openingElement').get('name')))+Js('>')))
        var.get('node').put('openingElement', var.get('openingElement'))
        var.get('node').put('closingElement', var.get('closingElement'))
        var.get('node').put('children', var.get('children'))
        if (var.get("this").callprop('match', var.get('types').get('relational')) and PyJsStrictEq(var.get("this").get('state').get('value'),Js('<'))):
            var.get("this").callprop('raise', var.get("this").get('state').get('start'), Js('Adjacent JSX elements must be wrapped in an enclosing tag'))
        return var.get("this").callprop('finishNode', var.get('node'), Js('JSXElement'))
    PyJs_anonymous_3214_._set_name('anonymous')
    var.get('pp$8').put('jsxParseElementAt', PyJs_anonymous_3214_)
    @Js
    def PyJs_anonymous_3215_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['startPos', 'startLoc'])
        var.put('startPos', var.get("this").get('state').get('start'))
        var.put('startLoc', var.get("this").get('state').get('startLoc'))
        var.get("this").callprop('next')
        return var.get("this").callprop('jsxParseElementAt', var.get('startPos'), var.get('startLoc'))
    PyJs_anonymous_3215_._set_name('anonymous')
    var.get('pp$8').put('jsxParseElement', PyJs_anonymous_3215_)
    @Js
    def PyJs_anonymous_3216_(instance, this, arguments, var=var):
        var = Scope({'this':this, 'instance':instance, 'arguments':arguments}, var)
        var.registers(['instance'])
        @Js
        def PyJs_anonymous_3217_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3218_(refShortHandDefaultPos, this, arguments, var=var):
                var = Scope({'this':this, 'refShortHandDefaultPos':refShortHandDefaultPos, 'arguments':arguments}, var)
                var.registers(['node', 'refShortHandDefaultPos'])
                if var.get("this").callprop('match', var.get('types').get('jsxText')):
                    var.put('node', var.get("this").callprop('parseLiteral', var.get("this").get('state').get('value'), Js('JSXText')))
                    var.get('node').put('extra', var.get("null"))
                    return var.get('node')
                else:
                    if var.get("this").callprop('match', var.get('types').get('jsxTagStart')):
                        return var.get("this").callprop('jsxParseElement')
                    else:
                        return var.get('inner').callprop('call', var.get("this"), var.get('refShortHandDefaultPos'))
            PyJs_anonymous_3218_._set_name('anonymous')
            return PyJs_anonymous_3218_
        PyJs_anonymous_3217_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('parseExprAtom'), PyJs_anonymous_3217_)
        @Js
        def PyJs_anonymous_3219_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3220_(code, this, arguments, var=var):
                var = Scope({'this':this, 'code':code, 'arguments':arguments}, var)
                var.registers(['code', 'context'])
                var.put('context', var.get("this").callprop('curContext'))
                if PyJsStrictEq(var.get('context'),var.get('types$1').get('j_expr')):
                    return var.get("this").callprop('jsxReadToken')
                if (PyJsStrictEq(var.get('context'),var.get('types$1').get('j_oTag')) or PyJsStrictEq(var.get('context'),var.get('types$1').get('j_cTag'))):
                    if var.get('isIdentifierStart')(var.get('code')):
                        return var.get("this").callprop('jsxReadWord')
                    if PyJsStrictEq(var.get('code'),Js(62.0)):
                        var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                        return var.get("this").callprop('finishToken', var.get('types').get('jsxTagEnd'))
                    if ((PyJsStrictEq(var.get('code'),Js(34.0)) or PyJsStrictEq(var.get('code'),Js(39.0))) and PyJsStrictEq(var.get('context'),var.get('types$1').get('j_oTag'))):
                        return var.get("this").callprop('jsxReadString', var.get('code'))
                if (PyJsStrictEq(var.get('code'),Js(60.0)) and var.get("this").get('state').get('exprAllowed')):
                    var.get("this").get('state').put('pos',Js(var.get("this").get('state').get('pos').to_number())+Js(1))
                    return var.get("this").callprop('finishToken', var.get('types').get('jsxTagStart'))
                return var.get('inner').callprop('call', var.get("this"), var.get('code'))
            PyJs_anonymous_3220_._set_name('anonymous')
            return PyJs_anonymous_3220_
        PyJs_anonymous_3219_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('readToken'), PyJs_anonymous_3219_)
        @Js
        def PyJs_anonymous_3221_(inner, this, arguments, var=var):
            var = Scope({'this':this, 'inner':inner, 'arguments':arguments}, var)
            var.registers(['inner'])
            @Js
            def PyJs_anonymous_3222_(prevType, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'prevType':prevType}, var)
                var.registers(['curContext', 'prevType'])
                if var.get("this").callprop('match', var.get('types').get('braceL')):
                    var.put('curContext', var.get("this").callprop('curContext'))
                    if PyJsStrictEq(var.get('curContext'),var.get('types$1').get('j_oTag')):
                        var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('braceExpression'))
                    else:
                        if PyJsStrictEq(var.get('curContext'),var.get('types$1').get('j_expr')):
                            var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('templateQuasi'))
                        else:
                            var.get('inner').callprop('call', var.get("this"), var.get('prevType'))
                    var.get("this").get('state').put('exprAllowed', var.get('true'))
                else:
                    if (var.get("this").callprop('match', var.get('types').get('slash')) and PyJsStrictEq(var.get('prevType'),var.get('types').get('jsxTagStart'))):
                        var.get("this").get('state').get('context').put('length', Js(2.0), '-')
                        var.get("this").get('state').get('context').callprop('push', var.get('types$1').get('j_cTag'))
                        var.get("this").get('state').put('exprAllowed', Js(False))
                    else:
                        return var.get('inner').callprop('call', var.get("this"), var.get('prevType'))
            PyJs_anonymous_3222_._set_name('anonymous')
            return PyJs_anonymous_3222_
        PyJs_anonymous_3221_._set_name('anonymous')
        var.get('instance').callprop('extend', Js('updateContext'), PyJs_anonymous_3221_)
    PyJs_anonymous_3216_._set_name('anonymous')
    var.put('jsxPlugin', PyJs_anonymous_3216_)
    var.get('plugins').put('flow', var.get('flowPlugin'))
    var.get('plugins').put('jsx', var.get('jsxPlugin'))
    pass
    var.get('exports').put('parse', var.get('parse$1'))
    var.get('exports').put('tokTypes', var.get('types'))
PyJs_anonymous_2842_._set_name('anonymous')
PyJs_Object_3223_ = Js({})
@Js
def PyJs_anonymous_3224_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'maybeMatch', 'require', 'module', 'range', 'balanced'])
    @Js
    def PyJsHoisted_balanced_(a, b, str, this, arguments, var=var):
        var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments, 'str':str}, var)
        var.registers(['a', 'r', 'b', 'str'])
        if var.get('a').instanceof(var.get('RegExp')):
            var.put('a', var.get('maybeMatch')(var.get('a'), var.get('str')))
        if var.get('b').instanceof(var.get('RegExp')):
            var.put('b', var.get('maybeMatch')(var.get('b'), var.get('str')))
        var.put('r', var.get('range')(var.get('a'), var.get('b'), var.get('str')))
        PyJs_Object_3225_ = Js({'start':var.get('r').get('0'),'end':var.get('r').get('1'),'pre':var.get('str').callprop('slice', Js(0.0), var.get('r').get('0')),'body':var.get('str').callprop('slice', (var.get('r').get('0')+var.get('a').get('length')), var.get('r').get('1')),'post':var.get('str').callprop('slice', (var.get('r').get('1')+var.get('b').get('length')))})
        return (var.get('r') and PyJs_Object_3225_)
    PyJsHoisted_balanced_.__name__ = 'balanced'
    var.put('balanced', PyJsHoisted_balanced_)
    @Js
    def PyJsHoisted_range_(a, b, str, this, arguments, var=var):
        var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments, 'str':str}, var)
        var.registers(['a', 'right', 'ai', 'beg', 'bi', 'i', 'b', 'result', 'str', 'begs', 'left'])
        pass
        var.put('ai', var.get('str').callprop('indexOf', var.get('a')))
        var.put('bi', var.get('str').callprop('indexOf', var.get('b'), (var.get('ai')+Js(1.0))))
        var.put('i', var.get('ai'))
        if ((var.get('ai')>=Js(0.0)) and (var.get('bi')>Js(0.0))):
            var.put('begs', Js([]))
            var.put('left', var.get('str').get('length'))
            while ((var.get('i')>=Js(0.0)) and var.get('result').neg()):
                if (var.get('i')==var.get('ai')):
                    var.get('begs').callprop('push', var.get('i'))
                    var.put('ai', var.get('str').callprop('indexOf', var.get('a'), (var.get('i')+Js(1.0))))
                else:
                    if (var.get('begs').get('length')==Js(1.0)):
                        var.put('result', Js([var.get('begs').callprop('pop'), var.get('bi')]))
                    else:
                        var.put('beg', var.get('begs').callprop('pop'))
                        if (var.get('beg')<var.get('left')):
                            var.put('left', var.get('beg'))
                            var.put('right', var.get('bi'))
                        var.put('bi', var.get('str').callprop('indexOf', var.get('b'), (var.get('i')+Js(1.0))))
                var.put('i', (var.get('ai') if ((var.get('ai')<var.get('bi')) and (var.get('ai')>=Js(0.0))) else var.get('bi')))
            if var.get('begs').get('length'):
                var.put('result', Js([var.get('left'), var.get('right')]))
        return var.get('result')
    PyJsHoisted_range_.__name__ = 'range'
    var.put('range', PyJsHoisted_range_)
    @Js
    def PyJsHoisted_maybeMatch_(reg, str, this, arguments, var=var):
        var = Scope({'this':this, 'reg':reg, 'str':str, 'arguments':arguments}, var)
        var.registers(['m', 'reg', 'str'])
        var.put('m', var.get('str').callprop('match', var.get('reg')))
        return (var.get('m').get('0') if var.get('m') else var.get("null"))
    PyJsHoisted_maybeMatch_.__name__ = 'maybeMatch'
    var.put('maybeMatch', PyJsHoisted_maybeMatch_)
    var.get('module').put('exports', var.get('balanced'))
    pass
    pass
    var.get('balanced').put('range', var.get('range'))
    pass
PyJs_anonymous_3224_._set_name('anonymous')
PyJs_Object_3226_ = Js({})
@Js
def PyJs_anonymous_3227_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['escComma', 'escapeBraces', 'exports', 'escOpen', 'escPeriod', 'module', 'expandTop', 'escClose', 'isPadded', 'numeric', 'lte', 'unescapeBraces', 'concatMap', 'embrace', 'expand', 'escSlash', 'balanced', 'parseCommaParts', 'require', 'identity', 'gte'])
    @Js
    def PyJsHoisted_escapeBraces_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        return var.get('str').callprop('split', Js('\\\\')).callprop('join', var.get('escSlash')).callprop('split', Js('\\{')).callprop('join', var.get('escOpen')).callprop('split', Js('\\}')).callprop('join', var.get('escClose')).callprop('split', Js('\\,')).callprop('join', var.get('escComma')).callprop('split', Js('\\.')).callprop('join', var.get('escPeriod'))
    PyJsHoisted_escapeBraces_.__name__ = 'escapeBraces'
    var.put('escapeBraces', PyJsHoisted_escapeBraces_)
    @Js
    def PyJsHoisted_lte_(i, y, this, arguments, var=var):
        var = Scope({'i':i, 'y':y, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'y'])
        return (var.get('i')<=var.get('y'))
    PyJsHoisted_lte_.__name__ = 'lte'
    var.put('lte', PyJsHoisted_lte_)
    @Js
    def PyJsHoisted_expandTop_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        if var.get('str').neg():
            return Js([])
        return var.get('expand')(var.get('escapeBraces')(var.get('str')), var.get('true')).callprop('map', var.get('unescapeBraces'))
    PyJsHoisted_expandTop_.__name__ = 'expandTop'
    var.put('expandTop', PyJsHoisted_expandTop_)
    @Js
    def PyJsHoisted_numeric_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        return (var.get('parseInt')(var.get('str'), Js(10.0)) if (var.get('parseInt')(var.get('str'), Js(10.0))==var.get('str')) else var.get('str').callprop('charCodeAt', Js(0.0)))
    PyJsHoisted_numeric_.__name__ = 'numeric'
    var.put('numeric', PyJsHoisted_numeric_)
    @Js
    def PyJsHoisted_unescapeBraces_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        return var.get('str').callprop('split', var.get('escSlash')).callprop('join', Js('\\')).callprop('split', var.get('escOpen')).callprop('join', Js('{')).callprop('split', var.get('escClose')).callprop('join', Js('}')).callprop('split', var.get('escComma')).callprop('join', Js(',')).callprop('split', var.get('escPeriod')).callprop('join', Js('.'))
    PyJsHoisted_unescapeBraces_.__name__ = 'unescapeBraces'
    var.put('unescapeBraces', PyJsHoisted_unescapeBraces_)
    @Js
    def PyJsHoisted_embrace_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        return ((Js('{')+var.get('str'))+Js('}'))
    PyJsHoisted_embrace_.__name__ = 'embrace'
    var.put('embrace', PyJsHoisted_embrace_)
    @Js
    def PyJsHoisted_expand_(str, isTop, this, arguments, var=var):
        var = Scope({'this':this, 'isTop':isTop, 'arguments':arguments, 'str':str}, var)
        var.registers(['pre', 'm', 'isTop', 'need', 'incr', 'width', 'pad', 'test', 'isAlphaSequence', 'isSequence', 'expansion', 'N', 'post', 'c', 'isOptions', 'reverse', 'i', 'k', 'j', 'expansions', 'n', 'str', 'isNumericSequence', 'y', 'x', 'z'])
        var.put('expansions', Js([]))
        var.put('m', var.get('balanced')(Js('{'), Js('}'), var.get('str')))
        if (var.get('m').neg() or JsRegExp('/\\$$/').callprop('test', var.get('m').get('pre'))):
            return Js([var.get('str')])
        var.put('isNumericSequence', JsRegExp('/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/').callprop('test', var.get('m').get('body')))
        var.put('isAlphaSequence', JsRegExp('/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/').callprop('test', var.get('m').get('body')))
        var.put('isSequence', (var.get('isNumericSequence') or var.get('isAlphaSequence')))
        var.put('isOptions', JsRegExp('/^(.*,)+(.+)?$/').callprop('test', var.get('m').get('body')))
        if (var.get('isSequence').neg() and var.get('isOptions').neg()):
            if var.get('m').get('post').callprop('match', JsRegExp('/,.*\\}/')):
                var.put('str', ((((var.get('m').get('pre')+Js('{'))+var.get('m').get('body'))+var.get('escClose'))+var.get('m').get('post')))
                return var.get('expand')(var.get('str'))
            return Js([var.get('str')])
        pass
        if var.get('isSequence'):
            var.put('n', var.get('m').get('body').callprop('split', JsRegExp('/\\.\\./')))
        else:
            var.put('n', var.get('parseCommaParts')(var.get('m').get('body')))
            if PyJsStrictEq(var.get('n').get('length'),Js(1.0)):
                var.put('n', var.get('expand')(var.get('n').get('0'), Js(False)).callprop('map', var.get('embrace')))
                if PyJsStrictEq(var.get('n').get('length'),Js(1.0)):
                    var.put('post', (var.get('expand')(var.get('m').get('post'), Js(False)) if var.get('m').get('post').get('length') else Js([Js('')])))
                    @Js
                    def PyJs_anonymous_3228_(p, this, arguments, var=var):
                        var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
                        var.registers(['p'])
                        return ((var.get('m').get('pre')+var.get('n').get('0'))+var.get('p'))
                    PyJs_anonymous_3228_._set_name('anonymous')
                    return var.get('post').callprop('map', PyJs_anonymous_3228_)
        var.put('pre', var.get('m').get('pre'))
        var.put('post', (var.get('expand')(var.get('m').get('post'), Js(False)) if var.get('m').get('post').get('length') else Js([Js('')])))
        pass
        if var.get('isSequence'):
            var.put('x', var.get('numeric')(var.get('n').get('0')))
            var.put('y', var.get('numeric')(var.get('n').get('1')))
            var.put('width', var.get('Math').callprop('max', var.get('n').get('0').get('length'), var.get('n').get('1').get('length')))
            var.put('incr', (var.get('Math').callprop('abs', var.get('numeric')(var.get('n').get('2'))) if (var.get('n').get('length')==Js(3.0)) else Js(1.0)))
            var.put('test', var.get('lte'))
            var.put('reverse', (var.get('y')<var.get('x')))
            if var.get('reverse'):
                var.put('incr', (-Js(1.0)), '*')
                var.put('test', var.get('gte'))
            var.put('pad', var.get('n').callprop('some', var.get('isPadded')))
            var.put('N', Js([]))
            #for JS loop
            var.put('i', var.get('x'))
            while var.get('test')(var.get('i'), var.get('y')):
                try:
                    pass
                    if var.get('isAlphaSequence'):
                        var.put('c', var.get('String').callprop('fromCharCode', var.get('i')))
                        if PyJsStrictEq(var.get('c'),Js('\\')):
                            var.put('c', Js(''))
                    else:
                        var.put('c', var.get('String')(var.get('i')))
                        if var.get('pad'):
                            var.put('need', (var.get('width')-var.get('c').get('length')))
                            if (var.get('need')>Js(0.0)):
                                var.put('z', var.get('Array').create((var.get('need')+Js(1.0))).callprop('join', Js('0')))
                                if (var.get('i')<Js(0.0)):
                                    var.put('c', ((Js('-')+var.get('z'))+var.get('c').callprop('slice', Js(1.0))))
                                else:
                                    var.put('c', (var.get('z')+var.get('c')))
                    var.get('N').callprop('push', var.get('c'))
                finally:
                        var.put('i', var.get('incr'), '+')
        else:
            @Js
            def PyJs_anonymous_3229_(el, this, arguments, var=var):
                var = Scope({'this':this, 'el':el, 'arguments':arguments}, var)
                var.registers(['el'])
                return var.get('expand')(var.get('el'), Js(False))
            PyJs_anonymous_3229_._set_name('anonymous')
            var.put('N', var.get('concatMap')(var.get('n'), PyJs_anonymous_3229_))
        #for JS loop
        var.put('j', Js(0.0))
        while (var.get('j')<var.get('N').get('length')):
            try:
                #for JS loop
                var.put('k', Js(0.0))
                while (var.get('k')<var.get('post').get('length')):
                    try:
                        var.put('expansion', ((var.get('pre')+var.get('N').get(var.get('j')))+var.get('post').get(var.get('k'))))
                        if ((var.get('isTop').neg() or var.get('isSequence')) or var.get('expansion')):
                            var.get('expansions').callprop('push', var.get('expansion'))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
            finally:
                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
        return var.get('expansions')
    PyJsHoisted_expand_.__name__ = 'expand'
    var.put('expand', PyJsHoisted_expand_)
    @Js
    def PyJsHoisted_isPadded_(el, this, arguments, var=var):
        var = Scope({'this':this, 'el':el, 'arguments':arguments}, var)
        var.registers(['el'])
        return JsRegExp('/^-?0\\d/').callprop('test', var.get('el'))
    PyJsHoisted_isPadded_.__name__ = 'isPadded'
    var.put('isPadded', PyJsHoisted_isPadded_)
    @Js
    def PyJsHoisted_parseCommaParts_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['pre', 'body', 'postParts', 'm', 'p', 'parts', 'str', 'post'])
        if var.get('str').neg():
            return Js([Js('')])
        var.put('parts', Js([]))
        var.put('m', var.get('balanced')(Js('{'), Js('}'), var.get('str')))
        if var.get('m').neg():
            return var.get('str').callprop('split', Js(','))
        var.put('pre', var.get('m').get('pre'))
        var.put('body', var.get('m').get('body'))
        var.put('post', var.get('m').get('post'))
        var.put('p', var.get('pre').callprop('split', Js(',')))
        var.get('p').put((var.get('p').get('length')-Js(1.0)), ((Js('{')+var.get('body'))+Js('}')), '+')
        var.put('postParts', var.get('parseCommaParts')(var.get('post')))
        if var.get('post').get('length'):
            var.get('p').put((var.get('p').get('length')-Js(1.0)), var.get('postParts').callprop('shift'), '+')
            var.get('p').get('push').callprop('apply', var.get('p'), var.get('postParts'))
        var.get('parts').get('push').callprop('apply', var.get('parts'), var.get('p'))
        return var.get('parts')
    PyJsHoisted_parseCommaParts_.__name__ = 'parseCommaParts'
    var.put('parseCommaParts', PyJsHoisted_parseCommaParts_)
    @Js
    def PyJsHoisted_identity_(e, this, arguments, var=var):
        var = Scope({'this':this, 'e':e, 'arguments':arguments}, var)
        var.registers(['e'])
        return var.get('e')
    PyJsHoisted_identity_.__name__ = 'identity'
    var.put('identity', PyJsHoisted_identity_)
    @Js
    def PyJsHoisted_gte_(i, y, this, arguments, var=var):
        var = Scope({'i':i, 'y':y, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'y'])
        return (var.get('i')>=var.get('y'))
    PyJsHoisted_gte_.__name__ = 'gte'
    var.put('gte', PyJsHoisted_gte_)
    var.put('concatMap', var.get('require')(Js('concat-map')))
    var.put('balanced', var.get('require')(Js('balanced-match')))
    var.get('module').put('exports', var.get('expandTop'))
    var.put('escSlash', ((Js('\x00SLASH')+var.get('Math').callprop('random'))+Js('\x00')))
    var.put('escOpen', ((Js('\x00OPEN')+var.get('Math').callprop('random'))+Js('\x00')))
    var.put('escClose', ((Js('\x00CLOSE')+var.get('Math').callprop('random'))+Js('\x00')))
    var.put('escComma', ((Js('\x00COMMA')+var.get('Math').callprop('random'))+Js('\x00')))
    var.put('escPeriod', ((Js('\x00PERIOD')+var.get('Math').callprop('random'))+Js('\x00')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_3227_._set_name('anonymous')
PyJs_Object_3230_ = Js({'balanced-match':Js(263.0),'concat-map':Js(266.0)})
@Js
def PyJs_anonymous_3231_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3232_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['styles', 'escapeStringRegexp', 'proto', 'process', 'applyStyle', 'hasAnsi', 'isSimpleWindowsTerm', 'Chalk', 'init', 'build', 'stripAnsi', 'ansiStyles', 'supportsColor', 'defineProps'])
        @Js
        def PyJsHoisted_Chalk_(options, this, arguments, var=var):
            var = Scope({'this':this, 'options':options, 'arguments':arguments}, var)
            var.registers(['options'])
            var.get("this").put('enabled', (var.get('supportsColor') if (var.get('options').neg() or PyJsStrictEq(var.get('options').get('enabled'),var.get('undefined'))) else var.get('options').get('enabled')))
        PyJsHoisted_Chalk_.__name__ = 'Chalk'
        var.put('Chalk', PyJsHoisted_Chalk_)
        @Js
        def PyJsHoisted_applyStyle_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'nestedStyles', 'i', 'args', 'originalDim', 'code', 'str', 'argsLen'])
            var.put('args', var.get('arguments'))
            var.put('argsLen', var.get('args').get('length'))
            var.put('str', (PyJsStrictNeq(var.get('argsLen'),Js(0.0)) and var.get('String')(var.get('arguments').get('0'))))
            if (var.get('argsLen')>Js(1.0)):
                #for JS loop
                var.put('a', Js(1.0))
                while (var.get('a')<var.get('argsLen')):
                    try:
                        var.put('str', (Js(' ')+var.get('args').get(var.get('a'))), '+')
                    finally:
                            (var.put('a',Js(var.get('a').to_number())+Js(1))-Js(1))
            if (var.get("this").get('enabled').neg() or var.get('str').neg()):
                return var.get('str')
            var.put('nestedStyles', var.get("this").get('_styles'))
            var.put('i', var.get('nestedStyles').get('length'))
            var.put('originalDim', var.get('ansiStyles').get('dim').get('open'))
            if (var.get('isSimpleWindowsTerm') and (PyJsStrictNeq(var.get('nestedStyles').callprop('indexOf', Js('gray')),(-Js(1.0))) or PyJsStrictNeq(var.get('nestedStyles').callprop('indexOf', Js('grey')),(-Js(1.0))))):
                var.get('ansiStyles').get('dim').put('open', Js(''))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                var.put('code', var.get('ansiStyles').get(var.get('nestedStyles').get(var.get('i'))))
                var.put('str', ((var.get('code').get('open')+var.get('str').callprop('replace', var.get('code').get('closeRe'), var.get('code').get('open')))+var.get('code').get('close')))
            var.get('ansiStyles').get('dim').put('open', var.get('originalDim'))
            return var.get('str')
        PyJsHoisted_applyStyle_.__name__ = 'applyStyle'
        var.put('applyStyle', PyJsHoisted_applyStyle_)
        @Js
        def PyJsHoisted_init_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['ret'])
            PyJs_Object_3240_ = Js({})
            var.put('ret', PyJs_Object_3240_)
            @Js
            def PyJs_anonymous_3241_(name, this, arguments, var=var):
                var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
                var.registers(['name'])
                @Js
                def PyJs_anonymous_3243_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('build').callprop('call', var.get("this"), Js([var.get('name')]))
                PyJs_anonymous_3243_._set_name('anonymous')
                PyJs_Object_3242_ = Js({'get':PyJs_anonymous_3243_})
                var.get('ret').put(var.get('name'), PyJs_Object_3242_)
            PyJs_anonymous_3241_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('styles')).callprop('forEach', PyJs_anonymous_3241_)
            return var.get('ret')
        PyJsHoisted_init_.__name__ = 'init'
        var.put('init', PyJsHoisted_init_)
        @Js
        def PyJsHoisted_build_(_styles, this, arguments, var=var):
            var = Scope({'this':this, '_styles':_styles, 'arguments':arguments}, var)
            var.registers(['builder', '_styles'])
            @Js
            def PyJs_anonymous_3239_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('applyStyle').callprop('apply', var.get('builder'), var.get('arguments'))
            PyJs_anonymous_3239_._set_name('anonymous')
            var.put('builder', PyJs_anonymous_3239_)
            var.get('builder').put('_styles', var.get('_styles'))
            var.get('builder').put('enabled', var.get("this").get('enabled'))
            var.get('builder').put('__proto__', var.get('proto'))
            return var.get('builder')
        PyJsHoisted_build_.__name__ = 'build'
        var.put('build', PyJsHoisted_build_)
        Js('use strict')
        var.put('escapeStringRegexp', var.get('require')(Js('escape-string-regexp')))
        var.put('ansiStyles', var.get('require')(Js('ansi-styles')))
        var.put('stripAnsi', var.get('require')(Js('strip-ansi')))
        var.put('hasAnsi', var.get('require')(Js('has-ansi')))
        var.put('supportsColor', var.get('require')(Js('supports-color')))
        var.put('defineProps', var.get('Object').get('defineProperties'))
        var.put('isSimpleWindowsTerm', (PyJsStrictEq(var.get('process').get('platform'),Js('win32')) and JsRegExp('/^xterm/i').callprop('test', var.get('process').get('env').get('TERM')).neg()))
        pass
        if var.get('isSimpleWindowsTerm'):
            var.get('ansiStyles').get('blue').put('open', Js('\x1b[94m'))
        @Js
        def PyJs_anonymous_3233_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['ret'])
            PyJs_Object_3234_ = Js({})
            var.put('ret', PyJs_Object_3234_)
            @Js
            def PyJs_anonymous_3235_(key, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
                var.registers(['key'])
                var.get('ansiStyles').get(var.get('key')).put('closeRe', var.get('RegExp').create(var.get('escapeStringRegexp')(var.get('ansiStyles').get(var.get('key')).get('close')), Js('g')))
                @Js
                def PyJs_anonymous_3237_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('build').callprop('call', var.get("this"), var.get("this").get('_styles').callprop('concat', var.get('key')))
                PyJs_anonymous_3237_._set_name('anonymous')
                PyJs_Object_3236_ = Js({'get':PyJs_anonymous_3237_})
                var.get('ret').put(var.get('key'), PyJs_Object_3236_)
            PyJs_anonymous_3235_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('ansiStyles')).callprop('forEach', PyJs_anonymous_3235_)
            return var.get('ret')
        PyJs_anonymous_3233_._set_name('anonymous')
        var.put('styles', PyJs_anonymous_3233_())
        @Js
        def PyJs_chalk_3238_(this, arguments, var=var):
            var = Scope({'this':this, 'chalk':PyJs_chalk_3238_, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJs_chalk_3238_._set_name('chalk')
        var.put('proto', var.get('defineProps')(PyJs_chalk_3238_, var.get('styles')))
        pass
        pass
        pass
        var.get('defineProps')(var.get('Chalk').get('prototype'), var.get('init')())
        var.get('module').put('exports', var.get('Chalk').create())
        var.get('module').get('exports').put('styles', var.get('ansiStyles'))
        var.get('module').get('exports').put('hasColor', var.get('hasAnsi'))
        var.get('module').get('exports').put('stripColor', var.get('stripAnsi'))
        var.get('module').get('exports').put('supportsColor', var.get('supportsColor'))
    PyJs_anonymous_3232_._set_name('anonymous')
    PyJs_anonymous_3232_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_3231_._set_name('anonymous')
PyJs_Object_3244_ = Js({'_process':Js(531.0),'ansi-styles':Js(3.0),'escape-string-regexp':Js(272.0),'has-ansi':Js(279.0),'strip-ansi':Js(520.0),'supports-color':Js(521.0)})
@Js
def PyJs_anonymous_3245_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3246_(xs, fn, this, arguments, var=var):
        var = Scope({'this':this, 'xs':xs, 'arguments':arguments, 'fn':fn}, var)
        var.registers(['i', 'res', 'xs', 'fn', 'x'])
        var.put('res', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('xs').get('length')):
            try:
                var.put('x', var.get('fn')(var.get('xs').get(var.get('i')), var.get('i')))
                if var.get('isArray')(var.get('x')):
                    var.get('res').get('push').callprop('apply', var.get('res'), var.get('x'))
                else:
                    var.get('res').callprop('push', var.get('x'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('res')
    PyJs_anonymous_3246_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_3246_)
    @Js
    def PyJs_anonymous_3247_(xs, this, arguments, var=var):
        var = Scope({'this':this, 'xs':xs, 'arguments':arguments}, var)
        var.registers(['xs'])
        return PyJsStrictEq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('xs')),Js('[object Array]'))
    PyJs_anonymous_3247_._set_name('anonymous')
    var.put('isArray', (var.get('Array').get('isArray') or PyJs_anonymous_3247_))
PyJs_anonymous_3245_._set_name('anonymous')
PyJs_Object_3248_ = Js({})
@Js
def PyJs_anonymous_3249_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3250_(Buffer, this, arguments, var=var):
        var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
        var.registers(['fs', 'commentRx', 'Converter', 'Buffer', 'decodeBase64', 'stripComment', 'convertFromLargeSource', 'path', 'readFromFileMap', 'mapFileCommentRx'])
        @Js
        def PyJsHoisted_decodeBase64_(base64, this, arguments, var=var):
            var = Scope({'this':this, 'base64':base64, 'arguments':arguments}, var)
            var.registers(['base64'])
            return var.get('Buffer').create(var.get('base64'), Js('base64')).callprop('toString')
        PyJsHoisted_decodeBase64_.__name__ = 'decodeBase64'
        var.put('decodeBase64', PyJsHoisted_decodeBase64_)
        @Js
        def PyJsHoisted_readFromFileMap_(sm, dir, this, arguments, var=var):
            var = Scope({'this':this, 'dir':dir, 'sm':sm, 'arguments':arguments}, var)
            var.registers(['r', 'dir', 'filepath', 'sm', 'filename'])
            var.put('r', var.get('mapFileCommentRx').callprop('exec', var.get('sm')))
            var.get('mapFileCommentRx').put('lastIndex', Js(0.0))
            var.put('filename', (var.get('r').get('1') or var.get('r').get('2')))
            var.put('filepath', var.get('path').callprop('resolve', var.get('dir'), var.get('filename')))
            try:
                return var.get('fs').callprop('readFileSync', var.get('filepath'), Js('utf8'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_62339762 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    PyJsTempException = JsToPyException(var.get('Error').create((((Js('An error occurred while trying to read the map file at ')+var.get('filepath'))+Js('\n'))+var.get('e'))))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_65_62339762 is not None:
                        var.own['e'] = PyJsHolder_65_62339762
                    else:
                        del var.own['e']
                    del PyJsHolder_65_62339762
        PyJsHoisted_readFromFileMap_.__name__ = 'readFromFileMap'
        var.put('readFromFileMap', PyJsHoisted_readFromFileMap_)
        @Js
        def PyJsHoisted_stripComment_(sm, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'sm':sm}, var)
            var.registers(['sm'])
            return var.get('sm').callprop('split', Js(',')).callprop('pop')
        PyJsHoisted_stripComment_.__name__ = 'stripComment'
        var.put('stripComment', PyJsHoisted_stripComment_)
        @Js
        def PyJsHoisted_convertFromLargeSource_(content, this, arguments, var=var):
            var = Scope({'content':content, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'content', 'line', 'lines'])
            var.put('lines', var.get('content').callprop('split', Js('\n')))
            pass
            #for JS loop
            var.put('i', (var.get('lines').get('length')-Js(1.0)))
            while (var.get('i')>Js(0.0)):
                try:
                    var.put('line', var.get('lines').get(var.get('i')))
                    if (~var.get('line').callprop('indexOf', Js('sourceMappingURL=data:'))):
                        return var.get('exports').callprop('fromComment', var.get('line'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        PyJsHoisted_convertFromLargeSource_.__name__ = 'convertFromLargeSource'
        var.put('convertFromLargeSource', PyJsHoisted_convertFromLargeSource_)
        @Js
        def PyJsHoisted_Converter_(sm, opts, this, arguments, var=var):
            var = Scope({'this':this, 'opts':opts, 'sm':sm, 'arguments':arguments}, var)
            var.registers(['opts', 'sm'])
            PyJs_Object_3251_ = Js({})
            var.put('opts', (var.get('opts') or PyJs_Object_3251_))
            if var.get('opts').get('isFileComment'):
                var.put('sm', var.get('readFromFileMap')(var.get('sm'), var.get('opts').get('commentFileDir')))
            if var.get('opts').get('hasComment'):
                var.put('sm', var.get('stripComment')(var.get('sm')))
            if var.get('opts').get('isEncoded'):
                var.put('sm', var.get('decodeBase64')(var.get('sm')))
            if (var.get('opts').get('isJSON') or var.get('opts').get('isEncoded')):
                var.put('sm', var.get('JSON').callprop('parse', var.get('sm')))
            var.get("this").put('sourcemap', var.get('sm'))
        PyJsHoisted_Converter_.__name__ = 'Converter'
        var.put('Converter', PyJsHoisted_Converter_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('commentRx', JsRegExp('/^\\s*\\/(?:\\/|\\*)[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+;)?base64,(.*)$/mg'))
        var.put('mapFileCommentRx', JsRegExp('/(?:\\/\\/[@#][ \\t]+sourceMappingURL=([^\\s\'"]+?)[ \\t]*$)|(?:\\/\\*[@#][ \\t]+sourceMappingURL=([^\\*]+?)[ \\t]*(?:\\*\\/){1}[ \\t]*$)/mg'))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_3252_(space, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'space':space}, var)
            var.registers(['space'])
            return var.get('JSON').callprop('stringify', var.get("this").get('sourcemap'), var.get("null"), var.get('space'))
        PyJs_anonymous_3252_._set_name('anonymous')
        var.get('Converter').get('prototype').put('toJSON', PyJs_anonymous_3252_)
        @Js
        def PyJs_anonymous_3253_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['json'])
            var.put('json', var.get("this").callprop('toJSON'))
            return var.get('Buffer').create(var.get('json')).callprop('toString', Js('base64'))
        PyJs_anonymous_3253_._set_name('anonymous')
        var.get('Converter').get('prototype').put('toBase64', PyJs_anonymous_3253_)
        @Js
        def PyJs_anonymous_3254_(options, this, arguments, var=var):
            var = Scope({'this':this, 'options':options, 'arguments':arguments}, var)
            var.registers(['base64', 'data', 'options'])
            var.put('base64', var.get("this").callprop('toBase64'))
            var.put('data', (Js('sourceMappingURL=data:application/json;base64,')+var.get('base64')))
            return (((Js('/*# ')+var.get('data'))+Js(' */')) if (var.get('options') and var.get('options').get('multiline')) else (Js('//# ')+var.get('data')))
        PyJs_anonymous_3254_._set_name('anonymous')
        var.get('Converter').get('prototype').put('toComment', PyJs_anonymous_3254_)
        @Js
        def PyJs_anonymous_3255_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('JSON').callprop('parse', var.get("this").callprop('toJSON'))
        PyJs_anonymous_3255_._set_name('anonymous')
        var.get('Converter').get('prototype').put('toObject', PyJs_anonymous_3255_)
        @Js
        def PyJs_anonymous_3256_(key, value, this, arguments, var=var):
            var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
            var.registers(['value', 'key'])
            if var.get("this").get('sourcemap').callprop('hasOwnProperty', var.get('key')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('property %s already exists on the sourcemap, use set property instead')))
                raise PyJsTempException
            return var.get("this").callprop('setProperty', var.get('key'), var.get('value'))
        PyJs_anonymous_3256_._set_name('anonymous')
        var.get('Converter').get('prototype').put('addProperty', PyJs_anonymous_3256_)
        @Js
        def PyJs_anonymous_3257_(key, value, this, arguments, var=var):
            var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
            var.registers(['value', 'key'])
            var.get("this").get('sourcemap').put(var.get('key'), var.get('value'))
            return var.get("this")
        PyJs_anonymous_3257_._set_name('anonymous')
        var.get('Converter').get('prototype').put('setProperty', PyJs_anonymous_3257_)
        @Js
        def PyJs_anonymous_3258_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['key'])
            return var.get("this").get('sourcemap').get(var.get('key'))
        PyJs_anonymous_3258_._set_name('anonymous')
        var.get('Converter').get('prototype').put('getProperty', PyJs_anonymous_3258_)
        @Js
        def PyJs_anonymous_3259_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            return var.get('Converter').create(var.get('obj'))
        PyJs_anonymous_3259_._set_name('anonymous')
        var.get('exports').put('fromObject', PyJs_anonymous_3259_)
        @Js
        def PyJs_anonymous_3260_(json, this, arguments, var=var):
            var = Scope({'this':this, 'json':json, 'arguments':arguments}, var)
            var.registers(['json'])
            PyJs_Object_3261_ = Js({'isJSON':var.get('true')})
            return var.get('Converter').create(var.get('json'), PyJs_Object_3261_)
        PyJs_anonymous_3260_._set_name('anonymous')
        var.get('exports').put('fromJSON', PyJs_anonymous_3260_)
        @Js
        def PyJs_anonymous_3262_(base64, this, arguments, var=var):
            var = Scope({'this':this, 'base64':base64, 'arguments':arguments}, var)
            var.registers(['base64'])
            PyJs_Object_3263_ = Js({'isEncoded':var.get('true')})
            return var.get('Converter').create(var.get('base64'), PyJs_Object_3263_)
        PyJs_anonymous_3262_._set_name('anonymous')
        var.get('exports').put('fromBase64', PyJs_anonymous_3262_)
        @Js
        def PyJs_anonymous_3264_(comment, this, arguments, var=var):
            var = Scope({'comment':comment, 'this':this, 'arguments':arguments}, var)
            var.registers(['comment'])
            var.put('comment', var.get('comment').callprop('replace', JsRegExp('/^\\/\\*/g'), Js('//')).callprop('replace', JsRegExp('/\\*\\/$/g'), Js('')))
            PyJs_Object_3265_ = Js({'isEncoded':var.get('true'),'hasComment':var.get('true')})
            return var.get('Converter').create(var.get('comment'), PyJs_Object_3265_)
        PyJs_anonymous_3264_._set_name('anonymous')
        var.get('exports').put('fromComment', PyJs_anonymous_3264_)
        @Js
        def PyJs_anonymous_3266_(comment, dir, this, arguments, var=var):
            var = Scope({'comment':comment, 'this':this, 'arguments':arguments, 'dir':dir}, var)
            var.registers(['comment', 'dir'])
            PyJs_Object_3267_ = Js({'commentFileDir':var.get('dir'),'isFileComment':var.get('true'),'isJSON':var.get('true')})
            return var.get('Converter').create(var.get('comment'), PyJs_Object_3267_)
        PyJs_anonymous_3266_._set_name('anonymous')
        var.get('exports').put('fromMapFileComment', PyJs_anonymous_3266_)
        @Js
        def PyJs_anonymous_3268_(content, largeSource, this, arguments, var=var):
            var = Scope({'content':content, 'this':this, 'largeSource':largeSource, 'arguments':arguments}, var)
            var.registers(['content', 'res', 'm', 'largeSource'])
            if var.get('largeSource'):
                var.put('res', var.get('convertFromLargeSource')(var.get('content')))
                return (var.get('res') if var.get('res') else var.get("null"))
            var.put('m', var.get('content').callprop('match', var.get('commentRx')))
            var.get('commentRx').put('lastIndex', Js(0.0))
            return (var.get('exports').callprop('fromComment', var.get('m').callprop('pop')) if var.get('m') else var.get("null"))
        PyJs_anonymous_3268_._set_name('anonymous')
        var.get('exports').put('fromSource', PyJs_anonymous_3268_)
        @Js
        def PyJs_anonymous_3269_(content, dir, this, arguments, var=var):
            var = Scope({'content':content, 'this':this, 'arguments':arguments, 'dir':dir}, var)
            var.registers(['content', 'm', 'dir'])
            var.put('m', var.get('content').callprop('match', var.get('mapFileCommentRx')))
            var.get('mapFileCommentRx').put('lastIndex', Js(0.0))
            return (var.get('exports').callprop('fromMapFileComment', var.get('m').callprop('pop'), var.get('dir')) if var.get('m') else var.get("null"))
        PyJs_anonymous_3269_._set_name('anonymous')
        var.get('exports').put('fromMapFileSource', PyJs_anonymous_3269_)
        @Js
        def PyJs_anonymous_3270_(src, this, arguments, var=var):
            var = Scope({'this':this, 'src':src, 'arguments':arguments}, var)
            var.registers(['src'])
            var.get('commentRx').put('lastIndex', Js(0.0))
            return var.get('src').callprop('replace', var.get('commentRx'), Js(''))
        PyJs_anonymous_3270_._set_name('anonymous')
        var.get('exports').put('removeComments', PyJs_anonymous_3270_)
        @Js
        def PyJs_anonymous_3271_(src, this, arguments, var=var):
            var = Scope({'this':this, 'src':src, 'arguments':arguments}, var)
            var.registers(['src'])
            var.get('mapFileCommentRx').put('lastIndex', Js(0.0))
            return var.get('src').callprop('replace', var.get('mapFileCommentRx'), Js(''))
        PyJs_anonymous_3271_._set_name('anonymous')
        var.get('exports').put('removeMapFileComments', PyJs_anonymous_3271_)
        @Js
        def PyJs_anonymous_3272_(file, options, this, arguments, var=var):
            var = Scope({'this':this, 'options':options, 'file':file, 'arguments':arguments}, var)
            var.registers(['data', 'options', 'file'])
            var.put('data', (Js('sourceMappingURL=')+var.get('file')))
            return (((Js('/*# ')+var.get('data'))+Js(' */')) if (var.get('options') and var.get('options').get('multiline')) else (Js('//# ')+var.get('data')))
        PyJs_anonymous_3272_._set_name('anonymous')
        var.get('exports').put('generateMapFileComment', PyJs_anonymous_3272_)
        @Js
        def PyJs_getCommentRegex_3274_(this, arguments, var=var):
            var = Scope({'this':this, 'getCommentRegex':PyJs_getCommentRegex_3274_, 'arguments':arguments}, var)
            var.registers([])
            var.get('commentRx').put('lastIndex', Js(0.0))
            return var.get('commentRx')
        PyJs_getCommentRegex_3274_._set_name('getCommentRegex')
        PyJs_Object_3273_ = Js({'get':PyJs_getCommentRegex_3274_})
        var.get('Object').callprop('defineProperty', var.get('exports'), Js('commentRegex'), PyJs_Object_3273_)
        @Js
        def PyJs_getMapFileCommentRegex_3276_(this, arguments, var=var):
            var = Scope({'this':this, 'getMapFileCommentRegex':PyJs_getMapFileCommentRegex_3276_, 'arguments':arguments}, var)
            var.registers([])
            var.get('mapFileCommentRx').put('lastIndex', Js(0.0))
            return var.get('mapFileCommentRx')
        PyJs_getMapFileCommentRegex_3276_._set_name('getMapFileCommentRegex')
        PyJs_Object_3275_ = Js({'get':PyJs_getMapFileCommentRegex_3276_})
        var.get('Object').callprop('defineProperty', var.get('exports'), Js('mapFileCommentRegex'), PyJs_Object_3275_)
    PyJs_anonymous_3250_._set_name('anonymous')
    PyJs_anonymous_3250_.callprop('call', var.get("this"), var.get('require')(Js('buffer')).get('Buffer'))
PyJs_anonymous_3249_._set_name('anonymous')
PyJs_Object_3277_ = Js({'buffer':Js(525.0),'fs':Js(523.0),'path':Js(530.0)})
@Js
def PyJs_anonymous_3278_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['load', 'exports', 'log', 'formatArgs', 'require', 'module', 'localstorage', 'useColors', 'save'])
    @Js
    def PyJsHoisted_load_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        pass
        try:
            var.put('r', var.get('exports').get('storage').get('debug'))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_27913289 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_27913289 is not None:
                    var.own['e'] = PyJsHolder_65_27913289
                else:
                    del var.own['e']
                del PyJsHolder_65_27913289
        return var.get('r')
    PyJsHoisted_load_.__name__ = 'load'
    var.put('load', PyJsHoisted_load_)
    @Js
    def PyJsHoisted_log_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return ((PyJsStrictEq(Js('object'),var.get('console',throw=False).typeof()) and var.get('console').get('log')) and var.get('Function').get('prototype').get('apply').callprop('call', var.get('console').get('log'), var.get('console'), var.get('arguments')))
    PyJsHoisted_log_.__name__ = 'log'
    var.put('log', PyJsHoisted_log_)
    @Js
    def PyJsHoisted_formatArgs_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['useColors', 'index', 'c', 'args', 'lastC'])
        var.put('args', var.get('arguments'))
        var.put('useColors', var.get("this").get('useColors'))
        var.get('args').put('0', (((((((Js('%c') if var.get('useColors') else Js(''))+var.get("this").get('namespace'))+(Js(' %c') if var.get('useColors') else Js(' ')))+var.get('args').get('0'))+(Js('%c ') if var.get('useColors') else Js(' ')))+Js('+'))+var.get('exports').callprop('humanize', var.get("this").get('diff'))))
        if var.get('useColors').neg():
            return var.get('args')
        var.put('c', (Js('color: ')+var.get("this").get('color')))
        var.put('args', Js([var.get('args').get('0'), var.get('c'), Js('color: inherit')]).callprop('concat', var.get('Array').get('prototype').get('slice').callprop('call', var.get('args'), Js(1.0))))
        var.put('index', Js(0.0))
        var.put('lastC', Js(0.0))
        @Js
        def PyJs_anonymous_3281_(match, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'match':match}, var)
            var.registers(['match'])
            if PyJsStrictEq(Js('%%'),var.get('match')):
                return var.get('undefined')
            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(Js('%c'),var.get('match')):
                var.put('lastC', var.get('index'))
        PyJs_anonymous_3281_._set_name('anonymous')
        var.get('args').get('0').callprop('replace', JsRegExp('/%[a-z%]/g'), PyJs_anonymous_3281_)
        var.get('args').callprop('splice', var.get('lastC'), Js(0.0), var.get('c'))
        return var.get('args')
    PyJsHoisted_formatArgs_.__name__ = 'formatArgs'
    var.put('formatArgs', PyJsHoisted_formatArgs_)
    @Js
    def PyJsHoisted_localstorage_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        try:
            return var.get('window').get('localStorage')
        except PyJsException as PyJsTempException:
            PyJsHolder_65_8009014 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_8009014 is not None:
                    var.own['e'] = PyJsHolder_65_8009014
                else:
                    del var.own['e']
                del PyJsHolder_65_8009014
    PyJsHoisted_localstorage_.__name__ = 'localstorage'
    var.put('localstorage', PyJsHoisted_localstorage_)
    @Js
    def PyJsHoisted_useColors_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        def PyJs_LONG_3279_(var=var):
            return ((var.get('document').get('documentElement').get('style').contains(Js('WebkitAppearance')) or (var.get('window').get('console') and (var.get('console').get('firebug') or (var.get('console').get('exception') and var.get('console').get('table'))))) or (var.get('navigator').get('userAgent').callprop('toLowerCase').callprop('match', JsRegExp('/firefox\\/(\\d+)/')) and (var.get('parseInt')(var.get('RegExp').get('$1'), Js(10.0))>=Js(31.0))))
        return PyJs_LONG_3279_()
    PyJsHoisted_useColors_.__name__ = 'useColors'
    var.put('useColors', PyJsHoisted_useColors_)
    @Js
    def PyJsHoisted_save_(namespaces, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'namespaces':namespaces}, var)
        var.registers(['namespaces'])
        try:
            if (var.get("null")==var.get('namespaces')):
                var.get('exports').get('storage').callprop('removeItem', Js('debug'))
            else:
                var.get('exports').get('storage').put('debug', var.get('namespaces'))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_85910939 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_85910939 is not None:
                    var.own['e'] = PyJsHolder_65_85910939
                else:
                    del var.own['e']
                del PyJsHolder_65_85910939
    PyJsHoisted_save_.__name__ = 'save'
    var.put('save', PyJsHoisted_save_)
    var.put('exports', var.get('module').put('exports', var.get('require')(Js('./debug'))))
    var.get('exports').put('log', var.get('log'))
    var.get('exports').put('formatArgs', var.get('formatArgs'))
    var.get('exports').put('save', var.get('save'))
    var.get('exports').put('load', var.get('load'))
    var.get('exports').put('useColors', var.get('useColors'))
    var.get('exports').put('storage', (var.get('chrome').get('storage').get('local') if ((Js('undefined')!=var.get('chrome',throw=False).typeof()) and (Js('undefined')!=var.get('chrome').get('storage').typeof())) else var.get('localstorage')()))
    var.get('exports').put('colors', Js([Js('lightseagreen'), Js('forestgreen'), Js('goldenrod'), Js('dodgerblue'), Js('darkorchid'), Js('crimson')]))
    pass
    @Js
    def PyJs_anonymous_3280_(v, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'v':v}, var)
        var.registers(['v'])
        return var.get('JSON').callprop('stringify', var.get('v'))
    PyJs_anonymous_3280_._set_name('anonymous')
    var.get('exports').get('formatters').put('j', PyJs_anonymous_3280_)
    pass
    pass
    pass
    pass
    var.get('exports').callprop('enable', var.get('load')())
    pass
PyJs_anonymous_3278_._set_name('anonymous')
PyJs_Object_3282_ = Js({'./debug':Js(269.0)})
@Js
def PyJs_anonymous_3283_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'enable', 'require', 'enabled', 'selectColor', 'coerce', 'disable', 'module', 'debug', 'prevColor', 'prevTime'])
    @Js
    def PyJsHoisted_enable_(namespaces, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'namespaces':namespaces}, var)
        var.registers(['i', 'namespaces', 'split', 'len'])
        var.get('exports').callprop('save', var.get('namespaces'))
        var.put('split', (var.get('namespaces') or Js('')).callprop('split', JsRegExp('/[\\s,]+/')))
        var.put('len', var.get('split').get('length'))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('len')):
            try:
                if var.get('split').get(var.get('i')).neg():
                    continue
                var.put('namespaces', var.get('split').get(var.get('i')).callprop('replace', JsRegExp('/\\*/g'), Js('.*?')))
                if PyJsStrictEq(var.get('namespaces').get('0'),Js('-')):
                    var.get('exports').get('skips').callprop('push', var.get('RegExp').create(((Js('^')+var.get('namespaces').callprop('substr', Js(1.0)))+Js('$'))))
                else:
                    var.get('exports').get('names').callprop('push', var.get('RegExp').create(((Js('^')+var.get('namespaces'))+Js('$'))))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJsHoisted_enable_.__name__ = 'enable'
    var.put('enable', PyJsHoisted_enable_)
    @Js
    def PyJsHoisted_enabled_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['i', 'name', 'len'])
        pass
        #for JS loop
        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('exports').get('skips').get('length')))
        while (var.get('i')<var.get('len')):
            try:
                if var.get('exports').get('skips').get(var.get('i')).callprop('test', var.get('name')):
                    return Js(False)
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        #for JS loop
        PyJsComma(var.put('i', Js(0.0)),var.put('len', var.get('exports').get('names').get('length')))
        while (var.get('i')<var.get('len')):
            try:
                if var.get('exports').get('names').get(var.get('i')).callprop('test', var.get('name')):
                    return var.get('true')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return Js(False)
    PyJsHoisted_enabled_.__name__ = 'enabled'
    var.put('enabled', PyJsHoisted_enabled_)
    @Js
    def PyJsHoisted_selectColor_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return var.get('exports').get('colors').get(((var.put('prevColor',Js(var.get('prevColor').to_number())+Js(1))-Js(1))%var.get('exports').get('colors').get('length')))
    PyJsHoisted_selectColor_.__name__ = 'selectColor'
    var.put('selectColor', PyJsHoisted_selectColor_)
    @Js
    def PyJsHoisted_coerce_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        if var.get('val').instanceof(var.get('Error')):
            return (var.get('val').get('stack') or var.get('val').get('message'))
        return var.get('val')
    PyJsHoisted_coerce_.__name__ = 'coerce'
    var.put('coerce', PyJsHoisted_coerce_)
    @Js
    def PyJsHoisted_disable_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get('exports').callprop('enable', Js(''))
    PyJsHoisted_disable_.__name__ = 'disable'
    var.put('disable', PyJsHoisted_disable_)
    @Js
    def PyJsHoisted_debug_(namespace, this, arguments, var=var):
        var = Scope({'this':this, 'namespace':namespace, 'arguments':arguments}, var)
        var.registers(['disabled', 'namespace', 'enabled', 'fn'])
        @Js
        def PyJsHoisted_disabled_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_disabled_.__name__ = 'disabled'
        var.put('disabled', PyJsHoisted_disabled_)
        @Js
        def PyJsHoisted_enabled_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'curr', 'self', 'args', 'ms', 'logFn'])
            var.put('self', var.get('enabled'))
            var.put('curr', (+var.get('Date').create()))
            var.put('ms', (var.get('curr')-(var.get('prevTime') or var.get('curr'))))
            var.get('self').put('diff', var.get('ms'))
            var.get('self').put('prev', var.get('prevTime'))
            var.get('self').put('curr', var.get('curr'))
            var.put('prevTime', var.get('curr'))
            if (var.get("null")==var.get('self').get('useColors')):
                var.get('self').put('useColors', var.get('exports').callprop('useColors'))
            if ((var.get("null")==var.get('self').get('color')) and var.get('self').get('useColors')):
                var.get('self').put('color', var.get('selectColor')())
            var.put('args', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments')))
            var.get('args').put('0', var.get('exports').callprop('coerce', var.get('args').get('0')))
            if PyJsStrictNeq(Js('string'),var.get('args').get('0').typeof()):
                var.put('args', Js([Js('%o')]).callprop('concat', var.get('args')))
            var.put('index', Js(0.0))
            @Js
            def PyJs_anonymous_3285_(match, format, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'match':match, 'format':format}, var)
                var.registers(['formatter', 'match', 'val', 'format'])
                if PyJsStrictEq(var.get('match'),Js('%%')):
                    return var.get('match')
                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                var.put('formatter', var.get('exports').get('formatters').get(var.get('format')))
                if PyJsStrictEq(Js('function'),var.get('formatter',throw=False).typeof()):
                    var.put('val', var.get('args').get(var.get('index')))
                    var.put('match', var.get('formatter').callprop('call', var.get('self'), var.get('val')))
                    var.get('args').callprop('splice', var.get('index'), Js(1.0))
                    (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1))
                return var.get('match')
            PyJs_anonymous_3285_._set_name('anonymous')
            var.get('args').put('0', var.get('args').get('0').callprop('replace', JsRegExp('/%([a-z%])/g'), PyJs_anonymous_3285_))
            if PyJsStrictEq(Js('function'),var.get('exports').get('formatArgs').typeof()):
                var.put('args', var.get('exports').get('formatArgs').callprop('apply', var.get('self'), var.get('args')))
            var.put('logFn', ((var.get('enabled').get('log') or var.get('exports').get('log')) or var.get('console').get('log').callprop('bind', var.get('console'))))
            var.get('logFn').callprop('apply', var.get('self'), var.get('args'))
        PyJsHoisted_enabled_.__name__ = 'enabled'
        var.put('enabled', PyJsHoisted_enabled_)
        pass
        var.get('disabled').put('enabled', Js(False))
        pass
        var.get('enabled').put('enabled', var.get('true'))
        var.put('fn', (var.get('enabled') if var.get('exports').callprop('enabled', var.get('namespace')) else var.get('disabled')))
        var.get('fn').put('namespace', var.get('namespace'))
        return var.get('fn')
    PyJsHoisted_debug_.__name__ = 'debug'
    var.put('debug', PyJsHoisted_debug_)
    var.put('exports', var.get('module').put('exports', var.get('debug')))
    var.get('exports').put('coerce', var.get('coerce'))
    var.get('exports').put('disable', var.get('disable'))
    var.get('exports').put('enable', var.get('enable'))
    var.get('exports').put('enabled', var.get('enabled'))
    var.get('exports').put('humanize', var.get('require')(Js('ms')))
    var.get('exports').put('names', Js([]))
    var.get('exports').put('skips', Js([]))
    PyJs_Object_3284_ = Js({})
    var.get('exports').put('formatters', PyJs_Object_3284_)
    var.put('prevColor', Js(0.0))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
PyJs_anonymous_3283_._set_name('anonymous')
PyJs_Object_3286_ = Js({'ms':Js(497.0)})
@Js
def PyJs_anonymous_3287_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3288_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['load', 'tty', 'log', 'stream', 'formatArgs', 'inspect', 'util', 'process', 'createWritableStdioStream', 'fd', 'useColors', 'save'])
        @Js
        def PyJsHoisted_load_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('process').get('env').get('DEBUG')
        PyJsHoisted_load_.__name__ = 'load'
        var.put('load', PyJsHoisted_load_)
        @Js
        def PyJsHoisted_log_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('stream').callprop('write', (var.get('util').get('format').callprop('apply', var.get("this"), var.get('arguments'))+Js('\n')))
        PyJsHoisted_log_.__name__ = 'log'
        var.put('log', PyJsHoisted_log_)
        @Js
        def PyJsHoisted_formatArgs_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['useColors', 'c', 'args', 'name'])
            var.put('args', var.get('arguments'))
            var.put('useColors', var.get("this").get('useColors'))
            var.put('name', var.get("this").get('namespace'))
            if var.get('useColors'):
                var.put('c', var.get("this").get('color'))
                var.get('args').put('0', ((((((((((((Js('  \x1b[3')+var.get('c'))+Js(';1m'))+var.get('name'))+Js(' '))+Js('\x1b[0m'))+var.get('args').get('0'))+Js('\x1b[3'))+var.get('c'))+Js('m'))+Js(' +'))+var.get('exports').callprop('humanize', var.get("this").get('diff')))+Js('\x1b[0m')))
            else:
                var.get('args').put('0', ((((var.get('Date').create().callprop('toUTCString')+Js(' '))+var.get('name'))+Js(' '))+var.get('args').get('0')))
            return var.get('args')
        PyJsHoisted_formatArgs_.__name__ = 'formatArgs'
        var.put('formatArgs', PyJsHoisted_formatArgs_)
        @Js
        def PyJsHoisted_createWritableStdioStream_(fd, this, arguments, var=var):
            var = Scope({'this':this, 'fd':fd, 'arguments':arguments}, var)
            var.registers(['tty_wrap', 'net', 'fs', 'fd', 'stream'])
            pass
            var.put('tty_wrap', var.get('process').callprop('binding', Js('tty_wrap')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('tty_wrap').callprop('guessHandleType', var.get('fd')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('TTY')):
                    SWITCHED = True
                    var.put('stream', var.get('tty').get('WriteStream').create(var.get('fd')))
                    var.get('stream').put('_type', Js('tty'))
                    if (var.get('stream').get('_handle') and var.get('stream').get('_handle').get('unref')):
                        var.get('stream').get('_handle').callprop('unref')
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('FILE')):
                    SWITCHED = True
                    var.put('fs', var.get('require')(Js('fs')))
                    PyJs_Object_3293_ = Js({'autoClose':Js(False)})
                    var.put('stream', var.get('fs').get('SyncWriteStream').create(var.get('fd'), PyJs_Object_3293_))
                    var.get('stream').put('_type', Js('fs'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('PIPE')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('TCP')):
                    SWITCHED = True
                    var.put('net', var.get('require')(Js('net')))
                    PyJs_Object_3294_ = Js({'fd':var.get('fd'),'readable':Js(False),'writable':var.get('true')})
                    var.put('stream', var.get('net').get('Socket').create(PyJs_Object_3294_))
                    var.get('stream').put('readable', Js(False))
                    var.get('stream').put('read', var.get("null"))
                    var.get('stream').put('_type', Js('pipe'))
                    if (var.get('stream').get('_handle') and var.get('stream').get('_handle').get('unref')):
                        var.get('stream').get('_handle').callprop('unref')
                    break
                if True:
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Implement me. Unknown stream file type!')))
                    raise PyJsTempException
                SWITCHED = True
                break
            var.get('stream').put('fd', var.get('fd'))
            var.get('stream').put('_isStdio', var.get('true'))
            return var.get('stream')
        PyJsHoisted_createWritableStdioStream_.__name__ = 'createWritableStdioStream'
        var.put('createWritableStdioStream', PyJsHoisted_createWritableStdioStream_)
        @Js
        def PyJsHoisted_useColors_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['debugColors'])
            var.put('debugColors', (var.get('process').get('env').get('DEBUG_COLORS') or Js('')).callprop('trim').callprop('toLowerCase'))
            if PyJsStrictEq(Js(0.0),var.get('debugColors').get('length')):
                return var.get('tty').callprop('isatty', var.get('fd'))
            else:
                return (((PyJsStrictNeq(Js('0'),var.get('debugColors')) and PyJsStrictNeq(Js('no'),var.get('debugColors'))) and PyJsStrictNeq(Js('false'),var.get('debugColors'))) and PyJsStrictNeq(Js('disabled'),var.get('debugColors')))
        PyJsHoisted_useColors_.__name__ = 'useColors'
        var.put('useColors', PyJsHoisted_useColors_)
        @Js
        def PyJsHoisted_save_(namespaces, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'namespaces':namespaces}, var)
            var.registers(['namespaces'])
            if (var.get("null")==var.get('namespaces')):
                var.get('process').get('env').delete('DEBUG')
            else:
                var.get('process').get('env').put('DEBUG', var.get('namespaces'))
        PyJsHoisted_save_.__name__ = 'save'
        var.put('save', PyJsHoisted_save_)
        var.put('tty', var.get('require')(Js('tty')))
        var.put('util', var.get('require')(Js('util')))
        var.put('exports', var.get('module').put('exports', var.get('require')(Js('./debug'))))
        var.get('exports').put('log', var.get('log'))
        var.get('exports').put('formatArgs', var.get('formatArgs'))
        var.get('exports').put('save', var.get('save'))
        var.get('exports').put('load', var.get('load'))
        var.get('exports').put('useColors', var.get('useColors'))
        var.get('exports').put('colors', Js([Js(6.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(1.0)]))
        var.put('fd', (var.get('parseInt')(var.get('process').get('env').get('DEBUG_FD'), Js(10.0)) or Js(2.0)))
        var.put('stream', (var.get('process').get('stdout') if PyJsStrictEq(Js(1.0),var.get('fd')) else (var.get('process').get('stderr') if PyJsStrictEq(Js(2.0),var.get('fd')) else var.get('createWritableStdioStream')(var.get('fd')))))
        pass
        @Js
        def PyJs_anonymous_3289_(v, colors, this, arguments, var=var):
            var = Scope({'this':this, 'colors':colors, 'arguments':arguments, 'v':v}, var)
            var.registers(['colors', 'v'])
            return var.get('util').callprop('inspect', var.get('v'), PyJsComma(Js(0.0), Js(None)), PyJsComma(Js(0.0), Js(None)), var.get('colors'))
        PyJs_anonymous_3289_._set_name('anonymous')
        @Js
        def PyJs_anonymous_3290_(v, colors, this, arguments, var=var):
            var = Scope({'this':this, 'colors':colors, 'arguments':arguments, 'v':v}, var)
            var.registers(['colors', 'v'])
            PyJs_Object_3291_ = Js({'colors':var.get('colors')})
            return var.get('util').callprop('inspect', var.get('v'), PyJs_Object_3291_)
        PyJs_anonymous_3290_._set_name('anonymous')
        var.put('inspect', (PyJs_anonymous_3289_ if PyJsStrictEq(Js(4.0),var.get('util').get('inspect').get('length')) else PyJs_anonymous_3290_))
        @Js
        def PyJs_anonymous_3292_(v, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'v':v}, var)
            var.registers(['v'])
            return var.get('inspect')(var.get('v'), var.get("this").get('useColors')).callprop('replace', JsRegExp('/\\s*\\n\\s*/g'), Js(' '))
        PyJs_anonymous_3292_._set_name('anonymous')
        var.get('exports').get('formatters').put('o', PyJs_anonymous_3292_)
        pass
        pass
        pass
        pass
        pass
        var.get('exports').callprop('enable', var.get('load')())
    PyJs_anonymous_3288_._set_name('anonymous')
    PyJs_anonymous_3288_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_3287_._set_name('anonymous')
PyJs_Object_3295_ = Js({'./debug':Js(269.0),'_process':Js(531.0),'fs':Js(523.0),'net':Js(523.0),'tty':Js(532.0),'util':Js(534.0)})
@Js
def PyJs_anonymous_3296_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'INDENT_RE', 'require', 'module', 'repeating', 'getMostUsed'])
    @Js
    def PyJsHoisted_getMostUsed_(indents, this, arguments, var=var):
        var = Scope({'this':this, 'indents':indents, 'arguments':arguments}, var)
        var.registers(['indent', 'maxWeight', 'n', 'indents', 'u', 'result', 'w', 'maxUsed'])
        var.put('result', Js(0.0))
        var.put('maxUsed', Js(0.0))
        var.put('maxWeight', Js(0.0))
        for PyJsTemp in var.get('indents'):
            var.put('n', PyJsTemp)
            var.put('indent', var.get('indents').get(var.get('n')))
            var.put('u', var.get('indent').get('0'))
            var.put('w', var.get('indent').get('1'))
            if ((var.get('u')>var.get('maxUsed')) or (PyJsStrictEq(var.get('u'),var.get('maxUsed')) and (var.get('w')>var.get('maxWeight')))):
                var.put('maxUsed', var.get('u'))
                var.put('maxWeight', var.get('w'))
                var.put('result', var.get('Number')(var.get('n')))
        return var.get('result')
    PyJsHoisted_getMostUsed_.__name__ = 'getMostUsed'
    var.put('getMostUsed', PyJsHoisted_getMostUsed_)
    Js('use strict')
    var.put('repeating', var.get('require')(Js('repeating')))
    var.put('INDENT_RE', JsRegExp('/^(?:( )+|\\t+)/'))
    pass
    @Js
    def PyJs_anonymous_3297_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['actual', 'tabs', 'amount', 'isIndent', 'current', 'indents', 'spaces', 'str', 'prev', 'type'])
        if PyJsStrictNeq(var.get('str',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Expected a string')))
            raise PyJsTempException
        var.put('tabs', Js(0.0))
        var.put('spaces', Js(0.0))
        var.put('prev', Js(0.0))
        PyJs_Object_3298_ = Js({})
        var.put('indents', PyJs_Object_3298_)
        pass
        pass
        @Js
        def PyJs_anonymous_3299_(line, this, arguments, var=var):
            var = Scope({'this':this, 'line':line, 'arguments':arguments}, var)
            var.registers(['matches', 'diff', 'line', 'indent'])
            if var.get('line').neg():
                return var.get('undefined')
            pass
            var.put('matches', var.get('line').callprop('match', var.get('INDENT_RE')))
            if var.get('matches').neg():
                var.put('indent', Js(0.0))
            else:
                var.put('indent', var.get('matches').get('0').get('length'))
                if var.get('matches').get('1'):
                    (var.put('spaces',Js(var.get('spaces').to_number())+Js(1))-Js(1))
                else:
                    (var.put('tabs',Js(var.get('tabs').to_number())+Js(1))-Js(1))
            var.put('diff', (var.get('indent')-var.get('prev')))
            var.put('prev', var.get('indent'))
            if var.get('diff'):
                var.put('isIndent', (var.get('diff')>Js(0.0)))
                var.put('current', var.get('indents').get((var.get('diff') if var.get('isIndent') else (-var.get('diff')))))
                if var.get('current'):
                    (var.get('current').put('0',Js(var.get('current').get('0').to_number())+Js(1))-Js(1))
                else:
                    var.put('current', var.get('indents').put(var.get('diff'), Js([Js(1.0), Js(0.0)])))
            else:
                if var.get('current'):
                    var.get('current').put('1', var.get('Number')(var.get('isIndent')), '+')
        PyJs_anonymous_3299_._set_name('anonymous')
        var.get('str').callprop('split', JsRegExp('/\\n/g')).callprop('forEach', PyJs_anonymous_3299_)
        var.put('amount', var.get('getMostUsed')(var.get('indents')))
        pass
        pass
        if var.get('amount').neg():
            var.put('type', var.get("null"))
            var.put('actual', Js(''))
        else:
            if (var.get('spaces')>=var.get('tabs')):
                var.put('type', Js('space'))
                var.put('actual', var.get('repeating')(Js(' '), var.get('amount')))
            else:
                var.put('type', Js('tab'))
                var.put('actual', var.get('repeating')(Js('\t'), var.get('amount')))
        PyJs_Object_3300_ = Js({'amount':var.get('amount'),'type':var.get('type'),'indent':var.get('actual')})
        return PyJs_Object_3300_
    PyJs_anonymous_3297_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_3297_)
PyJs_anonymous_3296_._set_name('anonymous')
PyJs_Object_3301_ = Js({'repeating':Js(507.0)})
@Js
def PyJs_anonymous_3302_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['matchOperatorsRe', 'require', 'exports', 'module'])
    Js('use strict')
    var.put('matchOperatorsRe', JsRegExp('/[|\\\\{}()[\\]^$+*?.]/g'))
    @Js
    def PyJs_anonymous_3303_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        if PyJsStrictNeq(var.get('str',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Expected a string')))
            raise PyJsTempException
        return var.get('str').callprop('replace', var.get('matchOperatorsRe'), Js('\\$&'))
    PyJs_anonymous_3303_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_3303_)
PyJs_anonymous_3302_._set_name('anonymous')
PyJs_Object_3304_ = Js({})
@Js
def PyJs_anonymous_3305_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3306_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['isIterationStatement', 'isProblematicIfStatement', 'trailingStatement', 'isExpression', 'isSourceElement', 'isStatement'])
        @Js
        def PyJsHoisted_isIterationStatement_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            if (var.get('node')==var.get("null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get('node').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('DoWhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WhileStatement')):
                    SWITCHED = True
                    return var.get('true')
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isIterationStatement_.__name__ = 'isIterationStatement'
        var.put('isIterationStatement', PyJsHoisted_isIterationStatement_)
        @Js
        def PyJsHoisted_isProblematicIfStatement_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['current', 'node'])
            pass
            if PyJsStrictNeq(var.get('node').get('type'),Js('IfStatement')):
                return Js(False)
            if (var.get('node').get('alternate')==var.get("null")):
                return Js(False)
            var.put('current', var.get('node').get('consequent'))
            while 1:
                if PyJsStrictEq(var.get('current').get('type'),Js('IfStatement')):
                    if (var.get('current').get('alternate')==var.get("null")):
                        return var.get('true')
                var.put('current', var.get('trailingStatement')(var.get('current')))
                if not var.get('current'):
                    break
            return Js(False)
        PyJsHoisted_isProblematicIfStatement_.__name__ = 'isProblematicIfStatement'
        var.put('isProblematicIfStatement', PyJsHoisted_isProblematicIfStatement_)
        @Js
        def PyJsHoisted_trailingStatement_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('node').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('IfStatement')):
                    SWITCHED = True
                    if (var.get('node').get('alternate')!=var.get("null")):
                        return var.get('node').get('alternate')
                    return var.get('node').get('consequent')
                if SWITCHED or PyJsStrictEq(CONDITION, Js('LabeledStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WithStatement')):
                    SWITCHED = True
                    return var.get('node').get('body')
                SWITCHED = True
                break
            return var.get("null")
        PyJsHoisted_trailingStatement_.__name__ = 'trailingStatement'
        var.put('trailingStatement', PyJsHoisted_trailingStatement_)
        @Js
        def PyJsHoisted_isExpression_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            if (var.get('node')==var.get("null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get('node').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ArrayExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('AssignmentExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('BinaryExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('CallExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ConditionalExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('FunctionExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('Identifier')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('Literal')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('LogicalExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('MemberExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('NewExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ObjectExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('SequenceExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ThisExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('UnaryExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('UpdateExpression')):
                    SWITCHED = True
                    return var.get('true')
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isExpression_.__name__ = 'isExpression'
        var.put('isExpression', PyJsHoisted_isExpression_)
        @Js
        def PyJsHoisted_isSourceElement_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            return (var.get('isStatement')(var.get('node')) or ((var.get('node')!=var.get("null")) and PyJsStrictEq(var.get('node').get('type'),Js('FunctionDeclaration'))))
        PyJsHoisted_isSourceElement_.__name__ = 'isSourceElement'
        var.put('isSourceElement', PyJsHoisted_isSourceElement_)
        @Js
        def PyJsHoisted_isStatement_(node, this, arguments, var=var):
            var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
            var.registers(['node'])
            if (var.get('node')==var.get("null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get('node').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('BlockStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('BreakStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ContinueStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('DebuggerStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('DoWhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('EmptyStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ExpressionStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('IfStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('LabeledStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ReturnStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('SwitchStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ThrowStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('TryStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('VariableDeclaration')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('WithStatement')):
                    SWITCHED = True
                    return var.get('true')
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isStatement_.__name__ = 'isStatement'
        var.put('isStatement', PyJsHoisted_isStatement_)
        Js('use strict')
        pass
        pass
        pass
        pass
        pass
        pass
        PyJs_Object_3307_ = Js({'isExpression':var.get('isExpression'),'isStatement':var.get('isStatement'),'isIterationStatement':var.get('isIterationStatement'),'isSourceElement':var.get('isSourceElement'),'isProblematicIfStatement':var.get('isProblematicIfStatement'),'trailingStatement':var.get('trailingStatement')})
        var.get('module').put('exports', PyJs_Object_3307_)
    PyJs_anonymous_3306_._set_name('anonymous')
    PyJs_anonymous_3306_()
PyJs_anonymous_3305_._set_name('anonymous')
PyJs_Object_3308_ = Js({})
@Js
def PyJs_anonymous_3309_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3310_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['isIdentifierPartES6', 'NON_ASCII_WHITESPACES', 'isIdentifierStartES5', 'fromCodePoint', 'IDENTIFIER_START', 'ES6Regex', 'ES5Regex', 'isHexDigit', 'ch', 'IDENTIFIER_PART', 'isLineTerminator', 'isDecimalDigit', 'isIdentifierStartES6', 'isIdentifierPartES5', 'isOctalDigit', 'isWhiteSpace'])
        @Js
        def PyJsHoisted_isIdentifierPartES6_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (var.get('IDENTIFIER_PART').get(var.get('ch')) if (var.get('ch')<Js(128)) else var.get('ES6Regex').get('NonAsciiIdentifierPart').callprop('test', var.get('fromCodePoint')(var.get('ch'))))
        PyJsHoisted_isIdentifierPartES6_.__name__ = 'isIdentifierPartES6'
        var.put('isIdentifierPartES6', PyJsHoisted_isIdentifierPartES6_)
        @Js
        def PyJsHoisted_fromCodePoint_(cp, this, arguments, var=var):
            var = Scope({'this':this, 'cp':cp, 'arguments':arguments}, var)
            var.registers(['cp', 'cu2', 'cu1'])
            if (var.get('cp')<=Js(65535)):
                return var.get('String').callprop('fromCharCode', var.get('cp'))
            var.put('cu1', var.get('String').callprop('fromCharCode', (var.get('Math').callprop('floor', ((var.get('cp')-Js(65536))/Js(1024)))+Js(55296))))
            var.put('cu2', var.get('String').callprop('fromCharCode', (((var.get('cp')-Js(65536))%Js(1024))+Js(56320))))
            return (var.get('cu1')+var.get('cu2'))
        PyJsHoisted_fromCodePoint_.__name__ = 'fromCodePoint'
        var.put('fromCodePoint', PyJsHoisted_fromCodePoint_)
        @Js
        def PyJsHoisted_isHexDigit_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return ((((Js(48)<=var.get('ch')) and (var.get('ch')<=Js(57))) or ((Js(97)<=var.get('ch')) and (var.get('ch')<=Js(102)))) or ((Js(65)<=var.get('ch')) and (var.get('ch')<=Js(70))))
        PyJsHoisted_isHexDigit_.__name__ = 'isHexDigit'
        var.put('isHexDigit', PyJsHoisted_isHexDigit_)
        @Js
        def PyJsHoisted_isOctalDigit_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return ((var.get('ch')>=Js(48)) and (var.get('ch')<=Js(55)))
        PyJsHoisted_isOctalDigit_.__name__ = 'isOctalDigit'
        var.put('isOctalDigit', PyJsHoisted_isOctalDigit_)
        @Js
        def PyJsHoisted_isLineTerminator_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (((PyJsStrictEq(var.get('ch'),Js(10)) or PyJsStrictEq(var.get('ch'),Js(13))) or PyJsStrictEq(var.get('ch'),Js(8232))) or PyJsStrictEq(var.get('ch'),Js(8233)))
        PyJsHoisted_isLineTerminator_.__name__ = 'isLineTerminator'
        var.put('isLineTerminator', PyJsHoisted_isLineTerminator_)
        @Js
        def PyJsHoisted_isDecimalDigit_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return ((Js(48)<=var.get('ch')) and (var.get('ch')<=Js(57)))
        PyJsHoisted_isDecimalDigit_.__name__ = 'isDecimalDigit'
        var.put('isDecimalDigit', PyJsHoisted_isDecimalDigit_)
        @Js
        def PyJsHoisted_isIdentifierStartES6_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (var.get('IDENTIFIER_START').get(var.get('ch')) if (var.get('ch')<Js(128)) else var.get('ES6Regex').get('NonAsciiIdentifierStart').callprop('test', var.get('fromCodePoint')(var.get('ch'))))
        PyJsHoisted_isIdentifierStartES6_.__name__ = 'isIdentifierStartES6'
        var.put('isIdentifierStartES6', PyJsHoisted_isIdentifierStartES6_)
        @Js
        def PyJsHoisted_isIdentifierPartES5_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (var.get('IDENTIFIER_PART').get(var.get('ch')) if (var.get('ch')<Js(128)) else var.get('ES5Regex').get('NonAsciiIdentifierPart').callprop('test', var.get('fromCodePoint')(var.get('ch'))))
        PyJsHoisted_isIdentifierPartES5_.__name__ = 'isIdentifierPartES5'
        var.put('isIdentifierPartES5', PyJsHoisted_isIdentifierPartES5_)
        @Js
        def PyJsHoisted_isIdentifierStartES5_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (var.get('IDENTIFIER_START').get(var.get('ch')) if (var.get('ch')<Js(128)) else var.get('ES5Regex').get('NonAsciiIdentifierStart').callprop('test', var.get('fromCodePoint')(var.get('ch'))))
        PyJsHoisted_isIdentifierStartES5_.__name__ = 'isIdentifierStartES5'
        var.put('isIdentifierStartES5', PyJsHoisted_isIdentifierStartES5_)
        @Js
        def PyJsHoisted_isWhiteSpace_(ch, this, arguments, var=var):
            var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
            var.registers(['ch'])
            return (((((PyJsStrictEq(var.get('ch'),Js(32)) or PyJsStrictEq(var.get('ch'),Js(9))) or PyJsStrictEq(var.get('ch'),Js(11))) or PyJsStrictEq(var.get('ch'),Js(12))) or PyJsStrictEq(var.get('ch'),Js(160))) or ((var.get('ch')>=Js(5760)) and (var.get('NON_ASCII_WHITESPACES').callprop('indexOf', var.get('ch'))>=Js(0.0))))
        PyJsHoisted_isWhiteSpace_.__name__ = 'isWhiteSpace'
        var.put('isWhiteSpace', PyJsHoisted_isWhiteSpace_)
        Js('use strict')
        pass
        PyJs_Object_3311_ = Js({'NonAsciiIdentifierStart':JsRegExp('/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/'),'NonAsciiIdentifierPart':JsRegExp('/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/')})
        var.put('ES5Regex', PyJs_Object_3311_)
        PyJs_Object_3312_ = Js({'NonAsciiIdentifierStart':JsRegExp('/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/'),'NonAsciiIdentifierPart':JsRegExp('/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/')})
        var.put('ES6Regex', PyJs_Object_3312_)
        pass
        pass
        pass
        var.put('NON_ASCII_WHITESPACES', Js([Js(5760), Js(6158), Js(8192), Js(8193), Js(8194), Js(8195), Js(8196), Js(8197), Js(8198), Js(8199), Js(8200), Js(8201), Js(8202), Js(8239), Js(8287), Js(12288), Js(65279)]))
        pass
        pass
        pass
        var.put('IDENTIFIER_START', var.get('Array').create(Js(128)))
        #for JS loop
        var.put('ch', Js(0.0))
        while (var.get('ch')<Js(128)):
            try:
                var.get('IDENTIFIER_START').put(var.get('ch'), (((((var.get('ch')>=Js(97)) and (var.get('ch')<=Js(122))) or ((var.get('ch')>=Js(65)) and (var.get('ch')<=Js(90)))) or PyJsStrictEq(var.get('ch'),Js(36))) or PyJsStrictEq(var.get('ch'),Js(95))))
            finally:
                    var.put('ch',Js(var.get('ch').to_number())+Js(1))
        var.put('IDENTIFIER_PART', var.get('Array').create(Js(128)))
        #for JS loop
        var.put('ch', Js(0.0))
        while (var.get('ch')<Js(128)):
            try:
                var.get('IDENTIFIER_PART').put(var.get('ch'), ((((((var.get('ch')>=Js(97)) and (var.get('ch')<=Js(122))) or ((var.get('ch')>=Js(65)) and (var.get('ch')<=Js(90)))) or ((var.get('ch')>=Js(48)) and (var.get('ch')<=Js(57)))) or PyJsStrictEq(var.get('ch'),Js(36))) or PyJsStrictEq(var.get('ch'),Js(95))))
            finally:
                    var.put('ch',Js(var.get('ch').to_number())+Js(1))
        pass
        pass
        pass
        pass
        PyJs_Object_3313_ = Js({'isDecimalDigit':var.get('isDecimalDigit'),'isHexDigit':var.get('isHexDigit'),'isOctalDigit':var.get('isOctalDigit'),'isWhiteSpace':var.get('isWhiteSpace'),'isLineTerminator':var.get('isLineTerminator'),'isIdentifierStartES5':var.get('isIdentifierStartES5'),'isIdentifierPartES5':var.get('isIdentifierPartES5'),'isIdentifierStartES6':var.get('isIdentifierStartES6'),'isIdentifierPartES6':var.get('isIdentifierPartES6')})
        var.get('module').put('exports', PyJs_Object_3313_)
    PyJs_anonymous_3310_._set_name('anonymous')
    PyJs_anonymous_3310_()
PyJs_anonymous_3309_._set_name('anonymous')
PyJs_Object_3314_ = Js({})
@Js
def PyJs_anonymous_3315_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3316_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['isKeywordES6', 'isKeywordES5', 'code', 'isIdentifierNameES6', 'decodeUtf16', 'isIdentifierNameES5', 'isIdentifierES5', 'isIdentifierES6', 'isReservedWordES5', 'isReservedWordES6', 'isRestrictedWord', 'isStrictModeReservedWordES6'])
        @Js
        def PyJsHoisted_isKeywordES6_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            if (var.get('strict') and var.get('isStrictModeReservedWordES6')(var.get('id'))):
                return var.get('true')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('id').get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get('id'),Js('if')) or PyJsStrictEq(var.get('id'),Js('in'))) or PyJsStrictEq(var.get('id'),Js('do')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (((PyJsStrictEq(var.get('id'),Js('var')) or PyJsStrictEq(var.get('id'),Js('for'))) or PyJsStrictEq(var.get('id'),Js('new'))) or PyJsStrictEq(var.get('id'),Js('try')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (((((PyJsStrictEq(var.get('id'),Js('this')) or PyJsStrictEq(var.get('id'),Js('else'))) or PyJsStrictEq(var.get('id'),Js('case'))) or PyJsStrictEq(var.get('id'),Js('void'))) or PyJsStrictEq(var.get('id'),Js('with'))) or PyJsStrictEq(var.get('id'),Js('enum')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                    SWITCHED = True
                    return (((((((PyJsStrictEq(var.get('id'),Js('while')) or PyJsStrictEq(var.get('id'),Js('break'))) or PyJsStrictEq(var.get('id'),Js('catch'))) or PyJsStrictEq(var.get('id'),Js('throw'))) or PyJsStrictEq(var.get('id'),Js('const'))) or PyJsStrictEq(var.get('id'),Js('yield'))) or PyJsStrictEq(var.get('id'),Js('class'))) or PyJsStrictEq(var.get('id'),Js('super')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                    SWITCHED = True
                    return (((((PyJsStrictEq(var.get('id'),Js('return')) or PyJsStrictEq(var.get('id'),Js('typeof'))) or PyJsStrictEq(var.get('id'),Js('delete'))) or PyJsStrictEq(var.get('id'),Js('switch'))) or PyJsStrictEq(var.get('id'),Js('export'))) or PyJsStrictEq(var.get('id'),Js('import')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get('id'),Js('default')) or PyJsStrictEq(var.get('id'),Js('finally'))) or PyJsStrictEq(var.get('id'),Js('extends')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get('id'),Js('function')) or PyJsStrictEq(var.get('id'),Js('continue'))) or PyJsStrictEq(var.get('id'),Js('debugger')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                    SWITCHED = True
                    return PyJsStrictEq(var.get('id'),Js('instanceof'))
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJsHoisted_isKeywordES6_.__name__ = 'isKeywordES6'
        var.put('isKeywordES6', PyJsHoisted_isKeywordES6_)
        @Js
        def PyJsHoisted_isKeywordES5_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            if (var.get('strict').neg() and PyJsStrictEq(var.get('id'),Js('yield'))):
                return Js(False)
            return var.get('isKeywordES6')(var.get('id'), var.get('strict'))
        PyJsHoisted_isKeywordES5_.__name__ = 'isKeywordES5'
        var.put('isKeywordES5', PyJsHoisted_isKeywordES5_)
        @Js
        def PyJsHoisted_isIdentifierNameES6_(id, this, arguments, var=var):
            var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
            var.registers(['ch', 'i', 'lowCh', 'id', 'iz', 'check'])
            pass
            if PyJsStrictEq(var.get('id').get('length'),Js(0.0)):
                return Js(False)
            var.put('check', var.get('code').get('isIdentifierStartES6'))
            #for JS loop
            PyJsComma(var.put('i', Js(0.0)),var.put('iz', var.get('id').get('length')))
            while (var.get('i')<var.get('iz')):
                try:
                    var.put('ch', var.get('id').callprop('charCodeAt', var.get('i')))
                    if ((Js(55296)<=var.get('ch')) and (var.get('ch')<=Js(56319))):
                        var.put('i',Js(var.get('i').to_number())+Js(1))
                        if (var.get('i')>=var.get('iz')):
                            return Js(False)
                        var.put('lowCh', var.get('id').callprop('charCodeAt', var.get('i')))
                        if ((Js(56320)<=var.get('lowCh')) and (var.get('lowCh')<=Js(57343))).neg():
                            return Js(False)
                        var.put('ch', var.get('decodeUtf16')(var.get('ch'), var.get('lowCh')))
                    if var.get('check')(var.get('ch')).neg():
                        return Js(False)
                    var.put('check', var.get('code').get('isIdentifierPartES6'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('true')
        PyJsHoisted_isIdentifierNameES6_.__name__ = 'isIdentifierNameES6'
        var.put('isIdentifierNameES6', PyJsHoisted_isIdentifierNameES6_)
        @Js
        def PyJsHoisted_decodeUtf16_(lead, trail, this, arguments, var=var):
            var = Scope({'this':this, 'trail':trail, 'arguments':arguments, 'lead':lead}, var)
            var.registers(['trail', 'lead'])
            return ((((var.get('lead')-Js(55296))*Js(1024))+(var.get('trail')-Js(56320)))+Js(65536))
        PyJsHoisted_decodeUtf16_.__name__ = 'decodeUtf16'
        var.put('decodeUtf16', PyJsHoisted_decodeUtf16_)
        @Js
        def PyJsHoisted_isIdentifierNameES5_(id, this, arguments, var=var):
            var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
            var.registers(['i', 'ch', 'iz', 'id'])
            pass
            if PyJsStrictEq(var.get('id').get('length'),Js(0.0)):
                return Js(False)
            var.put('ch', var.get('id').callprop('charCodeAt', Js(0.0)))
            if var.get('code').callprop('isIdentifierStartES5', var.get('ch')).neg():
                return Js(False)
            #for JS loop
            PyJsComma(var.put('i', Js(1.0)),var.put('iz', var.get('id').get('length')))
            while (var.get('i')<var.get('iz')):
                try:
                    var.put('ch', var.get('id').callprop('charCodeAt', var.get('i')))
                    if var.get('code').callprop('isIdentifierPartES5', var.get('ch')).neg():
                        return Js(False)
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('true')
        PyJsHoisted_isIdentifierNameES5_.__name__ = 'isIdentifierNameES5'
        var.put('isIdentifierNameES5', PyJsHoisted_isIdentifierNameES5_)
        @Js
        def PyJsHoisted_isIdentifierES5_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            return (var.get('isIdentifierNameES5')(var.get('id')) and var.get('isReservedWordES5')(var.get('id'), var.get('strict')).neg())
        PyJsHoisted_isIdentifierES5_.__name__ = 'isIdentifierES5'
        var.put('isIdentifierES5', PyJsHoisted_isIdentifierES5_)
        @Js
        def PyJsHoisted_isIdentifierES6_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            return (var.get('isIdentifierNameES6')(var.get('id')) and var.get('isReservedWordES6')(var.get('id'), var.get('strict')).neg())
        PyJsHoisted_isIdentifierES6_.__name__ = 'isIdentifierES6'
        var.put('isIdentifierES6', PyJsHoisted_isIdentifierES6_)
        @Js
        def PyJsHoisted_isReservedWordES5_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            return (((PyJsStrictEq(var.get('id'),Js('null')) or PyJsStrictEq(var.get('id'),Js('true'))) or PyJsStrictEq(var.get('id'),Js('false'))) or var.get('isKeywordES5')(var.get('id'), var.get('strict')))
        PyJsHoisted_isReservedWordES5_.__name__ = 'isReservedWordES5'
        var.put('isReservedWordES5', PyJsHoisted_isReservedWordES5_)
        @Js
        def PyJsHoisted_isReservedWordES6_(id, strict, this, arguments, var=var):
            var = Scope({'this':this, 'strict':strict, 'id':id, 'arguments':arguments}, var)
            var.registers(['strict', 'id'])
            return (((PyJsStrictEq(var.get('id'),Js('null')) or PyJsStrictEq(var.get('id'),Js('true'))) or PyJsStrictEq(var.get('id'),Js('false'))) or var.get('isKeywordES6')(var.get('id'), var.get('strict')))
        PyJsHoisted_isReservedWordES6_.__name__ = 'isReservedWordES6'
        var.put('isReservedWordES6', PyJsHoisted_isReservedWordES6_)
        @Js
        def PyJsHoisted_isRestrictedWord_(id, this, arguments, var=var):
            var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
            var.registers(['id'])
            return (PyJsStrictEq(var.get('id'),Js('eval')) or PyJsStrictEq(var.get('id'),Js('arguments')))
        PyJsHoisted_isRestrictedWord_.__name__ = 'isRestrictedWord'
        var.put('isRestrictedWord', PyJsHoisted_isRestrictedWord_)
        @Js
        def PyJsHoisted_isStrictModeReservedWordES6_(id, this, arguments, var=var):
            var = Scope({'this':this, 'id':id, 'arguments':arguments}, var)
            var.registers(['id'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('id'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('implements')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('interface')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('package')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('private')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('protected')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('public')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('static')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('let')):
                    SWITCHED = True
                    return var.get('true')
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJsHoisted_isStrictModeReservedWordES6_.__name__ = 'isStrictModeReservedWordES6'
        var.put('isStrictModeReservedWordES6', PyJsHoisted_isStrictModeReservedWordES6_)
        Js('use strict')
        var.put('code', var.get('require')(Js('./code')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        PyJs_Object_3317_ = Js({'isKeywordES5':var.get('isKeywordES5'),'isKeywordES6':var.get('isKeywordES6'),'isReservedWordES5':var.get('isReservedWordES5'),'isReservedWordES6':var.get('isReservedWordES6'),'isRestrictedWord':var.get('isRestrictedWord'),'isIdentifierNameES5':var.get('isIdentifierNameES5'),'isIdentifierNameES6':var.get('isIdentifierNameES6'),'isIdentifierES5':var.get('isIdentifierES5'),'isIdentifierES6':var.get('isIdentifierES6')})
        var.get('module').put('exports', PyJs_Object_3317_)
    PyJs_anonymous_3316_._set_name('anonymous')
    PyJs_anonymous_3316_()
PyJs_anonymous_3315_._set_name('anonymous')
PyJs_Object_3318_ = Js({'./code':Js(274.0)})
@Js
def PyJs_anonymous_3319_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3320_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        Js('use strict')
        var.get('exports').put('ast', var.get('require')(Js('./ast')))
        var.get('exports').put('code', var.get('require')(Js('./code')))
        var.get('exports').put('keyword', var.get('require')(Js('./keyword')))
    PyJs_anonymous_3320_._set_name('anonymous')
    PyJs_anonymous_3320_()
PyJs_anonymous_3319_._set_name('anonymous')
PyJs_Object_3321_ = Js({'./ast':Js(273.0),'./code':Js(274.0),'./keyword':Js(275.0)})
@Js
def PyJs_anonymous_3322_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_3324_ = Js({'Array':Js(False),'ArrayBuffer':Js(False),'Boolean':Js(False),'constructor':Js(False),'DataView':Js(False),'Date':Js(False),'decodeURI':Js(False),'decodeURIComponent':Js(False),'encodeURI':Js(False),'encodeURIComponent':Js(False),'Error':Js(False),'escape':Js(False),'eval':Js(False),'EvalError':Js(False),'Float32Array':Js(False),'Float64Array':Js(False),'Function':Js(False),'hasOwnProperty':Js(False),'Infinity':Js(False),'Int16Array':Js(False),'Int32Array':Js(False),'Int8Array':Js(False),'isFinite':Js(False),'isNaN':Js(False),'isPrototypeOf':Js(False),'JSON':Js(False),'Map':Js(False),'Math':Js(False),'NaN':Js(False),'Number':Js(False),'Object':Js(False),'parseFloat':Js(False),'parseInt':Js(False),'Promise':Js(False),'propertyIsEnumerable':Js(False),'Proxy':Js(False),'RangeError':Js(False),'ReferenceError':Js(False),'Reflect':Js(False),'RegExp':Js(False),'Set':Js(False),'String':Js(False),'Symbol':Js(False),'SyntaxError':Js(False),'System':Js(False),'toLocaleString':Js(False),'toString':Js(False),'TypeError':Js(False),'Uint16Array':Js(False),'Uint32Array':Js(False),'Uint8Array':Js(False),'Uint8ClampedArray':Js(False),'undefined':Js(False),'unescape':Js(False),'URIError':Js(False),'valueOf':Js(False),'WeakMap':Js(False),'WeakSet':Js(False)})
    PyJs_Object_3325_ = Js({'Array':Js(False),'Boolean':Js(False),'constructor':Js(False),'Date':Js(False),'decodeURI':Js(False),'decodeURIComponent':Js(False),'encodeURI':Js(False),'encodeURIComponent':Js(False),'Error':Js(False),'escape':Js(False),'eval':Js(False),'EvalError':Js(False),'Function':Js(False),'hasOwnProperty':Js(False),'Infinity':Js(False),'isFinite':Js(False),'isNaN':Js(False),'isPrototypeOf':Js(False),'JSON':Js(False),'Math':Js(False),'NaN':Js(False),'Number':Js(False),'Object':Js(False),'parseFloat':Js(False),'parseInt':Js(False),'propertyIsEnumerable':Js(False),'RangeError':Js(False),'ReferenceError':Js(False),'RegExp':Js(False),'String':Js(False),'SyntaxError':Js(False),'toLocaleString':Js(False),'toString':Js(False),'TypeError':Js(False),'undefined':Js(False),'unescape':Js(False),'URIError':Js(False),'valueOf':Js(False)})
    PyJs_Object_3326_ = Js({'Array':Js(False),'ArrayBuffer':Js(False),'Boolean':Js(False),'constructor':Js(False),'DataView':Js(False),'Date':Js(False),'decodeURI':Js(False),'decodeURIComponent':Js(False),'encodeURI':Js(False),'encodeURIComponent':Js(False),'Error':Js(False),'escape':Js(False),'eval':Js(False),'EvalError':Js(False),'Float32Array':Js(False),'Float64Array':Js(False),'Function':Js(False),'hasOwnProperty':Js(False),'Infinity':Js(False),'Int16Array':Js(False),'Int32Array':Js(False),'Int8Array':Js(False),'isFinite':Js(False),'isNaN':Js(False),'isPrototypeOf':Js(False),'JSON':Js(False),'Map':Js(False),'Math':Js(False),'NaN':Js(False),'Number':Js(False),'Object':Js(False),'parseFloat':Js(False),'parseInt':Js(False),'Promise':Js(False),'propertyIsEnumerable':Js(False),'Proxy':Js(False),'RangeError':Js(False),'ReferenceError':Js(False),'Reflect':Js(False),'RegExp':Js(False),'Set':Js(False),'String':Js(False),'Symbol':Js(False),'SyntaxError':Js(False),'System':Js(False),'toLocaleString':Js(False),'toString':Js(False),'TypeError':Js(False),'Uint16Array':Js(False),'Uint32Array':Js(False),'Uint8Array':Js(False),'Uint8ClampedArray':Js(False),'undefined':Js(False),'unescape':Js(False),'URIError':Js(False),'valueOf':Js(False),'WeakMap':Js(False),'WeakSet':Js(False)})
    PyJs_Object_3327_ = Js({'addEventListener':Js(False),'alert':Js(False),'AnalyserNode':Js(False),'Animation':Js(False),'AnimationEffectReadOnly':Js(False),'AnimationEffectTiming':Js(False),'AnimationEffectTimingReadOnly':Js(False),'AnimationEvent':Js(False),'AnimationPlaybackEvent':Js(False),'AnimationTimeline':Js(False),'applicationCache':Js(False),'ApplicationCache':Js(False),'ApplicationCacheErrorEvent':Js(False),'atob':Js(False),'Attr':Js(False),'Audio':Js(False),'AudioBuffer':Js(False),'AudioBufferSourceNode':Js(False),'AudioContext':Js(False),'AudioDestinationNode':Js(False),'AudioListener':Js(False),'AudioNode':Js(False),'AudioParam':Js(False),'AudioProcessingEvent':Js(False),'AutocompleteErrorEvent':Js(False),'BarProp':Js(False),'BatteryManager':Js(False),'BeforeUnloadEvent':Js(False),'BiquadFilterNode':Js(False),'Blob':Js(False),'blur':Js(False),'btoa':Js(False),'Cache':Js(False),'caches':Js(False),'CacheStorage':Js(False),'cancelAnimationFrame':Js(False),'CanvasGradient':Js(False),'CanvasPattern':Js(False),'CanvasRenderingContext2D':Js(False),'CDATASection':Js(False),'ChannelMergerNode':Js(False),'ChannelSplitterNode':Js(False),'CharacterData':Js(False),'clearInterval':Js(False),'clearTimeout':Js(False),'clientInformation':Js(False),'ClientRect':Js(False),'ClientRectList':Js(False),'ClipboardEvent':Js(False),'close':Js(False),'closed':Js(False),'CloseEvent':Js(False),'Comment':Js(False),'CompositionEvent':Js(False),'confirm':Js(False),'console':Js(False),'ConvolverNode':Js(False),'Credential':Js(False),'CredentialsContainer':Js(False),'crypto':Js(False),'Crypto':Js(False),'CryptoKey':Js(False),'CSS':Js(False),'CSSAnimation':Js(False),'CSSFontFaceRule':Js(False),'CSSImportRule':Js(False),'CSSKeyframeRule':Js(False),'CSSKeyframesRule':Js(False),'CSSMediaRule':Js(False),'CSSPageRule':Js(False),'CSSRule':Js(False),'CSSRuleList':Js(False),'CSSStyleDeclaration':Js(False),'CSSStyleRule':Js(False),'CSSStyleSheet':Js(False),'CSSSupportsRule':Js(False),'CSSTransition':Js(False),'CSSUnknownRule':Js(False),'CSSViewportRule':Js(False),'CustomEvent':Js(False),'DataTransfer':Js(False),'DataTransferItem':Js(False),'DataTransferItemList':Js(False),'Debug':Js(False),'defaultStatus':Js(False),'defaultstatus':Js(False),'DelayNode':Js(False),'DeviceMotionEvent':Js(False),'DeviceOrientationEvent':Js(False),'devicePixelRatio':Js(False),'dispatchEvent':Js(False),'document':Js(False),'Document':Js(False),'DocumentFragment':Js(False),'DocumentTimeline':Js(False),'DocumentType':Js(False),'DOMError':Js(False),'DOMException':Js(False),'DOMImplementation':Js(False),'DOMParser':Js(False),'DOMSettableTokenList':Js(False),'DOMStringList':Js(False),'DOMStringMap':Js(False),'DOMTokenList':Js(False),'DragEvent':Js(False),'DynamicsCompressorNode':Js(False),'Element':Js(False),'ElementTimeControl':Js(False),'ErrorEvent':Js(False),'event':Js(False),'Event':Js(False),'EventSource':Js(False),'EventTarget':Js(False),'external':Js(False),'FederatedCredential':Js(False),'fetch':Js(False),'File':Js(False),'FileError':Js(False),'FileList':Js(False),'FileReader':Js(False),'find':Js(False),'focus':Js(False),'FocusEvent':Js(False),'FontFace':Js(False),'FormData':Js(False),'frameElement':Js(False),'frames':Js(False),'GainNode':Js(False),'Gamepad':Js(False),'GamepadButton':Js(False),'GamepadEvent':Js(False),'getComputedStyle':Js(False),'getSelection':Js(False),'HashChangeEvent':Js(False),'Headers':Js(False),'history':Js(False),'History':Js(False),'HTMLAllCollection':Js(False),'HTMLAnchorElement':Js(False),'HTMLAppletElement':Js(False),'HTMLAreaElement':Js(False),'HTMLAudioElement':Js(False),'HTMLBaseElement':Js(False),'HTMLBlockquoteElement':Js(False),'HTMLBodyElement':Js(False),'HTMLBRElement':Js(False),'HTMLButtonElement':Js(False),'HTMLCanvasElement':Js(False),'HTMLCollection':Js(False),'HTMLContentElement':Js(False),'HTMLDataListElement':Js(False),'HTMLDetailsElement':Js(False),'HTMLDialogElement':Js(False),'HTMLDirectoryElement':Js(False),'HTMLDivElement':Js(False),'HTMLDListElement':Js(False),'HTMLDocument':Js(False),'HTMLElement':Js(False),'HTMLEmbedElement':Js(False),'HTMLFieldSetElement':Js(False),'HTMLFontElement':Js(False),'HTMLFormControlsCollection':Js(False),'HTMLFormElement':Js(False),'HTMLFrameElement':Js(False),'HTMLFrameSetElement':Js(False),'HTMLHeadElement':Js(False),'HTMLHeadingElement':Js(False),'HTMLHRElement':Js(False),'HTMLHtmlElement':Js(False),'HTMLIFrameElement':Js(False),'HTMLImageElement':Js(False),'HTMLInputElement':Js(False),'HTMLIsIndexElement':Js(False),'HTMLKeygenElement':Js(False),'HTMLLabelElement':Js(False),'HTMLLayerElement':Js(False),'HTMLLegendElement':Js(False),'HTMLLIElement':Js(False),'HTMLLinkElement':Js(False),'HTMLMapElement':Js(False),'HTMLMarqueeElement':Js(False),'HTMLMediaElement':Js(False),'HTMLMenuElement':Js(False),'HTMLMetaElement':Js(False),'HTMLMeterElement':Js(False),'HTMLModElement':Js(False),'HTMLObjectElement':Js(False),'HTMLOListElement':Js(False),'HTMLOptGroupElement':Js(False),'HTMLOptionElement':Js(False),'HTMLOptionsCollection':Js(False),'HTMLOutputElement':Js(False),'HTMLParagraphElement':Js(False),'HTMLParamElement':Js(False),'HTMLPictureElement':Js(False),'HTMLPreElement':Js(False),'HTMLProgressElement':Js(False),'HTMLQuoteElement':Js(False),'HTMLScriptElement':Js(False),'HTMLSelectElement':Js(False),'HTMLShadowElement':Js(False),'HTMLSourceElement':Js(False),'HTMLSpanElement':Js(False),'HTMLStyleElement':Js(False),'HTMLTableCaptionElement':Js(False),'HTMLTableCellElement':Js(False),'HTMLTableColElement':Js(False),'HTMLTableElement':Js(False),'HTMLTableRowElement':Js(False),'HTMLTableSectionElement':Js(False),'HTMLTemplateElement':Js(False),'HTMLTextAreaElement':Js(False),'HTMLTitleElement':Js(False),'HTMLTrackElement':Js(False),'HTMLUListElement':Js(False),'HTMLUnknownElement':Js(False),'HTMLVideoElement':Js(False),'IDBCursor':Js(False),'IDBCursorWithValue':Js(False),'IDBDatabase':Js(False),'IDBEnvironment':Js(False),'IDBFactory':Js(False),'IDBIndex':Js(False),'IDBKeyRange':Js(False),'IDBObjectStore':Js(False),'IDBOpenDBRequest':Js(False),'IDBRequest':Js(False),'IDBTransaction':Js(False),'IDBVersionChangeEvent':Js(False),'Image':Js(False),'ImageBitmap':Js(False),'ImageData':Js(False),'indexedDB':Js(False),'innerHeight':Js(False),'innerWidth':Js(False),'InputEvent':Js(False),'InputMethodContext':Js(False),'IntersectionObserver':Js(False),'IntersectionObserverEntry':Js(False),'Intl':Js(False),'KeyboardEvent':Js(False),'KeyframeEffect':Js(False),'KeyframeEffectReadOnly':Js(False),'length':Js(False),'localStorage':Js(False),'location':Js(False),'Location':Js(False),'locationbar':Js(False),'matchMedia':Js(False),'MediaElementAudioSourceNode':Js(False),'MediaEncryptedEvent':Js(False),'MediaError':Js(False),'MediaKeyError':Js(False),'MediaKeyEvent':Js(False),'MediaKeyMessageEvent':Js(False),'MediaKeys':Js(False),'MediaKeySession':Js(False),'MediaKeyStatusMap':Js(False),'MediaKeySystemAccess':Js(False),'MediaList':Js(False),'MediaQueryList':Js(False),'MediaQueryListEvent':Js(False),'MediaSource':Js(False),'MediaStream':Js(False),'MediaStreamAudioDestinationNode':Js(False),'MediaStreamAudioSourceNode':Js(False),'MediaStreamEvent':Js(False),'MediaStreamTrack':Js(False),'menubar':Js(False),'MessageChannel':Js(False),'MessageEvent':Js(False),'MessagePort':Js(False),'MIDIAccess':Js(False),'MIDIConnectionEvent':Js(False),'MIDIInput':Js(False),'MIDIInputMap':Js(False),'MIDIMessageEvent':Js(False),'MIDIOutput':Js(False),'MIDIOutputMap':Js(False),'MIDIPort':Js(False),'MimeType':Js(False),'MimeTypeArray':Js(False),'MouseEvent':Js(False),'moveBy':Js(False),'moveTo':Js(False),'MutationEvent':Js(False),'MutationObserver':Js(False),'MutationRecord':Js(False),'name':Js(False),'NamedNodeMap':Js(False),'navigator':Js(False),'Navigator':Js(False),'Node':Js(False),'NodeFilter':Js(False),'NodeIterator':Js(False),'NodeList':Js(False),'Notification':Js(False),'OfflineAudioCompletionEvent':Js(False),'OfflineAudioContext':Js(False),'offscreenBuffering':Js(False),'onbeforeunload':var.get('true'),'onblur':var.get('true'),'onerror':var.get('true'),'onfocus':var.get('true'),'onload':var.get('true'),'onresize':var.get('true'),'onunload':var.get('true'),'open':Js(False),'openDatabase':Js(False),'opener':Js(False),'opera':Js(False),'Option':Js(False),'OscillatorNode':Js(False),'outerHeight':Js(False),'outerWidth':Js(False),'PageTransitionEvent':Js(False),'pageXOffset':Js(False),'pageYOffset':Js(False),'parent':Js(False),'PasswordCredential':Js(False),'Path2D':Js(False),'performance':Js(False),'Performance':Js(False),'PerformanceEntry':Js(False),'PerformanceMark':Js(False),'PerformanceMeasure':Js(False),'PerformanceNavigation':Js(False),'PerformanceResourceTiming':Js(False),'PerformanceTiming':Js(False),'PeriodicWave':Js(False),'Permissions':Js(False),'PermissionStatus':Js(False),'personalbar':Js(False),'Plugin':Js(False),'PluginArray':Js(False),'PopStateEvent':Js(False),'postMessage':Js(False),'print':Js(False),'ProcessingInstruction':Js(False),'ProgressEvent':Js(False),'PromiseRejectionEvent':Js(False),'prompt':Js(False),'PushManager':Js(False),'PushSubscription':Js(False),'RadioNodeList':Js(False),'Range':Js(False),'ReadableByteStream':Js(False),'ReadableStream':Js(False),'removeEventListener':Js(False),'Request':Js(False),'requestAnimationFrame':Js(False),'requestIdleCallback':Js(False),'resizeBy':Js(False),'resizeTo':Js(False),'Response':Js(False),'RTCIceCandidate':Js(False),'RTCSessionDescription':Js(False),'RTCPeerConnection':Js(False),'screen':Js(False),'Screen':Js(False),'screenLeft':Js(False),'ScreenOrientation':Js(False),'screenTop':Js(False),'screenX':Js(False),'screenY':Js(False),'ScriptProcessorNode':Js(False),'scroll':Js(False),'scrollbars':Js(False),'scrollBy':Js(False),'scrollTo':Js(False),'scrollX':Js(False),'scrollY':Js(False),'SecurityPolicyViolationEvent':Js(False),'Selection':Js(False),'self':Js(False),'ServiceWorker':Js(False),'ServiceWorkerContainer':Js(False),'ServiceWorkerRegistration':Js(False),'sessionStorage':Js(False),'setInterval':Js(False),'setTimeout':Js(False),'ShadowRoot':Js(False),'SharedKeyframeList':Js(False),'SharedWorker':Js(False),'showModalDialog':Js(False),'SiteBoundCredential':Js(False),'speechSynthesis':Js(False),'SpeechSynthesisEvent':Js(False),'SpeechSynthesisUtterance':Js(False),'status':Js(False),'statusbar':Js(False),'stop':Js(False),'Storage':Js(False),'StorageEvent':Js(False),'styleMedia':Js(False),'StyleSheet':Js(False),'StyleSheetList':Js(False),'SubtleCrypto':Js(False),'SVGAElement':Js(False),'SVGAltGlyphDefElement':Js(False),'SVGAltGlyphElement':Js(False),'SVGAltGlyphItemElement':Js(False),'SVGAngle':Js(False),'SVGAnimateColorElement':Js(False),'SVGAnimatedAngle':Js(False),'SVGAnimatedBoolean':Js(False),'SVGAnimatedEnumeration':Js(False),'SVGAnimatedInteger':Js(False),'SVGAnimatedLength':Js(False),'SVGAnimatedLengthList':Js(False),'SVGAnimatedNumber':Js(False),'SVGAnimatedNumberList':Js(False),'SVGAnimatedPathData':Js(False),'SVGAnimatedPoints':Js(False),'SVGAnimatedPreserveAspectRatio':Js(False),'SVGAnimatedRect':Js(False),'SVGAnimatedString':Js(False),'SVGAnimatedTransformList':Js(False),'SVGAnimateElement':Js(False),'SVGAnimateMotionElement':Js(False),'SVGAnimateTransformElement':Js(False),'SVGAnimationElement':Js(False),'SVGCircleElement':Js(False),'SVGClipPathElement':Js(False),'SVGColor':Js(False),'SVGColorProfileElement':Js(False),'SVGColorProfileRule':Js(False),'SVGComponentTransferFunctionElement':Js(False),'SVGCSSRule':Js(False),'SVGCursorElement':Js(False),'SVGDefsElement':Js(False),'SVGDescElement':Js(False),'SVGDiscardElement':Js(False),'SVGDocument':Js(False),'SVGElement':Js(False),'SVGElementInstance':Js(False),'SVGElementInstanceList':Js(False),'SVGEllipseElement':Js(False),'SVGEvent':Js(False),'SVGExternalResourcesRequired':Js(False),'SVGFEBlendElement':Js(False),'SVGFEColorMatrixElement':Js(False),'SVGFEComponentTransferElement':Js(False),'SVGFECompositeElement':Js(False),'SVGFEConvolveMatrixElement':Js(False),'SVGFEDiffuseLightingElement':Js(False),'SVGFEDisplacementMapElement':Js(False),'SVGFEDistantLightElement':Js(False),'SVGFEDropShadowElement':Js(False),'SVGFEFloodElement':Js(False),'SVGFEFuncAElement':Js(False),'SVGFEFuncBElement':Js(False),'SVGFEFuncGElement':Js(False),'SVGFEFuncRElement':Js(False),'SVGFEGaussianBlurElement':Js(False),'SVGFEImageElement':Js(False),'SVGFEMergeElement':Js(False),'SVGFEMergeNodeElement':Js(False),'SVGFEMorphologyElement':Js(False),'SVGFEOffsetElement':Js(False),'SVGFEPointLightElement':Js(False),'SVGFESpecularLightingElement':Js(False),'SVGFESpotLightElement':Js(False),'SVGFETileElement':Js(False),'SVGFETurbulenceElement':Js(False),'SVGFilterElement':Js(False),'SVGFilterPrimitiveStandardAttributes':Js(False),'SVGFitToViewBox':Js(False),'SVGFontElement':Js(False),'SVGFontFaceElement':Js(False),'SVGFontFaceFormatElement':Js(False),'SVGFontFaceNameElement':Js(False),'SVGFontFaceSrcElement':Js(False),'SVGFontFaceUriElement':Js(False),'SVGForeignObjectElement':Js(False),'SVGGElement':Js(False),'SVGGeometryElement':Js(False),'SVGGlyphElement':Js(False),'SVGGlyphRefElement':Js(False),'SVGGradientElement':Js(False),'SVGGraphicsElement':Js(False),'SVGHKernElement':Js(False),'SVGICCColor':Js(False),'SVGImageElement':Js(False),'SVGLangSpace':Js(False),'SVGLength':Js(False),'SVGLengthList':Js(False),'SVGLinearGradientElement':Js(False),'SVGLineElement':Js(False),'SVGLocatable':Js(False),'SVGMarkerElement':Js(False),'SVGMaskElement':Js(False),'SVGMatrix':Js(False),'SVGMetadataElement':Js(False),'SVGMissingGlyphElement':Js(False),'SVGMPathElement':Js(False),'SVGNumber':Js(False),'SVGNumberList':Js(False),'SVGPaint':Js(False),'SVGPathElement':Js(False),'SVGPathSeg':Js(False),'SVGPathSegArcAbs':Js(False),'SVGPathSegArcRel':Js(False),'SVGPathSegClosePath':Js(False),'SVGPathSegCurvetoCubicAbs':Js(False),'SVGPathSegCurvetoCubicRel':Js(False),'SVGPathSegCurvetoCubicSmoothAbs':Js(False),'SVGPathSegCurvetoCubicSmoothRel':Js(False),'SVGPathSegCurvetoQuadraticAbs':Js(False),'SVGPathSegCurvetoQuadraticRel':Js(False),'SVGPathSegCurvetoQuadraticSmoothAbs':Js(False),'SVGPathSegCurvetoQuadraticSmoothRel':Js(False),'SVGPathSegLinetoAbs':Js(False),'SVGPathSegLinetoHorizontalAbs':Js(False),'SVGPathSegLinetoHorizontalRel':Js(False),'SVGPathSegLinetoRel':Js(False),'SVGPathSegLinetoVerticalAbs':Js(False),'SVGPathSegLinetoVerticalRel':Js(False),'SVGPathSegList':Js(False),'SVGPathSegMovetoAbs':Js(False),'SVGPathSegMovetoRel':Js(False),'SVGPatternElement':Js(False),'SVGPoint':Js(False),'SVGPointList':Js(False),'SVGPolygonElement':Js(False),'SVGPolylineElement':Js(False),'SVGPreserveAspectRatio':Js(False),'SVGRadialGradientElement':Js(False),'SVGRect':Js(False),'SVGRectElement':Js(False),'SVGRenderingIntent':Js(False),'SVGScriptElement':Js(False),'SVGSetElement':Js(False),'SVGStopElement':Js(False),'SVGStringList':Js(False),'SVGStylable':Js(False),'SVGStyleElement':Js(False),'SVGSVGElement':Js(False),'SVGSwitchElement':Js(False),'SVGSymbolElement':Js(False),'SVGTests':Js(False),'SVGTextContentElement':Js(False),'SVGTextElement':Js(False),'SVGTextPathElement':Js(False),'SVGTextPositioningElement':Js(False),'SVGTitleElement':Js(False),'SVGTransform':Js(False),'SVGTransformable':Js(False),'SVGTransformList':Js(False),'SVGTRefElement':Js(False),'SVGTSpanElement':Js(False),'SVGUnitTypes':Js(False),'SVGURIReference':Js(False),'SVGUseElement':Js(False),'SVGViewElement':Js(False),'SVGViewSpec':Js(False),'SVGVKernElement':Js(False),'SVGZoomAndPan':Js(False),'SVGZoomEvent':Js(False),'Text':Js(False),'TextDecoder':Js(False),'TextEncoder':Js(False),'TextEvent':Js(False),'TextMetrics':Js(False),'TextTrack':Js(False),'TextTrackCue':Js(False),'TextTrackCueList':Js(False),'TextTrackList':Js(False),'TimeEvent':Js(False),'TimeRanges':Js(False),'toolbar':Js(False),'top':Js(False),'Touch':Js(False),'TouchEvent':Js(False),'TouchList':Js(False),'TrackEvent':Js(False),'TransitionEvent':Js(False),'TreeWalker':Js(False),'UIEvent':Js(False),'URL':Js(False),'URLSearchParams':Js(False),'ValidityState':Js(False),'VTTCue':Js(False),'WaveShaperNode':Js(False),'WebGLActiveInfo':Js(False),'WebGLBuffer':Js(False),'WebGLContextEvent':Js(False),'WebGLFramebuffer':Js(False),'WebGLProgram':Js(False),'WebGLRenderbuffer':Js(False),'WebGLRenderingContext':Js(False),'WebGLShader':Js(False),'WebGLShaderPrecisionFormat':Js(False),'WebGLTexture':Js(False),'WebGLUniformLocation':Js(False),'WebSocket':Js(False),'WheelEvent':Js(False),'window':Js(False),'Window':Js(False),'Worker':Js(False),'XDomainRequest':Js(False),'XMLDocument':Js(False),'XMLHttpRequest':Js(False),'XMLHttpRequestEventTarget':Js(False),'XMLHttpRequestProgressEvent':Js(False),'XMLHttpRequestUpload':Js(False),'XMLSerializer':Js(False),'XPathEvaluator':Js(False),'XPathException':Js(False),'XPathExpression':Js(False),'XPathNamespace':Js(False),'XPathNSResolver':Js(False),'XPathResult':Js(False),'XSLTProcessor':Js(False)})
    PyJs_Object_3328_ = Js({'applicationCache':Js(False),'atob':Js(False),'Blob':Js(False),'BroadcastChannel':Js(False),'btoa':Js(False),'Cache':Js(False),'caches':Js(False),'clearInterval':Js(False),'clearTimeout':Js(False),'close':var.get('true'),'console':Js(False),'fetch':Js(False),'FileReaderSync':Js(False),'FormData':Js(False),'Headers':Js(False),'IDBCursor':Js(False),'IDBCursorWithValue':Js(False),'IDBDatabase':Js(False),'IDBFactory':Js(False),'IDBIndex':Js(False),'IDBKeyRange':Js(False),'IDBObjectStore':Js(False),'IDBOpenDBRequest':Js(False),'IDBRequest':Js(False),'IDBTransaction':Js(False),'IDBVersionChangeEvent':Js(False),'ImageData':Js(False),'importScripts':var.get('true'),'indexedDB':Js(False),'location':Js(False),'MessageChannel':Js(False),'MessagePort':Js(False),'name':Js(False),'navigator':Js(False),'Notification':Js(False),'onclose':var.get('true'),'onconnect':var.get('true'),'onerror':var.get('true'),'onlanguagechange':var.get('true'),'onmessage':var.get('true'),'onoffline':var.get('true'),'ononline':var.get('true'),'onrejectionhandled':var.get('true'),'onunhandledrejection':var.get('true'),'performance':Js(False),'Performance':Js(False),'PerformanceEntry':Js(False),'PerformanceMark':Js(False),'PerformanceMeasure':Js(False),'PerformanceNavigation':Js(False),'PerformanceResourceTiming':Js(False),'PerformanceTiming':Js(False),'postMessage':var.get('true'),'Promise':Js(False),'Request':Js(False),'Response':Js(False),'self':var.get('true'),'ServiceWorkerRegistration':Js(False),'setInterval':Js(False),'setTimeout':Js(False),'TextDecoder':Js(False),'TextEncoder':Js(False),'URL':Js(False),'URLSearchParams':Js(False),'WebSocket':Js(False),'Worker':Js(False),'XMLHttpRequest':Js(False)})
    PyJs_Object_3329_ = Js({'__dirname':Js(False),'__filename':Js(False),'arguments':Js(False),'Buffer':Js(False),'clearImmediate':Js(False),'clearInterval':Js(False),'clearTimeout':Js(False),'console':Js(False),'exports':var.get('true'),'GLOBAL':Js(False),'global':Js(False),'Intl':Js(False),'module':Js(False),'process':Js(False),'require':Js(False),'root':Js(False),'setImmediate':Js(False),'setInterval':Js(False),'setTimeout':Js(False)})
    PyJs_Object_3330_ = Js({'exports':var.get('true'),'module':Js(False),'require':Js(False),'global':Js(False)})
    PyJs_Object_3331_ = Js({'define':Js(False),'require':Js(False)})
    PyJs_Object_3332_ = Js({'after':Js(False),'afterEach':Js(False),'before':Js(False),'beforeEach':Js(False),'context':Js(False),'describe':Js(False),'it':Js(False),'mocha':Js(False),'run':Js(False),'setup':Js(False),'specify':Js(False),'suite':Js(False),'suiteSetup':Js(False),'suiteTeardown':Js(False),'teardown':Js(False),'test':Js(False),'xcontext':Js(False),'xdescribe':Js(False),'xit':Js(False),'xspecify':Js(False)})
    PyJs_Object_3333_ = Js({'afterAll':Js(False),'afterEach':Js(False),'beforeAll':Js(False),'beforeEach':Js(False),'describe':Js(False),'expect':Js(False),'fail':Js(False),'fdescribe':Js(False),'fit':Js(False),'it':Js(False),'jasmine':Js(False),'pending':Js(False),'runs':Js(False),'spyOn':Js(False),'waits':Js(False),'waitsFor':Js(False),'xdescribe':Js(False),'xit':Js(False)})
    PyJs_Object_3334_ = Js({'afterAll':Js(False),'afterEach':Js(False),'beforeAll':Js(False),'beforeEach':Js(False),'check':Js(False),'describe':Js(False),'expect':Js(False),'gen':Js(False),'it':Js(False),'fit':Js(False),'jest':Js(False),'pit':Js(False),'require':Js(False),'test':Js(False),'xdescribe':Js(False),'xit':Js(False),'xtest':Js(False)})
    PyJs_Object_3335_ = Js({'asyncTest':Js(False),'deepEqual':Js(False),'equal':Js(False),'expect':Js(False),'module':Js(False),'notDeepEqual':Js(False),'notEqual':Js(False),'notOk':Js(False),'notPropEqual':Js(False),'notStrictEqual':Js(False),'ok':Js(False),'propEqual':Js(False),'QUnit':Js(False),'raises':Js(False),'start':Js(False),'stop':Js(False),'strictEqual':Js(False),'test':Js(False),'throws':Js(False)})
    PyJs_Object_3336_ = Js({'console':var.get('true'),'exports':var.get('true'),'phantom':var.get('true'),'require':var.get('true'),'WebPage':var.get('true')})
    PyJs_Object_3337_ = Js({'emit':Js(False),'exports':Js(False),'getRow':Js(False),'log':Js(False),'module':Js(False),'provides':Js(False),'require':Js(False),'respond':Js(False),'send':Js(False),'start':Js(False),'sum':Js(False)})
    PyJs_Object_3338_ = Js({'defineClass':Js(False),'deserialize':Js(False),'gc':Js(False),'help':Js(False),'importClass':Js(False),'importPackage':Js(False),'java':Js(False),'load':Js(False),'loadClass':Js(False),'Packages':Js(False),'print':Js(False),'quit':Js(False),'readFile':Js(False),'readUrl':Js(False),'runCommand':Js(False),'seal':Js(False),'serialize':Js(False),'spawn':Js(False),'sync':Js(False),'toint32':Js(False),'version':Js(False)})
    PyJs_Object_3339_ = Js({'__DIR__':Js(False),'__FILE__':Js(False),'__LINE__':Js(False),'com':Js(False),'edu':Js(False),'exit':Js(False),'Java':Js(False),'java':Js(False),'javafx':Js(False),'JavaImporter':Js(False),'javax':Js(False),'JSAdapter':Js(False),'load':Js(False),'loadWithNewGlobal':Js(False),'org':Js(False),'Packages':Js(False),'print':Js(False),'quit':Js(False)})
    PyJs_Object_3340_ = Js({'ActiveXObject':var.get('true'),'Enumerator':var.get('true'),'GetObject':var.get('true'),'ScriptEngine':var.get('true'),'ScriptEngineBuildVersion':var.get('true'),'ScriptEngineMajorVersion':var.get('true'),'ScriptEngineMinorVersion':var.get('true'),'VBArray':var.get('true'),'WScript':var.get('true'),'WSH':var.get('true'),'XDomainRequest':var.get('true')})
    PyJs_Object_3341_ = Js({'$':Js(False),'jQuery':Js(False)})
    PyJs_Object_3342_ = Js({'Y':Js(False),'YUI':Js(False),'YUI_config':Js(False)})
    PyJs_Object_3343_ = Js({'cat':Js(False),'cd':Js(False),'chmod':Js(False),'config':Js(False),'cp':Js(False),'dirs':Js(False),'echo':Js(False),'env':Js(False),'error':Js(False),'exec':Js(False),'exit':Js(False),'find':Js(False),'grep':Js(False),'ls':Js(False),'ln':Js(False),'mkdir':Js(False),'mv':Js(False),'popd':Js(False),'pushd':Js(False),'pwd':Js(False),'rm':Js(False),'sed':Js(False),'set':Js(False),'target':Js(False),'tempdir':Js(False),'test':Js(False),'touch':Js(False),'which':Js(False)})
    PyJs_Object_3344_ = Js({'$':Js(False),'$$':Js(False),'$A':Js(False),'$break':Js(False),'$continue':Js(False),'$F':Js(False),'$H':Js(False),'$R':Js(False),'$w':Js(False),'Abstract':Js(False),'Ajax':Js(False),'Autocompleter':Js(False),'Builder':Js(False),'Class':Js(False),'Control':Js(False),'Draggable':Js(False),'Draggables':Js(False),'Droppables':Js(False),'Effect':Js(False),'Element':Js(False),'Enumerable':Js(False),'Event':Js(False),'Field':Js(False),'Form':Js(False),'Hash':Js(False),'Insertion':Js(False),'ObjectRange':Js(False),'PeriodicalExecuter':Js(False),'Position':Js(False),'Prototype':Js(False),'Scriptaculous':Js(False),'Selector':Js(False),'Sortable':Js(False),'SortableObserver':Js(False),'Sound':Js(False),'Template':Js(False),'Toggle':Js(False),'Try':Js(False)})
    PyJs_Object_3345_ = Js({'$':Js(False),'_':Js(False),'Accounts':Js(False),'AccountsClient':Js(False),'AccountsServer':Js(False),'AccountsCommon':Js(False),'App':Js(False),'Assets':Js(False),'Blaze':Js(False),'check':Js(False),'Cordova':Js(False),'DDP':Js(False),'DDPServer':Js(False),'DDPRateLimiter':Js(False),'Deps':Js(False),'EJSON':Js(False),'Email':Js(False),'HTTP':Js(False),'Log':Js(False),'Match':Js(False),'Meteor':Js(False),'Mongo':Js(False),'MongoInternals':Js(False),'Npm':Js(False),'Package':Js(False),'Plugin':Js(False),'process':Js(False),'Random':Js(False),'ReactiveDict':Js(False),'ReactiveVar':Js(False),'Router':Js(False),'ServiceConfiguration':Js(False),'Session':Js(False),'share':Js(False),'Spacebars':Js(False),'Template':Js(False),'Tinytest':Js(False),'Tracker':Js(False),'UI':Js(False),'Utils':Js(False),'WebApp':Js(False),'WebAppInternals':Js(False)})
    PyJs_Object_3346_ = Js({'_isWindows':Js(False),'_rand':Js(False),'BulkWriteResult':Js(False),'cat':Js(False),'cd':Js(False),'connect':Js(False),'db':Js(False),'getHostName':Js(False),'getMemInfo':Js(False),'hostname':Js(False),'ISODate':Js(False),'listFiles':Js(False),'load':Js(False),'ls':Js(False),'md5sumFile':Js(False),'mkdir':Js(False),'Mongo':Js(False),'NumberInt':Js(False),'NumberLong':Js(False),'ObjectId':Js(False),'PlanCache':Js(False),'print':Js(False),'printjson':Js(False),'pwd':Js(False),'quit':Js(False),'removeFile':Js(False),'rs':Js(False),'sh':Js(False),'UUID':Js(False),'version':Js(False),'WriteResult':Js(False)})
    PyJs_Object_3347_ = Js({'$':Js(False),'Application':Js(False),'Automation':Js(False),'console':Js(False),'delay':Js(False),'Library':Js(False),'ObjC':Js(False),'ObjectSpecifier':Js(False),'Path':Js(False),'Progress':Js(False),'Ref':Js(False)})
    PyJs_Object_3348_ = Js({'caches':Js(False),'Cache':Js(False),'CacheStorage':Js(False),'Client':Js(False),'clients':Js(False),'Clients':Js(False),'ExtendableEvent':Js(False),'ExtendableMessageEvent':Js(False),'FetchEvent':Js(False),'importScripts':Js(False),'registration':Js(False),'self':Js(False),'ServiceWorker':Js(False),'ServiceWorkerContainer':Js(False),'ServiceWorkerGlobalScope':Js(False),'ServiceWorkerMessageEvent':Js(False),'ServiceWorkerRegistration':Js(False),'skipWaiting':Js(False),'WindowClient':Js(False)})
    PyJs_Object_3349_ = Js({'advanceClock':Js(False),'fakeClearInterval':Js(False),'fakeClearTimeout':Js(False),'fakeSetInterval':Js(False),'fakeSetTimeout':Js(False),'resetTimeouts':Js(False),'waitsForPromise':Js(False)})
    PyJs_Object_3350_ = Js({'andThen':Js(False),'click':Js(False),'currentPath':Js(False),'currentRouteName':Js(False),'currentURL':Js(False),'fillIn':Js(False),'find':Js(False),'findWithAssert':Js(False),'keyEvent':Js(False),'pauseTest':Js(False),'triggerEvent':Js(False),'visit':Js(False)})
    PyJs_Object_3351_ = Js({'$':Js(False),'$$':Js(False),'browser':Js(False),'By':Js(False),'by':Js(False),'DartObject':Js(False),'element':Js(False),'protractor':Js(False)})
    PyJs_Object_3352_ = Js({'clearInterval':Js(False),'clearTimeout':Js(False),'console':Js(False),'setInterval':Js(False),'setTimeout':Js(False)})
    PyJs_Object_3353_ = Js({'browser':Js(False),'chrome':Js(False),'opr':Js(False)})
    PyJs_Object_3354_ = Js({'GM_addStyle':Js(False),'GM_deleteValue':Js(False),'GM_getResourceText':Js(False),'GM_getResourceURL':Js(False),'GM_getValue':Js(False),'GM_info':Js(False),'GM_listValues':Js(False),'GM_log':Js(False),'GM_openInTab':Js(False),'GM_registerMenuCommand':Js(False),'GM_setClipboard':Js(False),'GM_setValue':Js(False),'GM_xmlhttpRequest':Js(False),'unsafeWindow':Js(False)})
    PyJs_Object_3323_ = Js({'builtin':PyJs_Object_3324_,'es5':PyJs_Object_3325_,'es6':PyJs_Object_3326_,'browser':PyJs_Object_3327_,'worker':PyJs_Object_3328_,'node':PyJs_Object_3329_,'commonjs':PyJs_Object_3330_,'amd':PyJs_Object_3331_,'mocha':PyJs_Object_3332_,'jasmine':PyJs_Object_3333_,'jest':PyJs_Object_3334_,'qunit':PyJs_Object_3335_,'phantomjs':PyJs_Object_3336_,'couch':PyJs_Object_3337_,'rhino':PyJs_Object_3338_,'nashorn':PyJs_Object_3339_,'wsh':PyJs_Object_3340_,'jquery':PyJs_Object_3341_,'yui':PyJs_Object_3342_,'shelljs':PyJs_Object_3343_,'prototypejs':PyJs_Object_3344_,'meteor':PyJs_Object_3345_,'mongo':PyJs_Object_3346_,'applescript':PyJs_Object_3347_,'serviceworker':PyJs_Object_3348_,'atomtest':PyJs_Object_3349_,'embertest':PyJs_Object_3350_,'protractor':PyJs_Object_3351_,'shared-node-browser':PyJs_Object_3352_,'webextensions':PyJs_Object_3353_,'greasemonkey':PyJs_Object_3354_})
    var.get('module').put('exports', PyJs_Object_3323_)
PyJs_anonymous_3322_._set_name('anonymous')
PyJs_Object_3355_ = Js({})
@Js
def PyJs_anonymous_3356_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('require')(Js('./globals.json')))
PyJs_anonymous_3356_._set_name('anonymous')
PyJs_Object_3357_ = Js({'./globals.json':Js(277.0)})
@Js
def PyJs_anonymous_3358_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['re', 'require', 'ansiRegex', 'exports', 'module'])
    Js('use strict')
    var.put('ansiRegex', var.get('require')(Js('ansi-regex')))
    var.put('re', var.get('RegExp').create(var.get('ansiRegex')().get('source')))
    var.get('module').put('exports', var.get('re').get('test').callprop('bind', var.get('re')))
PyJs_anonymous_3358_._set_name('anonymous')
PyJs_Object_3359_ = Js({'ansi-regex':Js(2.0)})
@Js
def PyJs_anonymous_3360_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3361_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['process', 'invariant'])
        Js('use strict')
        @Js
        def PyJs_anonymous_3362_(condition, format, a, b, c, d, e, f, this, arguments, var=var):
            var = Scope({'a':a, 'c':c, 'b':b, 'e':e, 'd':d, 'format':format, 'this':this, 'f':f, 'arguments':arguments, 'condition':condition}, var)
            var.registers(['a', 'c', 'b', 'e', 'd', 'f', 'format', 'args', 'argIndex', 'error', 'condition'])
            if PyJsStrictNeq(var.get('process').get('env').get('NODE_ENV'),Js('production')):
                if PyJsStrictEq(var.get('format'),var.get('undefined')):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('invariant requires an error message argument')))
                    raise PyJsTempException
            if var.get('condition').neg():
                pass
                if PyJsStrictEq(var.get('format'),var.get('undefined')):
                    var.put('error', var.get('Error').create((Js('Minified exception occurred; use the non-minified dev environment ')+Js('for the full error message and additional helpful warnings.'))))
                else:
                    var.put('args', Js([var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('e'), var.get('f')]))
                    var.put('argIndex', Js(0.0))
                    @Js
                    def PyJs_anonymous_3363_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('args').get((var.put('argIndex',Js(var.get('argIndex').to_number())+Js(1))-Js(1)))
                    PyJs_anonymous_3363_._set_name('anonymous')
                    var.put('error', var.get('Error').create(var.get('format').callprop('replace', JsRegExp('/%s/g'), PyJs_anonymous_3363_)))
                    var.get('error').put('name', Js('Invariant Violation'))
                var.get('error').put('framesToPop', Js(1.0))
                PyJsTempException = JsToPyException(var.get('error'))
                raise PyJsTempException
        PyJs_anonymous_3362_._set_name('anonymous')
        var.put('invariant', PyJs_anonymous_3362_)
        var.get('module').put('exports', var.get('invariant'))
    PyJs_anonymous_3361_._set_name('anonymous')
    PyJs_anonymous_3361_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_3360_._set_name('anonymous')
PyJs_Object_3364_ = Js({'_process':Js(531.0)})
@Js
def PyJs_anonymous_3365_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['numberIsNan', 'require', 'exports', 'module'])
    Js('use strict')
    var.put('numberIsNan', var.get('require')(Js('number-is-nan')))
    @Js
    def PyJs_anonymous_3366_(val, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'val':val}, var)
        var.registers(['val'])
        return (((PyJsStrictNeq(var.get('val',throw=False).typeof(),Js('number')) or var.get('numberIsNan')(var.get('val'))) or PyJsStrictEq(var.get('val'),var.get('Infinity'))) or PyJsStrictEq(var.get('val'),(-var.get('Infinity')))).neg()
    PyJs_anonymous_3366_._set_name('anonymous')
    var.get('module').put('exports', (var.get('Number').get('isFinite') or PyJs_anonymous_3366_))
PyJs_anonymous_3365_._set_name('anonymous')
PyJs_Object_3367_ = Js({'number-is-nan':Js(498.0)})
@Js
def PyJs_anonymous_3368_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    def PyJs_LONG_3369_(var=var):
        return var.get('module').put('exports', JsRegExp('/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyu]{1,5}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]{1,6}\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g'))
    PyJs_LONG_3369_()
    @Js
    def PyJs_anonymous_3370_(match, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'match':match}, var)
        var.registers(['token', 'match'])
        PyJs_Object_3371_ = Js({'type':Js('invalid'),'value':var.get('match').get('0')})
        var.put('token', PyJs_Object_3371_)
        if var.get('match').get('1'):
            PyJsComma(var.get('token').put('type', Js('string')),var.get('token').put('closed', (var.get('match').get('3') or var.get('match').get('4')).neg().neg()))
        else:
            if var.get('match').get('5'):
                var.get('token').put('type', Js('comment'))
            else:
                if var.get('match').get('6'):
                    PyJsComma(var.get('token').put('type', Js('comment')),var.get('token').put('closed', var.get('match').get('7').neg().neg()))
                else:
                    if var.get('match').get('8'):
                        var.get('token').put('type', Js('regex'))
                    else:
                        if var.get('match').get('9'):
                            var.get('token').put('type', Js('number'))
                        else:
                            if var.get('match').get('10'):
                                var.get('token').put('type', Js('name'))
                            else:
                                if var.get('match').get('11'):
                                    var.get('token').put('type', Js('punctuator'))
                                else:
                                    if var.get('match').get('12'):
                                        var.get('token').put('type', Js('whitespace'))
        return var.get('token')
    PyJs_anonymous_3370_._set_name('anonymous')
    var.get('module').get('exports').put('matchToToken', PyJs_anonymous_3370_)
PyJs_anonymous_3368_._set_name('anonymous')
PyJs_Object_3372_ = Js({})
@Js
def PyJs_anonymous_3373_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_3374_ = Js({})
    @Js
    def PyJs_anonymous_3375_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['global'])
        pass
        @Js
        def PyJs_anonymous_3376_(root, this, arguments, var=var):
            var = Scope({'this':this, 'root':root, 'arguments':arguments}, var)
            var.registers(['singleEscapes', 'freeModule', 'freeGlobal', 'freeExports', 'isFunction', 'forOwn', 'toString', 'regexSingleEscape', 'jsesc', 'isSet', 'isArray', 'extend', 'object', 'hasOwnProperty', 'isNumber', 'isObject', 'regexDigit', 'isString', 'isMap', 'root', 'regexWhitelist', 'forEach'])
            var.put('freeExports', ((var.get('exports',throw=False).typeof()==Js('object')) and var.get('exports')))
            var.put('freeModule', ((((var.get('module',throw=False).typeof()==Js('object')) and var.get('module')) and (var.get('module').get('exports')==var.get('freeExports'))) and var.get('module')))
            var.put('freeGlobal', ((var.get('global',throw=False).typeof()==Js('object')) and var.get('global')))
            if (PyJsStrictEq(var.get('freeGlobal').get('global'),var.get('freeGlobal')) or PyJsStrictEq(var.get('freeGlobal').get('window'),var.get('freeGlobal'))):
                var.put('root', var.get('freeGlobal'))
            PyJs_Object_3377_ = Js({})
            var.put('object', PyJs_Object_3377_)
            var.put('hasOwnProperty', var.get('object').get('hasOwnProperty'))
            @Js
            def PyJs_anonymous_3378_(object, callback, this, arguments, var=var):
                var = Scope({'this':this, 'callback':callback, 'object':object, 'arguments':arguments}, var)
                var.registers(['callback', 'object', 'key'])
                pass
                for PyJsTemp in var.get('object'):
                    var.put('key', PyJsTemp)
                    if var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')):
                        var.get('callback')(var.get('key'), var.get('object').get(var.get('key')))
            PyJs_anonymous_3378_._set_name('anonymous')
            var.put('forOwn', PyJs_anonymous_3378_)
            @Js
            def PyJs_anonymous_3379_(destination, source, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'destination':destination, 'arguments':arguments}, var)
                var.registers(['source', 'destination'])
                if var.get('source').neg():
                    return var.get('destination')
                @Js
                def PyJs_anonymous_3380_(key, value, this, arguments, var=var):
                    var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
                    var.registers(['value', 'key'])
                    var.get('destination').put(var.get('key'), var.get('value'))
                PyJs_anonymous_3380_._set_name('anonymous')
                var.get('forOwn')(var.get('source'), PyJs_anonymous_3380_)
                return var.get('destination')
            PyJs_anonymous_3379_._set_name('anonymous')
            var.put('extend', PyJs_anonymous_3379_)
            @Js
            def PyJs_anonymous_3381_(array, callback, this, arguments, var=var):
                var = Scope({'this':this, 'callback':callback, 'array':array, 'arguments':arguments}, var)
                var.registers(['index', 'length', 'array', 'callback'])
                var.put('length', var.get('array').get('length'))
                var.put('index', (-Js(1.0)))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.get('callback')(var.get('array').get(var.get('index')))
            PyJs_anonymous_3381_._set_name('anonymous')
            var.put('forEach', PyJs_anonymous_3381_)
            var.put('toString', var.get('object').get('toString'))
            @Js
            def PyJs_anonymous_3382_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return (var.get('toString').callprop('call', var.get('value'))==Js('[object Array]'))
            PyJs_anonymous_3382_._set_name('anonymous')
            var.put('isArray', PyJs_anonymous_3382_)
            @Js
            def PyJs_anonymous_3383_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return (var.get('toString').callprop('call', var.get('value'))==Js('[object Object]'))
            PyJs_anonymous_3383_._set_name('anonymous')
            var.put('isObject', PyJs_anonymous_3383_)
            @Js
            def PyJs_anonymous_3384_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((var.get('value',throw=False).typeof()==Js('string')) or (var.get('toString').callprop('call', var.get('value'))==Js('[object String]')))
            PyJs_anonymous_3384_._set_name('anonymous')
            var.put('isString', PyJs_anonymous_3384_)
            @Js
            def PyJs_anonymous_3385_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((var.get('value',throw=False).typeof()==Js('number')) or (var.get('toString').callprop('call', var.get('value'))==Js('[object Number]')))
            PyJs_anonymous_3385_._set_name('anonymous')
            var.put('isNumber', PyJs_anonymous_3385_)
            @Js
            def PyJs_anonymous_3386_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((var.get('value',throw=False).typeof()==Js('function')) or (var.get('toString').callprop('call', var.get('value'))==Js('[object Function]')))
            PyJs_anonymous_3386_._set_name('anonymous')
            var.put('isFunction', PyJs_anonymous_3386_)
            @Js
            def PyJs_anonymous_3387_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return (var.get('toString').callprop('call', var.get('value'))==Js('[object Map]'))
            PyJs_anonymous_3387_._set_name('anonymous')
            var.put('isMap', PyJs_anonymous_3387_)
            @Js
            def PyJs_anonymous_3388_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return (var.get('toString').callprop('call', var.get('value'))==Js('[object Set]'))
            PyJs_anonymous_3388_._set_name('anonymous')
            var.put('isSet', PyJs_anonymous_3388_)
            PyJs_Object_3389_ = Js({'"':Js('\\"'),"'":Js("\\'"),'\\':Js('\\\\'),'\x08':Js('\\b'),'\x0c':Js('\\f'),'\n':Js('\\n'),'\r':Js('\\r'),'\t':Js('\\t')})
            var.put('singleEscapes', PyJs_Object_3389_)
            var.put('regexSingleEscape', JsRegExp('/["\'\\\\\\b\\f\\n\\r\\t]/'))
            var.put('regexDigit', JsRegExp('/[0-9]/'))
            var.put('regexWhitelist', JsRegExp('/[ !#-&\\(-\\[\\]-~]/'))
            @Js
            def PyJs_anonymous_3390_(argument, options, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'argument':argument, 'options':options}, var)
                var.registers(['useHexNumbers', 'inline2', 'inline1', 'argument', 'lowercaseHex', 'escaped', 'second', 'result', 'compact', 'index', 'codePoint', 'useDecNumbers', 'character', 'json', 'isEmpty', 'tmp', 'string', 'quote', 'charCode', 'oldIndent', 'indent', 'newLine', 'useOctNumbers', 'useBinNumbers', 'length', 'defaults', 'longhand', 'hexadecimal', 'options', 'first'])
                PyJs_Object_3391_ = Js({'escapeEverything':Js(False),'escapeEtago':Js(False),'quotes':Js('single'),'wrap':Js(False),'es6':Js(False),'json':Js(False),'compact':var.get('true'),'lowercaseHex':Js(False),'numbers':Js('decimal'),'indent':Js('\t'),'__indent__':Js(''),'__inline1__':Js(False),'__inline2__':Js(False)})
                var.put('defaults', PyJs_Object_3391_)
                var.put('json', (var.get('options') and var.get('options').get('json')))
                if var.get('json'):
                    var.get('defaults').put('quotes', Js('double'))
                    var.get('defaults').put('wrap', var.get('true'))
                var.put('options', var.get('extend')(var.get('defaults'), var.get('options')))
                if ((var.get('options').get('quotes')!=Js('single')) and (var.get('options').get('quotes')!=Js('double'))):
                    var.get('options').put('quotes', Js('single'))
                var.put('quote', (Js('"') if (var.get('options').get('quotes')==Js('double')) else Js("'")))
                var.put('compact', var.get('options').get('compact'))
                var.put('indent', var.get('options').get('indent'))
                var.put('lowercaseHex', var.get('options').get('lowercaseHex'))
                var.put('oldIndent', Js(''))
                var.put('inline1', var.get('options').get('__inline1__'))
                var.put('inline2', var.get('options').get('__inline2__'))
                var.put('newLine', (Js('') if var.get('compact') else Js('\n')))
                pass
                var.put('isEmpty', var.get('true'))
                var.put('useBinNumbers', (var.get('options').get('numbers')==Js('binary')))
                var.put('useOctNumbers', (var.get('options').get('numbers')==Js('octal')))
                var.put('useDecNumbers', (var.get('options').get('numbers')==Js('decimal')))
                var.put('useHexNumbers', (var.get('options').get('numbers')==Js('hexadecimal')))
                if ((var.get('json') and var.get('argument')) and var.get('isFunction')(var.get('argument').get('toJSON'))):
                    var.put('argument', var.get('argument').callprop('toJSON'))
                if var.get('isString')(var.get('argument')).neg():
                    if var.get('isMap')(var.get('argument')):
                        if (var.get('argument').get('size')==Js(0.0)):
                            return Js('new Map()')
                        if var.get('compact').neg():
                            var.get('options').put('__inline1__', var.get('true'))
                        return ((Js('new Map(')+var.get('jsesc')(var.get('Array').callprop('from', var.get('argument')), var.get('options')))+Js(')'))
                    if var.get('isSet')(var.get('argument')):
                        if (var.get('argument').get('size')==Js(0.0)):
                            return Js('new Set()')
                        return ((Js('new Set(')+var.get('jsesc')(var.get('Array').callprop('from', var.get('argument')), var.get('options')))+Js(')'))
                    if var.get('isArray')(var.get('argument')):
                        var.put('result', Js([]))
                        var.get('options').put('wrap', var.get('true'))
                        if var.get('inline1'):
                            var.get('options').put('__inline1__', Js(False))
                            var.get('options').put('__inline2__', var.get('true'))
                        else:
                            var.put('oldIndent', var.get('options').get('__indent__'))
                            var.put('indent', var.get('oldIndent'), '+')
                            var.get('options').put('__indent__', var.get('indent'))
                        @Js
                        def PyJs_anonymous_3392_(value, this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                            var.registers(['value'])
                            var.put('isEmpty', Js(False))
                            if var.get('inline2'):
                                var.get('options').put('__inline2__', Js(False))
                            var.get('result').callprop('push', ((Js('') if (var.get('compact') or var.get('inline2')) else var.get('indent'))+var.get('jsesc')(var.get('value'), var.get('options'))))
                        PyJs_anonymous_3392_._set_name('anonymous')
                        var.get('forEach')(var.get('argument'), PyJs_anonymous_3392_)
                        if var.get('isEmpty'):
                            return Js('[]')
                        if var.get('inline2'):
                            return ((Js('[')+var.get('result').callprop('join', Js(', ')))+Js(']'))
                        return (((((Js('[')+var.get('newLine'))+var.get('result').callprop('join', (Js(',')+var.get('newLine'))))+var.get('newLine'))+(Js('') if var.get('compact') else var.get('oldIndent')))+Js(']'))
                    else:
                        if var.get('isNumber')(var.get('argument')):
                            if var.get('json'):
                                return var.get('JSON').callprop('stringify', var.get('argument'))
                            if var.get('useDecNumbers'):
                                return var.get('String')(var.get('argument'))
                            if var.get('useHexNumbers'):
                                var.put('tmp', var.get('argument').callprop('toString', Js(16.0)))
                                if var.get('lowercaseHex').neg():
                                    var.put('tmp', var.get('tmp').callprop('toUpperCase'))
                                return (Js('0x')+var.get('tmp'))
                            if var.get('useBinNumbers'):
                                return (Js('0b')+var.get('argument').callprop('toString', Js(2.0)))
                            if var.get('useOctNumbers'):
                                return (Js('0o')+var.get('argument').callprop('toString', Js(8.0)))
                        else:
                            if var.get('isObject')(var.get('argument')).neg():
                                if var.get('json'):
                                    return (var.get('JSON').callprop('stringify', var.get('argument')) or Js('null'))
                                return var.get('String')(var.get('argument'))
                            else:
                                var.put('result', Js([]))
                                var.get('options').put('wrap', var.get('true'))
                                var.put('oldIndent', var.get('options').get('__indent__'))
                                var.put('indent', var.get('oldIndent'), '+')
                                var.get('options').put('__indent__', var.get('indent'))
                                @Js
                                def PyJs_anonymous_3393_(key, value, this, arguments, var=var):
                                    var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
                                    var.registers(['value', 'key'])
                                    var.put('isEmpty', Js(False))
                                    var.get('result').callprop('push', (((((Js('') if var.get('compact') else var.get('indent'))+var.get('jsesc')(var.get('key'), var.get('options')))+Js(':'))+(Js('') if var.get('compact') else Js(' ')))+var.get('jsesc')(var.get('value'), var.get('options'))))
                                PyJs_anonymous_3393_._set_name('anonymous')
                                var.get('forOwn')(var.get('argument'), PyJs_anonymous_3393_)
                                if var.get('isEmpty'):
                                    return Js('{}')
                                return (((((Js('{')+var.get('newLine'))+var.get('result').callprop('join', (Js(',')+var.get('newLine'))))+var.get('newLine'))+(Js('') if var.get('compact') else var.get('oldIndent')))+Js('}'))
                var.put('string', var.get('argument'))
                var.put('index', (-Js(1.0)))
                var.put('length', var.get('string').get('length'))
                pass
                pass
                pass
                var.put('result', Js(''))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.put('character', var.get('string').callprop('charAt', var.get('index')))
                    if var.get('options').get('es6'):
                        var.put('first', var.get('string').callprop('charCodeAt', var.get('index')))
                        if (((var.get('first')>=Js(55296)) and (var.get('first')<=Js(56319))) and (var.get('length')>(var.get('index')+Js(1.0)))):
                            var.put('second', var.get('string').callprop('charCodeAt', (var.get('index')+Js(1.0))))
                            if ((var.get('second')>=Js(56320)) and (var.get('second')<=Js(57343))):
                                var.put('codePoint', (((((var.get('first')-Js(55296))*Js(1024))+var.get('second'))-Js(56320))+Js(65536)))
                                var.put('hexadecimal', var.get('codePoint').callprop('toString', Js(16.0)))
                                if var.get('lowercaseHex').neg():
                                    var.put('hexadecimal', var.get('hexadecimal').callprop('toUpperCase'))
                                var.put('result', ((Js('\\u{')+var.get('hexadecimal'))+Js('}')), '+')
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                                continue
                    if var.get('options').get('escapeEverything').neg():
                        if var.get('regexWhitelist').callprop('test', var.get('character')):
                            var.put('result', var.get('character'), '+')
                            continue
                        if (var.get('character')==Js('"')):
                            var.put('result', (Js('\\"') if (var.get('quote')==var.get('character')) else var.get('character')), '+')
                            continue
                        if (var.get('character')==Js("'")):
                            var.put('result', (Js("\\'") if (var.get('quote')==var.get('character')) else var.get('character')), '+')
                            continue
                    if (((var.get('character')==Js('\x00')) and var.get('json').neg()) and var.get('regexDigit').callprop('test', var.get('string').callprop('charAt', (var.get('index')+Js(1.0)))).neg()):
                        var.put('result', Js('\\0'), '+')
                        continue
                    if var.get('regexSingleEscape').callprop('test', var.get('character')):
                        var.put('result', var.get('singleEscapes').get(var.get('character')), '+')
                        continue
                    var.put('charCode', var.get('character').callprop('charCodeAt', Js(0.0)))
                    var.put('hexadecimal', var.get('charCode').callprop('toString', Js(16.0)))
                    if var.get('lowercaseHex').neg():
                        var.put('hexadecimal', var.get('hexadecimal').callprop('toUpperCase'))
                    var.put('longhand', ((var.get('hexadecimal').get('length')>Js(2.0)) or var.get('json')))
                    var.put('escaped', ((Js('\\')+(Js('u') if var.get('longhand') else Js('x')))+(Js('0000')+var.get('hexadecimal')).callprop('slice', ((-Js(4.0)) if var.get('longhand') else (-Js(2.0))))))
                    var.put('result', var.get('escaped'), '+')
                    continue
                if var.get('options').get('wrap'):
                    var.put('result', ((var.get('quote')+var.get('result'))+var.get('quote')))
                if var.get('options').get('escapeEtago'):
                    return var.get('result').callprop('replace', JsRegExp('/<\\/(script|style)/gi'), Js('<\\/$1'))
                return var.get('result')
            PyJs_anonymous_3390_._set_name('anonymous')
            var.put('jsesc', PyJs_anonymous_3390_)
            var.get('jsesc').put('version', Js('1.3.0'))
            if (((var.get('define',throw=False).typeof()==Js('function')) and (var.get('define').get('amd').typeof()==Js('object'))) and var.get('define').get('amd')):
                @Js
                def PyJs_anonymous_3394_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('jsesc')
                PyJs_anonymous_3394_._set_name('anonymous')
                var.get('define')(PyJs_anonymous_3394_)
            else:
                if (var.get('freeExports') and var.get('freeExports').get('nodeType').neg()):
                    if var.get('freeModule'):
                        var.get('freeModule').put('exports', var.get('jsesc'))
                    else:
                        var.get('freeExports').put('jsesc', var.get('jsesc'))
                else:
                    var.get('root').put('jsesc', var.get('jsesc'))
        PyJs_anonymous_3376_._set_name('anonymous')
        PyJs_anonymous_3376_(var.get("this"))
    PyJs_anonymous_3375_._set_name('anonymous')
    PyJs_anonymous_3375_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_3374_))))
PyJs_anonymous_3373_._set_name('anonymous')
PyJs_Object_3395_ = Js({})
@Js
def PyJs_anonymous_3396_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['JSON5', 'exports', 'require', 'module'])
    PyJs_Object_3397_ = Js({})
    var.put('JSON5', (var.get('exports') if PyJsStrictEq(var.get('exports',throw=False).typeof(),Js('object')) else PyJs_Object_3397_))
    @Js
    def PyJs_anonymous_3398_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['comment', 'ch', 'text', 'number', 'escapee', 'at', 'array', 'inlineComment', 'next', 'white', 'peek', 'string', 'blockComment', 'object', 'ws', 'lineNumber', 'columnNumber', 'word', 'value', 'error', 'identifier', 'renderChar'])
        Js('use strict')
        PyJs_Object_3399_ = Js({"'":Js("'"),'"':Js('"'),'\\':Js('\\'),'/':Js('/'),'\n':Js(''),'b':Js('\x08'),'f':Js('\x0c'),'n':Js('\n'),'r':Js('\r'),'t':Js('\t')})
        var.put('escapee', PyJs_Object_3399_)
        var.put('ws', Js([Js(' '), Js('\t'), Js('\r'), Js('\n'), Js('\x0b'), Js('\x0c'), Js('\xa0'), Js('\ufeff')]))
        @Js
        def PyJs_anonymous_3400_(chr, this, arguments, var=var):
            var = Scope({'this':this, 'chr':chr, 'arguments':arguments}, var)
            var.registers(['chr'])
            return (Js('EOF') if PyJsStrictEq(var.get('chr'),Js('')) else ((Js("'")+var.get('chr'))+Js("'")))
        PyJs_anonymous_3400_._set_name('anonymous')
        var.put('renderChar', PyJs_anonymous_3400_)
        @Js
        def PyJs_anonymous_3401_(m, this, arguments, var=var):
            var = Scope({'this':this, 'm':m, 'arguments':arguments}, var)
            var.registers(['m', 'error'])
            var.put('error', var.get('SyntaxError').create())
            var.get('error').put('message', ((((((var.get('m')+Js(' at line '))+var.get('lineNumber'))+Js(' column '))+var.get('columnNumber'))+Js(' of the JSON5 data. Still to read: '))+var.get('JSON').callprop('stringify', var.get('text').callprop('substring', (var.get('at')-Js(1.0)), (var.get('at')+Js(19.0))))))
            var.get('error').put('at', var.get('at'))
            var.get('error').put('lineNumber', var.get('lineNumber'))
            var.get('error').put('columnNumber', var.get('columnNumber'))
            PyJsTempException = JsToPyException(var.get('error'))
            raise PyJsTempException
        PyJs_anonymous_3401_._set_name('anonymous')
        var.put('error', PyJs_anonymous_3401_)
        @Js
        def PyJs_anonymous_3402_(c, this, arguments, var=var):
            var = Scope({'this':this, 'c':c, 'arguments':arguments}, var)
            var.registers(['c'])
            if (var.get('c') and PyJsStrictNeq(var.get('c'),var.get('ch'))):
                var.get('error')((((Js('Expected ')+var.get('renderChar')(var.get('c')))+Js(' instead of '))+var.get('renderChar')(var.get('ch'))))
            var.put('ch', var.get('text').callprop('charAt', var.get('at')))
            (var.put('at',Js(var.get('at').to_number())+Js(1))-Js(1))
            (var.put('columnNumber',Js(var.get('columnNumber').to_number())+Js(1))-Js(1))
            if (PyJsStrictEq(var.get('ch'),Js('\n')) or (PyJsStrictEq(var.get('ch'),Js('\r')) and PyJsStrictNeq(var.get('peek')(),Js('\n')))):
                (var.put('lineNumber',Js(var.get('lineNumber').to_number())+Js(1))-Js(1))
                var.put('columnNumber', Js(0.0))
            return var.get('ch')
        PyJs_anonymous_3402_._set_name('anonymous')
        var.put('next', PyJs_anonymous_3402_)
        @Js
        def PyJs_anonymous_3403_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('text').callprop('charAt', var.get('at'))
        PyJs_anonymous_3403_._set_name('anonymous')
        var.put('peek', PyJs_anonymous_3403_)
        @Js
        def PyJs_anonymous_3404_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.put('key', var.get('ch'))
            if (((PyJsStrictNeq(var.get('ch'),Js('_')) and PyJsStrictNeq(var.get('ch'),Js('$'))) and ((var.get('ch')<Js('a')) or (var.get('ch')>Js('z')))) and ((var.get('ch')<Js('A')) or (var.get('ch')>Js('Z')))):
                var.get('error')(Js('Bad identifier as unquoted key'))
            while (var.get('next')() and ((((PyJsStrictEq(var.get('ch'),Js('_')) or PyJsStrictEq(var.get('ch'),Js('$'))) or ((var.get('ch')>=Js('a')) and (var.get('ch')<=Js('z')))) or ((var.get('ch')>=Js('A')) and (var.get('ch')<=Js('Z')))) or ((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))))):
                var.put('key', var.get('ch'), '+')
            return var.get('key')
        PyJs_anonymous_3404_._set_name('anonymous')
        var.put('identifier', PyJs_anonymous_3404_)
        @Js
        def PyJs_anonymous_3405_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['base', 'number', 'string', 'sign'])
            var.put('sign', Js(''))
            var.put('string', Js(''))
            var.put('base', Js(10.0))
            if (PyJsStrictEq(var.get('ch'),Js('-')) or PyJsStrictEq(var.get('ch'),Js('+'))):
                var.put('sign', var.get('ch'))
                var.get('next')(var.get('ch'))
            if PyJsStrictEq(var.get('ch'),Js('I')):
                var.put('number', var.get('word')())
                if (PyJsStrictNeq(var.get('number',throw=False).typeof(),Js('number')) or var.get('isNaN')(var.get('number'))):
                    var.get('error')(Js('Unexpected word for number'))
                return ((-var.get('number')) if PyJsStrictEq(var.get('sign'),Js('-')) else var.get('number'))
            if PyJsStrictEq(var.get('ch'),Js('N')):
                var.put('number', var.get('word')())
                if var.get('isNaN')(var.get('number')).neg():
                    var.get('error')(Js('expected word to be NaN'))
                return var.get('number')
            if PyJsStrictEq(var.get('ch'),Js('0')):
                var.put('string', var.get('ch'), '+')
                var.get('next')()
                if (PyJsStrictEq(var.get('ch'),Js('x')) or PyJsStrictEq(var.get('ch'),Js('X'))):
                    var.put('string', var.get('ch'), '+')
                    var.get('next')()
                    var.put('base', Js(16.0))
                else:
                    if ((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))):
                        var.get('error')(Js('Octal literal'))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('base'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                    SWITCHED = True
                    while ((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))):
                        var.put('string', var.get('ch'), '+')
                        var.get('next')()
                    if PyJsStrictEq(var.get('ch'),Js('.')):
                        var.put('string', Js('.'), '+')
                        while ((var.get('next')() and (var.get('ch')>=Js('0'))) and (var.get('ch')<=Js('9'))):
                            var.put('string', var.get('ch'), '+')
                    if (PyJsStrictEq(var.get('ch'),Js('e')) or PyJsStrictEq(var.get('ch'),Js('E'))):
                        var.put('string', var.get('ch'), '+')
                        var.get('next')()
                        if (PyJsStrictEq(var.get('ch'),Js('-')) or PyJsStrictEq(var.get('ch'),Js('+'))):
                            var.put('string', var.get('ch'), '+')
                            var.get('next')()
                        while ((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))):
                            var.put('string', var.get('ch'), '+')
                            var.get('next')()
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js(16.0)):
                    SWITCHED = True
                    while ((((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))) or ((var.get('ch')>=Js('A')) and (var.get('ch')<=Js('F')))) or ((var.get('ch')>=Js('a')) and (var.get('ch')<=Js('f')))):
                        var.put('string', var.get('ch'), '+')
                        var.get('next')()
                    break
                SWITCHED = True
                break
            if PyJsStrictEq(var.get('sign'),Js('-')):
                var.put('number', (-var.get('string')))
            else:
                var.put('number', (+var.get('string')))
            if var.get('isFinite')(var.get('number')).neg():
                var.get('error')(Js('Bad number'))
            else:
                return var.get('number')
        PyJs_anonymous_3405_._set_name('anonymous')
        var.put('number', PyJs_anonymous_3405_)
        @Js
        def PyJs_anonymous_3406_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'delim', 'uffff', 'hex', 'string'])
            var.put('string', Js(''))
            if (PyJsStrictEq(var.get('ch'),Js('"')) or PyJsStrictEq(var.get('ch'),Js("'"))):
                var.put('delim', var.get('ch'))
                while var.get('next')():
                    if PyJsStrictEq(var.get('ch'),var.get('delim')):
                        var.get('next')()
                        return var.get('string')
                    else:
                        if PyJsStrictEq(var.get('ch'),Js('\\')):
                            var.get('next')()
                            if PyJsStrictEq(var.get('ch'),Js('u')):
                                var.put('uffff', Js(0.0))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<Js(4.0)):
                                    try:
                                        var.put('hex', var.get('parseInt')(var.get('next')(), Js(16.0)))
                                        if var.get('isFinite')(var.get('hex')).neg():
                                            break
                                        var.put('uffff', ((var.get('uffff')*Js(16.0))+var.get('hex')))
                                    finally:
                                            var.put('i', Js(1.0), '+')
                                var.put('string', var.get('String').callprop('fromCharCode', var.get('uffff')), '+')
                            else:
                                if PyJsStrictEq(var.get('ch'),Js('\r')):
                                    if PyJsStrictEq(var.get('peek')(),Js('\n')):
                                        var.get('next')()
                                else:
                                    if PyJsStrictEq(var.get('escapee').get(var.get('ch')).typeof(),Js('string')):
                                        var.put('string', var.get('escapee').get(var.get('ch')), '+')
                                    else:
                                        break
                        else:
                            if PyJsStrictEq(var.get('ch'),Js('\n')):
                                break
                            else:
                                var.put('string', var.get('ch'), '+')
            var.get('error')(Js('Bad string'))
        PyJs_anonymous_3406_._set_name('anonymous')
        var.put('string', PyJs_anonymous_3406_)
        @Js
        def PyJs_anonymous_3407_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictNeq(var.get('ch'),Js('/')):
                var.get('error')(Js('Not an inline comment'))
            while 1:
                var.get('next')()
                if (PyJsStrictEq(var.get('ch'),Js('\n')) or PyJsStrictEq(var.get('ch'),Js('\r'))):
                    var.get('next')()
                    return var.get('undefined')
                if not var.get('ch'):
                    break
        PyJs_anonymous_3407_._set_name('anonymous')
        var.put('inlineComment', PyJs_anonymous_3407_)
        @Js
        def PyJs_anonymous_3408_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictNeq(var.get('ch'),Js('*')):
                var.get('error')(Js('Not a block comment'))
            while 1:
                var.get('next')()
                while PyJsStrictEq(var.get('ch'),Js('*')):
                    var.get('next')(Js('*'))
                    if PyJsStrictEq(var.get('ch'),Js('/')):
                        var.get('next')(Js('/'))
                        return var.get('undefined')
                if not var.get('ch'):
                    break
            var.get('error')(Js('Unterminated block comment'))
        PyJs_anonymous_3408_._set_name('anonymous')
        var.put('blockComment', PyJs_anonymous_3408_)
        @Js
        def PyJs_anonymous_3409_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictNeq(var.get('ch'),Js('/')):
                var.get('error')(Js('Not a comment'))
            var.get('next')(Js('/'))
            if PyJsStrictEq(var.get('ch'),Js('/')):
                var.get('inlineComment')()
            else:
                if PyJsStrictEq(var.get('ch'),Js('*')):
                    var.get('blockComment')()
                else:
                    var.get('error')(Js('Unrecognized comment'))
        PyJs_anonymous_3409_._set_name('anonymous')
        var.put('comment', PyJs_anonymous_3409_)
        @Js
        def PyJs_anonymous_3410_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            while var.get('ch'):
                if PyJsStrictEq(var.get('ch'),Js('/')):
                    var.get('comment')()
                else:
                    if (var.get('ws').callprop('indexOf', var.get('ch'))>=Js(0.0)):
                        var.get('next')()
                    else:
                        return var.get('undefined')
        PyJs_anonymous_3410_._set_name('anonymous')
        var.put('white', PyJs_anonymous_3410_)
        @Js
        def PyJs_anonymous_3411_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('ch'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('t')):
                    SWITCHED = True
                    var.get('next')(Js('t'))
                    var.get('next')(Js('r'))
                    var.get('next')(Js('u'))
                    var.get('next')(Js('e'))
                    return var.get('true')
                if SWITCHED or PyJsStrictEq(CONDITION, Js('f')):
                    SWITCHED = True
                    var.get('next')(Js('f'))
                    var.get('next')(Js('a'))
                    var.get('next')(Js('l'))
                    var.get('next')(Js('s'))
                    var.get('next')(Js('e'))
                    return Js(False)
                if SWITCHED or PyJsStrictEq(CONDITION, Js('n')):
                    SWITCHED = True
                    var.get('next')(Js('n'))
                    var.get('next')(Js('u'))
                    var.get('next')(Js('l'))
                    var.get('next')(Js('l'))
                    return var.get("null")
                if SWITCHED or PyJsStrictEq(CONDITION, Js('I')):
                    SWITCHED = True
                    var.get('next')(Js('I'))
                    var.get('next')(Js('n'))
                    var.get('next')(Js('f'))
                    var.get('next')(Js('i'))
                    var.get('next')(Js('n'))
                    var.get('next')(Js('i'))
                    var.get('next')(Js('t'))
                    var.get('next')(Js('y'))
                    return var.get('Infinity')
                if SWITCHED or PyJsStrictEq(CONDITION, Js('N')):
                    SWITCHED = True
                    var.get('next')(Js('N'))
                    var.get('next')(Js('a'))
                    var.get('next')(Js('N'))
                    return var.get('NaN')
                SWITCHED = True
                break
            var.get('error')((Js('Unexpected ')+var.get('renderChar')(var.get('ch'))))
        PyJs_anonymous_3411_._set_name('anonymous')
        var.put('word', PyJs_anonymous_3411_)
        @Js
        def PyJs_anonymous_3412_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['array'])
            var.put('array', Js([]))
            if PyJsStrictEq(var.get('ch'),Js('[')):
                var.get('next')(Js('['))
                var.get('white')()
                while var.get('ch'):
                    if PyJsStrictEq(var.get('ch'),Js(']')):
                        var.get('next')(Js(']'))
                        return var.get('array')
                    if PyJsStrictEq(var.get('ch'),Js(',')):
                        var.get('error')(Js('Missing array element'))
                    else:
                        var.get('array').callprop('push', var.get('value')())
                    var.get('white')()
                    if PyJsStrictNeq(var.get('ch'),Js(',')):
                        var.get('next')(Js(']'))
                        return var.get('array')
                    var.get('next')(Js(','))
                    var.get('white')()
            var.get('error')(Js('Bad array'))
        PyJs_anonymous_3412_._set_name('anonymous')
        var.put('array', PyJs_anonymous_3412_)
        @Js
        def PyJs_anonymous_3413_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'key'])
            PyJs_Object_3414_ = Js({})
            var.put('object', PyJs_Object_3414_)
            if PyJsStrictEq(var.get('ch'),Js('{')):
                var.get('next')(Js('{'))
                var.get('white')()
                while var.get('ch'):
                    if PyJsStrictEq(var.get('ch'),Js('}')):
                        var.get('next')(Js('}'))
                        return var.get('object')
                    if (PyJsStrictEq(var.get('ch'),Js('"')) or PyJsStrictEq(var.get('ch'),Js("'"))):
                        var.put('key', var.get('string')())
                    else:
                        var.put('key', var.get('identifier')())
                    var.get('white')()
                    var.get('next')(Js(':'))
                    var.get('object').put(var.get('key'), var.get('value')())
                    var.get('white')()
                    if PyJsStrictNeq(var.get('ch'),Js(',')):
                        var.get('next')(Js('}'))
                        return var.get('object')
                    var.get('next')(Js(','))
                    var.get('white')()
            var.get('error')(Js('Bad object'))
        PyJs_anonymous_3413_._set_name('anonymous')
        var.put('object', PyJs_anonymous_3413_)
        @Js
        def PyJs_anonymous_3415_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('white')()
            while 1:
                SWITCHED = False
                CONDITION = (var.get('ch'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('{')):
                    SWITCHED = True
                    return var.get('object')()
                if SWITCHED or PyJsStrictEq(CONDITION, Js('[')):
                    SWITCHED = True
                    return var.get('array')()
                if SWITCHED or PyJsStrictEq(CONDITION, Js('"')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js("'")):
                    SWITCHED = True
                    return var.get('string')()
                if SWITCHED or PyJsStrictEq(CONDITION, Js('-')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('+')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('.')):
                    SWITCHED = True
                    return var.get('number')()
                if True:
                    SWITCHED = True
                    return (var.get('number')() if ((var.get('ch')>=Js('0')) and (var.get('ch')<=Js('9'))) else var.get('word')())
                SWITCHED = True
                break
        PyJs_anonymous_3415_._set_name('anonymous')
        var.put('value', PyJs_anonymous_3415_)
        @Js
        def PyJs_anonymous_3416_(source, reviver, this, arguments, var=var):
            var = Scope({'this':this, 'source':source, 'reviver':reviver, 'arguments':arguments}, var)
            var.registers(['source', 'reviver', 'result'])
            pass
            var.put('text', var.get('String')(var.get('source')))
            var.put('at', Js(0.0))
            var.put('lineNumber', Js(1.0))
            var.put('columnNumber', Js(1.0))
            var.put('ch', Js(' '))
            var.put('result', var.get('value')())
            var.get('white')()
            if var.get('ch'):
                var.get('error')(Js('Syntax error'))
            PyJs_Object_3417_ = Js({'':var.get('result')})
            @Js
            def PyJs_walk_3418_(holder, key, this, arguments, var=var):
                var = Scope({'this':this, 'holder':holder, 'arguments':arguments, 'key':key, 'walk':PyJs_walk_3418_}, var)
                var.registers(['k', 'holder', 'key', 'value', 'v'])
                var.put('value', var.get('holder').get(var.get('key')))
                if (var.get('value') and PyJsStrictEq(var.get('value',throw=False).typeof(),Js('object'))):
                    for PyJsTemp in var.get('value'):
                        var.put('k', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('value'), var.get('k')):
                            var.put('v', var.get('walk')(var.get('value'), var.get('k')))
                            if PyJsStrictNeq(var.get('v'),var.get('undefined')):
                                var.get('value').put(var.get('k'), var.get('v'))
                            else:
                                var.get('value').delete(var.get('k'))
                return var.get('reviver').callprop('call', var.get('holder'), var.get('key'), var.get('value'))
            PyJs_walk_3418_._set_name('walk')
            return (PyJs_walk_3418_(PyJs_Object_3417_, Js('')) if PyJsStrictEq(var.get('reviver',throw=False).typeof(),Js('function')) else var.get('result'))
        PyJs_anonymous_3416_._set_name('anonymous')
        return PyJs_anonymous_3416_
    PyJs_anonymous_3398_._set_name('anonymous')
    var.get('JSON5').put('parse', PyJs_anonymous_3398_())
    @Js
    def PyJs_anonymous_3419_(obj, replacer, space, this, arguments, var=var):
        var = Scope({'this':this, 'replacer':replacer, 'obj':obj, 'arguments':arguments, 'space':space}, var)
        var.registers(['isArray', 'topLevelHolder', 'isDate', 'escapeString', 'space', 'internalStringify', 'objStack', 'replacer', 'escapable', 'cx', 'meta', 'checkForCircular', 'isWordChar', 'isWordStart', 'obj', 'makeIndent', 'indentStr', 'isWord', 'getReplacedValueOrUndefined'])
        @Js
        def PyJsHoisted_isArray_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            if var.get('Array').get('isArray'):
                return var.get('Array').callprop('isArray', var.get('obj'))
            else:
                return PyJsStrictEq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('obj')),Js('[object Array]'))
        PyJsHoisted_isArray_.__name__ = 'isArray'
        var.put('isArray', PyJsHoisted_isArray_)
        @Js
        def PyJsHoisted_isDate_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['obj'])
            return PyJsStrictEq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('obj')),Js('[object Date]'))
        PyJsHoisted_isDate_.__name__ = 'isDate'
        var.put('isDate', PyJsHoisted_isDate_)
        @Js
        def PyJsHoisted_escapeString_(string, this, arguments, var=var):
            var = Scope({'this':this, 'string':string, 'arguments':arguments}, var)
            var.registers(['string'])
            var.get('escapable').put('lastIndex', Js(0.0))
            @Js
            def PyJs_anonymous_3422_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                var.registers(['a', 'c'])
                var.put('c', var.get('meta').get(var.get('a')))
                return (var.get('c') if PyJsStrictEq(var.get('c',throw=False).typeof(),Js('string')) else (Js('\\u')+(Js('0000')+var.get('a').callprop('charCodeAt', Js(0.0)).callprop('toString', Js(16.0))).callprop('slice', (-Js(4.0)))))
            PyJs_anonymous_3422_._set_name('anonymous')
            return (((Js('"')+var.get('string').callprop('replace', var.get('escapable'), PyJs_anonymous_3422_))+Js('"')) if var.get('escapable').callprop('test', var.get('string')) else ((Js('"')+var.get('string'))+Js('"')))
        PyJsHoisted_escapeString_.__name__ = 'escapeString'
        var.put('escapeString', PyJsHoisted_escapeString_)
        @Js
        def PyJsHoisted_internalStringify_(holder, key, isTopLevel, this, arguments, var=var):
            var = Scope({'this':this, 'isTopLevel':isTopLevel, 'holder':holder, 'arguments':arguments, 'key':key}, var)
            var.registers(['i', 'buffer', 'res', 'value', 'prop', 'nonEmpty', 'key', 'isTopLevel', 'holder', 'obj_part'])
            pass
            var.put('obj_part', var.get('getReplacedValueOrUndefined')(var.get('holder'), var.get('key'), var.get('isTopLevel')))
            if (var.get('obj_part') and var.get('isDate')(var.get('obj_part')).neg()):
                var.put('obj_part', var.get('obj_part').callprop('valueOf'))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('obj_part',throw=False).typeof())
                if SWITCHED or PyJsStrictEq(CONDITION, Js('boolean')):
                    SWITCHED = True
                    return var.get('obj_part').callprop('toString')
                if SWITCHED or PyJsStrictEq(CONDITION, Js('number')):
                    SWITCHED = True
                    if (var.get('isNaN')(var.get('obj_part')) or var.get('isFinite')(var.get('obj_part')).neg()):
                        return Js('null')
                    return var.get('obj_part').callprop('toString')
                if SWITCHED or PyJsStrictEq(CONDITION, Js('string')):
                    SWITCHED = True
                    return var.get('escapeString')(var.get('obj_part').callprop('toString'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('object')):
                    SWITCHED = True
                    if PyJsStrictEq(var.get('obj_part'),var.get("null")):
                        return Js('null')
                    else:
                        if var.get('isArray')(var.get('obj_part')):
                            var.get('checkForCircular')(var.get('obj_part'))
                            var.put('buffer', Js('['))
                            var.get('objStack').callprop('push', var.get('obj_part'))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('obj_part').get('length')):
                                try:
                                    var.put('res', var.get('internalStringify')(var.get('obj_part'), var.get('i'), Js(False)))
                                    var.put('buffer', var.get('makeIndent')(var.get('indentStr'), var.get('objStack').get('length')), '+')
                                    if (PyJsStrictEq(var.get('res'),var.get("null")) or PyJsStrictEq(var.get('res',throw=False).typeof(),Js('undefined'))):
                                        var.put('buffer', Js('null'), '+')
                                    else:
                                        var.put('buffer', var.get('res'), '+')
                                    if (var.get('i')<(var.get('obj_part').get('length')-Js(1.0))):
                                        var.put('buffer', Js(','), '+')
                                    else:
                                        if var.get('indentStr'):
                                            var.put('buffer', Js('\n'), '+')
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.get('objStack').callprop('pop')
                            var.put('buffer', (var.get('makeIndent')(var.get('indentStr'), var.get('objStack').get('length'), var.get('true'))+Js(']')), '+')
                        else:
                            var.get('checkForCircular')(var.get('obj_part'))
                            var.put('buffer', Js('{'))
                            var.put('nonEmpty', Js(False))
                            var.get('objStack').callprop('push', var.get('obj_part'))
                            for PyJsTemp in var.get('obj_part'):
                                var.put('prop', PyJsTemp)
                                if var.get('obj_part').callprop('hasOwnProperty', var.get('prop')):
                                    var.put('value', var.get('internalStringify')(var.get('obj_part'), var.get('prop'), Js(False)))
                                    var.put('isTopLevel', Js(False))
                                    if (PyJsStrictNeq(var.get('value',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('value'),var.get("null"))):
                                        var.put('buffer', var.get('makeIndent')(var.get('indentStr'), var.get('objStack').get('length')), '+')
                                        var.put('nonEmpty', var.get('true'))
                                        var.put('key', (var.get('prop') if var.get('isWord')(var.get('prop')) else var.get('escapeString')(var.get('prop'))))
                                        var.put('buffer', ((((var.get('key')+Js(':'))+(Js(' ') if var.get('indentStr') else Js('')))+var.get('value'))+Js(',')), '+')
                            var.get('objStack').callprop('pop')
                            if var.get('nonEmpty'):
                                var.put('buffer', ((var.get('buffer').callprop('substring', Js(0.0), (var.get('buffer').get('length')-Js(1.0)))+var.get('makeIndent')(var.get('indentStr'), var.get('objStack').get('length')))+Js('}')))
                            else:
                                var.put('buffer', Js('{}'))
                    return var.get('buffer')
                if True:
                    SWITCHED = True
                    return var.get('undefined')
                SWITCHED = True
                break
        PyJsHoisted_internalStringify_.__name__ = 'internalStringify'
        var.put('internalStringify', PyJsHoisted_internalStringify_)
        @Js
        def PyJsHoisted_isWord_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['i', 'length', 'key'])
            if PyJsStrictNeq(var.get('key',throw=False).typeof(),Js('string')):
                return Js(False)
            if var.get('isWordStart')(var.get('key').get('0')).neg():
                return Js(False)
            var.put('i', Js(1.0))
            var.put('length', var.get('key').get('length'))
            while (var.get('i')<var.get('length')):
                if var.get('isWordChar')(var.get('key').get(var.get('i'))).neg():
                    return Js(False)
                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('true')
        PyJsHoisted_isWord_.__name__ = 'isWord'
        var.put('isWord', PyJsHoisted_isWord_)
        @Js
        def PyJsHoisted_isWordChar_(c, this, arguments, var=var):
            var = Scope({'this':this, 'c':c, 'arguments':arguments}, var)
            var.registers(['c'])
            return ((((((var.get('c')>=Js('a')) and (var.get('c')<=Js('z'))) or ((var.get('c')>=Js('A')) and (var.get('c')<=Js('Z')))) or ((var.get('c')>=Js('0')) and (var.get('c')<=Js('9')))) or PyJsStrictEq(var.get('c'),Js('_'))) or PyJsStrictEq(var.get('c'),Js('$')))
        PyJsHoisted_isWordChar_.__name__ = 'isWordChar'
        var.put('isWordChar', PyJsHoisted_isWordChar_)
        @Js
        def PyJsHoisted_isWordStart_(c, this, arguments, var=var):
            var = Scope({'this':this, 'c':c, 'arguments':arguments}, var)
            var.registers(['c'])
            return (((((var.get('c')>=Js('a')) and (var.get('c')<=Js('z'))) or ((var.get('c')>=Js('A')) and (var.get('c')<=Js('Z')))) or PyJsStrictEq(var.get('c'),Js('_'))) or PyJsStrictEq(var.get('c'),Js('$')))
        PyJsHoisted_isWordStart_.__name__ = 'isWordStart'
        var.put('isWordStart', PyJsHoisted_isWordStart_)
        @Js
        def PyJsHoisted_makeIndent_(str, num, noNewLine, this, arguments, var=var):
            var = Scope({'this':this, 'num':num, 'noNewLine':noNewLine, 'str':str, 'arguments':arguments}, var)
            var.registers(['i', 'num', 'indent', 'noNewLine', 'str'])
            if var.get('str').neg():
                return Js('')
            if (var.get('str').get('length')>Js(10.0)):
                var.put('str', var.get('str').callprop('substring', Js(0.0), Js(10.0)))
            var.put('indent', (Js('') if var.get('noNewLine') else Js('\n')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('num')):
                try:
                    var.put('indent', var.get('str'), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('indent')
        PyJsHoisted_makeIndent_.__name__ = 'makeIndent'
        var.put('makeIndent', PyJsHoisted_makeIndent_)
        @Js
        def PyJsHoisted_checkForCircular_(obj, this, arguments, var=var):
            var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
            var.registers(['i', 'obj'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('objStack').get('length')):
                try:
                    if PyJsStrictEq(var.get('objStack').get(var.get('i')),var.get('obj')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Converting circular structure to JSON')))
                        raise PyJsTempException
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_checkForCircular_.__name__ = 'checkForCircular'
        var.put('checkForCircular', PyJsHoisted_checkForCircular_)
        if (var.get('replacer') and (PyJsStrictNeq(var.get('replacer',throw=False).typeof(),Js('function')) and var.get('isArray')(var.get('replacer')).neg())):
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Replacer must be a function or an array')))
            raise PyJsTempException
        @Js
        def PyJs_anonymous_3420_(holder, key, isTopLevel, this, arguments, var=var):
            var = Scope({'this':this, 'isTopLevel':isTopLevel, 'holder':holder, 'arguments':arguments, 'key':key}, var)
            var.registers(['isTopLevel', 'holder', 'key', 'value'])
            var.put('value', var.get('holder').get(var.get('key')))
            if ((var.get('value') and var.get('value').get('toJSON')) and PyJsStrictEq(var.get('value').get('toJSON').typeof(),Js('function'))):
                var.put('value', var.get('value').callprop('toJSON'))
            if PyJsStrictEq(var.get('replacer',throw=False).typeof(),Js('function')):
                return var.get('replacer').callprop('call', var.get('holder'), var.get('key'), var.get('value'))
            else:
                if var.get('replacer'):
                    if ((var.get('isTopLevel') or var.get('isArray')(var.get('holder'))) or (var.get('replacer').callprop('indexOf', var.get('key'))>=Js(0.0))):
                        return var.get('value')
                    else:
                        return var.get('undefined')
                else:
                    return var.get('value')
        PyJs_anonymous_3420_._set_name('anonymous')
        var.put('getReplacedValueOrUndefined', PyJs_anonymous_3420_)
        pass
        pass
        pass
        var.get('JSON5').put('isWord', var.get('isWord'))
        pass
        pass
        var.put('objStack', Js([]))
        pass
        pass
        pass
        if var.get('space'):
            if PyJsStrictEq(var.get('space',throw=False).typeof(),Js('string')):
                var.put('indentStr', var.get('space'))
            else:
                if (PyJsStrictEq(var.get('space',throw=False).typeof(),Js('number')) and (var.get('space')>=Js(0.0))):
                    var.put('indentStr', var.get('makeIndent')(Js(' '), var.get('space'), var.get('true')))
                else:
                    pass
        var.put('cx', JsRegExp('/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g'))
        var.put('escapable', JsRegExp('/[\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g'))
        PyJs_Object_3421_ = Js({'\x08':Js('\\b'),'\t':Js('\\t'),'\n':Js('\\n'),'\x0c':Js('\\f'),'\r':Js('\\r'),'"':Js('\\"'),'\\':Js('\\\\')})
        var.put('meta', PyJs_Object_3421_)
        pass
        pass
        PyJs_Object_3423_ = Js({'':var.get('obj')})
        var.put('topLevelHolder', PyJs_Object_3423_)
        if PyJsStrictEq(var.get('obj'),var.get('undefined')):
            return var.get('getReplacedValueOrUndefined')(var.get('topLevelHolder'), Js(''), var.get('true'))
        return var.get('internalStringify')(var.get('topLevelHolder'), Js(''), var.get('true'))
    PyJs_anonymous_3419_._set_name('anonymous')
    var.get('JSON5').put('stringify', PyJs_anonymous_3419_)
PyJs_anonymous_3396_._set_name('anonymous')
PyJs_Object_3424_ = Js({})
@Js
def PyJs_anonymous_3425_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'DataView', 'module', 'getNative', 'root'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('root', var.get('require')(Js('./_root')))
    var.put('DataView', var.get('getNative')(var.get('root'), Js('DataView')))
    var.get('module').put('exports', var.get('DataView'))
PyJs_anonymous_3425_._set_name('anonymous')
PyJs_Object_3426_ = Js({'./_getNative':Js(382.0),'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3427_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'hashGet', 'Hash', 'hashClear', 'hashSet', 'require', 'module', 'hashDelete', 'hashHas'])
    @Js
    def PyJsHoisted_Hash_(entries, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'entries':entries}, var)
        var.registers(['index', 'length', 'entries', 'entry'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('entries').get('length') if var.get('entries') else Js(0.0)))
        var.get("this").callprop('clear')
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('entry', var.get('entries').get(var.get('index')))
            var.get("this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
    PyJsHoisted_Hash_.__name__ = 'Hash'
    var.put('Hash', PyJsHoisted_Hash_)
    var.put('hashClear', var.get('require')(Js('./_hashClear')))
    var.put('hashDelete', var.get('require')(Js('./_hashDelete')))
    var.put('hashGet', var.get('require')(Js('./_hashGet')))
    var.put('hashHas', var.get('require')(Js('./_hashHas')))
    var.put('hashSet', var.get('require')(Js('./_hashSet')))
    pass
    var.get('Hash').get('prototype').put('clear', var.get('hashClear'))
    var.get('Hash').get('prototype').put('delete', var.get('hashDelete'))
    var.get('Hash').get('prototype').put('get', var.get('hashGet'))
    var.get('Hash').get('prototype').put('has', var.get('hashHas'))
    var.get('Hash').get('prototype').put('set', var.get('hashSet'))
    var.get('module').put('exports', var.get('Hash'))
PyJs_anonymous_3427_._set_name('anonymous')
PyJs_Object_3428_ = Js({'./_hashClear':Js(388.0),'./_hashDelete':Js(389.0),'./_hashGet':Js(390.0),'./_hashHas':Js(391.0),'./_hashSet':Js(392.0)})
@Js
def PyJs_anonymous_3429_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['listCacheDelete', 'listCacheHas', 'listCacheGet', 'require', 'exports', 'module', 'listCacheClear', 'listCacheSet', 'ListCache'])
    @Js
    def PyJsHoisted_ListCache_(entries, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'entries':entries}, var)
        var.registers(['index', 'length', 'entries', 'entry'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('entries').get('length') if var.get('entries') else Js(0.0)))
        var.get("this").callprop('clear')
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('entry', var.get('entries').get(var.get('index')))
            var.get("this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
    PyJsHoisted_ListCache_.__name__ = 'ListCache'
    var.put('ListCache', PyJsHoisted_ListCache_)
    var.put('listCacheClear', var.get('require')(Js('./_listCacheClear')))
    var.put('listCacheDelete', var.get('require')(Js('./_listCacheDelete')))
    var.put('listCacheGet', var.get('require')(Js('./_listCacheGet')))
    var.put('listCacheHas', var.get('require')(Js('./_listCacheHas')))
    var.put('listCacheSet', var.get('require')(Js('./_listCacheSet')))
    pass
    var.get('ListCache').get('prototype').put('clear', var.get('listCacheClear'))
    var.get('ListCache').get('prototype').put('delete', var.get('listCacheDelete'))
    var.get('ListCache').get('prototype').put('get', var.get('listCacheGet'))
    var.get('ListCache').get('prototype').put('has', var.get('listCacheHas'))
    var.get('ListCache').get('prototype').put('set', var.get('listCacheSet'))
    var.get('module').put('exports', var.get('ListCache'))
PyJs_anonymous_3429_._set_name('anonymous')
PyJs_Object_3430_ = Js({'./_listCacheClear':Js(409.0),'./_listCacheDelete':Js(410.0),'./_listCacheGet':Js(411.0),'./_listCacheHas':Js(412.0),'./_listCacheSet':Js(413.0)})
@Js
def PyJs_anonymous_3431_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['Map', 'exports', 'require', 'module', 'getNative', 'root'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Map', var.get('getNative')(var.get('root'), Js('Map')))
    var.get('module').put('exports', var.get('Map'))
PyJs_anonymous_3431_._set_name('anonymous')
PyJs_Object_3432_ = Js({'./_getNative':Js(382.0),'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3433_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'mapCacheGet', 'mapCacheHas', 'require', 'mapCacheDelete', 'mapCacheClear', 'mapCacheSet', 'MapCache', 'module'])
    @Js
    def PyJsHoisted_MapCache_(entries, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'entries':entries}, var)
        var.registers(['index', 'length', 'entries', 'entry'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('entries').get('length') if var.get('entries') else Js(0.0)))
        var.get("this").callprop('clear')
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('entry', var.get('entries').get(var.get('index')))
            var.get("this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
    PyJsHoisted_MapCache_.__name__ = 'MapCache'
    var.put('MapCache', PyJsHoisted_MapCache_)
    var.put('mapCacheClear', var.get('require')(Js('./_mapCacheClear')))
    var.put('mapCacheDelete', var.get('require')(Js('./_mapCacheDelete')))
    var.put('mapCacheGet', var.get('require')(Js('./_mapCacheGet')))
    var.put('mapCacheHas', var.get('require')(Js('./_mapCacheHas')))
    var.put('mapCacheSet', var.get('require')(Js('./_mapCacheSet')))
    pass
    var.get('MapCache').get('prototype').put('clear', var.get('mapCacheClear'))
    var.get('MapCache').get('prototype').put('delete', var.get('mapCacheDelete'))
    var.get('MapCache').get('prototype').put('get', var.get('mapCacheGet'))
    var.get('MapCache').get('prototype').put('has', var.get('mapCacheHas'))
    var.get('MapCache').get('prototype').put('set', var.get('mapCacheSet'))
    var.get('module').put('exports', var.get('MapCache'))
PyJs_anonymous_3433_._set_name('anonymous')
PyJs_Object_3434_ = Js({'./_mapCacheClear':Js(414.0),'./_mapCacheDelete':Js(415.0),'./_mapCacheGet':Js(416.0),'./_mapCacheHas':Js(417.0),'./_mapCacheSet':Js(418.0)})
@Js
def PyJs_anonymous_3435_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'getNative', 'Promise', 'root'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Promise', var.get('getNative')(var.get('root'), Js('Promise')))
    var.get('module').put('exports', var.get('Promise'))
PyJs_anonymous_3435_._set_name('anonymous')
PyJs_Object_3436_ = Js({'./_getNative':Js(382.0),'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3437_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['Reflect', 'require', 'root', 'exports', 'module'])
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Reflect', var.get('root').get('Reflect'))
    var.get('module').put('exports', var.get('Reflect'))
PyJs_anonymous_3437_._set_name('anonymous')
PyJs_Object_3438_ = Js({'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3439_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Set', 'require', 'module', 'getNative', 'root'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Set', var.get('getNative')(var.get('root'), Js('Set')))
    var.get('module').put('exports', var.get('Set'))
PyJs_anonymous_3439_._set_name('anonymous')
PyJs_Object_3440_ = Js({'./_getNative':Js(382.0),'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3441_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['setCacheAdd', 'exports', 'SetCache', 'require', 'setCacheHas', 'module', 'MapCache'])
    @Js
    def PyJsHoisted_SetCache_(values, this, arguments, var=var):
        var = Scope({'this':this, 'values':values, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'values'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('values').get('length') if var.get('values') else Js(0.0)))
        var.get("this").put('__data__', var.get('MapCache').create())
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.get("this").callprop('add', var.get('values').get(var.get('index')))
    PyJsHoisted_SetCache_.__name__ = 'SetCache'
    var.put('SetCache', PyJsHoisted_SetCache_)
    var.put('MapCache', var.get('require')(Js('./_MapCache')))
    var.put('setCacheAdd', var.get('require')(Js('./_setCacheAdd')))
    var.put('setCacheHas', var.get('require')(Js('./_setCacheHas')))
    pass
    var.get('SetCache').get('prototype').put('add', var.get('SetCache').get('prototype').put('push', var.get('setCacheAdd')))
    var.get('SetCache').get('prototype').put('has', var.get('setCacheHas'))
    var.get('module').put('exports', var.get('SetCache'))
PyJs_anonymous_3441_._set_name('anonymous')
PyJs_Object_3442_ = Js({'./_MapCache':Js(289.0),'./_setCacheAdd':Js(423.0),'./_setCacheHas':Js(424.0)})
@Js
def PyJs_anonymous_3443_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['stackSet', 'exports', 'stackGet', 'stackDelete', 'stackClear', 'module', 'stackHas', 'require', 'Stack', 'ListCache'])
    @Js
    def PyJsHoisted_Stack_(entries, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'entries':entries}, var)
        var.registers(['entries'])
        var.get("this").put('__data__', var.get('ListCache').create(var.get('entries')))
    PyJsHoisted_Stack_.__name__ = 'Stack'
    var.put('Stack', PyJsHoisted_Stack_)
    var.put('ListCache', var.get('require')(Js('./_ListCache')))
    var.put('stackClear', var.get('require')(Js('./_stackClear')))
    var.put('stackDelete', var.get('require')(Js('./_stackDelete')))
    var.put('stackGet', var.get('require')(Js('./_stackGet')))
    var.put('stackHas', var.get('require')(Js('./_stackHas')))
    var.put('stackSet', var.get('require')(Js('./_stackSet')))
    pass
    var.get('Stack').get('prototype').put('clear', var.get('stackClear'))
    var.get('Stack').get('prototype').put('delete', var.get('stackDelete'))
    var.get('Stack').get('prototype').put('get', var.get('stackGet'))
    var.get('Stack').get('prototype').put('has', var.get('stackHas'))
    var.get('Stack').get('prototype').put('set', var.get('stackSet'))
    var.get('module').put('exports', var.get('Stack'))
PyJs_anonymous_3443_._set_name('anonymous')
PyJs_Object_3444_ = Js({'./_ListCache':Js(287.0),'./_stackClear':Js(426.0),'./_stackDelete':Js(427.0),'./_stackGet':Js(428.0),'./_stackHas':Js(429.0),'./_stackSet':Js(430.0)})
@Js
def PyJs_anonymous_3445_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Symbol', 'root', 'require', 'module'])
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Symbol', var.get('root').get('Symbol'))
    var.get('module').put('exports', var.get('Symbol'))
PyJs_anonymous_3445_._set_name('anonymous')
PyJs_Object_3446_ = Js({'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3447_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'root', 'Uint8Array', 'module'])
    var.put('root', var.get('require')(Js('./_root')))
    var.put('Uint8Array', var.get('root').get('Uint8Array'))
    var.get('module').put('exports', var.get('Uint8Array'))
PyJs_anonymous_3447_._set_name('anonymous')
PyJs_Object_3448_ = Js({'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3449_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'WeakMap', 'module', 'getNative', 'root'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('root', var.get('require')(Js('./_root')))
    var.put('WeakMap', var.get('getNative')(var.get('root'), Js('WeakMap')))
    var.get('module').put('exports', var.get('WeakMap'))
PyJs_anonymous_3449_._set_name('anonymous')
PyJs_Object_3450_ = Js({'./_getNative':Js(382.0),'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3451_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'addMapEntry', 'exports', 'module'])
    @Js
    def PyJsHoisted_addMapEntry_(map, pair, this, arguments, var=var):
        var = Scope({'pair':pair, 'map':map, 'this':this, 'arguments':arguments}, var)
        var.registers(['pair', 'map'])
        var.get('map').callprop('set', var.get('pair').get('0'), var.get('pair').get('1'))
        return var.get('map')
    PyJsHoisted_addMapEntry_.__name__ = 'addMapEntry'
    var.put('addMapEntry', PyJsHoisted_addMapEntry_)
    pass
    var.get('module').put('exports', var.get('addMapEntry'))
PyJs_anonymous_3451_._set_name('anonymous')
PyJs_Object_3452_ = Js({})
@Js
def PyJs_anonymous_3453_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'addSetEntry'])
    @Js
    def PyJsHoisted_addSetEntry_(set, value, this, arguments, var=var):
        var = Scope({'this':this, 'set':set, 'arguments':arguments, 'value':value}, var)
        var.registers(['set', 'value'])
        var.get('set').callprop('add', var.get('value'))
        return var.get('set')
    PyJsHoisted_addSetEntry_.__name__ = 'addSetEntry'
    var.put('addSetEntry', PyJsHoisted_addSetEntry_)
    pass
    var.get('module').put('exports', var.get('addSetEntry'))
PyJs_anonymous_3453_._set_name('anonymous')
PyJs_Object_3454_ = Js({})
@Js
def PyJs_anonymous_3455_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['apply', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_apply_(func, thisArg, args, this, arguments, var=var):
        var = Scope({'this':this, 'args':args, 'arguments':arguments, 'func':func, 'thisArg':thisArg}, var)
        var.registers(['length', 'args', 'func', 'thisArg'])
        var.put('length', var.get('args').get('length'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('length'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                SWITCHED = True
                return var.get('func').callprop('call', var.get('thisArg'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                SWITCHED = True
                return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                SWITCHED = True
                return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                SWITCHED = True
                return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
            SWITCHED = True
            break
        return var.get('func').callprop('apply', var.get('thisArg'), var.get('args'))
    PyJsHoisted_apply_.__name__ = 'apply'
    var.put('apply', PyJsHoisted_apply_)
    pass
    var.get('module').put('exports', var.get('apply'))
PyJs_anonymous_3455_._set_name('anonymous')
PyJs_Object_3456_ = Js({})
@Js
def PyJs_anonymous_3457_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['arrayEach', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_arrayEach_(array, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments, 'iteratee':iteratee}, var)
        var.registers(['index', 'length', 'array', 'iteratee'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            if PyJsStrictEq(var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')),Js(False)):
                break
        return var.get('array')
    PyJsHoisted_arrayEach_.__name__ = 'arrayEach'
    var.put('arrayEach', PyJsHoisted_arrayEach_)
    pass
    var.get('module').put('exports', var.get('arrayEach'))
PyJs_anonymous_3457_._set_name('anonymous')
PyJs_Object_3458_ = Js({})
@Js
def PyJs_anonymous_3459_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOf', 'require', 'exports', 'module', 'arrayIncludes'])
    @Js
    def PyJsHoisted_arrayIncludes_(array, value, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments, 'value':value}, var)
        var.registers(['length', 'array', 'value'])
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        return (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('array'), var.get('value'), Js(0.0))>(-Js(1.0))))
    PyJsHoisted_arrayIncludes_.__name__ = 'arrayIncludes'
    var.put('arrayIncludes', PyJsHoisted_arrayIncludes_)
    var.put('baseIndexOf', var.get('require')(Js('./_baseIndexOf')))
    pass
    var.get('module').put('exports', var.get('arrayIncludes'))
PyJs_anonymous_3459_._set_name('anonymous')
PyJs_Object_3460_ = Js({'./_baseIndexOf':Js(325.0)})
@Js
def PyJs_anonymous_3461_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'arrayIncludesWith', 'module'])
    @Js
    def PyJsHoisted_arrayIncludesWith_(array, value, comparator, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'comparator':comparator, 'value':value, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'array', 'value', 'comparator'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            if var.get('comparator')(var.get('value'), var.get('array').get(var.get('index'))):
                return var.get('true')
        return Js(False)
    PyJsHoisted_arrayIncludesWith_.__name__ = 'arrayIncludesWith'
    var.put('arrayIncludesWith', PyJsHoisted_arrayIncludesWith_)
    pass
    var.get('module').put('exports', var.get('arrayIncludesWith'))
PyJs_anonymous_3461_._set_name('anonymous')
PyJs_Object_3462_ = Js({})
@Js
def PyJs_anonymous_3463_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'arrayMap', 'exports', 'module'])
    @Js
    def PyJsHoisted_arrayMap_(array, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments, 'iteratee':iteratee}, var)
        var.registers(['index', 'length', 'array', 'result', 'iteratee'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        var.put('result', var.get('Array')(var.get('length')))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.get('result').put(var.get('index'), var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
        return var.get('result')
    PyJsHoisted_arrayMap_.__name__ = 'arrayMap'
    var.put('arrayMap', PyJsHoisted_arrayMap_)
    pass
    var.get('module').put('exports', var.get('arrayMap'))
PyJs_anonymous_3463_._set_name('anonymous')
PyJs_Object_3464_ = Js({})
@Js
def PyJs_anonymous_3465_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'arrayPush'])
    @Js
    def PyJsHoisted_arrayPush_(array, values, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'values':values, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'values', 'array', 'offset'])
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('values').get('length'))
        var.put('offset', var.get('array').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.get('array').put((var.get('offset')+var.get('index')), var.get('values').get(var.get('index')))
        return var.get('array')
    PyJsHoisted_arrayPush_.__name__ = 'arrayPush'
    var.put('arrayPush', PyJsHoisted_arrayPush_)
    pass
    var.get('module').put('exports', var.get('arrayPush'))
PyJs_anonymous_3465_._set_name('anonymous')
PyJs_Object_3466_ = Js({})
@Js
def PyJs_anonymous_3467_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'arrayReduce'])
    @Js
    def PyJsHoisted_arrayReduce_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
        var = Scope({'accumulator':accumulator, 'initAccum':initAccum, 'arguments':arguments, 'iteratee':iteratee, 'this':this, 'array':array}, var)
        var.registers(['index', 'initAccum', 'accumulator', 'length', 'iteratee', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        if (var.get('initAccum') and var.get('length')):
            var.put('accumulator', var.get('array').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
        return var.get('accumulator')
    PyJsHoisted_arrayReduce_.__name__ = 'arrayReduce'
    var.put('arrayReduce', PyJsHoisted_arrayReduce_)
    pass
    var.get('module').put('exports', var.get('arrayReduce'))
PyJs_anonymous_3467_._set_name('anonymous')
PyJs_Object_3468_ = Js({})
@Js
def PyJs_anonymous_3469_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['arraySome', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_arraySome_(array, predicate, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'predicate':predicate, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'predicate', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                return var.get('true')
        return Js(False)
    PyJsHoisted_arraySome_.__name__ = 'arraySome'
    var.put('arraySome', PyJsHoisted_arraySome_)
    pass
    var.get('module').put('exports', var.get('arraySome'))
PyJs_anonymous_3469_._set_name('anonymous')
PyJs_Object_3470_ = Js({})
@Js
def PyJs_anonymous_3471_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'assignInDefaults', 'module', 'hasOwnProperty', 'objectProto', 'eq'])
    @Js
    def PyJsHoisted_assignInDefaults_(objValue, srcValue, key, object, this, arguments, var=var):
        var = Scope({'objValue':objValue, 'srcValue':srcValue, 'key':key, 'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['key', 'object', 'srcValue', 'objValue'])
        if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) or (var.get('eq')(var.get('objValue'), var.get('objectProto').get(var.get('key'))) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())):
            return var.get('srcValue')
        return var.get('objValue')
    PyJsHoisted_assignInDefaults_.__name__ = 'assignInDefaults'
    var.put('assignInDefaults', PyJsHoisted_assignInDefaults_)
    var.put('eq', var.get('require')(Js('./eq')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('assignInDefaults'))
PyJs_anonymous_3471_._set_name('anonymous')
PyJs_Object_3472_ = Js({'./eq':Js(444.0)})
@Js
def PyJs_anonymous_3473_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assignMergeValue', 'require', 'eq', 'exports', 'module'])
    @Js
    def PyJsHoisted_assignMergeValue_(object, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['object', 'value', 'key'])
        if ((PyJsStrictNeq(var.get('value'),var.get('undefined')) and var.get('eq')(var.get('object').get(var.get('key')), var.get('value')).neg()) or (((var.get('key',throw=False).typeof()==Js('number')) and PyJsStrictEq(var.get('value'),var.get('undefined'))) and var.get('object').contains(var.get('key')).neg())):
            var.get('object').put(var.get('key'), var.get('value'))
    PyJsHoisted_assignMergeValue_.__name__ = 'assignMergeValue'
    var.put('assignMergeValue', PyJsHoisted_assignMergeValue_)
    var.put('eq', var.get('require')(Js('./eq')))
    pass
    var.get('module').put('exports', var.get('assignMergeValue'))
PyJs_anonymous_3473_._set_name('anonymous')
PyJs_Object_3474_ = Js({'./eq':Js(444.0)})
@Js
def PyJs_anonymous_3475_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assignValue', 'exports', 'require', 'module', 'hasOwnProperty', 'objectProto', 'eq'])
    @Js
    def PyJsHoisted_assignValue_(object, key, value, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'object', 'key', 'objValue'])
        var.put('objValue', var.get('object').get(var.get('key')))
        if ((var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) and var.get('eq')(var.get('objValue'), var.get('value'))).neg() or (PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg())):
            var.get('object').put(var.get('key'), var.get('value'))
    PyJsHoisted_assignValue_.__name__ = 'assignValue'
    var.put('assignValue', PyJsHoisted_assignValue_)
    var.put('eq', var.get('require')(Js('./eq')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('assignValue'))
PyJs_anonymous_3475_._set_name('anonymous')
PyJs_Object_3476_ = Js({'./eq':Js(444.0)})
@Js
def PyJs_anonymous_3477_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assocIndexOf', 'require', 'eq', 'exports', 'module'])
    @Js
    def PyJsHoisted_assocIndexOf_(array, key, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments, 'key':key}, var)
        var.registers(['length', 'array', 'key'])
        var.put('length', var.get('array').get('length'))
        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
            if var.get('eq')(var.get('array').get(var.get('length')).get('0'), var.get('key')):
                return var.get('length')
        return (-Js(1.0))
    PyJsHoisted_assocIndexOf_.__name__ = 'assocIndexOf'
    var.put('assocIndexOf', PyJsHoisted_assocIndexOf_)
    var.put('eq', var.get('require')(Js('./eq')))
    pass
    var.get('module').put('exports', var.get('assocIndexOf'))
PyJs_anonymous_3477_._set_name('anonymous')
PyJs_Object_3478_ = Js({'./eq':Js(444.0)})
@Js
def PyJs_anonymous_3479_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'keys', 'require', 'module', 'baseAssign', 'copyObject'])
    @Js
    def PyJsHoisted_baseAssign_(object, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'object':object, 'arguments':arguments}, var)
        var.registers(['source', 'object'])
        return (var.get('object') and var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object')))
    PyJsHoisted_baseAssign_.__name__ = 'baseAssign'
    var.put('baseAssign', PyJsHoisted_baseAssign_)
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('baseAssign'))
PyJs_anonymous_3479_._set_name('anonymous')
PyJs_Object_3480_ = Js({'./_copyObject':Js(367.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3481_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'baseClamp', 'module'])
    @Js
    def PyJsHoisted_baseClamp_(number, lower, upper, this, arguments, var=var):
        var = Scope({'this':this, 'upper':upper, 'lower':lower, 'number':number, 'arguments':arguments}, var)
        var.registers(['upper', 'lower', 'number'])
        if PyJsStrictEq(var.get('number'),var.get('number')):
            if PyJsStrictNeq(var.get('upper'),var.get('undefined')):
                var.put('number', (var.get('number') if (var.get('number')<=var.get('upper')) else var.get('upper')))
            if PyJsStrictNeq(var.get('lower'),var.get('undefined')):
                var.put('number', (var.get('number') if (var.get('number')>=var.get('lower')) else var.get('lower')))
        return var.get('number')
    PyJsHoisted_baseClamp_.__name__ = 'baseClamp'
    var.put('baseClamp', PyJsHoisted_baseClamp_)
    pass
    var.get('module').put('exports', var.get('baseClamp'))
PyJs_anonymous_3481_._set_name('anonymous')
PyJs_Object_3482_ = Js({})
@Js
def PyJs_anonymous_3483_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['genTag', 'arrayTag', 'initCloneObject', 'uint32Tag', 'arrayBufferTag', 'objectTag', 'dataViewTag', 'regexpTag', 'copyArray', 'int8Tag', 'uint16Tag', 'errorTag', 'float64Tag', 'isBuffer', 'baseClone', 'assignValue', 'mapTag', 'cloneableTags', 'boolTag', 'arrayEach', 'initCloneByTag', 'funcTag', 'getAllKeys', 'float32Tag', 'cloneBuffer', 'Stack', 'argsTag', 'isArray', 'exports', 'dateTag', 'int16Tag', 'copySymbols', 'keys', 'stringTag', 'numberTag', 'module', 'getTag', 'isObject', 'uint8Tag', 'initCloneArray', 'isHostObject', 'require', 'baseAssign', 'uint8ClampedTag', 'weakMapTag', 'setTag', 'int32Tag', 'symbolTag'])
    @Js
    def PyJsHoisted_baseClone_(value, isDeep, isFull, customizer, key, object, stack, this, arguments, var=var):
        var = Scope({'this':this, 'isFull':isFull, 'object':object, 'value':value, 'isDeep':isDeep, 'arguments':arguments, 'key':key, 'customizer':customizer, 'stack':stack}, var)
        var.registers(['stacked', 'isFull', 'object', 'isFunc', 'value', 'tag', 'isDeep', 'result', 'key', 'props', 'customizer', 'isArr', 'stack'])
        pass
        if var.get('customizer'):
            var.put('result', (var.get('customizer')(var.get('value'), var.get('key'), var.get('object'), var.get('stack')) if var.get('object') else var.get('customizer')(var.get('value'))))
        if PyJsStrictNeq(var.get('result'),var.get('undefined')):
            return var.get('result')
        if var.get('isObject')(var.get('value')).neg():
            return var.get('value')
        var.put('isArr', var.get('isArray')(var.get('value')))
        if var.get('isArr'):
            var.put('result', var.get('initCloneArray')(var.get('value')))
            if var.get('isDeep').neg():
                return var.get('copyArray')(var.get('value'), var.get('result'))
        else:
            var.put('tag', var.get('getTag')(var.get('value')))
            var.put('isFunc', ((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag'))))
            if var.get('isBuffer')(var.get('value')):
                return var.get('cloneBuffer')(var.get('value'), var.get('isDeep'))
            if (((var.get('tag')==var.get('objectTag')) or (var.get('tag')==var.get('argsTag'))) or (var.get('isFunc') and var.get('object').neg())):
                if var.get('isHostObject')(var.get('value')):
                    PyJs_Object_3487_ = Js({})
                    return (var.get('value') if var.get('object') else PyJs_Object_3487_)
                PyJs_Object_3488_ = Js({})
                var.put('result', var.get('initCloneObject')((PyJs_Object_3488_ if var.get('isFunc') else var.get('value'))))
                if var.get('isDeep').neg():
                    return var.get('copySymbols')(var.get('value'), var.get('baseAssign')(var.get('result'), var.get('value')))
            else:
                if var.get('cloneableTags').get(var.get('tag')).neg():
                    PyJs_Object_3489_ = Js({})
                    return (var.get('value') if var.get('object') else PyJs_Object_3489_)
                var.put('result', var.get('initCloneByTag')(var.get('value'), var.get('tag'), var.get('baseClone'), var.get('isDeep')))
        (var.get('stack') or var.put('stack', var.get('Stack').create()))
        var.put('stacked', var.get('stack').callprop('get', var.get('value')))
        if var.get('stacked'):
            return var.get('stacked')
        var.get('stack').callprop('set', var.get('value'), var.get('result'))
        if var.get('isArr').neg():
            var.put('props', (var.get('getAllKeys')(var.get('value')) if var.get('isFull') else var.get('keys')(var.get('value'))))
        @Js
        def PyJs_anonymous_3490_(subValue, key, this, arguments, var=var):
            var = Scope({'this':this, 'subValue':subValue, 'arguments':arguments, 'key':key}, var)
            var.registers(['subValue', 'key'])
            if var.get('props'):
                var.put('key', var.get('subValue'))
                var.put('subValue', var.get('value').get(var.get('key')))
            var.get('assignValue')(var.get('result'), var.get('key'), var.get('baseClone')(var.get('subValue'), var.get('isDeep'), var.get('isFull'), var.get('customizer'), var.get('key'), var.get('value'), var.get('stack')))
        PyJs_anonymous_3490_._set_name('anonymous')
        var.get('arrayEach')((var.get('props') or var.get('value')), PyJs_anonymous_3490_)
        return var.get('result')
    PyJsHoisted_baseClone_.__name__ = 'baseClone'
    var.put('baseClone', PyJsHoisted_baseClone_)
    var.put('Stack', var.get('require')(Js('./_Stack')))
    var.put('arrayEach', var.get('require')(Js('./_arrayEach')))
    var.put('assignValue', var.get('require')(Js('./_assignValue')))
    var.put('baseAssign', var.get('require')(Js('./_baseAssign')))
    var.put('cloneBuffer', var.get('require')(Js('./_cloneBuffer')))
    var.put('copyArray', var.get('require')(Js('./_copyArray')))
    var.put('copySymbols', var.get('require')(Js('./_copySymbols')))
    var.put('getAllKeys', var.get('require')(Js('./_getAllKeys')))
    var.put('getTag', var.get('require')(Js('./_getTag')))
    var.put('initCloneArray', var.get('require')(Js('./_initCloneArray')))
    var.put('initCloneByTag', var.get('require')(Js('./_initCloneByTag')))
    var.put('initCloneObject', var.get('require')(Js('./_initCloneObject')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isBuffer', var.get('require')(Js('./isBuffer')))
    var.put('isHostObject', var.get('require')(Js('./_isHostObject')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('keys', var.get('require')(Js('./keys')))
    var.put('argsTag', Js('[object Arguments]'))
    var.put('arrayTag', Js('[object Array]'))
    var.put('boolTag', Js('[object Boolean]'))
    var.put('dateTag', Js('[object Date]'))
    var.put('errorTag', Js('[object Error]'))
    var.put('funcTag', Js('[object Function]'))
    var.put('genTag', Js('[object GeneratorFunction]'))
    var.put('mapTag', Js('[object Map]'))
    var.put('numberTag', Js('[object Number]'))
    var.put('objectTag', Js('[object Object]'))
    var.put('regexpTag', Js('[object RegExp]'))
    var.put('setTag', Js('[object Set]'))
    var.put('stringTag', Js('[object String]'))
    var.put('symbolTag', Js('[object Symbol]'))
    var.put('weakMapTag', Js('[object WeakMap]'))
    var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
    var.put('dataViewTag', Js('[object DataView]'))
    var.put('float32Tag', Js('[object Float32Array]'))
    var.put('float64Tag', Js('[object Float64Array]'))
    var.put('int8Tag', Js('[object Int8Array]'))
    var.put('int16Tag', Js('[object Int16Array]'))
    var.put('int32Tag', Js('[object Int32Array]'))
    var.put('uint8Tag', Js('[object Uint8Array]'))
    var.put('uint8ClampedTag', Js('[object Uint8ClampedArray]'))
    var.put('uint16Tag', Js('[object Uint16Array]'))
    var.put('uint32Tag', Js('[object Uint32Array]'))
    PyJs_Object_3484_ = Js({})
    var.put('cloneableTags', PyJs_Object_3484_)
    def PyJs_LONG_3486_(var=var):
        def PyJs_LONG_3485_(var=var):
            return var.get('cloneableTags').put(var.get('regexpTag'), var.get('cloneableTags').put(var.get('setTag'), var.get('cloneableTags').put(var.get('stringTag'), var.get('cloneableTags').put(var.get('symbolTag'), var.get('cloneableTags').put(var.get('uint8Tag'), var.get('cloneableTags').put(var.get('uint8ClampedTag'), var.get('cloneableTags').put(var.get('uint16Tag'), var.get('cloneableTags').put(var.get('uint32Tag'), var.get('true')))))))))
        return var.get('cloneableTags').put(var.get('float32Tag'), var.get('cloneableTags').put(var.get('float64Tag'), var.get('cloneableTags').put(var.get('int8Tag'), var.get('cloneableTags').put(var.get('int16Tag'), var.get('cloneableTags').put(var.get('int32Tag'), var.get('cloneableTags').put(var.get('mapTag'), var.get('cloneableTags').put(var.get('numberTag'), var.get('cloneableTags').put(var.get('objectTag'), PyJs_LONG_3485_()))))))))
    var.get('cloneableTags').put(var.get('argsTag'), var.get('cloneableTags').put(var.get('arrayTag'), var.get('cloneableTags').put(var.get('arrayBufferTag'), var.get('cloneableTags').put(var.get('dataViewTag'), var.get('cloneableTags').put(var.get('boolTag'), var.get('cloneableTags').put(var.get('dateTag'), PyJs_LONG_3486_()))))))
    var.get('cloneableTags').put(var.get('errorTag'), var.get('cloneableTags').put(var.get('funcTag'), var.get('cloneableTags').put(var.get('weakMapTag'), Js(False))))
    pass
    var.get('module').put('exports', var.get('baseClone'))
PyJs_anonymous_3483_._set_name('anonymous')
PyJs_Object_3491_ = Js({'./_Stack':Js(294.0),'./_arrayEach':Js(301.0),'./_assignValue':Js(310.0),'./_baseAssign':Js(312.0),'./_cloneBuffer':Js(357.0),'./_copyArray':Js(366.0),'./_copySymbols':Js(368.0),'./_getAllKeys':Js(378.0),'./_getTag':Js(385.0),'./_initCloneArray':Js(395.0),'./_initCloneByTag':Js(396.0),'./_initCloneObject':Js(397.0),'./_isHostObject':Js(400.0),'./isArray':Js(458.0),'./isBuffer':Js(462.0),'./isObject':Js(467.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3492_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'objectCreate', 'require', 'module', 'baseCreate', 'isObject'])
    @Js
    def PyJsHoisted_baseCreate_(proto, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'proto':proto}, var)
        var.registers(['proto'])
        PyJs_Object_3493_ = Js({})
        return (var.get('objectCreate')(var.get('proto')) if var.get('isObject')(var.get('proto')) else PyJs_Object_3493_)
    PyJsHoisted_baseCreate_.__name__ = 'baseCreate'
    var.put('baseCreate', PyJsHoisted_baseCreate_)
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('objectCreate', var.get('Object').get('create'))
    pass
    var.get('module').put('exports', var.get('baseCreate'))
PyJs_anonymous_3492_._set_name('anonymous')
PyJs_Object_3494_ = Js({'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3495_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseEach', 'exports', 'baseForOwn', 'module', 'createBaseEach', 'require'])
    var.put('baseForOwn', var.get('require')(Js('./_baseForOwn')))
    var.put('createBaseEach', var.get('require')(Js('./_createBaseEach')))
    var.put('baseEach', var.get('createBaseEach')(var.get('baseForOwn')))
    var.get('module').put('exports', var.get('baseEach'))
PyJs_anonymous_3495_._set_name('anonymous')
PyJs_Object_3496_ = Js({'./_baseForOwn':Js(320.0),'./_createBaseEach':Js(371.0)})
@Js
def PyJs_anonymous_3497_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'baseFindIndex'])
    @Js
    def PyJsHoisted_baseFindIndex_(array, predicate, fromIndex, fromRight, this, arguments, var=var):
        var = Scope({'predicate':predicate, 'arguments':arguments, 'this':this, 'array':array, 'fromIndex':fromIndex, 'fromRight':fromRight}, var)
        var.registers(['index', 'predicate', 'fromIndex', 'fromRight', 'length', 'array'])
        var.put('length', var.get('array').get('length'))
        var.put('index', (var.get('fromIndex')+(Js(1.0) if var.get('fromRight') else (-Js(1.0)))))
        while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
            if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                return var.get('index')
        return (-Js(1.0))
    PyJsHoisted_baseFindIndex_.__name__ = 'baseFindIndex'
    var.put('baseFindIndex', PyJsHoisted_baseFindIndex_)
    pass
    var.get('module').put('exports', var.get('baseFindIndex'))
PyJs_anonymous_3497_._set_name('anonymous')
PyJs_Object_3498_ = Js({})
@Js
def PyJs_anonymous_3499_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'baseFlatten', 'require', 'module', 'arrayPush', 'isFlattenable'])
    @Js
    def PyJsHoisted_baseFlatten_(array, depth, predicate, isStrict, result, this, arguments, var=var):
        var = Scope({'predicate':predicate, 'result':result, 'isStrict':isStrict, 'this':this, 'array':array, 'depth':depth, 'arguments':arguments}, var)
        var.registers(['index', 'predicate', 'isStrict', 'depth', 'value', 'length', 'result', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('array').get('length'))
        (var.get('predicate') or var.put('predicate', var.get('isFlattenable')))
        (var.get('result') or var.put('result', Js([])))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('value', var.get('array').get(var.get('index')))
            if ((var.get('depth')>Js(0.0)) and var.get('predicate')(var.get('value'))):
                if (var.get('depth')>Js(1.0)):
                    var.get('baseFlatten')(var.get('value'), (var.get('depth')-Js(1.0)), var.get('predicate'), var.get('isStrict'), var.get('result'))
                else:
                    var.get('arrayPush')(var.get('result'), var.get('value'))
            else:
                if var.get('isStrict').neg():
                    var.get('result').put(var.get('result').get('length'), var.get('value'))
        return var.get('result')
    PyJsHoisted_baseFlatten_.__name__ = 'baseFlatten'
    var.put('baseFlatten', PyJsHoisted_baseFlatten_)
    var.put('arrayPush', var.get('require')(Js('./_arrayPush')))
    var.put('isFlattenable', var.get('require')(Js('./_isFlattenable')))
    pass
    var.get('module').put('exports', var.get('baseFlatten'))
PyJs_anonymous_3499_._set_name('anonymous')
PyJs_Object_3500_ = Js({'./_arrayPush':Js(305.0),'./_isFlattenable':Js(398.0)})
@Js
def PyJs_anonymous_3501_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['createBaseFor', 'require', 'exports', 'module', 'baseFor'])
    var.put('createBaseFor', var.get('require')(Js('./_createBaseFor')))
    var.put('baseFor', var.get('createBaseFor')())
    var.get('module').put('exports', var.get('baseFor'))
PyJs_anonymous_3501_._set_name('anonymous')
PyJs_Object_3502_ = Js({'./_createBaseFor':Js(372.0)})
@Js
def PyJs_anonymous_3503_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'baseFor', 'keys', 'baseForOwn', 'module', 'require'])
    @Js
    def PyJsHoisted_baseForOwn_(object, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'iteratee':iteratee}, var)
        var.registers(['object', 'iteratee'])
        return (var.get('object') and var.get('baseFor')(var.get('object'), var.get('iteratee'), var.get('keys')))
    PyJsHoisted_baseForOwn_.__name__ = 'baseForOwn'
    var.put('baseForOwn', PyJsHoisted_baseForOwn_)
    var.put('baseFor', var.get('require')(Js('./_baseFor')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('baseForOwn'))
PyJs_anonymous_3503_._set_name('anonymous')
PyJs_Object_3504_ = Js({'./_baseFor':Js(319.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3505_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'toKey', 'isKey', 'require', 'module', 'castPath', 'baseGet'])
    @Js
    def PyJsHoisted_baseGet_(object, path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'object':object, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'object', 'path'])
        var.put('path', (Js([var.get('path')]) if var.get('isKey')(var.get('path'), var.get('object')) else var.get('castPath')(var.get('path'))))
        var.put('index', Js(0.0))
        var.put('length', var.get('path').get('length'))
        while ((var.get('object')!=var.get("null")) and (var.get('index')<var.get('length'))):
            var.put('object', var.get('object').get(var.get('toKey')(var.get('path').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))))
        return (var.get('object') if (var.get('index') and (var.get('index')==var.get('length'))) else var.get('undefined'))
    PyJsHoisted_baseGet_.__name__ = 'baseGet'
    var.put('baseGet', PyJsHoisted_baseGet_)
    var.put('castPath', var.get('require')(Js('./_castPath')))
    var.put('isKey', var.get('require')(Js('./_isKey')))
    var.put('toKey', var.get('require')(Js('./_toKey')))
    pass
    var.get('module').put('exports', var.get('baseGet'))
PyJs_anonymous_3505_._set_name('anonymous')
PyJs_Object_3506_ = Js({'./_castPath':Js(352.0),'./_isKey':Js(403.0),'./_toKey':Js(433.0)})
@Js
def PyJs_anonymous_3507_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'baseGetAllKeys', 'require', 'module', 'arrayPush'])
    @Js
    def PyJsHoisted_baseGetAllKeys_(object, keysFunc, symbolsFunc, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'symbolsFunc':symbolsFunc, 'keysFunc':keysFunc, 'arguments':arguments}, var)
        var.registers(['symbolsFunc', 'object', 'result', 'keysFunc'])
        var.put('result', var.get('keysFunc')(var.get('object')))
        return (var.get('result') if var.get('isArray')(var.get('object')) else var.get('arrayPush')(var.get('result'), var.get('symbolsFunc')(var.get('object'))))
    PyJsHoisted_baseGetAllKeys_.__name__ = 'baseGetAllKeys'
    var.put('baseGetAllKeys', PyJsHoisted_baseGetAllKeys_)
    var.put('arrayPush', var.get('require')(Js('./_arrayPush')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    pass
    var.get('module').put('exports', var.get('baseGetAllKeys'))
PyJs_anonymous_3507_._set_name('anonymous')
PyJs_Object_3508_ = Js({'./_arrayPush':Js(305.0),'./isArray':Js(458.0)})
@Js
def PyJs_anonymous_3509_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'baseHas', 'require', 'module', 'hasOwnProperty', 'getPrototype', 'objectProto'])
    @Js
    def PyJsHoisted_baseHas_(object, key, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'key':key}, var)
        var.registers(['object', 'key'])
        return ((var.get('object')!=var.get("null")) and (var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) or (((var.get('object',throw=False).typeof()==Js('object')) and var.get('object').contains(var.get('key'))) and PyJsStrictEq(var.get('getPrototype')(var.get('object')),var.get("null")))))
    PyJsHoisted_baseHas_.__name__ = 'baseHas'
    var.put('baseHas', PyJsHoisted_baseHas_)
    var.put('getPrototype', var.get('require')(Js('./_getPrototype')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('baseHas'))
PyJs_anonymous_3509_._set_name('anonymous')
PyJs_Object_3510_ = Js({'./_getPrototype':Js(383.0)})
@Js
def PyJs_anonymous_3511_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseHasIn', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_baseHasIn_(object, key, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'key':key}, var)
        var.registers(['object', 'key'])
        return ((var.get('object')!=var.get("null")) and var.get('Object')(var.get('object')).contains(var.get('key')))
    PyJsHoisted_baseHasIn_.__name__ = 'baseHasIn'
    var.put('baseHasIn', PyJsHoisted_baseHasIn_)
    pass
    var.get('module').put('exports', var.get('baseHasIn'))
PyJs_anonymous_3511_._set_name('anonymous')
PyJs_Object_3512_ = Js({})
@Js
def PyJs_anonymous_3513_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOf', 'require', 'indexOfNaN', 'exports', 'module'])
    @Js
    def PyJsHoisted_baseIndexOf_(array, value, fromIndex, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'fromIndex':fromIndex, 'value':value, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'array', 'value', 'fromIndex'])
        if PyJsStrictNeq(var.get('value'),var.get('value')):
            return var.get('indexOfNaN')(var.get('array'), var.get('fromIndex'))
        var.put('index', (var.get('fromIndex')-Js(1.0)))
        var.put('length', var.get('array').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            if PyJsStrictEq(var.get('array').get(var.get('index')),var.get('value')):
                return var.get('index')
        return (-Js(1.0))
    PyJsHoisted_baseIndexOf_.__name__ = 'baseIndexOf'
    var.put('baseIndexOf', PyJsHoisted_baseIndexOf_)
    var.put('indexOfNaN', var.get('require')(Js('./_indexOfNaN')))
    pass
    var.get('module').put('exports', var.get('baseIndexOf'))
PyJs_anonymous_3513_._set_name('anonymous')
PyJs_Object_3514_ = Js({'./_indexOfNaN':Js(394.0)})
@Js
def PyJs_anonymous_3515_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOfWith', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_baseIndexOfWith_(array, value, fromIndex, comparator, this, arguments, var=var):
        var = Scope({'arguments':arguments, 'comparator':comparator, 'this':this, 'array':array, 'fromIndex':fromIndex, 'value':value}, var)
        var.registers(['index', 'comparator', 'fromIndex', 'value', 'length', 'array'])
        var.put('index', (var.get('fromIndex')-Js(1.0)))
        var.put('length', var.get('array').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            if var.get('comparator')(var.get('array').get(var.get('index')), var.get('value')):
                return var.get('index')
        return (-Js(1.0))
    PyJsHoisted_baseIndexOfWith_.__name__ = 'baseIndexOfWith'
    var.put('baseIndexOfWith', PyJsHoisted_baseIndexOfWith_)
    pass
    var.get('module').put('exports', var.get('baseIndexOfWith'))
PyJs_anonymous_3515_._set_name('anonymous')
PyJs_Object_3516_ = Js({})
@Js
def PyJs_anonymous_3517_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'baseIsEqualDeep', 'isObjectLike', 'isObject', 'baseIsEqual'])
    @Js
    def PyJsHoisted_baseIsEqual_(value, other, customizer, bitmask, stack, this, arguments, var=var):
        var = Scope({'bitmask':bitmask, 'other':other, 'arguments':arguments, 'this':this, 'customizer':customizer, 'stack':stack, 'value':value}, var)
        var.registers(['bitmask', 'other', 'stack', 'value', 'customizer'])
        if PyJsStrictEq(var.get('value'),var.get('other')):
            return var.get('true')
        if (((var.get('value')==var.get("null")) or (var.get('other')==var.get("null"))) or (var.get('isObject')(var.get('value')).neg() and var.get('isObjectLike')(var.get('other')).neg())):
            return (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other')))
        return var.get('baseIsEqualDeep')(var.get('value'), var.get('other'), var.get('baseIsEqual'), var.get('customizer'), var.get('bitmask'), var.get('stack'))
    PyJsHoisted_baseIsEqual_.__name__ = 'baseIsEqual'
    var.put('baseIsEqual', PyJsHoisted_baseIsEqual_)
    var.put('baseIsEqualDeep', var.get('require')(Js('./_baseIsEqualDeep')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    pass
    var.get('module').put('exports', var.get('baseIsEqual'))
PyJs_anonymous_3517_._set_name('anonymous')
PyJs_Object_3518_ = Js({'./_baseIsEqualDeep':Js(328.0),'./isObject':Js(467.0),'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3519_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['equalObjects', 'isArray', 'exports', 'objectProto', 'objectTag', 'isHostObject', 'require', 'equalArrays', 'module', 'arrayTag', 'baseIsEqualDeep', 'argsTag', 'isTypedArray', 'getTag', 'equalByTag', 'Stack', 'PARTIAL_COMPARE_FLAG', 'hasOwnProperty'])
    @Js
    def PyJsHoisted_baseIsEqualDeep_(object, other, equalFunc, customizer, bitmask, stack, this, arguments, var=var):
        var = Scope({'equalFunc':equalFunc, 'this':this, 'object':object, 'bitmask':bitmask, 'other':other, 'arguments':arguments, 'customizer':customizer, 'stack':stack}, var)
        var.registers(['othIsObj', 'othTag', 'equalFunc', 'objIsObj', 'objTag', 'othUnwrapped', 'othIsWrapped', 'isSameTag', 'object', 'objIsArr', 'bitmask', 'other', 'othIsArr', 'objUnwrapped', 'objIsWrapped', 'customizer', 'stack'])
        var.put('objIsArr', var.get('isArray')(var.get('object')))
        var.put('othIsArr', var.get('isArray')(var.get('other')))
        var.put('objTag', var.get('arrayTag'))
        var.put('othTag', var.get('arrayTag'))
        if var.get('objIsArr').neg():
            var.put('objTag', var.get('getTag')(var.get('object')))
            var.put('objTag', (var.get('objectTag') if (var.get('objTag')==var.get('argsTag')) else var.get('objTag')))
        if var.get('othIsArr').neg():
            var.put('othTag', var.get('getTag')(var.get('other')))
            var.put('othTag', (var.get('objectTag') if (var.get('othTag')==var.get('argsTag')) else var.get('othTag')))
        var.put('objIsObj', ((var.get('objTag')==var.get('objectTag')) and var.get('isHostObject')(var.get('object')).neg()))
        var.put('othIsObj', ((var.get('othTag')==var.get('objectTag')) and var.get('isHostObject')(var.get('other')).neg()))
        var.put('isSameTag', (var.get('objTag')==var.get('othTag')))
        if (var.get('isSameTag') and var.get('objIsObj').neg()):
            (var.get('stack') or var.put('stack', var.get('Stack').create()))
            return (var.get('equalArrays')(var.get('object'), var.get('other'), var.get('equalFunc'), var.get('customizer'), var.get('bitmask'), var.get('stack')) if (var.get('objIsArr') or var.get('isTypedArray')(var.get('object'))) else var.get('equalByTag')(var.get('object'), var.get('other'), var.get('objTag'), var.get('equalFunc'), var.get('customizer'), var.get('bitmask'), var.get('stack')))
        if (var.get('bitmask')&var.get('PARTIAL_COMPARE_FLAG')).neg():
            var.put('objIsWrapped', (var.get('objIsObj') and var.get('hasOwnProperty').callprop('call', var.get('object'), Js('__wrapped__'))))
            var.put('othIsWrapped', (var.get('othIsObj') and var.get('hasOwnProperty').callprop('call', var.get('other'), Js('__wrapped__'))))
            if (var.get('objIsWrapped') or var.get('othIsWrapped')):
                var.put('objUnwrapped', (var.get('object').callprop('value') if var.get('objIsWrapped') else var.get('object')))
                var.put('othUnwrapped', (var.get('other').callprop('value') if var.get('othIsWrapped') else var.get('other')))
                (var.get('stack') or var.put('stack', var.get('Stack').create()))
                return var.get('equalFunc')(var.get('objUnwrapped'), var.get('othUnwrapped'), var.get('customizer'), var.get('bitmask'), var.get('stack'))
        if var.get('isSameTag').neg():
            return Js(False)
        (var.get('stack') or var.put('stack', var.get('Stack').create()))
        return var.get('equalObjects')(var.get('object'), var.get('other'), var.get('equalFunc'), var.get('customizer'), var.get('bitmask'), var.get('stack'))
    PyJsHoisted_baseIsEqualDeep_.__name__ = 'baseIsEqualDeep'
    var.put('baseIsEqualDeep', PyJsHoisted_baseIsEqualDeep_)
    var.put('Stack', var.get('require')(Js('./_Stack')))
    var.put('equalArrays', var.get('require')(Js('./_equalArrays')))
    var.put('equalByTag', var.get('require')(Js('./_equalByTag')))
    var.put('equalObjects', var.get('require')(Js('./_equalObjects')))
    var.put('getTag', var.get('require')(Js('./_getTag')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isHostObject', var.get('require')(Js('./_isHostObject')))
    var.put('isTypedArray', var.get('require')(Js('./isTypedArray')))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    var.put('argsTag', Js('[object Arguments]'))
    var.put('arrayTag', Js('[object Array]'))
    var.put('objectTag', Js('[object Object]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('baseIsEqualDeep'))
PyJs_anonymous_3519_._set_name('anonymous')
PyJs_Object_3520_ = Js({'./_Stack':Js(294.0),'./_equalArrays':Js(375.0),'./_equalByTag':Js(376.0),'./_equalObjects':Js(377.0),'./_getTag':Js(385.0),'./_isHostObject':Js(400.0),'./isArray':Js(458.0),'./isTypedArray':Js(473.0)})
@Js
def PyJs_anonymous_3521_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['PARTIAL_COMPARE_FLAG', 'exports', 'require', 'UNORDERED_COMPARE_FLAG', 'module', 'baseIsMatch', 'Stack', 'baseIsEqual'])
    @Js
    def PyJsHoisted_baseIsMatch_(object, source, matchData, customizer, this, arguments, var=var):
        var = Scope({'source':source, 'matchData':matchData, 'customizer':customizer, 'arguments':arguments, 'this':this, 'object':object}, var)
        var.registers(['noCustomizer', 'index', 'matchData', 'key', 'object', 'source', 'length', 'srcValue', 'objValue', 'customizer', 'data', 'stack', 'result'])
        var.put('index', var.get('matchData').get('length'))
        var.put('length', var.get('index'))
        var.put('noCustomizer', var.get('customizer').neg())
        if (var.get('object')==var.get("null")):
            return var.get('length').neg()
        var.put('object', var.get('Object')(var.get('object')))
        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
            var.put('data', var.get('matchData').get(var.get('index')))
            if (PyJsStrictNeq(var.get('data').get('1'),var.get('object').get(var.get('data').get('0'))) if (var.get('noCustomizer') and var.get('data').get('2')) else var.get('object').contains(var.get('data').get('0')).neg()):
                return Js(False)
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('data', var.get('matchData').get(var.get('index')))
            var.put('key', var.get('data').get('0'))
            var.put('objValue', var.get('object').get(var.get('key')))
            var.put('srcValue', var.get('data').get('1'))
            if (var.get('noCustomizer') and var.get('data').get('2')):
                if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg()):
                    return Js(False)
            else:
                var.put('stack', var.get('Stack').create())
                if var.get('customizer'):
                    var.put('result', var.get('customizer')(var.get('objValue'), var.get('srcValue'), var.get('key'), var.get('object'), var.get('source'), var.get('stack')))
                if (var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), var.get('customizer'), (var.get('UNORDERED_COMPARE_FLAG')|var.get('PARTIAL_COMPARE_FLAG')), var.get('stack')) if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result')).neg():
                    return Js(False)
        return var.get('true')
    PyJsHoisted_baseIsMatch_.__name__ = 'baseIsMatch'
    var.put('baseIsMatch', PyJsHoisted_baseIsMatch_)
    var.put('Stack', var.get('require')(Js('./_Stack')))
    var.put('baseIsEqual', var.get('require')(Js('./_baseIsEqual')))
    var.put('UNORDERED_COMPARE_FLAG', Js(1.0))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    pass
    var.get('module').put('exports', var.get('baseIsMatch'))
PyJs_anonymous_3521_._set_name('anonymous')
PyJs_Object_3522_ = Js({'./_Stack':Js(294.0),'./_baseIsEqual':Js(327.0)})
@Js
def PyJs_anonymous_3523_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['reIsNative', 'exports', 'toSource', 'objectProto', 'funcToString', 'isHostObject', 'require', 'module', 'baseIsNative', 'isMasked', 'hasOwnProperty', 'reIsHostCtor', 'isFunction', 'reRegExpChar', 'isObject'])
    @Js
    def PyJsHoisted_baseIsNative_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['pattern', 'value'])
        if (var.get('isObject')(var.get('value')).neg() or var.get('isMasked')(var.get('value'))):
            return Js(False)
        var.put('pattern', (var.get('reIsNative') if (var.get('isFunction')(var.get('value')) or var.get('isHostObject')(var.get('value'))) else var.get('reIsHostCtor')))
        return var.get('pattern').callprop('test', var.get('toSource')(var.get('value')))
    PyJsHoisted_baseIsNative_.__name__ = 'baseIsNative'
    var.put('baseIsNative', PyJsHoisted_baseIsNative_)
    var.put('isFunction', var.get('require')(Js('./isFunction')))
    var.put('isHostObject', var.get('require')(Js('./_isHostObject')))
    var.put('isMasked', var.get('require')(Js('./_isMasked')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('toSource', var.get('require')(Js('./_toSource')))
    var.put('reRegExpChar', JsRegExp('/[\\\\^$.*+?()[\\]{}|]/g'))
    var.put('reIsHostCtor', JsRegExp('/^\\[object .+?Constructor\\]$/'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('funcToString', var.get('Function').get('prototype').get('toString'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    var.put('reIsNative', var.get('RegExp')(((Js('^')+var.get('funcToString').callprop('call', var.get('hasOwnProperty')).callprop('replace', var.get('reRegExpChar'), Js('\\$&')).callprop('replace', JsRegExp('/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g'), Js('$1.*?')))+Js('$'))))
    pass
    var.get('module').put('exports', var.get('baseIsNative'))
PyJs_anonymous_3523_._set_name('anonymous')
PyJs_Object_3524_ = Js({'./_isHostObject':Js(400.0),'./_isMasked':Js(405.0),'./_toSource':Js(434.0),'./isFunction':Js(463.0),'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3525_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'baseMatches', 'exports', 'require', 'baseIteratee', 'module', 'baseMatchesProperty', 'property', 'identity'])
    @Js
    def PyJsHoisted_baseIteratee_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        if (var.get('value',throw=False).typeof()==Js('function')):
            return var.get('value')
        if (var.get('value')==var.get("null")):
            return var.get('identity')
        if (var.get('value',throw=False).typeof()==Js('object')):
            return (var.get('baseMatchesProperty')(var.get('value').get('0'), var.get('value').get('1')) if var.get('isArray')(var.get('value')) else var.get('baseMatches')(var.get('value')))
        return var.get('property')(var.get('value'))
    PyJsHoisted_baseIteratee_.__name__ = 'baseIteratee'
    var.put('baseIteratee', PyJsHoisted_baseIteratee_)
    var.put('baseMatches', var.get('require')(Js('./_baseMatches')))
    var.put('baseMatchesProperty', var.get('require')(Js('./_baseMatchesProperty')))
    var.put('identity', var.get('require')(Js('./identity')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('property', var.get('require')(Js('./property')))
    pass
    var.get('module').put('exports', var.get('baseIteratee'))
PyJs_anonymous_3525_._set_name('anonymous')
PyJs_Object_3526_ = Js({'./_baseMatches':Js(335.0),'./_baseMatchesProperty':Js(336.0),'./identity':Js(455.0),'./isArray':Js(458.0),'./property':Js(480.0)})
@Js
def PyJs_anonymous_3527_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'nativeKeys', 'exports', 'module', 'baseKeys'])
    @Js
    def PyJsHoisted_baseKeys_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return var.get('nativeKeys')(var.get('Object')(var.get('object')))
    PyJsHoisted_baseKeys_.__name__ = 'baseKeys'
    var.put('baseKeys', PyJsHoisted_baseKeys_)
    var.put('nativeKeys', var.get('Object').get('keys'))
    pass
    var.get('module').put('exports', var.get('baseKeys'))
PyJs_anonymous_3527_._set_name('anonymous')
PyJs_Object_3528_ = Js({})
@Js
def PyJs_anonymous_3529_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['propertyIsEnumerable', 'exports', 'baseKeysIn', 'require', 'iteratorToArray', 'module', 'Reflect', 'enumerate', 'objectProto'])
    @Js
    def PyJsHoisted_baseKeysIn_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object', 'result', 'key'])
        var.put('object', (var.get('object') if (var.get('object')==var.get("null")) else var.get('Object')(var.get('object'))))
        var.put('result', Js([]))
        for PyJsTemp in var.get('object'):
            var.put('key', PyJsTemp)
            var.get('result').callprop('push', var.get('key'))
        return var.get('result')
    PyJsHoisted_baseKeysIn_.__name__ = 'baseKeysIn'
    var.put('baseKeysIn', PyJsHoisted_baseKeysIn_)
    var.put('Reflect', var.get('require')(Js('./_Reflect')))
    var.put('iteratorToArray', var.get('require')(Js('./_iteratorToArray')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('enumerate', (var.get('Reflect').get('enumerate') if var.get('Reflect') else var.get('undefined')))
    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
    pass
    PyJs_Object_3530_ = Js({'valueOf':Js(1.0)})
    if (var.get('enumerate') and var.get('propertyIsEnumerable').callprop('call', PyJs_Object_3530_, Js('valueOf')).neg()):
        @Js
        def PyJs_anonymous_3531_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            return var.get('iteratorToArray')(var.get('enumerate')(var.get('object')))
        PyJs_anonymous_3531_._set_name('anonymous')
        var.put('baseKeysIn', PyJs_anonymous_3531_)
    var.get('module').put('exports', var.get('baseKeysIn'))
PyJs_anonymous_3529_._set_name('anonymous')
PyJs_Object_3532_ = Js({'./_Reflect':Js(291.0),'./_iteratorToArray':Js(408.0)})
@Js
def PyJs_anonymous_3533_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseEach', 'exports', 'isArrayLike', 'require', 'module', 'baseMap'])
    @Js
    def PyJsHoisted_baseMap_(collection, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'collection':collection, 'iteratee':iteratee}, var)
        var.registers(['index', 'result', 'collection', 'iteratee'])
        var.put('index', (-Js(1.0)))
        var.put('result', (var.get('Array')(var.get('collection').get('length')) if var.get('isArrayLike')(var.get('collection')) else Js([])))
        @Js
        def PyJs_anonymous_3534_(value, key, collection, this, arguments, var=var):
            var = Scope({'collection':collection, 'this':this, 'key':key, 'value':value, 'arguments':arguments}, var)
            var.registers(['collection', 'key', 'value'])
            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('iteratee')(var.get('value'), var.get('key'), var.get('collection')))
        PyJs_anonymous_3534_._set_name('anonymous')
        var.get('baseEach')(var.get('collection'), PyJs_anonymous_3534_)
        return var.get('result')
    PyJsHoisted_baseMap_.__name__ = 'baseMap'
    var.put('baseMap', PyJsHoisted_baseMap_)
    var.put('baseEach', var.get('require')(Js('./_baseEach')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    pass
    var.get('module').put('exports', var.get('baseMap'))
PyJs_anonymous_3533_._set_name('anonymous')
PyJs_Object_3535_ = Js({'./_baseEach':Js(316.0),'./isArrayLike':Js(459.0)})
@Js
def PyJs_anonymous_3536_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseMatches', 'exports', 'require', 'matchesStrictComparable', 'module', 'baseIsMatch', 'getMatchData'])
    @Js
    def PyJsHoisted_baseMatches_(source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'arguments':arguments}, var)
        var.registers(['source', 'matchData'])
        var.put('matchData', var.get('getMatchData')(var.get('source')))
        if ((var.get('matchData').get('length')==Js(1.0)) and var.get('matchData').get('0').get('2')):
            return var.get('matchesStrictComparable')(var.get('matchData').get('0').get('0'), var.get('matchData').get('0').get('1'))
        @Js
        def PyJs_anonymous_3537_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            return (PyJsStrictEq(var.get('object'),var.get('source')) or var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('matchData')))
        PyJs_anonymous_3537_._set_name('anonymous')
        return PyJs_anonymous_3537_
    PyJsHoisted_baseMatches_.__name__ = 'baseMatches'
    var.put('baseMatches', PyJsHoisted_baseMatches_)
    var.put('baseIsMatch', var.get('require')(Js('./_baseIsMatch')))
    var.put('getMatchData', var.get('require')(Js('./_getMatchData')))
    var.put('matchesStrictComparable', var.get('require')(Js('./_matchesStrictComparable')))
    pass
    var.get('module').put('exports', var.get('baseMatches'))
PyJs_anonymous_3536_._set_name('anonymous')
PyJs_Object_3538_ = Js({'./_baseIsMatch':Js(329.0),'./_getMatchData':Js(381.0),'./_matchesStrictComparable':Js(420.0)})
@Js
def PyJs_anonymous_3539_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['PARTIAL_COMPARE_FLAG', 'exports', 'UNORDERED_COMPARE_FLAG', 'toKey', 'get', 'hasIn', 'require', 'matchesStrictComparable', 'module', 'isKey', 'isStrictComparable', 'baseMatchesProperty', 'baseIsEqual'])
    @Js
    def PyJsHoisted_baseMatchesProperty_(path, srcValue, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'srcValue':srcValue, 'arguments':arguments}, var)
        var.registers(['path', 'srcValue'])
        if (var.get('isKey')(var.get('path')) and var.get('isStrictComparable')(var.get('srcValue'))):
            return var.get('matchesStrictComparable')(var.get('toKey')(var.get('path')), var.get('srcValue'))
        @Js
        def PyJs_anonymous_3540_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object', 'objValue'])
            var.put('objValue', var.get('get')(var.get('object'), var.get('path')))
            return (var.get('hasIn')(var.get('object'), var.get('path')) if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and PyJsStrictEq(var.get('objValue'),var.get('srcValue'))) else var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), var.get('undefined'), (var.get('UNORDERED_COMPARE_FLAG')|var.get('PARTIAL_COMPARE_FLAG'))))
        PyJs_anonymous_3540_._set_name('anonymous')
        return PyJs_anonymous_3540_
    PyJsHoisted_baseMatchesProperty_.__name__ = 'baseMatchesProperty'
    var.put('baseMatchesProperty', PyJsHoisted_baseMatchesProperty_)
    var.put('baseIsEqual', var.get('require')(Js('./_baseIsEqual')))
    var.put('get', var.get('require')(Js('./get')))
    var.put('hasIn', var.get('require')(Js('./hasIn')))
    var.put('isKey', var.get('require')(Js('./_isKey')))
    var.put('isStrictComparable', var.get('require')(Js('./_isStrictComparable')))
    var.put('matchesStrictComparable', var.get('require')(Js('./_matchesStrictComparable')))
    var.put('toKey', var.get('require')(Js('./_toKey')))
    var.put('UNORDERED_COMPARE_FLAG', Js(1.0))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    pass
    var.get('module').put('exports', var.get('baseMatchesProperty'))
PyJs_anonymous_3539_._set_name('anonymous')
PyJs_Object_3541_ = Js({'./_baseIsEqual':Js(327.0),'./_isKey':Js(403.0),'./_isStrictComparable':Js(407.0),'./_matchesStrictComparable':Js(420.0),'./_toKey':Js(433.0),'./get':Js(452.0),'./hasIn':Js(454.0)})
@Js
def PyJs_anonymous_3542_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'arrayEach', 'require', 'baseMergeDeep', 'Stack', 'baseMerge', 'module', 'isTypedArray', 'assignMergeValue', 'keysIn', 'isObject'])
    @Js
    def PyJsHoisted_baseMerge_(object, source, srcIndex, customizer, stack, this, arguments, var=var):
        var = Scope({'source':source, 'customizer':customizer, 'arguments':arguments, 'srcIndex':srcIndex, 'this':this, 'object':object, 'stack':stack}, var)
        var.registers(['object', 'source', 'srcIndex', 'props', 'customizer', 'stack'])
        if PyJsStrictEq(var.get('object'),var.get('source')):
            return var.get('undefined')
        if (var.get('isArray')(var.get('source')) or var.get('isTypedArray')(var.get('source'))).neg():
            var.put('props', var.get('keysIn')(var.get('source')))
        @Js
        def PyJs_anonymous_3543_(srcValue, key, this, arguments, var=var):
            var = Scope({'this':this, 'srcValue':srcValue, 'key':key, 'arguments':arguments}, var)
            var.registers(['newValue', 'key', 'srcValue'])
            if var.get('props'):
                var.put('key', var.get('srcValue'))
                var.put('srcValue', var.get('source').get(var.get('key')))
            if var.get('isObject')(var.get('srcValue')):
                (var.get('stack') or var.put('stack', var.get('Stack').create()))
                var.get('baseMergeDeep')(var.get('object'), var.get('source'), var.get('key'), var.get('srcIndex'), var.get('baseMerge'), var.get('customizer'), var.get('stack'))
            else:
                var.put('newValue', (var.get('customizer')(var.get('object').get(var.get('key')), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
                if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                    var.put('newValue', var.get('srcValue'))
                var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
        PyJs_anonymous_3543_._set_name('anonymous')
        var.get('arrayEach')((var.get('props') or var.get('source')), PyJs_anonymous_3543_)
    PyJsHoisted_baseMerge_.__name__ = 'baseMerge'
    var.put('baseMerge', PyJsHoisted_baseMerge_)
    var.put('Stack', var.get('require')(Js('./_Stack')))
    var.put('arrayEach', var.get('require')(Js('./_arrayEach')))
    var.put('assignMergeValue', var.get('require')(Js('./_assignMergeValue')))
    var.put('baseMergeDeep', var.get('require')(Js('./_baseMergeDeep')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('isTypedArray', var.get('require')(Js('./isTypedArray')))
    var.put('keysIn', var.get('require')(Js('./keysIn')))
    pass
    var.get('module').put('exports', var.get('baseMerge'))
PyJs_anonymous_3542_._set_name('anonymous')
PyJs_Object_3544_ = Js({'./_Stack':Js(294.0),'./_arrayEach':Js(301.0),'./_assignMergeValue':Js(309.0),'./_baseMergeDeep':Js(338.0),'./isArray':Js(458.0),'./isObject':Js(467.0),'./isTypedArray':Js(473.0),'./keysIn':Js(475.0)})
@Js
def PyJs_anonymous_3545_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'isPlainObject', 'module', 'require', 'baseMergeDeep', 'copyArray', 'toPlainObject', 'isArrayLikeObject', 'isTypedArray', 'assignMergeValue', 'isFunction', 'baseClone', 'isObject', 'isArguments'])
    @Js
    def PyJsHoisted_baseMergeDeep_(object, source, key, srcIndex, mergeFunc, customizer, stack, this, arguments, var=var):
        var = Scope({'key':key, 'this':this, 'object':object, 'source':source, 'arguments':arguments, 'srcIndex':srcIndex, 'mergeFunc':mergeFunc, 'customizer':customizer, 'stack':stack}, var)
        var.registers(['isCommon', 'stacked', 'key', 'object', 'stack', 'source', 'srcValue', 'objValue', 'mergeFunc', 'customizer', 'srcIndex', 'newValue'])
        var.put('objValue', var.get('object').get(var.get('key')))
        var.put('srcValue', var.get('source').get(var.get('key')))
        var.put('stacked', var.get('stack').callprop('get', var.get('srcValue')))
        if var.get('stacked'):
            var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('stacked'))
            return var.get('undefined')
        var.put('newValue', (var.get('customizer')(var.get('objValue'), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
        var.put('isCommon', PyJsStrictEq(var.get('newValue'),var.get('undefined')))
        if var.get('isCommon'):
            var.put('newValue', var.get('srcValue'))
            if (var.get('isArray')(var.get('srcValue')) or var.get('isTypedArray')(var.get('srcValue'))):
                if var.get('isArray')(var.get('objValue')):
                    var.put('newValue', var.get('objValue'))
                else:
                    if var.get('isArrayLikeObject')(var.get('objValue')):
                        var.put('newValue', var.get('copyArray')(var.get('objValue')))
                    else:
                        var.put('isCommon', Js(False))
                        var.put('newValue', var.get('baseClone')(var.get('srcValue'), var.get('true')))
            else:
                if (var.get('isPlainObject')(var.get('srcValue')) or var.get('isArguments')(var.get('srcValue'))):
                    if var.get('isArguments')(var.get('objValue')):
                        var.put('newValue', var.get('toPlainObject')(var.get('objValue')))
                    else:
                        if (var.get('isObject')(var.get('objValue')).neg() or (var.get('srcIndex') and var.get('isFunction')(var.get('objValue')))):
                            var.put('isCommon', Js(False))
                            var.put('newValue', var.get('baseClone')(var.get('srcValue'), var.get('true')))
                        else:
                            var.put('newValue', var.get('objValue'))
                else:
                    var.put('isCommon', Js(False))
        var.get('stack').callprop('set', var.get('srcValue'), var.get('newValue'))
        if var.get('isCommon'):
            var.get('mergeFunc')(var.get('newValue'), var.get('srcValue'), var.get('srcIndex'), var.get('customizer'), var.get('stack'))
        var.get('stack').callprop('delete', var.get('srcValue'))
        var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
    PyJsHoisted_baseMergeDeep_.__name__ = 'baseMergeDeep'
    var.put('baseMergeDeep', PyJsHoisted_baseMergeDeep_)
    var.put('assignMergeValue', var.get('require')(Js('./_assignMergeValue')))
    var.put('baseClone', var.get('require')(Js('./_baseClone')))
    var.put('copyArray', var.get('require')(Js('./_copyArray')))
    var.put('isArguments', var.get('require')(Js('./isArguments')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isArrayLikeObject', var.get('require')(Js('./isArrayLikeObject')))
    var.put('isFunction', var.get('require')(Js('./isFunction')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('isPlainObject', var.get('require')(Js('./isPlainObject')))
    var.put('isTypedArray', var.get('require')(Js('./isTypedArray')))
    var.put('toPlainObject', var.get('require')(Js('./toPlainObject')))
    pass
    var.get('module').put('exports', var.get('baseMergeDeep'))
PyJs_anonymous_3545_._set_name('anonymous')
PyJs_Object_3546_ = Js({'./_assignMergeValue':Js(309.0),'./_baseClone':Js(314.0),'./_copyArray':Js(366.0),'./isArguments':Js(457.0),'./isArray':Js(458.0),'./isArrayLikeObject':Js(460.0),'./isFunction':Js(463.0),'./isObject':Js(467.0),'./isPlainObject':Js(469.0),'./isTypedArray':Js(473.0),'./toPlainObject':Js(492.0)})
@Js
def PyJs_anonymous_3547_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'arrayMap', 'baseIteratee', 'baseOrderBy', 'module', 'compareMultiple', 'baseUnary', 'baseSortBy', 'baseMap', 'identity'])
    @Js
    def PyJsHoisted_baseOrderBy_(collection, iteratees, orders, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'orders':orders, 'collection':collection, 'iteratees':iteratees}, var)
        var.registers(['orders', 'index', 'result', 'collection', 'iteratees'])
        var.put('index', (-Js(1.0)))
        var.put('iteratees', var.get('arrayMap')((var.get('iteratees') if var.get('iteratees').get('length') else Js([var.get('identity')])), var.get('baseUnary')(var.get('baseIteratee'))))
        @Js
        def PyJs_anonymous_3548_(value, key, collection, this, arguments, var=var):
            var = Scope({'collection':collection, 'this':this, 'key':key, 'value':value, 'arguments':arguments}, var)
            var.registers(['collection', 'key', 'value', 'criteria'])
            @Js
            def PyJs_anonymous_3549_(iteratee, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'iteratee':iteratee}, var)
                var.registers(['iteratee'])
                return var.get('iteratee')(var.get('value'))
            PyJs_anonymous_3549_._set_name('anonymous')
            var.put('criteria', var.get('arrayMap')(var.get('iteratees'), PyJs_anonymous_3549_))
            PyJs_Object_3550_ = Js({'criteria':var.get('criteria'),'index':var.put('index',Js(var.get('index').to_number())+Js(1)),'value':var.get('value')})
            return PyJs_Object_3550_
        PyJs_anonymous_3548_._set_name('anonymous')
        var.put('result', var.get('baseMap')(var.get('collection'), PyJs_anonymous_3548_))
        @Js
        def PyJs_anonymous_3551_(object, other, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'other':other, 'arguments':arguments}, var)
            var.registers(['object', 'other'])
            return var.get('compareMultiple')(var.get('object'), var.get('other'), var.get('orders'))
        PyJs_anonymous_3551_._set_name('anonymous')
        return var.get('baseSortBy')(var.get('result'), PyJs_anonymous_3551_)
    PyJsHoisted_baseOrderBy_.__name__ = 'baseOrderBy'
    var.put('baseOrderBy', PyJsHoisted_baseOrderBy_)
    var.put('arrayMap', var.get('require')(Js('./_arrayMap')))
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('baseMap', var.get('require')(Js('./_baseMap')))
    var.put('baseSortBy', var.get('require')(Js('./_baseSortBy')))
    var.put('baseUnary', var.get('require')(Js('./_baseUnary')))
    var.put('compareMultiple', var.get('require')(Js('./_compareMultiple')))
    var.put('identity', var.get('require')(Js('./identity')))
    pass
    var.get('module').put('exports', var.get('baseOrderBy'))
PyJs_anonymous_3547_._set_name('anonymous')
PyJs_Object_3552_ = Js({'./_arrayMap':Js(304.0),'./_baseIteratee':Js(331.0),'./_baseMap':Js(334.0),'./_baseSortBy':Js(345.0),'./_baseUnary':Js(348.0),'./_compareMultiple':Js(365.0),'./identity':Js(455.0)})
@Js
def PyJs_anonymous_3553_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'baseProperty', 'exports', 'module'])
    @Js
    def PyJsHoisted_baseProperty_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        @Js
        def PyJs_anonymous_3554_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            return (var.get('undefined') if (var.get('object')==var.get("null")) else var.get('object').get(var.get('key')))
        PyJs_anonymous_3554_._set_name('anonymous')
        return PyJs_anonymous_3554_
    PyJsHoisted_baseProperty_.__name__ = 'baseProperty'
    var.put('baseProperty', PyJsHoisted_baseProperty_)
    pass
    var.get('module').put('exports', var.get('baseProperty'))
PyJs_anonymous_3553_._set_name('anonymous')
PyJs_Object_3555_ = Js({})
@Js
def PyJs_anonymous_3556_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'baseGet', 'require', 'basePropertyDeep', 'module'])
    @Js
    def PyJsHoisted_basePropertyDeep_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path'])
        @Js
        def PyJs_anonymous_3557_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            return var.get('baseGet')(var.get('object'), var.get('path'))
        PyJs_anonymous_3557_._set_name('anonymous')
        return PyJs_anonymous_3557_
    PyJsHoisted_basePropertyDeep_.__name__ = 'basePropertyDeep'
    var.put('basePropertyDeep', PyJsHoisted_basePropertyDeep_)
    var.put('baseGet', var.get('require')(Js('./_baseGet')))
    pass
    var.get('module').put('exports', var.get('basePropertyDeep'))
PyJs_anonymous_3556_._set_name('anonymous')
PyJs_Object_3558_ = Js({'./_baseGet':Js(321.0)})
@Js
def PyJs_anonymous_3559_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOf', 'exports', 'basePullAll', 'baseIndexOfWith', 'arrayProto', 'require', 'arrayMap', 'module', 'copyArray', 'splice', 'baseUnary'])
    @Js
    def PyJsHoisted_basePullAll_(array, values, iteratee, comparator, this, arguments, var=var):
        var = Scope({'values':values, 'arguments':arguments, 'comparator':comparator, 'iteratee':iteratee, 'this':this, 'array':array}, var)
        var.registers(['index', 'computed', 'comparator', 'indexOf', 'fromIndex', 'value', 'length', 'values', 'iteratee', 'seen', 'array'])
        var.put('indexOf', (var.get('baseIndexOfWith') if var.get('comparator') else var.get('baseIndexOf')))
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('values').get('length'))
        var.put('seen', var.get('array'))
        if PyJsStrictEq(var.get('array'),var.get('values')):
            var.put('values', var.get('copyArray')(var.get('values')))
        if var.get('iteratee'):
            var.put('seen', var.get('arrayMap')(var.get('array'), var.get('baseUnary')(var.get('iteratee'))))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('fromIndex', Js(0.0))
            var.put('value', var.get('values').get(var.get('index')))
            var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
            while (var.put('fromIndex', var.get('indexOf')(var.get('seen'), var.get('computed'), var.get('fromIndex'), var.get('comparator')))>(-Js(1.0))):
                if PyJsStrictNeq(var.get('seen'),var.get('array')):
                    var.get('splice').callprop('call', var.get('seen'), var.get('fromIndex'), Js(1.0))
                var.get('splice').callprop('call', var.get('array'), var.get('fromIndex'), Js(1.0))
        return var.get('array')
    PyJsHoisted_basePullAll_.__name__ = 'basePullAll'
    var.put('basePullAll', PyJsHoisted_basePullAll_)
    var.put('arrayMap', var.get('require')(Js('./_arrayMap')))
    var.put('baseIndexOf', var.get('require')(Js('./_baseIndexOf')))
    var.put('baseIndexOfWith', var.get('require')(Js('./_baseIndexOfWith')))
    var.put('baseUnary', var.get('require')(Js('./_baseUnary')))
    var.put('copyArray', var.get('require')(Js('./_copyArray')))
    var.put('arrayProto', var.get('Array').get('prototype'))
    var.put('splice', var.get('arrayProto').get('splice'))
    pass
    var.get('module').put('exports', var.get('basePullAll'))
PyJs_anonymous_3559_._set_name('anonymous')
PyJs_Object_3560_ = Js({'./_arrayMap':Js(304.0),'./_baseIndexOf':Js(325.0),'./_baseIndexOfWith':Js(326.0),'./_baseUnary':Js(348.0),'./_copyArray':Js(366.0)})
@Js
def PyJs_anonymous_3561_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['MAX_SAFE_INTEGER', 'exports', 'baseRepeat', 'require', 'module', 'nativeFloor'])
    @Js
    def PyJsHoisted_baseRepeat_(string, n, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'string':string, 'n':n}, var)
        var.registers(['n', 'result', 'string'])
        var.put('result', Js(''))
        if ((var.get('string').neg() or (var.get('n')<Js(1.0))) or (var.get('n')>var.get('MAX_SAFE_INTEGER'))):
            return var.get('result')
        while 1:
            if (var.get('n')%Js(2.0)):
                var.put('result', var.get('string'), '+')
            var.put('n', var.get('nativeFloor')((var.get('n')/Js(2.0))))
            if var.get('n'):
                var.put('string', var.get('string'), '+')
            if not var.get('n'):
                break
        return var.get('result')
    PyJsHoisted_baseRepeat_.__name__ = 'baseRepeat'
    var.put('baseRepeat', PyJsHoisted_baseRepeat_)
    var.put('MAX_SAFE_INTEGER', Js(9007199254740991.0))
    var.put('nativeFloor', var.get('Math').get('floor'))
    pass
    var.get('module').put('exports', var.get('baseRepeat'))
PyJs_anonymous_3561_._set_name('anonymous')
PyJs_Object_3562_ = Js({})
@Js
def PyJs_anonymous_3563_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseSlice', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_baseSlice_(array, start, end, this, arguments, var=var):
        var = Scope({'this':this, 'start':start, 'array':array, 'end':end, 'arguments':arguments}, var)
        var.registers(['index', 'end', 'start', 'length', 'result', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('array').get('length'))
        if (var.get('start')<Js(0.0)):
            var.put('start', (Js(0.0) if ((-var.get('start'))>var.get('length')) else (var.get('length')+var.get('start'))))
        var.put('end', (var.get('length') if (var.get('end')>var.get('length')) else var.get('end')))
        if (var.get('end')<Js(0.0)):
            var.put('end', var.get('length'), '+')
        var.put('length', (Js(0.0) if (var.get('start')>var.get('end')) else PyJsBshift((var.get('end')-var.get('start')),Js(0.0))))
        var.put('start', Js(0.0), '>>>')
        var.put('result', var.get('Array')(var.get('length')))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.get('result').put(var.get('index'), var.get('array').get((var.get('index')+var.get('start'))))
        return var.get('result')
    PyJsHoisted_baseSlice_.__name__ = 'baseSlice'
    var.put('baseSlice', PyJsHoisted_baseSlice_)
    pass
    var.get('module').put('exports', var.get('baseSlice'))
PyJs_anonymous_3563_._set_name('anonymous')
PyJs_Object_3564_ = Js({})
@Js
def PyJs_anonymous_3565_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseSortBy', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_baseSortBy_(array, comparer, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'comparer':comparer, 'arguments':arguments}, var)
        var.registers(['length', 'array', 'comparer'])
        var.put('length', var.get('array').get('length'))
        var.get('array').callprop('sort', var.get('comparer'))
        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
            var.get('array').put(var.get('length'), var.get('array').get(var.get('length')).get('value'))
        return var.get('array')
    PyJsHoisted_baseSortBy_.__name__ = 'baseSortBy'
    var.put('baseSortBy', PyJsHoisted_baseSortBy_)
    pass
    var.get('module').put('exports', var.get('baseSortBy'))
PyJs_anonymous_3565_._set_name('anonymous')
PyJs_Object_3566_ = Js({})
@Js
def PyJs_anonymous_3567_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'baseTimes'])
    @Js
    def PyJsHoisted_baseTimes_(n, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'iteratee':iteratee, 'arguments':arguments, 'n':n}, var)
        var.registers(['index', 'iteratee', 'result', 'n'])
        var.put('index', (-Js(1.0)))
        var.put('result', var.get('Array')(var.get('n')))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('n')):
            var.get('result').put(var.get('index'), var.get('iteratee')(var.get('index')))
        return var.get('result')
    PyJsHoisted_baseTimes_.__name__ = 'baseTimes'
    var.put('baseTimes', PyJsHoisted_baseTimes_)
    pass
    var.get('module').put('exports', var.get('baseTimes'))
PyJs_anonymous_3567_._set_name('anonymous')
PyJs_Object_3568_ = Js({})
@Js
def PyJs_anonymous_3569_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'INFINITY', 'Symbol', 'baseToString', 'module', 'symbolProto', 'isSymbol', 'require', 'symbolToString'])
    @Js
    def PyJsHoisted_baseToString_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['result', 'value'])
        if (var.get('value',throw=False).typeof()==Js('string')):
            return var.get('value')
        if var.get('isSymbol')(var.get('value')):
            return (var.get('symbolToString').callprop('call', var.get('value')) if var.get('symbolToString') else Js(''))
        var.put('result', (var.get('value')+Js('')))
        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
    PyJsHoisted_baseToString_.__name__ = 'baseToString'
    var.put('baseToString', PyJsHoisted_baseToString_)
    var.put('Symbol', var.get('require')(Js('./_Symbol')))
    var.put('isSymbol', var.get('require')(Js('./isSymbol')))
    var.put('INFINITY', (Js(1.0)/Js(0.0)))
    var.put('symbolProto', (var.get('Symbol').get('prototype') if var.get('Symbol') else var.get('undefined')))
    var.put('symbolToString', (var.get('symbolProto').get('toString') if var.get('symbolProto') else var.get('undefined')))
    pass
    var.get('module').put('exports', var.get('baseToString'))
PyJs_anonymous_3569_._set_name('anonymous')
PyJs_Object_3570_ = Js({'./_Symbol':Js(295.0),'./isSymbol':Js(472.0)})
@Js
def PyJs_anonymous_3571_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseUnary', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_baseUnary_(func, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'func':func}, var)
        var.registers(['func'])
        @Js
        def PyJs_anonymous_3572_(value, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
            var.registers(['value'])
            return var.get('func')(var.get('value'))
        PyJs_anonymous_3572_._set_name('anonymous')
        return PyJs_anonymous_3572_
    PyJsHoisted_baseUnary_.__name__ = 'baseUnary'
    var.put('baseUnary', PyJsHoisted_baseUnary_)
    pass
    var.get('module').put('exports', var.get('baseUnary'))
PyJs_anonymous_3571_._set_name('anonymous')
PyJs_Object_3573_ = Js({})
@Js
def PyJs_anonymous_3574_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseUniq', 'exports', 'arrayIncludesWith', 'SetCache', 'require', 'setToArray', 'cacheHas', 'LARGE_ARRAY_SIZE', 'arrayIncludes', 'module', 'createSet'])
    @Js
    def PyJsHoisted_baseUniq_(array, iteratee, comparator, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments, 'comparator':comparator, 'iteratee':iteratee}, var)
        var.registers(['index', 'isCommon', 'computed', 'comparator', 'value', 'includes', 'length', 'set', 'result', 'seenIndex', 'iteratee', 'seen', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('includes', var.get('arrayIncludes'))
        var.put('length', var.get('array').get('length'))
        var.put('isCommon', var.get('true'))
        var.put('result', Js([]))
        var.put('seen', var.get('result'))
        if var.get('comparator'):
            var.put('isCommon', Js(False))
            var.put('includes', var.get('arrayIncludesWith'))
        else:
            if (var.get('length')>=var.get('LARGE_ARRAY_SIZE')):
                var.put('set', (var.get("null") if var.get('iteratee') else var.get('createSet')(var.get('array'))))
                if var.get('set'):
                    return var.get('setToArray')(var.get('set'))
                var.put('isCommon', Js(False))
                var.put('includes', var.get('cacheHas'))
                var.put('seen', var.get('SetCache').create())
            else:
                var.put('seen', (Js([]) if var.get('iteratee') else var.get('result')))
        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
        class JS_BREAK_LABEL_6f75746572(Exception): pass
        try:
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                try:
                    var.put('value', var.get('array').get(var.get('index')))
                    var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                    if (var.get('isCommon') and PyJsStrictEq(var.get('computed'),var.get('computed'))):
                        var.put('seenIndex', var.get('seen').get('length'))
                        while (var.put('seenIndex',Js(var.get('seenIndex').to_number())-Js(1))+Js(1)):
                            if PyJsStrictEq(var.get('seen').get(var.get('seenIndex')),var.get('computed')):
                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                        if var.get('iteratee'):
                            var.get('seen').callprop('push', var.get('computed'))
                        var.get('result').callprop('push', var.get('value'))
                    else:
                        if var.get('includes')(var.get('seen'), var.get('computed'), var.get('comparator')).neg():
                            if PyJsStrictNeq(var.get('seen'),var.get('result')):
                                var.get('seen').callprop('push', var.get('computed'))
                            var.get('result').callprop('push', var.get('value'))
                except JS_CONTINUE_LABEL_6f75746572:
                    pass
        except JS_BREAK_LABEL_6f75746572:
            pass
        return var.get('result')
    PyJsHoisted_baseUniq_.__name__ = 'baseUniq'
    var.put('baseUniq', PyJsHoisted_baseUniq_)
    var.put('SetCache', var.get('require')(Js('./_SetCache')))
    var.put('arrayIncludes', var.get('require')(Js('./_arrayIncludes')))
    var.put('arrayIncludesWith', var.get('require')(Js('./_arrayIncludesWith')))
    var.put('cacheHas', var.get('require')(Js('./_cacheHas')))
    var.put('createSet', var.get('require')(Js('./_createSet')))
    var.put('setToArray', var.get('require')(Js('./_setToArray')))
    var.put('LARGE_ARRAY_SIZE', Js(200.0))
    pass
    var.get('module').put('exports', var.get('baseUniq'))
PyJs_anonymous_3574_._set_name('anonymous')
PyJs_Object_3575_ = Js({'./_SetCache':Js(293.0),'./_arrayIncludes':Js(302.0),'./_arrayIncludesWith':Js(303.0),'./_cacheHas':Js(351.0),'./_createSet':Js(374.0),'./_setToArray':Js(425.0)})
@Js
def PyJs_anonymous_3576_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'arrayMap', 'exports', 'baseValues', 'module'])
    @Js
    def PyJsHoisted_baseValues_(object, props, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'props':props}, var)
        var.registers(['object', 'props'])
        @Js
        def PyJs_anonymous_3577_(key, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
            var.registers(['key'])
            return var.get('object').get(var.get('key'))
        PyJs_anonymous_3577_._set_name('anonymous')
        return var.get('arrayMap')(var.get('props'), PyJs_anonymous_3577_)
    PyJsHoisted_baseValues_.__name__ = 'baseValues'
    var.put('baseValues', PyJsHoisted_baseValues_)
    var.put('arrayMap', var.get('require')(Js('./_arrayMap')))
    pass
    var.get('module').put('exports', var.get('baseValues'))
PyJs_anonymous_3576_._set_name('anonymous')
PyJs_Object_3578_ = Js({'./_arrayMap':Js(304.0)})
@Js
def PyJs_anonymous_3579_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'cacheHas'])
    @Js
    def PyJsHoisted_cacheHas_(cache, key, this, arguments, var=var):
        var = Scope({'this':this, 'cache':cache, 'arguments':arguments, 'key':key}, var)
        var.registers(['cache', 'key'])
        return var.get('cache').callprop('has', var.get('key'))
    PyJsHoisted_cacheHas_.__name__ = 'cacheHas'
    var.put('cacheHas', PyJsHoisted_cacheHas_)
    pass
    var.get('module').put('exports', var.get('cacheHas'))
PyJs_anonymous_3579_._set_name('anonymous')
PyJs_Object_3580_ = Js({})
@Js
def PyJs_anonymous_3581_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'stringToPath', 'require', 'module', 'castPath'])
    @Js
    def PyJsHoisted_castPath_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('value') if var.get('isArray')(var.get('value')) else var.get('stringToPath')(var.get('value')))
    PyJsHoisted_castPath_.__name__ = 'castPath'
    var.put('castPath', PyJsHoisted_castPath_)
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('stringToPath', var.get('require')(Js('./_stringToPath')))
    pass
    var.get('module').put('exports', var.get('castPath'))
PyJs_anonymous_3581_._set_name('anonymous')
PyJs_Object_3582_ = Js({'./_stringToPath':Js(432.0),'./isArray':Js(458.0)})
@Js
def PyJs_anonymous_3583_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'baseSlice', 'castSlice', 'require', 'module'])
    @Js
    def PyJsHoisted_castSlice_(array, start, end, this, arguments, var=var):
        var = Scope({'this':this, 'start':start, 'array':array, 'end':end, 'arguments':arguments}, var)
        var.registers(['start', 'length', 'end', 'array'])
        var.put('length', var.get('array').get('length'))
        var.put('end', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')))
        return (var.get('array') if (var.get('start').neg() and (var.get('end')>=var.get('length'))) else var.get('baseSlice')(var.get('array'), var.get('start'), var.get('end')))
    PyJsHoisted_castSlice_.__name__ = 'castSlice'
    var.put('castSlice', PyJsHoisted_castSlice_)
    var.put('baseSlice', var.get('require')(Js('./_baseSlice')))
    pass
    var.get('module').put('exports', var.get('castSlice'))
PyJs_anonymous_3583_._set_name('anonymous')
PyJs_Object_3584_ = Js({'./_baseSlice':Js(344.0)})
@Js
def PyJs_anonymous_3585_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOf', 'require', 'exports', 'module', 'charsEndIndex'])
    @Js
    def PyJsHoisted_charsEndIndex_(strSymbols, chrSymbols, this, arguments, var=var):
        var = Scope({'this':this, 'chrSymbols':chrSymbols, 'arguments':arguments, 'strSymbols':strSymbols}, var)
        var.registers(['index', 'chrSymbols', 'strSymbols'])
        var.put('index', var.get('strSymbols').get('length'))
        while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) and (var.get('baseIndexOf')(var.get('chrSymbols'), var.get('strSymbols').get(var.get('index')), Js(0.0))>(-Js(1.0)))):
            pass
        return var.get('index')
    PyJsHoisted_charsEndIndex_.__name__ = 'charsEndIndex'
    var.put('charsEndIndex', PyJsHoisted_charsEndIndex_)
    var.put('baseIndexOf', var.get('require')(Js('./_baseIndexOf')))
    pass
    var.get('module').put('exports', var.get('charsEndIndex'))
PyJs_anonymous_3585_._set_name('anonymous')
PyJs_Object_3586_ = Js({'./_baseIndexOf':Js(325.0)})
@Js
def PyJs_anonymous_3587_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'checkGlobal'])
    @Js
    def PyJsHoisted_checkGlobal_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('value') if (var.get('value') and PyJsStrictEq(var.get('value').get('Object'),var.get('Object'))) else var.get("null"))
    PyJsHoisted_checkGlobal_.__name__ = 'checkGlobal'
    var.put('checkGlobal', PyJsHoisted_checkGlobal_)
    pass
    var.get('module').put('exports', var.get('checkGlobal'))
PyJs_anonymous_3587_._set_name('anonymous')
PyJs_Object_3588_ = Js({})
@Js
def PyJs_anonymous_3589_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneArrayBuffer', 'require', 'exports', 'Uint8Array', 'module'])
    @Js
    def PyJsHoisted_cloneArrayBuffer_(arrayBuffer, this, arguments, var=var):
        var = Scope({'this':this, 'arrayBuffer':arrayBuffer, 'arguments':arguments}, var)
        var.registers(['arrayBuffer', 'result'])
        var.put('result', var.get('arrayBuffer').get('constructor').create(var.get('arrayBuffer').get('byteLength')))
        var.get('Uint8Array').create(var.get('result')).callprop('set', var.get('Uint8Array').create(var.get('arrayBuffer')))
        return var.get('result')
    PyJsHoisted_cloneArrayBuffer_.__name__ = 'cloneArrayBuffer'
    var.put('cloneArrayBuffer', PyJsHoisted_cloneArrayBuffer_)
    var.put('Uint8Array', var.get('require')(Js('./_Uint8Array')))
    pass
    var.get('module').put('exports', var.get('cloneArrayBuffer'))
PyJs_anonymous_3589_._set_name('anonymous')
PyJs_Object_3590_ = Js({'./_Uint8Array':Js(296.0)})
@Js
def PyJs_anonymous_3591_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneBuffer', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_cloneBuffer_(buffer, isDeep, this, arguments, var=var):
        var = Scope({'buffer':buffer, 'this':this, 'isDeep':isDeep, 'arguments':arguments}, var)
        var.registers(['buffer', 'isDeep', 'result'])
        if var.get('isDeep'):
            return var.get('buffer').callprop('slice')
        var.put('result', var.get('buffer').get('constructor').create(var.get('buffer').get('length')))
        var.get('buffer').callprop('copy', var.get('result'))
        return var.get('result')
    PyJsHoisted_cloneBuffer_.__name__ = 'cloneBuffer'
    var.put('cloneBuffer', PyJsHoisted_cloneBuffer_)
    pass
    var.get('module').put('exports', var.get('cloneBuffer'))
PyJs_anonymous_3591_._set_name('anonymous')
PyJs_Object_3592_ = Js({})
@Js
def PyJs_anonymous_3593_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneArrayBuffer', 'require', 'exports', 'cloneDataView', 'module'])
    @Js
    def PyJsHoisted_cloneDataView_(dataView, isDeep, this, arguments, var=var):
        var = Scope({'this':this, 'dataView':dataView, 'isDeep':isDeep, 'arguments':arguments}, var)
        var.registers(['buffer', 'dataView', 'isDeep'])
        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('dataView').get('buffer')) if var.get('isDeep') else var.get('dataView').get('buffer')))
        return var.get('dataView').get('constructor').create(var.get('buffer'), var.get('dataView').get('byteOffset'), var.get('dataView').get('byteLength'))
    PyJsHoisted_cloneDataView_.__name__ = 'cloneDataView'
    var.put('cloneDataView', PyJsHoisted_cloneDataView_)
    var.put('cloneArrayBuffer', var.get('require')(Js('./_cloneArrayBuffer')))
    pass
    var.get('module').put('exports', var.get('cloneDataView'))
PyJs_anonymous_3593_._set_name('anonymous')
PyJs_Object_3594_ = Js({'./_cloneArrayBuffer':Js(356.0)})
@Js
def PyJs_anonymous_3595_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'addMapEntry', 'require', 'module', 'arrayReduce', 'mapToArray', 'cloneMap'])
    @Js
    def PyJsHoisted_cloneMap_(map, isDeep, cloneFunc, this, arguments, var=var):
        var = Scope({'this':this, 'map':map, 'isDeep':isDeep, 'arguments':arguments, 'cloneFunc':cloneFunc}, var)
        var.registers(['map', 'array', 'isDeep', 'cloneFunc'])
        var.put('array', (var.get('cloneFunc')(var.get('mapToArray')(var.get('map')), var.get('true')) if var.get('isDeep') else var.get('mapToArray')(var.get('map'))))
        return var.get('arrayReduce')(var.get('array'), var.get('addMapEntry'), var.get('map').get('constructor').create())
    PyJsHoisted_cloneMap_.__name__ = 'cloneMap'
    var.put('cloneMap', PyJsHoisted_cloneMap_)
    var.put('addMapEntry', var.get('require')(Js('./_addMapEntry')))
    var.put('arrayReduce', var.get('require')(Js('./_arrayReduce')))
    var.put('mapToArray', var.get('require')(Js('./_mapToArray')))
    pass
    var.get('module').put('exports', var.get('cloneMap'))
PyJs_anonymous_3595_._set_name('anonymous')
PyJs_Object_3596_ = Js({'./_addMapEntry':Js(298.0),'./_arrayReduce':Js(306.0),'./_mapToArray':Js(419.0)})
@Js
def PyJs_anonymous_3597_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'cloneRegExp', 'exports', 'module', 'reFlags'])
    @Js
    def PyJsHoisted_cloneRegExp_(regexp, this, arguments, var=var):
        var = Scope({'this':this, 'regexp':regexp, 'arguments':arguments}, var)
        var.registers(['regexp', 'result'])
        var.put('result', var.get('regexp').get('constructor').create(var.get('regexp').get('source'), var.get('reFlags').callprop('exec', var.get('regexp'))))
        var.get('result').put('lastIndex', var.get('regexp').get('lastIndex'))
        return var.get('result')
    PyJsHoisted_cloneRegExp_.__name__ = 'cloneRegExp'
    var.put('cloneRegExp', PyJsHoisted_cloneRegExp_)
    var.put('reFlags', JsRegExp('/\\w*$/'))
    pass
    var.get('module').put('exports', var.get('cloneRegExp'))
PyJs_anonymous_3597_._set_name('anonymous')
PyJs_Object_3598_ = Js({})
@Js
def PyJs_anonymous_3599_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneSet', 'exports', 'require', 'setToArray', 'addSetEntry', 'module', 'arrayReduce'])
    @Js
    def PyJsHoisted_cloneSet_(set, isDeep, cloneFunc, this, arguments, var=var):
        var = Scope({'this':this, 'cloneFunc':cloneFunc, 'set':set, 'isDeep':isDeep, 'arguments':arguments}, var)
        var.registers(['cloneFunc', 'array', 'set', 'isDeep'])
        var.put('array', (var.get('cloneFunc')(var.get('setToArray')(var.get('set')), var.get('true')) if var.get('isDeep') else var.get('setToArray')(var.get('set'))))
        return var.get('arrayReduce')(var.get('array'), var.get('addSetEntry'), var.get('set').get('constructor').create())
    PyJsHoisted_cloneSet_.__name__ = 'cloneSet'
    var.put('cloneSet', PyJsHoisted_cloneSet_)
    var.put('addSetEntry', var.get('require')(Js('./_addSetEntry')))
    var.put('arrayReduce', var.get('require')(Js('./_arrayReduce')))
    var.put('setToArray', var.get('require')(Js('./_setToArray')))
    pass
    var.get('module').put('exports', var.get('cloneSet'))
PyJs_anonymous_3599_._set_name('anonymous')
PyJs_Object_3600_ = Js({'./_addSetEntry':Js(299.0),'./_arrayReduce':Js(306.0),'./_setToArray':Js(425.0)})
@Js
def PyJs_anonymous_3601_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'cloneSymbol', 'Symbol', 'symbolValueOf', 'module', 'symbolProto', 'require'])
    @Js
    def PyJsHoisted_cloneSymbol_(symbol, this, arguments, var=var):
        var = Scope({'this':this, 'symbol':symbol, 'arguments':arguments}, var)
        var.registers(['symbol'])
        PyJs_Object_3602_ = Js({})
        return (var.get('Object')(var.get('symbolValueOf').callprop('call', var.get('symbol'))) if var.get('symbolValueOf') else PyJs_Object_3602_)
    PyJsHoisted_cloneSymbol_.__name__ = 'cloneSymbol'
    var.put('cloneSymbol', PyJsHoisted_cloneSymbol_)
    var.put('Symbol', var.get('require')(Js('./_Symbol')))
    var.put('symbolProto', (var.get('Symbol').get('prototype') if var.get('Symbol') else var.get('undefined')))
    var.put('symbolValueOf', (var.get('symbolProto').get('valueOf') if var.get('symbolProto') else var.get('undefined')))
    pass
    var.get('module').put('exports', var.get('cloneSymbol'))
PyJs_anonymous_3601_._set_name('anonymous')
PyJs_Object_3603_ = Js({'./_Symbol':Js(295.0)})
@Js
def PyJs_anonymous_3604_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneArrayBuffer', 'require', 'exports', 'module', 'cloneTypedArray'])
    @Js
    def PyJsHoisted_cloneTypedArray_(typedArray, isDeep, this, arguments, var=var):
        var = Scope({'this':this, 'typedArray':typedArray, 'isDeep':isDeep, 'arguments':arguments}, var)
        var.registers(['buffer', 'typedArray', 'isDeep'])
        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('typedArray').get('buffer')) if var.get('isDeep') else var.get('typedArray').get('buffer')))
        return var.get('typedArray').get('constructor').create(var.get('buffer'), var.get('typedArray').get('byteOffset'), var.get('typedArray').get('length'))
    PyJsHoisted_cloneTypedArray_.__name__ = 'cloneTypedArray'
    var.put('cloneTypedArray', PyJsHoisted_cloneTypedArray_)
    var.put('cloneArrayBuffer', var.get('require')(Js('./_cloneArrayBuffer')))
    pass
    var.get('module').put('exports', var.get('cloneTypedArray'))
PyJs_anonymous_3604_._set_name('anonymous')
PyJs_Object_3605_ = Js({'./_cloneArrayBuffer':Js(356.0)})
@Js
def PyJs_anonymous_3606_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['compareAscending', 'require', 'isSymbol', 'exports', 'module'])
    @Js
    def PyJsHoisted_compareAscending_(value, other, this, arguments, var=var):
        var = Scope({'this':this, 'other':other, 'arguments':arguments, 'value':value}, var)
        var.registers(['valIsSymbol', 'valIsNull', 'value', 'valIsDefined', 'othIsNull', 'othIsReflexive', 'othIsSymbol', 'othIsDefined', 'other', 'valIsReflexive'])
        if PyJsStrictNeq(var.get('value'),var.get('other')):
            var.put('valIsDefined', PyJsStrictNeq(var.get('value'),var.get('undefined')))
            var.put('valIsNull', PyJsStrictEq(var.get('value'),var.get("null")))
            var.put('valIsReflexive', PyJsStrictEq(var.get('value'),var.get('value')))
            var.put('valIsSymbol', var.get('isSymbol')(var.get('value')))
            var.put('othIsDefined', PyJsStrictNeq(var.get('other'),var.get('undefined')))
            var.put('othIsNull', PyJsStrictEq(var.get('other'),var.get("null")))
            var.put('othIsReflexive', PyJsStrictEq(var.get('other'),var.get('other')))
            var.put('othIsSymbol', var.get('isSymbol')(var.get('other')))
            def PyJs_LONG_3607_(var=var):
                return ((((((var.get('othIsNull').neg() and var.get('othIsSymbol').neg()) and var.get('valIsSymbol').neg()) and (var.get('value')>var.get('other'))) or ((((var.get('valIsSymbol') and var.get('othIsDefined')) and var.get('othIsReflexive')) and var.get('othIsNull').neg()) and var.get('othIsSymbol').neg())) or ((var.get('valIsNull') and var.get('othIsDefined')) and var.get('othIsReflexive'))) or (var.get('valIsDefined').neg() and var.get('othIsReflexive')))
            if (PyJs_LONG_3607_() or var.get('valIsReflexive').neg()):
                return Js(1.0)
            def PyJs_LONG_3608_(var=var):
                return ((((((var.get('valIsNull').neg() and var.get('valIsSymbol').neg()) and var.get('othIsSymbol').neg()) and (var.get('value')<var.get('other'))) or ((((var.get('othIsSymbol') and var.get('valIsDefined')) and var.get('valIsReflexive')) and var.get('valIsNull').neg()) and var.get('valIsSymbol').neg())) or ((var.get('othIsNull') and var.get('valIsDefined')) and var.get('valIsReflexive'))) or (var.get('othIsDefined').neg() and var.get('valIsReflexive')))
            if (PyJs_LONG_3608_() or var.get('othIsReflexive').neg()):
                return (-Js(1.0))
        return Js(0.0)
    PyJsHoisted_compareAscending_.__name__ = 'compareAscending'
    var.put('compareAscending', PyJsHoisted_compareAscending_)
    var.put('isSymbol', var.get('require')(Js('./isSymbol')))
    pass
    var.get('module').put('exports', var.get('compareAscending'))
PyJs_anonymous_3606_._set_name('anonymous')
PyJs_Object_3609_ = Js({'./isSymbol':Js(472.0)})
@Js
def PyJs_anonymous_3610_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['compareAscending', 'require', 'exports', 'module', 'compareMultiple'])
    @Js
    def PyJsHoisted_compareMultiple_(object, other, orders, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'object':object, 'other':other, 'orders':orders}, var)
        var.registers(['index', 'orders', 'object', 'ordersLength', 'length', 'other', 'result', 'othCriteria', 'order', 'objCriteria'])
        var.put('index', (-Js(1.0)))
        var.put('objCriteria', var.get('object').get('criteria'))
        var.put('othCriteria', var.get('other').get('criteria'))
        var.put('length', var.get('objCriteria').get('length'))
        var.put('ordersLength', var.get('orders').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('result', var.get('compareAscending')(var.get('objCriteria').get(var.get('index')), var.get('othCriteria').get(var.get('index'))))
            if var.get('result'):
                if (var.get('index')>=var.get('ordersLength')):
                    return var.get('result')
                var.put('order', var.get('orders').get(var.get('index')))
                return (var.get('result')*((-Js(1.0)) if (var.get('order')==Js('desc')) else Js(1.0)))
        return (var.get('object').get('index')-var.get('other').get('index'))
    PyJsHoisted_compareMultiple_.__name__ = 'compareMultiple'
    var.put('compareMultiple', PyJsHoisted_compareMultiple_)
    var.put('compareAscending', var.get('require')(Js('./_compareAscending')))
    pass
    var.get('module').put('exports', var.get('compareMultiple'))
PyJs_anonymous_3610_._set_name('anonymous')
PyJs_Object_3611_ = Js({'./_compareAscending':Js(364.0)})
@Js
def PyJs_anonymous_3612_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'copyArray', 'exports', 'module'])
    @Js
    def PyJsHoisted_copyArray_(source, array, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'array':array, 'arguments':arguments}, var)
        var.registers(['index', 'length', 'array', 'source'])
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('source').get('length'))
        (var.get('array') or var.put('array', var.get('Array')(var.get('length'))))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.get('array').put(var.get('index'), var.get('source').get(var.get('index')))
        return var.get('array')
    PyJsHoisted_copyArray_.__name__ = 'copyArray'
    var.put('copyArray', PyJsHoisted_copyArray_)
    pass
    var.get('module').put('exports', var.get('copyArray'))
PyJs_anonymous_3612_._set_name('anonymous')
PyJs_Object_3613_ = Js({})
@Js
def PyJs_anonymous_3614_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assignValue', 'require', 'copyObject', 'exports', 'module'])
    @Js
    def PyJsHoisted_copyObject_(source, props, object, customizer, this, arguments, var=var):
        var = Scope({'source':source, 'customizer':customizer, 'arguments':arguments, 'props':props, 'this':this, 'object':object}, var)
        var.registers(['index', 'object', 'source', 'length', 'key', 'props', 'customizer', 'newValue'])
        PyJs_Object_3615_ = Js({})
        (var.get('object') or var.put('object', PyJs_Object_3615_))
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('props').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('key', var.get('props').get(var.get('index')))
            var.put('newValue', (var.get('customizer')(var.get('object').get(var.get('key')), var.get('source').get(var.get('key')), var.get('key'), var.get('object'), var.get('source')) if var.get('customizer') else var.get('source').get(var.get('key'))))
            var.get('assignValue')(var.get('object'), var.get('key'), var.get('newValue'))
        return var.get('object')
    PyJsHoisted_copyObject_.__name__ = 'copyObject'
    var.put('copyObject', PyJsHoisted_copyObject_)
    var.put('assignValue', var.get('require')(Js('./_assignValue')))
    pass
    var.get('module').put('exports', var.get('copyObject'))
PyJs_anonymous_3614_._set_name('anonymous')
PyJs_Object_3616_ = Js({'./_assignValue':Js(310.0)})
@Js
def PyJs_anonymous_3617_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getSymbols', 'exports', 'copySymbols', 'require', 'module', 'copyObject'])
    @Js
    def PyJsHoisted_copySymbols_(source, object, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'object':object, 'arguments':arguments}, var)
        var.registers(['source', 'object'])
        return var.get('copyObject')(var.get('source'), var.get('getSymbols')(var.get('source')), var.get('object'))
    PyJsHoisted_copySymbols_.__name__ = 'copySymbols'
    var.put('copySymbols', PyJsHoisted_copySymbols_)
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('getSymbols', var.get('require')(Js('./_getSymbols')))
    pass
    var.get('module').put('exports', var.get('copySymbols'))
PyJs_anonymous_3617_._set_name('anonymous')
PyJs_Object_3618_ = Js({'./_copyObject':Js(367.0),'./_getSymbols':Js(384.0)})
@Js
def PyJs_anonymous_3619_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'root', 'module', 'coreJsData'])
    var.put('root', var.get('require')(Js('./_root')))
    var.put('coreJsData', var.get('root').get('__core-js_shared__'))
    var.get('module').put('exports', var.get('coreJsData'))
PyJs_anonymous_3619_._set_name('anonymous')
PyJs_Object_3620_ = Js({'./_root':Js(422.0)})
@Js
def PyJs_anonymous_3621_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'rest', 'createAssigner', 'isIterateeCall'])
    @Js
    def PyJsHoisted_createAssigner_(assigner, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'assigner':assigner}, var)
        var.registers(['assigner'])
        @Js
        def PyJs_anonymous_3622_(object, sources, this, arguments, var=var):
            var = Scope({'this':this, 'sources':sources, 'object':object, 'arguments':arguments}, var)
            var.registers(['index', 'sources', 'object', 'guard', 'source', 'length', 'customizer'])
            var.put('index', (-Js(1.0)))
            var.put('length', var.get('sources').get('length'))
            var.put('customizer', (var.get('sources').get((var.get('length')-Js(1.0))) if (var.get('length')>Js(1.0)) else var.get('undefined')))
            var.put('guard', (var.get('sources').get('2') if (var.get('length')>Js(2.0)) else var.get('undefined')))
            var.put('customizer', (PyJsComma((var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)),var.get('customizer')) if ((var.get('assigner').get('length')>Js(3.0)) and (var.get('customizer',throw=False).typeof()==Js('function'))) else var.get('undefined')))
            if (var.get('guard') and var.get('isIterateeCall')(var.get('sources').get('0'), var.get('sources').get('1'), var.get('guard'))):
                var.put('customizer', (var.get('undefined') if (var.get('length')<Js(3.0)) else var.get('customizer')))
                var.put('length', Js(1.0))
            var.put('object', var.get('Object')(var.get('object')))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                var.put('source', var.get('sources').get(var.get('index')))
                if var.get('source'):
                    var.get('assigner')(var.get('object'), var.get('source'), var.get('index'), var.get('customizer'))
            return var.get('object')
        PyJs_anonymous_3622_._set_name('anonymous')
        return var.get('rest')(PyJs_anonymous_3622_)
    PyJsHoisted_createAssigner_.__name__ = 'createAssigner'
    var.put('createAssigner', PyJsHoisted_createAssigner_)
    var.put('isIterateeCall', var.get('require')(Js('./_isIterateeCall')))
    var.put('rest', var.get('require')(Js('./rest')))
    pass
    var.get('module').put('exports', var.get('createAssigner'))
PyJs_anonymous_3621_._set_name('anonymous')
PyJs_Object_3623_ = Js({'./_isIterateeCall':Js(402.0),'./rest':Js(484.0)})
@Js
def PyJs_anonymous_3624_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArrayLike', 'createBaseEach', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_createBaseEach_(eachFunc, fromRight, this, arguments, var=var):
        var = Scope({'this':this, 'eachFunc':eachFunc, 'arguments':arguments, 'fromRight':fromRight}, var)
        var.registers(['eachFunc', 'fromRight'])
        @Js
        def PyJs_anonymous_3625_(collection, iteratee, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'collection':collection, 'iteratee':iteratee}, var)
            var.registers(['index', 'length', 'collection', 'iterable', 'iteratee'])
            if (var.get('collection')==var.get("null")):
                return var.get('collection')
            if var.get('isArrayLike')(var.get('collection')).neg():
                return var.get('eachFunc')(var.get('collection'), var.get('iteratee'))
            var.put('length', var.get('collection').get('length'))
            var.put('index', (var.get('length') if var.get('fromRight') else (-Js(1.0))))
            var.put('iterable', var.get('Object')(var.get('collection')))
            while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('index')), var.get('index'), var.get('iterable')),Js(False)):
                    break
            return var.get('collection')
        PyJs_anonymous_3625_._set_name('anonymous')
        return PyJs_anonymous_3625_
    PyJsHoisted_createBaseEach_.__name__ = 'createBaseEach'
    var.put('createBaseEach', PyJsHoisted_createBaseEach_)
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    pass
    var.get('module').put('exports', var.get('createBaseEach'))
PyJs_anonymous_3624_._set_name('anonymous')
PyJs_Object_3626_ = Js({'./isArrayLike':Js(459.0)})
@Js
def PyJs_anonymous_3627_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['createBaseFor', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_createBaseFor_(fromRight, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'fromRight':fromRight}, var)
        var.registers(['fromRight'])
        @Js
        def PyJs_anonymous_3628_(object, iteratee, keysFunc, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments, 'keysFunc':keysFunc, 'iteratee':iteratee}, var)
            var.registers(['index', 'object', 'keysFunc', 'length', 'iteratee', 'key', 'props', 'iterable'])
            var.put('index', (-Js(1.0)))
            var.put('iterable', var.get('Object')(var.get('object')))
            var.put('props', var.get('keysFunc')(var.get('object')))
            var.put('length', var.get('props').get('length'))
            while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                var.put('key', var.get('props').get((var.get('length') if var.get('fromRight') else var.put('index',Js(var.get('index').to_number())+Js(1)))))
                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('key')), var.get('key'), var.get('iterable')),Js(False)):
                    break
            return var.get('object')
        PyJs_anonymous_3628_._set_name('anonymous')
        return PyJs_anonymous_3628_
    PyJsHoisted_createBaseFor_.__name__ = 'createBaseFor'
    var.put('createBaseFor', PyJsHoisted_createBaseFor_)
    pass
    var.get('module').put('exports', var.get('createBaseFor'))
PyJs_anonymous_3627_._set_name('anonymous')
PyJs_Object_3629_ = Js({})
@Js
def PyJs_anonymous_3630_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'createFind', 'keys', 'isArrayLike', 'require', 'baseIteratee', 'module'])
    @Js
    def PyJsHoisted_createFind_(findIndexFunc, this, arguments, var=var):
        var = Scope({'this':this, 'findIndexFunc':findIndexFunc, 'arguments':arguments}, var)
        var.registers(['findIndexFunc'])
        @Js
        def PyJs_anonymous_3631_(collection, predicate, fromIndex, this, arguments, var=var):
            var = Scope({'this':this, 'predicate':predicate, 'fromIndex':fromIndex, 'collection':collection, 'arguments':arguments}, var)
            var.registers(['index', 'predicate', 'fromIndex', 'collection', 'props', 'iterable'])
            var.put('iterable', var.get('Object')(var.get('collection')))
            var.put('predicate', var.get('baseIteratee')(var.get('predicate'), Js(3.0)))
            if var.get('isArrayLike')(var.get('collection')).neg():
                var.put('props', var.get('keys')(var.get('collection')))
            @Js
            def PyJs_anonymous_3632_(value, key, this, arguments, var=var):
                var = Scope({'this':this, 'key':key, 'value':value, 'arguments':arguments}, var)
                var.registers(['key', 'value'])
                if var.get('props'):
                    var.put('key', var.get('value'))
                    var.put('value', var.get('iterable').get(var.get('key')))
                return var.get('predicate')(var.get('value'), var.get('key'), var.get('iterable'))
            PyJs_anonymous_3632_._set_name('anonymous')
            var.put('index', var.get('findIndexFunc')((var.get('props') or var.get('collection')), PyJs_anonymous_3632_, var.get('fromIndex')))
            return (var.get('collection').get((var.get('props').get(var.get('index')) if var.get('props') else var.get('index'))) if (var.get('index')>(-Js(1.0))) else var.get('undefined'))
        PyJs_anonymous_3631_._set_name('anonymous')
        return PyJs_anonymous_3631_
    PyJsHoisted_createFind_.__name__ = 'createFind'
    var.put('createFind', PyJsHoisted_createFind_)
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('createFind'))
PyJs_anonymous_3630_._set_name('anonymous')
PyJs_Object_3633_ = Js({'./_baseIteratee':Js(331.0),'./isArrayLike':Js(459.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3634_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'Set', 'INFINITY', 'require', 'setToArray', 'module', 'noop', 'createSet'])
    var.put('Set', var.get('require')(Js('./_Set')))
    var.put('noop', var.get('require')(Js('./noop')))
    var.put('setToArray', var.get('require')(Js('./_setToArray')))
    var.put('INFINITY', (Js(1.0)/Js(0.0)))
    @Js
    def PyJs_anonymous_3635_(values, this, arguments, var=var):
        var = Scope({'this':this, 'values':values, 'arguments':arguments}, var)
        var.registers(['values'])
        return var.get('Set').create(var.get('values'))
    PyJs_anonymous_3635_._set_name('anonymous')
    var.put('createSet', (var.get('noop') if (var.get('Set') and ((Js(1.0)/var.get('setToArray')(var.get('Set').create(Js([None, (-Js(0.0))]))).get('1'))==var.get('INFINITY'))).neg() else PyJs_anonymous_3635_))
    var.get('module').put('exports', var.get('createSet'))
PyJs_anonymous_3634_._set_name('anonymous')
PyJs_Object_3636_ = Js({'./_Set':Js(292.0),'./_setToArray':Js(425.0),'./noop':Js(479.0)})
@Js
def PyJs_anonymous_3637_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['PARTIAL_COMPARE_FLAG', 'exports', 'SetCache', 'arraySome', 'UNORDERED_COMPARE_FLAG', 'equalArrays', 'module', 'require'])
    @Js
    def PyJsHoisted_equalArrays_(array, other, equalFunc, customizer, bitmask, stack, this, arguments, var=var):
        var = Scope({'equalFunc':equalFunc, 'this':this, 'bitmask':bitmask, 'other':other, 'arguments':arguments, 'array':array, 'customizer':customizer, 'stack':stack}, var)
        var.registers(['index', 'compared', 'stacked', 'arrValue', 'equalFunc', 'othLength', 'stack', 'arrLength', 'isPartial', 'other', 'result', 'bitmask', 'seen', 'othValue', 'customizer', 'array'])
        var.put('isPartial', (var.get('bitmask')&var.get('PARTIAL_COMPARE_FLAG')))
        var.put('arrLength', var.get('array').get('length'))
        var.put('othLength', var.get('other').get('length'))
        if ((var.get('arrLength')!=var.get('othLength')) and (var.get('isPartial') and (var.get('othLength')>var.get('arrLength'))).neg()):
            return Js(False)
        var.put('stacked', var.get('stack').callprop('get', var.get('array')))
        if var.get('stacked'):
            return (var.get('stacked')==var.get('other'))
        var.put('index', (-Js(1.0)))
        var.put('result', var.get('true'))
        var.put('seen', (var.get('SetCache').create() if (var.get('bitmask')&var.get('UNORDERED_COMPARE_FLAG')) else var.get('undefined')))
        var.get('stack').callprop('set', var.get('array'), var.get('other'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('arrLength')):
            var.put('arrValue', var.get('array').get(var.get('index')))
            var.put('othValue', var.get('other').get(var.get('index')))
            if var.get('customizer'):
                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('arrValue'), var.get('index'), var.get('other'), var.get('array'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('arrValue'), var.get('othValue'), var.get('index'), var.get('array'), var.get('other'), var.get('stack'))))
            if PyJsStrictNeq(var.get('compared'),var.get('undefined')):
                if var.get('compared'):
                    continue
                var.put('result', Js(False))
                break
            if var.get('seen'):
                @Js
                def PyJs_anonymous_3638_(othValue, othIndex, this, arguments, var=var):
                    var = Scope({'this':this, 'othValue':othValue, 'othIndex':othIndex, 'arguments':arguments}, var)
                    var.registers(['othValue', 'othIndex'])
                    if (var.get('seen').callprop('has', var.get('othIndex')).neg() and (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('customizer'), var.get('bitmask'), var.get('stack')))):
                        return var.get('seen').callprop('add', var.get('othIndex'))
                PyJs_anonymous_3638_._set_name('anonymous')
                if var.get('arraySome')(var.get('other'), PyJs_anonymous_3638_).neg():
                    var.put('result', Js(False))
                    break
            else:
                if (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('customizer'), var.get('bitmask'), var.get('stack'))).neg():
                    var.put('result', Js(False))
                    break
        var.get('stack').callprop('delete', var.get('array'))
        return var.get('result')
    PyJsHoisted_equalArrays_.__name__ = 'equalArrays'
    var.put('equalArrays', PyJsHoisted_equalArrays_)
    var.put('SetCache', var.get('require')(Js('./_SetCache')))
    var.put('arraySome', var.get('require')(Js('./_arraySome')))
    var.put('UNORDERED_COMPARE_FLAG', Js(1.0))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    pass
    var.get('module').put('exports', var.get('equalArrays'))
PyJs_anonymous_3637_._set_name('anonymous')
PyJs_Object_3639_ = Js({'./_SetCache':Js(293.0),'./_arraySome':Js(307.0)})
@Js
def PyJs_anonymous_3640_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['PARTIAL_COMPARE_FLAG', 'arrayBufferTag', 'setToArray', 'equalArrays', 'dataViewTag', 'errorTag', 'equalByTag', 'mapTag', 'boolTag', 'Symbol', 'Uint8Array', 'symbolProto', 'regexpTag', 'exports', 'dateTag', 'UNORDERED_COMPARE_FLAG', 'stringTag', 'numberTag', 'module', 'require', 'symbolValueOf', 'setTag', 'mapToArray', 'symbolTag'])
    @Js
    def PyJsHoisted_equalByTag_(object, other, tag, equalFunc, customizer, bitmask, stack, this, arguments, var=var):
        var = Scope({'equalFunc':equalFunc, 'this':this, 'object':object, 'stack':stack, 'bitmask':bitmask, 'tag':tag, 'arguments':arguments, 'customizer':customizer, 'other':other}, var)
        var.registers(['convert', 'equalFunc', 'stacked', 'object', 'tag', 'bitmask', 'isPartial', 'other', 'customizer', 'stack'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get('tag'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                SWITCHED = True
                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or (var.get('object').get('byteOffset')!=var.get('other').get('byteOffset'))):
                    return Js(False)
                var.put('object', var.get('object').get('buffer'))
                var.put('other', var.get('other').get('buffer'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                SWITCHED = True
                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or var.get('equalFunc')(var.get('Uint8Array').create(var.get('object')), var.get('Uint8Array').create(var.get('other'))).neg()):
                    return Js(False)
                return var.get('true')
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                SWITCHED = True
                return ((+var.get('object'))==(+var.get('other')))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('errorTag')):
                SWITCHED = True
                return ((var.get('object').get('name')==var.get('other').get('name')) and (var.get('object').get('message')==var.get('other').get('message')))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                SWITCHED = True
                return ((var.get('other')!=(+var.get('other'))) if (var.get('object')!=(+var.get('object'))) else (var.get('object')==(+var.get('other'))))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                SWITCHED = True
                return (var.get('object')==(var.get('other')+Js('')))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                SWITCHED = True
                var.put('convert', var.get('mapToArray'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                SWITCHED = True
                var.put('isPartial', (var.get('bitmask')&var.get('PARTIAL_COMPARE_FLAG')))
                (var.get('convert') or var.put('convert', var.get('setToArray')))
                if ((var.get('object').get('size')!=var.get('other').get('size')) and var.get('isPartial').neg()):
                    return Js(False)
                var.put('stacked', var.get('stack').callprop('get', var.get('object')))
                if var.get('stacked'):
                    return (var.get('stacked')==var.get('other'))
                var.put('bitmask', var.get('UNORDERED_COMPARE_FLAG'), '|')
                var.get('stack').callprop('set', var.get('object'), var.get('other'))
                return var.get('equalArrays')(var.get('convert')(var.get('object')), var.get('convert')(var.get('other')), var.get('equalFunc'), var.get('customizer'), var.get('bitmask'), var.get('stack'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                SWITCHED = True
                if var.get('symbolValueOf'):
                    return (var.get('symbolValueOf').callprop('call', var.get('object'))==var.get('symbolValueOf').callprop('call', var.get('other')))
            SWITCHED = True
            break
        return Js(False)
    PyJsHoisted_equalByTag_.__name__ = 'equalByTag'
    var.put('equalByTag', PyJsHoisted_equalByTag_)
    var.put('Symbol', var.get('require')(Js('./_Symbol')))
    var.put('Uint8Array', var.get('require')(Js('./_Uint8Array')))
    var.put('equalArrays', var.get('require')(Js('./_equalArrays')))
    var.put('mapToArray', var.get('require')(Js('./_mapToArray')))
    var.put('setToArray', var.get('require')(Js('./_setToArray')))
    var.put('UNORDERED_COMPARE_FLAG', Js(1.0))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    var.put('boolTag', Js('[object Boolean]'))
    var.put('dateTag', Js('[object Date]'))
    var.put('errorTag', Js('[object Error]'))
    var.put('mapTag', Js('[object Map]'))
    var.put('numberTag', Js('[object Number]'))
    var.put('regexpTag', Js('[object RegExp]'))
    var.put('setTag', Js('[object Set]'))
    var.put('stringTag', Js('[object String]'))
    var.put('symbolTag', Js('[object Symbol]'))
    var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
    var.put('dataViewTag', Js('[object DataView]'))
    var.put('symbolProto', (var.get('Symbol').get('prototype') if var.get('Symbol') else var.get('undefined')))
    var.put('symbolValueOf', (var.get('symbolProto').get('valueOf') if var.get('symbolProto') else var.get('undefined')))
    pass
    var.get('module').put('exports', var.get('equalByTag'))
PyJs_anonymous_3640_._set_name('anonymous')
PyJs_Object_3641_ = Js({'./_Symbol':Js(295.0),'./_Uint8Array':Js(296.0),'./_equalArrays':Js(375.0),'./_mapToArray':Js(419.0),'./_setToArray':Js(425.0)})
@Js
def PyJs_anonymous_3642_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['PARTIAL_COMPARE_FLAG', 'equalObjects', 'exports', 'baseHas', 'keys', 'require', 'module'])
    @Js
    def PyJsHoisted_equalObjects_(object, other, equalFunc, customizer, bitmask, stack, this, arguments, var=var):
        var = Scope({'equalFunc':equalFunc, 'this':this, 'object':object, 'bitmask':bitmask, 'other':other, 'arguments':arguments, 'customizer':customizer, 'stack':stack}, var)
        var.registers(['index', 'compared', 'stacked', 'objValue', 'othCtor', 'stack', 'objCtor', 'object', 'othLength', 'othProps', 'bitmask', 'isPartial', 'objProps', 'result', 'key', 'equalFunc', 'othValue', 'skipCtor', 'other', 'objLength', 'customizer'])
        var.put('isPartial', (var.get('bitmask')&var.get('PARTIAL_COMPARE_FLAG')))
        var.put('objProps', var.get('keys')(var.get('object')))
        var.put('objLength', var.get('objProps').get('length'))
        var.put('othProps', var.get('keys')(var.get('other')))
        var.put('othLength', var.get('othProps').get('length'))
        if ((var.get('objLength')!=var.get('othLength')) and var.get('isPartial').neg()):
            return Js(False)
        var.put('index', var.get('objLength'))
        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
            var.put('key', var.get('objProps').get(var.get('index')))
            if (var.get('other').contains(var.get('key')) if var.get('isPartial') else var.get('baseHas')(var.get('other'), var.get('key'))).neg():
                return Js(False)
        var.put('stacked', var.get('stack').callprop('get', var.get('object')))
        if var.get('stacked'):
            return (var.get('stacked')==var.get('other'))
        var.put('result', var.get('true'))
        var.get('stack').callprop('set', var.get('object'), var.get('other'))
        var.put('skipCtor', var.get('isPartial'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('objLength')):
            var.put('key', var.get('objProps').get(var.get('index')))
            var.put('objValue', var.get('object').get(var.get('key')))
            var.put('othValue', var.get('other').get(var.get('key')))
            if var.get('customizer'):
                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('objValue'), var.get('key'), var.get('other'), var.get('object'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('objValue'), var.get('othValue'), var.get('key'), var.get('object'), var.get('other'), var.get('stack'))))
            if ((PyJsStrictEq(var.get('objValue'),var.get('othValue')) or var.get('equalFunc')(var.get('objValue'), var.get('othValue'), var.get('customizer'), var.get('bitmask'), var.get('stack'))) if PyJsStrictEq(var.get('compared'),var.get('undefined')) else var.get('compared')).neg():
                var.put('result', Js(False))
                break
            (var.get('skipCtor') or var.put('skipCtor', (var.get('key')==Js('constructor'))))
        if (var.get('result') and var.get('skipCtor').neg()):
            var.put('objCtor', var.get('object').get('constructor'))
            var.put('othCtor', var.get('other').get('constructor'))
            def PyJs_LONG_3643_(var=var):
                return (((var.get('objCtor')!=var.get('othCtor')) and (var.get('object').contains(Js('constructor')) and var.get('other').contains(Js('constructor')))) and ((((var.get('objCtor',throw=False).typeof()==Js('function')) and var.get('objCtor').instanceof(var.get('objCtor'))) and (var.get('othCtor',throw=False).typeof()==Js('function'))) and var.get('othCtor').instanceof(var.get('othCtor'))).neg())
            if PyJs_LONG_3643_():
                var.put('result', Js(False))
        var.get('stack').callprop('delete', var.get('object'))
        return var.get('result')
    PyJsHoisted_equalObjects_.__name__ = 'equalObjects'
    var.put('equalObjects', PyJsHoisted_equalObjects_)
    var.put('baseHas', var.get('require')(Js('./_baseHas')))
    var.put('keys', var.get('require')(Js('./keys')))
    var.put('PARTIAL_COMPARE_FLAG', Js(2.0))
    pass
    var.get('module').put('exports', var.get('equalObjects'))
PyJs_anonymous_3642_._set_name('anonymous')
PyJs_Object_3644_ = Js({'./_baseHas':Js(323.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3645_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getSymbols', 'exports', 'baseGetAllKeys', 'keys', 'require', 'module', 'getAllKeys'])
    @Js
    def PyJsHoisted_getAllKeys_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return var.get('baseGetAllKeys')(var.get('object'), var.get('keys'), var.get('getSymbols'))
    PyJsHoisted_getAllKeys_.__name__ = 'getAllKeys'
    var.put('getAllKeys', PyJsHoisted_getAllKeys_)
    var.put('baseGetAllKeys', var.get('require')(Js('./_baseGetAllKeys')))
    var.put('getSymbols', var.get('require')(Js('./_getSymbols')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('getAllKeys'))
PyJs_anonymous_3645_._set_name('anonymous')
PyJs_Object_3646_ = Js({'./_baseGetAllKeys':Js(322.0),'./_getSymbols':Js(384.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3647_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getLength', 'require', 'baseProperty', 'exports', 'module'])
    var.put('baseProperty', var.get('require')(Js('./_baseProperty')))
    var.put('getLength', var.get('baseProperty')(Js('length')))
    var.get('module').put('exports', var.get('getLength'))
PyJs_anonymous_3647_._set_name('anonymous')
PyJs_Object_3648_ = Js({'./_baseProperty':Js(340.0)})
@Js
def PyJs_anonymous_3649_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isKeyable', 'require', 'getMapData', 'exports', 'module'])
    @Js
    def PyJsHoisted_getMapData_(map, key, this, arguments, var=var):
        var = Scope({'this':this, 'map':map, 'arguments':arguments, 'key':key}, var)
        var.registers(['map', 'data', 'key'])
        var.put('data', var.get('map').get('__data__'))
        return (var.get('data').get((Js('string') if (var.get('key',throw=False).typeof()==Js('string')) else Js('hash'))) if var.get('isKeyable')(var.get('key')) else var.get('data').get('map'))
    PyJsHoisted_getMapData_.__name__ = 'getMapData'
    var.put('getMapData', PyJsHoisted_getMapData_)
    var.put('isKeyable', var.get('require')(Js('./_isKeyable')))
    pass
    var.get('module').put('exports', var.get('getMapData'))
PyJs_anonymous_3649_._set_name('anonymous')
PyJs_Object_3650_ = Js({'./_isKeyable':Js(404.0)})
@Js
def PyJs_anonymous_3651_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'keys', 'require', 'module', 'isStrictComparable', 'getMatchData'])
    @Js
    def PyJsHoisted_getMatchData_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['value', 'length', 'object', 'result', 'key'])
        var.put('result', var.get('keys')(var.get('object')))
        var.put('length', var.get('result').get('length'))
        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
            var.put('key', var.get('result').get(var.get('length')))
            var.put('value', var.get('object').get(var.get('key')))
            var.get('result').put(var.get('length'), Js([var.get('key'), var.get('value'), var.get('isStrictComparable')(var.get('value'))]))
        return var.get('result')
    PyJsHoisted_getMatchData_.__name__ = 'getMatchData'
    var.put('getMatchData', PyJsHoisted_getMatchData_)
    var.put('isStrictComparable', var.get('require')(Js('./_isStrictComparable')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('getMatchData'))
PyJs_anonymous_3651_._set_name('anonymous')
PyJs_Object_3652_ = Js({'./_isStrictComparable':Js(407.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3653_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'getValue', 'baseIsNative', 'getNative'])
    @Js
    def PyJsHoisted_getNative_(object, key, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'key':key}, var)
        var.registers(['object', 'key', 'value'])
        var.put('value', var.get('getValue')(var.get('object'), var.get('key')))
        return (var.get('value') if var.get('baseIsNative')(var.get('value')) else var.get('undefined'))
    PyJsHoisted_getNative_.__name__ = 'getNative'
    var.put('getNative', PyJsHoisted_getNative_)
    var.put('baseIsNative', var.get('require')(Js('./_baseIsNative')))
    var.put('getValue', var.get('require')(Js('./_getValue')))
    pass
    var.get('module').put('exports', var.get('getNative'))
PyJs_anonymous_3653_._set_name('anonymous')
PyJs_Object_3654_ = Js({'./_baseIsNative':Js(330.0),'./_getValue':Js(386.0)})
@Js
def PyJs_anonymous_3655_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['nativeGetPrototype', 'getPrototype', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_getPrototype_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('nativeGetPrototype')(var.get('Object')(var.get('value')))
    PyJsHoisted_getPrototype_.__name__ = 'getPrototype'
    var.put('getPrototype', PyJsHoisted_getPrototype_)
    var.put('nativeGetPrototype', var.get('Object').get('getPrototypeOf'))
    pass
    var.get('module').put('exports', var.get('getPrototype'))
PyJs_anonymous_3655_._set_name('anonymous')
PyJs_Object_3656_ = Js({})
@Js
def PyJs_anonymous_3657_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['getSymbols', 'exports', 'require', 'module', 'stubArray', 'getOwnPropertySymbols'])
    @Js
    def PyJsHoisted_getSymbols_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return var.get('getOwnPropertySymbols')(var.get('Object')(var.get('object')))
    PyJsHoisted_getSymbols_.__name__ = 'getSymbols'
    var.put('getSymbols', PyJsHoisted_getSymbols_)
    var.put('stubArray', var.get('require')(Js('./stubArray')))
    var.put('getOwnPropertySymbols', var.get('Object').get('getOwnPropertySymbols'))
    pass
    if var.get('getOwnPropertySymbols').neg():
        var.put('getSymbols', var.get('stubArray'))
    var.get('module').put('exports', var.get('getSymbols'))
PyJs_anonymous_3657_._set_name('anonymous')
PyJs_Object_3658_ = Js({'./stubArray':Js(487.0)})
@Js
def PyJs_anonymous_3659_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['objectTag', 'dataViewTag', 'setCtorString', 'promiseTag', 'Map', 'mapTag', 'objectToString', 'DataView', 'weakMapCtorString', 'dataViewCtorString', 'exports', 'promiseCtorString', 'toSource', 'mapCtorString', 'WeakMap', 'module', 'getTag', 'Set', 'require', 'weakMapTag', 'Promise', 'setTag', 'objectProto'])
    @Js
    def PyJsHoisted_getTag_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('objectToString').callprop('call', var.get('value'))
    PyJsHoisted_getTag_.__name__ = 'getTag'
    var.put('getTag', PyJsHoisted_getTag_)
    var.put('DataView', var.get('require')(Js('./_DataView')))
    var.put('Map', var.get('require')(Js('./_Map')))
    var.put('Promise', var.get('require')(Js('./_Promise')))
    var.put('Set', var.get('require')(Js('./_Set')))
    var.put('WeakMap', var.get('require')(Js('./_WeakMap')))
    var.put('toSource', var.get('require')(Js('./_toSource')))
    var.put('mapTag', Js('[object Map]'))
    var.put('objectTag', Js('[object Object]'))
    var.put('promiseTag', Js('[object Promise]'))
    var.put('setTag', Js('[object Set]'))
    var.put('weakMapTag', Js('[object WeakMap]'))
    var.put('dataViewTag', Js('[object DataView]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    var.put('dataViewCtorString', var.get('toSource')(var.get('DataView')))
    var.put('mapCtorString', var.get('toSource')(var.get('Map')))
    var.put('promiseCtorString', var.get('toSource')(var.get('Promise')))
    var.put('setCtorString', var.get('toSource')(var.get('Set')))
    var.put('weakMapCtorString', var.get('toSource')(var.get('WeakMap')))
    pass
    def PyJs_LONG_3660_(var=var):
        return ((((var.get('DataView') and (var.get('getTag')(var.get('DataView').create(var.get('ArrayBuffer').create(Js(1.0))))!=var.get('dataViewTag'))) or (var.get('Map') and (var.get('getTag')(var.get('Map').create())!=var.get('mapTag')))) or (var.get('Promise') and (var.get('getTag')(var.get('Promise').callprop('resolve'))!=var.get('promiseTag')))) or (var.get('Set') and (var.get('getTag')(var.get('Set').create())!=var.get('setTag'))))
    if (PyJs_LONG_3660_() or (var.get('WeakMap') and (var.get('getTag')(var.get('WeakMap').create())!=var.get('weakMapTag')))):
        @Js
        def PyJs_anonymous_3661_(value, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
            var.registers(['value', 'result', 'Ctor', 'ctorString'])
            var.put('result', var.get('objectToString').callprop('call', var.get('value')))
            var.put('Ctor', (var.get('value').get('constructor') if (var.get('result')==var.get('objectTag')) else var.get('undefined')))
            var.put('ctorString', (var.get('toSource')(var.get('Ctor')) if var.get('Ctor') else var.get('undefined')))
            if var.get('ctorString'):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('ctorString'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewCtorString')):
                        SWITCHED = True
                        return var.get('dataViewTag')
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapCtorString')):
                        SWITCHED = True
                        return var.get('mapTag')
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('promiseCtorString')):
                        SWITCHED = True
                        return var.get('promiseTag')
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('setCtorString')):
                        SWITCHED = True
                        return var.get('setTag')
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('weakMapCtorString')):
                        SWITCHED = True
                        return var.get('weakMapTag')
                    SWITCHED = True
                    break
            return var.get('result')
        PyJs_anonymous_3661_._set_name('anonymous')
        var.put('getTag', PyJs_anonymous_3661_)
    var.get('module').put('exports', var.get('getTag'))
PyJs_anonymous_3659_._set_name('anonymous')
PyJs_Object_3662_ = Js({'./_DataView':Js(285.0),'./_Map':Js(288.0),'./_Promise':Js(290.0),'./_Set':Js(292.0),'./_WeakMap':Js(297.0),'./_toSource':Js(434.0)})
@Js
def PyJs_anonymous_3663_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'getValue'])
    @Js
    def PyJsHoisted_getValue_(object, key, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'key':key}, var)
        var.registers(['object', 'key'])
        return (var.get('undefined') if (var.get('object')==var.get("null")) else var.get('object').get(var.get('key')))
    PyJsHoisted_getValue_.__name__ = 'getValue'
    var.put('getValue', PyJsHoisted_getValue_)
    pass
    var.get('module').put('exports', var.get('getValue'))
PyJs_anonymous_3663_._set_name('anonymous')
PyJs_Object_3664_ = Js({})
@Js
def PyJs_anonymous_3665_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'hasPath', 'isString', 'isLength', 'toKey', 'isKey', 'require', 'isIndex', 'exports', 'module', 'castPath', 'isArguments'])
    @Js
    def PyJsHoisted_hasPath_(object, path, hasFunc, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'object':object, 'hasFunc':hasFunc, 'arguments':arguments}, var)
        var.registers(['index', 'object', 'length', 'result', 'key', 'path', 'hasFunc'])
        var.put('path', (Js([var.get('path')]) if var.get('isKey')(var.get('path'), var.get('object')) else var.get('castPath')(var.get('path'))))
        var.put('index', (-Js(1.0)))
        var.put('length', var.get('path').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('key', var.get('toKey')(var.get('path').get(var.get('index'))))
            if var.put('result', ((var.get('object')!=var.get("null")) and var.get('hasFunc')(var.get('object'), var.get('key')))).neg():
                break
            var.put('object', var.get('object').get(var.get('key')))
        if var.get('result'):
            return var.get('result')
        var.put('length', (var.get('object').get('length') if var.get('object') else Js(0.0)))
        return (((var.get('length').neg().neg() and var.get('isLength')(var.get('length'))) and var.get('isIndex')(var.get('key'), var.get('length'))) and ((var.get('isArray')(var.get('object')) or var.get('isString')(var.get('object'))) or var.get('isArguments')(var.get('object'))))
    PyJsHoisted_hasPath_.__name__ = 'hasPath'
    var.put('hasPath', PyJsHoisted_hasPath_)
    var.put('castPath', var.get('require')(Js('./_castPath')))
    var.put('isArguments', var.get('require')(Js('./isArguments')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isIndex', var.get('require')(Js('./_isIndex')))
    var.put('isKey', var.get('require')(Js('./_isKey')))
    var.put('isLength', var.get('require')(Js('./isLength')))
    var.put('isString', var.get('require')(Js('./isString')))
    var.put('toKey', var.get('require')(Js('./_toKey')))
    pass
    var.get('module').put('exports', var.get('hasPath'))
PyJs_anonymous_3665_._set_name('anonymous')
PyJs_Object_3666_ = Js({'./_castPath':Js(352.0),'./_isIndex':Js(401.0),'./_isKey':Js(403.0),'./_toKey':Js(433.0),'./isArguments':Js(457.0),'./isArray':Js(458.0),'./isLength':Js(465.0),'./isString':Js(471.0)})
@Js
def PyJs_anonymous_3667_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'require', 'exports', 'nativeCreate', 'hashClear'])
    @Js
    def PyJsHoisted_hashClear_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_3668_ = Js({})
        var.get("this").put('__data__', (var.get('nativeCreate')(var.get("null")) if var.get('nativeCreate') else PyJs_Object_3668_))
    PyJsHoisted_hashClear_.__name__ = 'hashClear'
    var.put('hashClear', PyJsHoisted_hashClear_)
    var.put('nativeCreate', var.get('require')(Js('./_nativeCreate')))
    pass
    var.get('module').put('exports', var.get('hashClear'))
PyJs_anonymous_3667_._set_name('anonymous')
PyJs_Object_3669_ = Js({'./_nativeCreate':Js(421.0)})
@Js
def PyJs_anonymous_3670_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'hashDelete', 'exports', 'module'])
    @Js
    def PyJsHoisted_hashDelete_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return (var.get("this").callprop('has', var.get('key')) and var.get("this").get('__data__').delete(var.get('key')))
    PyJsHoisted_hashDelete_.__name__ = 'hashDelete'
    var.put('hashDelete', PyJsHoisted_hashDelete_)
    pass
    var.get('module').put('exports', var.get('hashDelete'))
PyJs_anonymous_3670_._set_name('anonymous')
PyJs_Object_3671_ = Js({})
@Js
def PyJs_anonymous_3672_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'hashGet', 'nativeCreate', 'HASH_UNDEFINED', 'require', 'module', 'hasOwnProperty', 'objectProto'])
    @Js
    def PyJsHoisted_hashGet_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['data', 'result', 'key'])
        var.put('data', var.get("this").get('__data__'))
        if var.get('nativeCreate'):
            var.put('result', var.get('data').get(var.get('key')))
            return (var.get('undefined') if PyJsStrictEq(var.get('result'),var.get('HASH_UNDEFINED')) else var.get('result'))
        return (var.get('data').get(var.get('key')) if var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')) else var.get('undefined'))
    PyJsHoisted_hashGet_.__name__ = 'hashGet'
    var.put('hashGet', PyJsHoisted_hashGet_)
    var.put('nativeCreate', var.get('require')(Js('./_nativeCreate')))
    var.put('HASH_UNDEFINED', Js('__lodash_hash_undefined__'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('hashGet'))
PyJs_anonymous_3672_._set_name('anonymous')
PyJs_Object_3673_ = Js({'./_nativeCreate':Js(421.0)})
@Js
def PyJs_anonymous_3674_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'nativeCreate', 'require', 'module', 'hasOwnProperty', 'objectProto', 'hashHas'])
    @Js
    def PyJsHoisted_hashHas_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['data', 'key'])
        var.put('data', var.get("this").get('__data__'))
        return (PyJsStrictNeq(var.get('data').get(var.get('key')),var.get('undefined')) if var.get('nativeCreate') else var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')))
    PyJsHoisted_hashHas_.__name__ = 'hashHas'
    var.put('hashHas', PyJsHoisted_hashHas_)
    var.put('nativeCreate', var.get('require')(Js('./_nativeCreate')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('hashHas'))
PyJs_anonymous_3674_._set_name('anonymous')
PyJs_Object_3675_ = Js({'./_nativeCreate':Js(421.0)})
@Js
def PyJs_anonymous_3676_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'nativeCreate', 'hashSet', 'require', 'HASH_UNDEFINED', 'module'])
    @Js
    def PyJsHoisted_hashSet_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['data', 'value', 'key'])
        var.put('data', var.get("this").get('__data__'))
        var.get('data').put(var.get('key'), (var.get('HASH_UNDEFINED') if (var.get('nativeCreate') and PyJsStrictEq(var.get('value'),var.get('undefined'))) else var.get('value')))
        return var.get("this")
    PyJsHoisted_hashSet_.__name__ = 'hashSet'
    var.put('hashSet', PyJsHoisted_hashSet_)
    var.put('nativeCreate', var.get('require')(Js('./_nativeCreate')))
    var.put('HASH_UNDEFINED', Js('__lodash_hash_undefined__'))
    pass
    var.get('module').put('exports', var.get('hashSet'))
PyJs_anonymous_3676_._set_name('anonymous')
PyJs_Object_3677_ = Js({'./_nativeCreate':Js(421.0)})
@Js
def PyJs_anonymous_3678_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'indexKeys', 'exports', 'isString', 'isLength', 'require', 'module', 'baseTimes', 'isArguments'])
    @Js
    def PyJsHoisted_indexKeys_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['length', 'object'])
        var.put('length', (var.get('object').get('length') if var.get('object') else var.get('undefined')))
        if (var.get('isLength')(var.get('length')) and ((var.get('isArray')(var.get('object')) or var.get('isString')(var.get('object'))) or var.get('isArguments')(var.get('object')))):
            return var.get('baseTimes')(var.get('length'), var.get('String'))
        return var.get("null")
    PyJsHoisted_indexKeys_.__name__ = 'indexKeys'
    var.put('indexKeys', PyJsHoisted_indexKeys_)
    var.put('baseTimes', var.get('require')(Js('./_baseTimes')))
    var.put('isArguments', var.get('require')(Js('./isArguments')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isLength', var.get('require')(Js('./isLength')))
    var.put('isString', var.get('require')(Js('./isString')))
    pass
    var.get('module').put('exports', var.get('indexKeys'))
PyJs_anonymous_3678_._set_name('anonymous')
PyJs_Object_3679_ = Js({'./_baseTimes':Js(346.0),'./isArguments':Js(457.0),'./isArray':Js(458.0),'./isLength':Js(465.0),'./isString':Js(471.0)})
@Js
def PyJs_anonymous_3680_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'indexOfNaN', 'exports', 'module'])
    @Js
    def PyJsHoisted_indexOfNaN_(array, fromIndex, fromRight, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'array':array, 'fromIndex':fromIndex, 'fromRight':fromRight}, var)
        var.registers(['index', 'fromIndex', 'fromRight', 'length', 'other', 'array'])
        var.put('length', var.get('array').get('length'))
        var.put('index', (var.get('fromIndex')+(Js(1.0) if var.get('fromRight') else (-Js(1.0)))))
        while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
            var.put('other', var.get('array').get(var.get('index')))
            if PyJsStrictNeq(var.get('other'),var.get('other')):
                return var.get('index')
        return (-Js(1.0))
    PyJsHoisted_indexOfNaN_.__name__ = 'indexOfNaN'
    var.put('indexOfNaN', PyJsHoisted_indexOfNaN_)
    pass
    var.get('module').put('exports', var.get('indexOfNaN'))
PyJs_anonymous_3680_._set_name('anonymous')
PyJs_Object_3681_ = Js({})
@Js
def PyJs_anonymous_3682_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'initCloneArray', 'module', 'hasOwnProperty', 'objectProto'])
    @Js
    def PyJsHoisted_initCloneArray_(array, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments}, var)
        var.registers(['length', 'array', 'result'])
        var.put('length', var.get('array').get('length'))
        var.put('result', var.get('array').callprop('constructor', var.get('length')))
        if ((var.get('length') and (var.get('array').get('0').typeof()==Js('string'))) and var.get('hasOwnProperty').callprop('call', var.get('array'), Js('index'))):
            var.get('result').put('index', var.get('array').get('index'))
            var.get('result').put('input', var.get('array').get('input'))
        return var.get('result')
    PyJsHoisted_initCloneArray_.__name__ = 'initCloneArray'
    var.put('initCloneArray', PyJsHoisted_initCloneArray_)
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('initCloneArray'))
PyJs_anonymous_3682_._set_name('anonymous')
PyJs_Object_3683_ = Js({})
@Js
def PyJs_anonymous_3684_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['uint32Tag', 'arrayBufferTag', 'uint8ClampedTag', 'dataViewTag', 'int8Tag', 'float64Tag', 'cloneRegExp', 'mapTag', 'boolTag', 'initCloneByTag', 'cloneTypedArray', 'float32Tag', 'regexpTag', 'exports', 'dateTag', 'setTag', 'stringTag', 'int32Tag', 'module', 'uint8Tag', 'cloneSet', 'cloneSymbol', 'require', 'uint16Tag', 'cloneDataView', 'int16Tag', 'cloneArrayBuffer', 'numberTag', 'cloneMap', 'symbolTag'])
    @Js
    def PyJsHoisted_initCloneByTag_(object, tag, cloneFunc, isDeep, this, arguments, var=var):
        var = Scope({'tag':tag, 'isDeep':isDeep, 'arguments':arguments, 'this':this, 'object':object, 'cloneFunc':cloneFunc}, var)
        var.registers(['cloneFunc', 'isDeep', 'object', 'tag', 'Ctor'])
        var.put('Ctor', var.get('object').get('constructor'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('tag'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                SWITCHED = True
                return var.get('cloneArrayBuffer')(var.get('object'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                SWITCHED = True
                return var.get('Ctor').create((+var.get('object')))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                SWITCHED = True
                return var.get('cloneDataView')(var.get('object'), var.get('isDeep'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float32Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float64Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int8Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int16Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int32Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8ClampedTag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint16Tag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint32Tag')):
                SWITCHED = True
                return var.get('cloneTypedArray')(var.get('object'), var.get('isDeep'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                SWITCHED = True
                return var.get('cloneMap')(var.get('object'), var.get('isDeep'), var.get('cloneFunc'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                SWITCHED = True
                return var.get('Ctor').create(var.get('object'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                SWITCHED = True
                return var.get('cloneRegExp')(var.get('object'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                SWITCHED = True
                return var.get('cloneSet')(var.get('object'), var.get('isDeep'), var.get('cloneFunc'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                SWITCHED = True
                return var.get('cloneSymbol')(var.get('object'))
            SWITCHED = True
            break
    PyJsHoisted_initCloneByTag_.__name__ = 'initCloneByTag'
    var.put('initCloneByTag', PyJsHoisted_initCloneByTag_)
    var.put('cloneArrayBuffer', var.get('require')(Js('./_cloneArrayBuffer')))
    var.put('cloneDataView', var.get('require')(Js('./_cloneDataView')))
    var.put('cloneMap', var.get('require')(Js('./_cloneMap')))
    var.put('cloneRegExp', var.get('require')(Js('./_cloneRegExp')))
    var.put('cloneSet', var.get('require')(Js('./_cloneSet')))
    var.put('cloneSymbol', var.get('require')(Js('./_cloneSymbol')))
    var.put('cloneTypedArray', var.get('require')(Js('./_cloneTypedArray')))
    var.put('boolTag', Js('[object Boolean]'))
    var.put('dateTag', Js('[object Date]'))
    var.put('mapTag', Js('[object Map]'))
    var.put('numberTag', Js('[object Number]'))
    var.put('regexpTag', Js('[object RegExp]'))
    var.put('setTag', Js('[object Set]'))
    var.put('stringTag', Js('[object String]'))
    var.put('symbolTag', Js('[object Symbol]'))
    var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
    var.put('dataViewTag', Js('[object DataView]'))
    var.put('float32Tag', Js('[object Float32Array]'))
    var.put('float64Tag', Js('[object Float64Array]'))
    var.put('int8Tag', Js('[object Int8Array]'))
    var.put('int16Tag', Js('[object Int16Array]'))
    var.put('int32Tag', Js('[object Int32Array]'))
    var.put('uint8Tag', Js('[object Uint8Array]'))
    var.put('uint8ClampedTag', Js('[object Uint8ClampedArray]'))
    var.put('uint16Tag', Js('[object Uint16Array]'))
    var.put('uint32Tag', Js('[object Uint32Array]'))
    pass
    var.get('module').put('exports', var.get('initCloneByTag'))
PyJs_anonymous_3684_._set_name('anonymous')
PyJs_Object_3685_ = Js({'./_cloneArrayBuffer':Js(356.0),'./_cloneDataView':Js(358.0),'./_cloneMap':Js(359.0),'./_cloneRegExp':Js(360.0),'./_cloneSet':Js(361.0),'./_cloneSymbol':Js(362.0),'./_cloneTypedArray':Js(363.0)})
@Js
def PyJs_anonymous_3686_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'initCloneObject', 'require', 'module', 'isPrototype', 'baseCreate', 'getPrototype'])
    @Js
    def PyJsHoisted_initCloneObject_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        PyJs_Object_3687_ = Js({})
        return (var.get('baseCreate')(var.get('getPrototype')(var.get('object'))) if ((var.get('object').get('constructor').typeof()==Js('function')) and var.get('isPrototype')(var.get('object')).neg()) else PyJs_Object_3687_)
    PyJsHoisted_initCloneObject_.__name__ = 'initCloneObject'
    var.put('initCloneObject', PyJsHoisted_initCloneObject_)
    var.put('baseCreate', var.get('require')(Js('./_baseCreate')))
    var.put('getPrototype', var.get('require')(Js('./_getPrototype')))
    var.put('isPrototype', var.get('require')(Js('./_isPrototype')))
    pass
    var.get('module').put('exports', var.get('initCloneObject'))
PyJs_anonymous_3686_._set_name('anonymous')
PyJs_Object_3688_ = Js({'./_baseCreate':Js(315.0),'./_getPrototype':Js(383.0),'./_isPrototype':Js(406.0)})
@Js
def PyJs_anonymous_3689_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'require', 'module', 'isFlattenable', 'isArguments'])
    @Js
    def PyJsHoisted_isFlattenable_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('isArray')(var.get('value')) or var.get('isArguments')(var.get('value')))
    PyJsHoisted_isFlattenable_.__name__ = 'isFlattenable'
    var.put('isFlattenable', PyJsHoisted_isFlattenable_)
    var.put('isArguments', var.get('require')(Js('./isArguments')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    pass
    var.get('module').put('exports', var.get('isFlattenable'))
PyJs_anonymous_3689_._set_name('anonymous')
PyJs_Object_3690_ = Js({'./isArguments':Js(457.0),'./isArray':Js(458.0)})
@Js
def PyJs_anonymous_3691_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'require', 'module', 'isFunction', 'isFlattenableIteratee'])
    @Js
    def PyJsHoisted_isFlattenableIteratee_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('isArray')(var.get('value')) and ((var.get('value').get('length')==Js(2.0)) and var.get('isFunction')(var.get('value').get('0')).neg()).neg())
    PyJsHoisted_isFlattenableIteratee_.__name__ = 'isFlattenableIteratee'
    var.put('isFlattenableIteratee', PyJsHoisted_isFlattenableIteratee_)
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isFunction', var.get('require')(Js('./isFunction')))
    pass
    var.get('module').put('exports', var.get('isFlattenableIteratee'))
PyJs_anonymous_3691_._set_name('anonymous')
PyJs_Object_3692_ = Js({'./isArray':Js(458.0),'./isFunction':Js(463.0)})
@Js
def PyJs_anonymous_3693_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'isHostObject'])
    @Js
    def PyJsHoisted_isHostObject_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['result', 'value'])
        var.put('result', Js(False))
        if ((var.get('value')!=var.get("null")) and (var.get('value').get('toString').typeof()!=Js('function'))):
            try:
                var.put('result', (var.get('value')+Js('')).neg().neg())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_43263878 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_43263878 is not None:
                        var.own['e'] = PyJsHolder_65_43263878
                    else:
                        del var.own['e']
                    del PyJsHolder_65_43263878
        return var.get('result')
    PyJsHoisted_isHostObject_.__name__ = 'isHostObject'
    var.put('isHostObject', PyJsHoisted_isHostObject_)
    pass
    var.get('module').put('exports', var.get('isHostObject'))
PyJs_anonymous_3693_._set_name('anonymous')
PyJs_Object_3694_ = Js({})
@Js
def PyJs_anonymous_3695_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['MAX_SAFE_INTEGER', 'exports', 'require', 'isIndex', 'module', 'reIsUint'])
    @Js
    def PyJsHoisted_isIndex_(value, length, this, arguments, var=var):
        var = Scope({'this':this, 'length':length, 'arguments':arguments, 'value':value}, var)
        var.registers(['length', 'value'])
        var.put('length', (var.get('MAX_SAFE_INTEGER') if (var.get('length')==var.get("null")) else var.get('length')))
        return ((var.get('length').neg().neg() and ((var.get('value',throw=False).typeof()==Js('number')) or var.get('reIsUint').callprop('test', var.get('value')))) and (((var.get('value')>(-Js(1.0))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<var.get('length'))))
    PyJsHoisted_isIndex_.__name__ = 'isIndex'
    var.put('isIndex', PyJsHoisted_isIndex_)
    var.put('MAX_SAFE_INTEGER', Js(9007199254740991.0))
    var.put('reIsUint', JsRegExp('/^(?:0|[1-9]\\d*)$/'))
    pass
    var.get('module').put('exports', var.get('isIndex'))
PyJs_anonymous_3695_._set_name('anonymous')
PyJs_Object_3696_ = Js({})
@Js
def PyJs_anonymous_3697_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'isArrayLike', 'require', 'isIndex', 'module', 'isIterateeCall', 'eq', 'isObject'])
    @Js
    def PyJsHoisted_isIterateeCall_(value, index, object, this, arguments, var=var):
        var = Scope({'this':this, 'index':index, 'object':object, 'arguments':arguments, 'value':value}, var)
        var.registers(['index', 'object', 'type', 'value'])
        if var.get('isObject')(var.get('object')).neg():
            return Js(False)
        var.put('type', var.get('index',throw=False).typeof())
        if ((var.get('isArrayLike')(var.get('object')) and var.get('isIndex')(var.get('index'), var.get('object').get('length'))) if (var.get('type')==Js('number')) else ((var.get('type')==Js('string')) and var.get('object').contains(var.get('index')))):
            return var.get('eq')(var.get('object').get(var.get('index')), var.get('value'))
        return Js(False)
    PyJsHoisted_isIterateeCall_.__name__ = 'isIterateeCall'
    var.put('isIterateeCall', PyJsHoisted_isIterateeCall_)
    var.put('eq', var.get('require')(Js('./eq')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isIndex', var.get('require')(Js('./_isIndex')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    pass
    var.get('module').put('exports', var.get('isIterateeCall'))
PyJs_anonymous_3697_._set_name('anonymous')
PyJs_Object_3698_ = Js({'./_isIndex':Js(401.0),'./eq':Js(444.0),'./isArrayLike':Js(459.0),'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3699_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'reIsPlainProp', 'isKey', 'require', 'reIsDeepProp', 'module', 'isSymbol'])
    @Js
    def PyJsHoisted_isKey_(value, object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'value':value}, var)
        var.registers(['object', 'type', 'value'])
        if var.get('isArray')(var.get('value')):
            return Js(False)
        var.put('type', var.get('value',throw=False).typeof())
        if (((((var.get('type')==Js('number')) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) or (var.get('value')==var.get("null"))) or var.get('isSymbol')(var.get('value'))):
            return var.get('true')
        return ((var.get('reIsPlainProp').callprop('test', var.get('value')) or var.get('reIsDeepProp').callprop('test', var.get('value')).neg()) or ((var.get('object')!=var.get("null")) and var.get('Object')(var.get('object')).contains(var.get('value'))))
    PyJsHoisted_isKey_.__name__ = 'isKey'
    var.put('isKey', PyJsHoisted_isKey_)
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isSymbol', var.get('require')(Js('./isSymbol')))
    var.put('reIsDeepProp', JsRegExp('/\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/'))
    var.put('reIsPlainProp', JsRegExp('/^\\w*$/'))
    pass
    var.get('module').put('exports', var.get('isKey'))
PyJs_anonymous_3699_._set_name('anonymous')
PyJs_Object_3700_ = Js({'./isArray':Js(458.0),'./isSymbol':Js(472.0)})
@Js
def PyJs_anonymous_3701_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isKeyable', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_isKeyable_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['type', 'value'])
        var.put('type', var.get('value',throw=False).typeof())
        return (PyJsStrictNeq(var.get('value'),Js('__proto__')) if ((((var.get('type')==Js('string')) or (var.get('type')==Js('number'))) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) else PyJsStrictEq(var.get('value'),var.get("null")))
    PyJsHoisted_isKeyable_.__name__ = 'isKeyable'
    var.put('isKeyable', PyJsHoisted_isKeyable_)
    pass
    var.get('module').put('exports', var.get('isKeyable'))
PyJs_anonymous_3701_._set_name('anonymous')
PyJs_Object_3702_ = Js({})
@Js
def PyJs_anonymous_3703_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'maskSrcKey', 'module', 'isMasked', 'coreJsData'])
    @Js
    def PyJsHoisted_isMasked_(func, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'func':func}, var)
        var.registers(['func'])
        return (var.get('maskSrcKey').neg().neg() and var.get('func').contains(var.get('maskSrcKey')))
    PyJsHoisted_isMasked_.__name__ = 'isMasked'
    var.put('isMasked', PyJsHoisted_isMasked_)
    var.put('coreJsData', var.get('require')(Js('./_coreJsData')))
    @Js
    def PyJs_anonymous_3704_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['uid'])
        var.put('uid', JsRegExp('/[^.]+$/').callprop('exec', (((var.get('coreJsData') and var.get('coreJsData').get('keys')) and var.get('coreJsData').get('keys').get('IE_PROTO')) or Js(''))))
        return ((Js('Symbol(src)_1.')+var.get('uid')) if var.get('uid') else Js(''))
    PyJs_anonymous_3704_._set_name('anonymous')
    var.put('maskSrcKey', PyJs_anonymous_3704_())
    pass
    var.get('module').put('exports', var.get('isMasked'))
PyJs_anonymous_3703_._set_name('anonymous')
PyJs_Object_3705_ = Js({'./_coreJsData':Js(369.0)})
@Js
def PyJs_anonymous_3706_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isPrototype', 'objectProto', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_isPrototype_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value', 'Ctor', 'proto'])
        var.put('Ctor', (var.get('value') and var.get('value').get('constructor')))
        var.put('proto', (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').get('prototype')) or var.get('objectProto')))
        return PyJsStrictEq(var.get('value'),var.get('proto'))
    PyJsHoisted_isPrototype_.__name__ = 'isPrototype'
    var.put('isPrototype', PyJsHoisted_isPrototype_)
    var.put('objectProto', var.get('Object').get('prototype'))
    pass
    var.get('module').put('exports', var.get('isPrototype'))
PyJs_anonymous_3706_._set_name('anonymous')
PyJs_Object_3707_ = Js({})
@Js
def PyJs_anonymous_3708_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isStrictComparable', 'require', 'exports', 'isObject', 'module'])
    @Js
    def PyJsHoisted_isStrictComparable_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (PyJsStrictEq(var.get('value'),var.get('value')) and var.get('isObject')(var.get('value')).neg())
    PyJsHoisted_isStrictComparable_.__name__ = 'isStrictComparable'
    var.put('isStrictComparable', PyJsHoisted_isStrictComparable_)
    var.put('isObject', var.get('require')(Js('./isObject')))
    pass
    var.get('module').put('exports', var.get('isStrictComparable'))
PyJs_anonymous_3708_._set_name('anonymous')
PyJs_Object_3709_ = Js({'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3710_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'iteratorToArray', 'exports', 'module'])
    @Js
    def PyJsHoisted_iteratorToArray_(iterator, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'iterator':iterator}, var)
        var.registers(['data', 'result', 'iterator'])
        var.put('result', Js([]))
        while var.put('data', var.get('iterator').callprop('next')).get('done').neg():
            var.get('result').callprop('push', var.get('data').get('value'))
        return var.get('result')
    PyJsHoisted_iteratorToArray_.__name__ = 'iteratorToArray'
    var.put('iteratorToArray', PyJsHoisted_iteratorToArray_)
    pass
    var.get('module').put('exports', var.get('iteratorToArray'))
PyJs_anonymous_3710_._set_name('anonymous')
PyJs_Object_3711_ = Js({})
@Js
def PyJs_anonymous_3712_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'listCacheClear'])
    @Js
    def PyJsHoisted_listCacheClear_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('__data__', Js([]))
    PyJsHoisted_listCacheClear_.__name__ = 'listCacheClear'
    var.put('listCacheClear', PyJsHoisted_listCacheClear_)
    pass
    var.get('module').put('exports', var.get('listCacheClear'))
PyJs_anonymous_3712_._set_name('anonymous')
PyJs_Object_3713_ = Js({})
@Js
def PyJs_anonymous_3714_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['listCacheDelete', 'exports', 'arrayProto', 'require', 'module', 'splice', 'assocIndexOf'])
    @Js
    def PyJsHoisted_listCacheDelete_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['index', 'data', 'lastIndex', 'key'])
        var.put('data', var.get("this").get('__data__'))
        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
        if (var.get('index')<Js(0.0)):
            return Js(False)
        var.put('lastIndex', (var.get('data').get('length')-Js(1.0)))
        if (var.get('index')==var.get('lastIndex')):
            var.get('data').callprop('pop')
        else:
            var.get('splice').callprop('call', var.get('data'), var.get('index'), Js(1.0))
        return var.get('true')
    PyJsHoisted_listCacheDelete_.__name__ = 'listCacheDelete'
    var.put('listCacheDelete', PyJsHoisted_listCacheDelete_)
    var.put('assocIndexOf', var.get('require')(Js('./_assocIndexOf')))
    var.put('arrayProto', var.get('Array').get('prototype'))
    var.put('splice', var.get('arrayProto').get('splice'))
    pass
    var.get('module').put('exports', var.get('listCacheDelete'))
PyJs_anonymous_3714_._set_name('anonymous')
PyJs_Object_3715_ = Js({'./_assocIndexOf':Js(311.0)})
@Js
def PyJs_anonymous_3716_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assocIndexOf', 'require', 'exports', 'module', 'listCacheGet'])
    @Js
    def PyJsHoisted_listCacheGet_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['index', 'data', 'key'])
        var.put('data', var.get("this").get('__data__'))
        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
        return (var.get('undefined') if (var.get('index')<Js(0.0)) else var.get('data').get(var.get('index')).get('1'))
    PyJsHoisted_listCacheGet_.__name__ = 'listCacheGet'
    var.put('listCacheGet', PyJsHoisted_listCacheGet_)
    var.put('assocIndexOf', var.get('require')(Js('./_assocIndexOf')))
    pass
    var.get('module').put('exports', var.get('listCacheGet'))
PyJs_anonymous_3716_._set_name('anonymous')
PyJs_Object_3717_ = Js({'./_assocIndexOf':Js(311.0)})
@Js
def PyJs_anonymous_3718_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assocIndexOf', 'listCacheHas', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_listCacheHas_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return (var.get('assocIndexOf')(var.get("this").get('__data__'), var.get('key'))>(-Js(1.0)))
    PyJsHoisted_listCacheHas_.__name__ = 'listCacheHas'
    var.put('listCacheHas', PyJsHoisted_listCacheHas_)
    var.put('assocIndexOf', var.get('require')(Js('./_assocIndexOf')))
    pass
    var.get('module').put('exports', var.get('listCacheHas'))
PyJs_anonymous_3718_._set_name('anonymous')
PyJs_Object_3719_ = Js({'./_assocIndexOf':Js(311.0)})
@Js
def PyJs_anonymous_3720_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assocIndexOf', 'listCacheSet', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_listCacheSet_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['index', 'data', 'value', 'key'])
        var.put('data', var.get("this").get('__data__'))
        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
        if (var.get('index')<Js(0.0)):
            var.get('data').callprop('push', Js([var.get('key'), var.get('value')]))
        else:
            var.get('data').get(var.get('index')).put('1', var.get('value'))
        return var.get("this")
    PyJsHoisted_listCacheSet_.__name__ = 'listCacheSet'
    var.put('listCacheSet', PyJsHoisted_listCacheSet_)
    var.put('assocIndexOf', var.get('require')(Js('./_assocIndexOf')))
    pass
    var.get('module').put('exports', var.get('listCacheSet'))
PyJs_anonymous_3720_._set_name('anonymous')
PyJs_Object_3721_ = Js({'./_assocIndexOf':Js(311.0)})
@Js
def PyJs_anonymous_3722_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['Map', 'exports', 'Hash', 'require', 'module', 'mapCacheClear', 'ListCache'])
    @Js
    def PyJsHoisted_mapCacheClear_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_3723_ = Js({'hash':var.get('Hash').create(),'map':(var.get('Map') or var.get('ListCache')).create(),'string':var.get('Hash').create()})
        var.get("this").put('__data__', PyJs_Object_3723_)
    PyJsHoisted_mapCacheClear_.__name__ = 'mapCacheClear'
    var.put('mapCacheClear', PyJsHoisted_mapCacheClear_)
    var.put('Hash', var.get('require')(Js('./_Hash')))
    var.put('ListCache', var.get('require')(Js('./_ListCache')))
    var.put('Map', var.get('require')(Js('./_Map')))
    pass
    var.get('module').put('exports', var.get('mapCacheClear'))
PyJs_anonymous_3722_._set_name('anonymous')
PyJs_Object_3724_ = Js({'./_Hash':Js(286.0),'./_ListCache':Js(287.0),'./_Map':Js(288.0)})
@Js
def PyJs_anonymous_3725_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'mapCacheDelete', 'getMapData', 'exports', 'module'])
    @Js
    def PyJsHoisted_mapCacheDelete_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get('getMapData')(var.get("this"), var.get('key')).callprop('delete', var.get('key'))
    PyJsHoisted_mapCacheDelete_.__name__ = 'mapCacheDelete'
    var.put('mapCacheDelete', PyJsHoisted_mapCacheDelete_)
    var.put('getMapData', var.get('require')(Js('./_getMapData')))
    pass
    var.get('module').put('exports', var.get('mapCacheDelete'))
PyJs_anonymous_3725_._set_name('anonymous')
PyJs_Object_3726_ = Js({'./_getMapData':Js(380.0)})
@Js
def PyJs_anonymous_3727_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'mapCacheGet', 'getMapData', 'exports', 'module'])
    @Js
    def PyJsHoisted_mapCacheGet_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get('getMapData')(var.get("this"), var.get('key')).callprop('get', var.get('key'))
    PyJsHoisted_mapCacheGet_.__name__ = 'mapCacheGet'
    var.put('mapCacheGet', PyJsHoisted_mapCacheGet_)
    var.put('getMapData', var.get('require')(Js('./_getMapData')))
    pass
    var.get('module').put('exports', var.get('mapCacheGet'))
PyJs_anonymous_3727_._set_name('anonymous')
PyJs_Object_3728_ = Js({'./_getMapData':Js(380.0)})
@Js
def PyJs_anonymous_3729_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'getMapData', 'exports', 'module', 'mapCacheHas'])
    @Js
    def PyJsHoisted_mapCacheHas_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get('getMapData')(var.get("this"), var.get('key')).callprop('has', var.get('key'))
    PyJsHoisted_mapCacheHas_.__name__ = 'mapCacheHas'
    var.put('mapCacheHas', PyJsHoisted_mapCacheHas_)
    var.put('getMapData', var.get('require')(Js('./_getMapData')))
    pass
    var.get('module').put('exports', var.get('mapCacheHas'))
PyJs_anonymous_3729_._set_name('anonymous')
PyJs_Object_3730_ = Js({'./_getMapData':Js(380.0)})
@Js
def PyJs_anonymous_3731_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'getMapData', 'exports', 'module', 'mapCacheSet'])
    @Js
    def PyJsHoisted_mapCacheSet_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'key'])
        var.get('getMapData')(var.get("this"), var.get('key')).callprop('set', var.get('key'), var.get('value'))
        return var.get("this")
    PyJsHoisted_mapCacheSet_.__name__ = 'mapCacheSet'
    var.put('mapCacheSet', PyJsHoisted_mapCacheSet_)
    var.put('getMapData', var.get('require')(Js('./_getMapData')))
    pass
    var.get('module').put('exports', var.get('mapCacheSet'))
PyJs_anonymous_3731_._set_name('anonymous')
PyJs_Object_3732_ = Js({'./_getMapData':Js(380.0)})
@Js
def PyJs_anonymous_3733_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['mapToArray', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_mapToArray_(map, this, arguments, var=var):
        var = Scope({'this':this, 'map':map, 'arguments':arguments}, var)
        var.registers(['index', 'result', 'map'])
        var.put('index', (-Js(1.0)))
        var.put('result', var.get('Array')(var.get('map').get('size')))
        @Js
        def PyJs_anonymous_3734_(value, key, this, arguments, var=var):
            var = Scope({'this':this, 'key':key, 'value':value, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), Js([var.get('key'), var.get('value')]))
        PyJs_anonymous_3734_._set_name('anonymous')
        var.get('map').callprop('forEach', PyJs_anonymous_3734_)
        return var.get('result')
    PyJsHoisted_mapToArray_.__name__ = 'mapToArray'
    var.put('mapToArray', PyJsHoisted_mapToArray_)
    pass
    var.get('module').put('exports', var.get('mapToArray'))
PyJs_anonymous_3733_._set_name('anonymous')
PyJs_Object_3735_ = Js({})
@Js
def PyJs_anonymous_3736_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'matchesStrictComparable', 'exports', 'module'])
    @Js
    def PyJsHoisted_matchesStrictComparable_(key, srcValue, this, arguments, var=var):
        var = Scope({'this':this, 'srcValue':srcValue, 'key':key, 'arguments':arguments}, var)
        var.registers(['srcValue', 'key'])
        @Js
        def PyJs_anonymous_3737_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            if (var.get('object')==var.get("null")):
                return Js(False)
            return (PyJsStrictEq(var.get('object').get(var.get('key')),var.get('srcValue')) and (PyJsStrictNeq(var.get('srcValue'),var.get('undefined')) or var.get('Object')(var.get('object')).contains(var.get('key'))))
        PyJs_anonymous_3737_._set_name('anonymous')
        return PyJs_anonymous_3737_
    PyJsHoisted_matchesStrictComparable_.__name__ = 'matchesStrictComparable'
    var.put('matchesStrictComparable', PyJsHoisted_matchesStrictComparable_)
    pass
    var.get('module').put('exports', var.get('matchesStrictComparable'))
PyJs_anonymous_3736_._set_name('anonymous')
PyJs_Object_3738_ = Js({})
@Js
def PyJs_anonymous_3739_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'getNative', 'nativeCreate', 'module'])
    var.put('getNative', var.get('require')(Js('./_getNative')))
    var.put('nativeCreate', var.get('getNative')(var.get('Object'), Js('create')))
    var.get('module').put('exports', var.get('nativeCreate'))
PyJs_anonymous_3739_._set_name('anonymous')
PyJs_Object_3740_ = Js({'./_getNative':Js(382.0)})
@Js
def PyJs_anonymous_3741_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_3742_ = Js({})
    @Js
    def PyJs_anonymous_3743_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['freeGlobal', 'global', 'freeSelf', 'thisGlobal', 'root', 'checkGlobal'])
        var.put('checkGlobal', var.get('require')(Js('./_checkGlobal')))
        var.put('freeGlobal', var.get('checkGlobal')(((var.get('global',throw=False).typeof()==Js('object')) and var.get('global'))))
        var.put('freeSelf', var.get('checkGlobal')(((var.get('self',throw=False).typeof()==Js('object')) and var.get('self'))))
        var.put('thisGlobal', var.get('checkGlobal')(((var.get("this",throw=False).typeof()==Js('object')) and var.get("this"))))
        var.put('root', (((var.get('freeGlobal') or var.get('freeSelf')) or var.get('thisGlobal')) or var.get('Function')(Js('return this'))()))
        var.get('module').put('exports', var.get('root'))
    PyJs_anonymous_3743_._set_name('anonymous')
    PyJs_anonymous_3743_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_3742_))))
PyJs_anonymous_3741_._set_name('anonymous')
PyJs_Object_3744_ = Js({'./_checkGlobal':Js(355.0)})
@Js
def PyJs_anonymous_3745_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['setCacheAdd', 'require', 'exports', 'module', 'HASH_UNDEFINED'])
    @Js
    def PyJsHoisted_setCacheAdd_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        var.get("this").get('__data__').callprop('set', var.get('value'), var.get('HASH_UNDEFINED'))
        return var.get("this")
    PyJsHoisted_setCacheAdd_.__name__ = 'setCacheAdd'
    var.put('setCacheAdd', PyJsHoisted_setCacheAdd_)
    var.put('HASH_UNDEFINED', Js('__lodash_hash_undefined__'))
    pass
    var.get('module').put('exports', var.get('setCacheAdd'))
PyJs_anonymous_3745_._set_name('anonymous')
PyJs_Object_3746_ = Js({})
@Js
def PyJs_anonymous_3747_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'setCacheHas', 'module'])
    @Js
    def PyJsHoisted_setCacheHas_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get("this").get('__data__').callprop('has', var.get('value'))
    PyJsHoisted_setCacheHas_.__name__ = 'setCacheHas'
    var.put('setCacheHas', PyJsHoisted_setCacheHas_)
    pass
    var.get('module').put('exports', var.get('setCacheHas'))
PyJs_anonymous_3747_._set_name('anonymous')
PyJs_Object_3748_ = Js({})
@Js
def PyJs_anonymous_3749_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'setToArray', 'exports', 'module'])
    @Js
    def PyJsHoisted_setToArray_(set, this, arguments, var=var):
        var = Scope({'this':this, 'set':set, 'arguments':arguments}, var)
        var.registers(['index', 'set', 'result'])
        var.put('index', (-Js(1.0)))
        var.put('result', var.get('Array')(var.get('set').get('size')))
        @Js
        def PyJs_anonymous_3750_(value, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
            var.registers(['value'])
            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('value'))
        PyJs_anonymous_3750_._set_name('anonymous')
        var.get('set').callprop('forEach', PyJs_anonymous_3750_)
        return var.get('result')
    PyJsHoisted_setToArray_.__name__ = 'setToArray'
    var.put('setToArray', PyJsHoisted_setToArray_)
    pass
    var.get('module').put('exports', var.get('setToArray'))
PyJs_anonymous_3749_._set_name('anonymous')
PyJs_Object_3751_ = Js({})
@Js
def PyJs_anonymous_3752_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'stackClear', 'module', 'ListCache'])
    @Js
    def PyJsHoisted_stackClear_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('__data__', var.get('ListCache').create())
    PyJsHoisted_stackClear_.__name__ = 'stackClear'
    var.put('stackClear', PyJsHoisted_stackClear_)
    var.put('ListCache', var.get('require')(Js('./_ListCache')))
    pass
    var.get('module').put('exports', var.get('stackClear'))
PyJs_anonymous_3752_._set_name('anonymous')
PyJs_Object_3753_ = Js({'./_ListCache':Js(287.0)})
@Js
def PyJs_anonymous_3754_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['stackDelete', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_stackDelete_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get("this").get('__data__').callprop('delete', var.get('key'))
    PyJsHoisted_stackDelete_.__name__ = 'stackDelete'
    var.put('stackDelete', PyJsHoisted_stackDelete_)
    pass
    var.get('module').put('exports', var.get('stackDelete'))
PyJs_anonymous_3754_._set_name('anonymous')
PyJs_Object_3755_ = Js({})
@Js
def PyJs_anonymous_3756_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'stackGet', 'exports', 'module'])
    @Js
    def PyJsHoisted_stackGet_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get("this").get('__data__').callprop('get', var.get('key'))
    PyJsHoisted_stackGet_.__name__ = 'stackGet'
    var.put('stackGet', PyJsHoisted_stackGet_)
    pass
    var.get('module').put('exports', var.get('stackGet'))
PyJs_anonymous_3756_._set_name('anonymous')
PyJs_Object_3757_ = Js({})
@Js
def PyJs_anonymous_3758_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['stackHas', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_stackHas_(key, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
        var.registers(['key'])
        return var.get("this").get('__data__').callprop('has', var.get('key'))
    PyJsHoisted_stackHas_.__name__ = 'stackHas'
    var.put('stackHas', PyJsHoisted_stackHas_)
    pass
    var.get('module').put('exports', var.get('stackHas'))
PyJs_anonymous_3758_._set_name('anonymous')
PyJs_Object_3759_ = Js({})
@Js
def PyJs_anonymous_3760_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['stackSet', 'exports', 'require', 'module', 'MapCache', 'LARGE_ARRAY_SIZE', 'ListCache'])
    @Js
    def PyJsHoisted_stackSet_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['cache', 'value', 'key'])
        var.put('cache', var.get("this").get('__data__'))
        if (var.get('cache').instanceof(var.get('ListCache')) and (var.get('cache').get('__data__').get('length')==var.get('LARGE_ARRAY_SIZE'))):
            var.put('cache', var.get("this").put('__data__', var.get('MapCache').create(var.get('cache').get('__data__'))))
        var.get('cache').callprop('set', var.get('key'), var.get('value'))
        return var.get("this")
    PyJsHoisted_stackSet_.__name__ = 'stackSet'
    var.put('stackSet', PyJsHoisted_stackSet_)
    var.put('ListCache', var.get('require')(Js('./_ListCache')))
    var.put('MapCache', var.get('require')(Js('./_MapCache')))
    var.put('LARGE_ARRAY_SIZE', Js(200.0))
    pass
    var.get('module').put('exports', var.get('stackSet'))
PyJs_anonymous_3760_._set_name('anonymous')
PyJs_Object_3761_ = Js({'./_ListCache':Js(287.0),'./_MapCache':Js(289.0)})
@Js
def PyJs_anonymous_3762_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['rsSeq', 'rsModifier', 'rsNonAstral', 'module', 'rsAstralRange', 'rsZWJ', 'rsComboSymbolsRange', 'reOptMod', 'rsRegional', 'rsFitz', 'rsSurrPair', 'rsOptJoin', 'rsAstral', 'exports', 'rsComboMarksRange', 'rsCombo', 'reComplexSymbol', 'require', 'rsSymbol', 'rsOptVar', 'rsVarRange', 'stringToArray'])
    @Js
    def PyJsHoisted_stringToArray_(string, this, arguments, var=var):
        var = Scope({'this':this, 'string':string, 'arguments':arguments}, var)
        var.registers(['string'])
        return var.get('string').callprop('match', var.get('reComplexSymbol'))
    PyJsHoisted_stringToArray_.__name__ = 'stringToArray'
    var.put('stringToArray', PyJsHoisted_stringToArray_)
    var.put('rsAstralRange', Js('\\ud800-\\udfff'))
    var.put('rsComboMarksRange', Js('\\u0300-\\u036f\\ufe20-\\ufe23'))
    var.put('rsComboSymbolsRange', Js('\\u20d0-\\u20f0'))
    var.put('rsVarRange', Js('\\ufe0e\\ufe0f'))
    var.put('rsAstral', ((Js('[')+var.get('rsAstralRange'))+Js(']')))
    var.put('rsCombo', (((Js('[')+var.get('rsComboMarksRange'))+var.get('rsComboSymbolsRange'))+Js(']')))
    var.put('rsFitz', Js('\\ud83c[\\udffb-\\udfff]'))
    var.put('rsModifier', ((((Js('(?:')+var.get('rsCombo'))+Js('|'))+var.get('rsFitz'))+Js(')')))
    var.put('rsNonAstral', ((Js('[^')+var.get('rsAstralRange'))+Js(']')))
    var.put('rsRegional', Js('(?:\\ud83c[\\udde6-\\uddff]){2}'))
    var.put('rsSurrPair', Js('[\\ud800-\\udbff][\\udc00-\\udfff]'))
    var.put('rsZWJ', Js('\\u200d'))
    var.put('reOptMod', (var.get('rsModifier')+Js('?')))
    var.put('rsOptVar', ((Js('[')+var.get('rsVarRange'))+Js(']?')))
    var.put('rsOptJoin', (((((((Js('(?:')+var.get('rsZWJ'))+Js('(?:'))+Js([var.get('rsNonAstral'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsOptVar'))+var.get('reOptMod'))+Js(')*')))
    var.put('rsSeq', ((var.get('rsOptVar')+var.get('reOptMod'))+var.get('rsOptJoin')))
    var.put('rsSymbol', ((Js('(?:')+Js([((var.get('rsNonAstral')+var.get('rsCombo'))+Js('?')), var.get('rsCombo'), var.get('rsRegional'), var.get('rsSurrPair'), var.get('rsAstral')]).callprop('join', Js('|')))+Js(')')))
    var.put('reComplexSymbol', var.get('RegExp')((((((var.get('rsFitz')+Js('(?='))+var.get('rsFitz'))+Js(')|'))+var.get('rsSymbol'))+var.get('rsSeq')), Js('g')))
    pass
    var.get('module').put('exports', var.get('stringToArray'))
PyJs_anonymous_3762_._set_name('anonymous')
PyJs_Object_3763_ = Js({})
@Js
def PyJs_anonymous_3764_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'stringToPath', 'require', 'module', 'toString', 'reEscapeChar', 'memoize', 'rePropName'])
    var.put('memoize', var.get('require')(Js('./memoize')))
    var.put('toString', var.get('require')(Js('./toString')))
    var.put('rePropName', JsRegExp('/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(\\.|\\[\\])(?:\\4|$))/g'))
    var.put('reEscapeChar', JsRegExp('/\\\\(\\\\)?/g'))
    @Js
    def PyJs_anonymous_3765_(string, this, arguments, var=var):
        var = Scope({'this':this, 'string':string, 'arguments':arguments}, var)
        var.registers(['result', 'string'])
        var.put('result', Js([]))
        @Js
        def PyJs_anonymous_3766_(match, number, quote, string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'quote':quote, 'number':number, 'match':match, 'arguments':arguments}, var)
            var.registers(['quote', 'number', 'match', 'string'])
            var.get('result').callprop('push', (var.get('string').callprop('replace', var.get('reEscapeChar'), Js('$1')) if var.get('quote') else (var.get('number') or var.get('match'))))
        PyJs_anonymous_3766_._set_name('anonymous')
        var.get('toString')(var.get('string')).callprop('replace', var.get('rePropName'), PyJs_anonymous_3766_)
        return var.get('result')
    PyJs_anonymous_3765_._set_name('anonymous')
    var.put('stringToPath', var.get('memoize')(PyJs_anonymous_3765_))
    var.get('module').put('exports', var.get('stringToPath'))
PyJs_anonymous_3764_._set_name('anonymous')
PyJs_Object_3767_ = Js({'./memoize':Js(477.0),'./toString':Js(493.0)})
@Js
def PyJs_anonymous_3768_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'INFINITY', 'toKey', 'require', 'module', 'isSymbol'])
    @Js
    def PyJsHoisted_toKey_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['result', 'value'])
        if ((var.get('value',throw=False).typeof()==Js('string')) or var.get('isSymbol')(var.get('value'))):
            return var.get('value')
        var.put('result', (var.get('value')+Js('')))
        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
    PyJsHoisted_toKey_.__name__ = 'toKey'
    var.put('toKey', PyJsHoisted_toKey_)
    var.put('isSymbol', var.get('require')(Js('./isSymbol')))
    var.put('INFINITY', (Js(1.0)/Js(0.0)))
    pass
    var.get('module').put('exports', var.get('toKey'))
PyJs_anonymous_3768_._set_name('anonymous')
PyJs_Object_3769_ = Js({'./isSymbol':Js(472.0)})
@Js
def PyJs_anonymous_3770_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'toSource', 'module', 'funcToString'])
    @Js
    def PyJsHoisted_toSource_(func, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'func':func}, var)
        var.registers(['func'])
        if (var.get('func')!=var.get("null")):
            try:
                return var.get('funcToString').callprop('call', var.get('func'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_72408585 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_72408585 is not None:
                        var.own['e'] = PyJsHolder_65_72408585
                    else:
                        del var.own['e']
                    del PyJsHolder_65_72408585
            try:
                return (var.get('func')+Js(''))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_77429111 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_77429111 is not None:
                        var.own['e'] = PyJsHolder_65_77429111
                    else:
                        del var.own['e']
                    del PyJsHolder_65_77429111
        return Js('')
    PyJsHoisted_toSource_.__name__ = 'toSource'
    var.put('toSource', PyJsHoisted_toSource_)
    var.put('funcToString', var.get('Function').get('prototype').get('toString'))
    pass
    var.get('module').put('exports', var.get('toSource'))
PyJs_anonymous_3770_._set_name('anonymous')
PyJs_Object_3771_ = Js({})
@Js
def PyJs_anonymous_3772_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assignValue', 'exports', 'propertyIsEnumerable', 'keys', 'copyObject', 'require', 'module', 'nonEnumShadows', 'isPrototype', 'hasOwnProperty', 'isArrayLike', 'objectProto', 'createAssigner', 'assign'])
    var.put('assignValue', var.get('require')(Js('./_assignValue')))
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('createAssigner', var.get('require')(Js('./_createAssigner')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isPrototype', var.get('require')(Js('./_isPrototype')))
    var.put('keys', var.get('require')(Js('./keys')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
    PyJs_Object_3773_ = Js({'valueOf':Js(1.0)})
    var.put('nonEnumShadows', var.get('propertyIsEnumerable').callprop('call', PyJs_Object_3773_, Js('valueOf')).neg())
    @Js
    def PyJs_anonymous_3774_(object, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'object':object, 'arguments':arguments}, var)
        var.registers(['source', 'object', 'key'])
        if ((var.get('nonEnumShadows') or var.get('isPrototype')(var.get('source'))) or var.get('isArrayLike')(var.get('source'))):
            var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object'))
            return var.get('undefined')
        for PyJsTemp in var.get('source'):
            var.put('key', PyJsTemp)
            if var.get('hasOwnProperty').callprop('call', var.get('source'), var.get('key')):
                var.get('assignValue')(var.get('object'), var.get('key'), var.get('source').get(var.get('key')))
    PyJs_anonymous_3774_._set_name('anonymous')
    var.put('assign', var.get('createAssigner')(PyJs_anonymous_3774_))
    var.get('module').put('exports', var.get('assign'))
PyJs_anonymous_3772_._set_name('anonymous')
PyJs_Object_3775_ = Js({'./_assignValue':Js(310.0),'./_copyObject':Js(367.0),'./_createAssigner':Js(370.0),'./_isPrototype':Js(406.0),'./isArrayLike':Js(459.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3776_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['assignValue', 'exports', 'propertyIsEnumerable', 'copyObject', 'require', 'assignIn', 'keysIn', 'isPrototype', 'module', 'isArrayLike', 'objectProto', 'nonEnumShadows', 'createAssigner'])
    var.put('assignValue', var.get('require')(Js('./_assignValue')))
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('createAssigner', var.get('require')(Js('./_createAssigner')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isPrototype', var.get('require')(Js('./_isPrototype')))
    var.put('keysIn', var.get('require')(Js('./keysIn')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
    PyJs_Object_3777_ = Js({'valueOf':Js(1.0)})
    var.put('nonEnumShadows', var.get('propertyIsEnumerable').callprop('call', PyJs_Object_3777_, Js('valueOf')).neg())
    @Js
    def PyJs_anonymous_3778_(object, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'object':object, 'arguments':arguments}, var)
        var.registers(['source', 'object', 'key'])
        if ((var.get('nonEnumShadows') or var.get('isPrototype')(var.get('source'))) or var.get('isArrayLike')(var.get('source'))):
            var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'))
            return var.get('undefined')
        for PyJsTemp in var.get('source'):
            var.put('key', PyJsTemp)
            var.get('assignValue')(var.get('object'), var.get('key'), var.get('source').get(var.get('key')))
    PyJs_anonymous_3778_._set_name('anonymous')
    var.put('assignIn', var.get('createAssigner')(PyJs_anonymous_3778_))
    var.get('module').put('exports', var.get('assignIn'))
PyJs_anonymous_3776_._set_name('anonymous')
PyJs_Object_3779_ = Js({'./_assignValue':Js(310.0),'./_copyObject':Js(367.0),'./_createAssigner':Js(370.0),'./_isPrototype':Js(406.0),'./isArrayLike':Js(459.0),'./keysIn':Js(475.0)})
@Js
def PyJs_anonymous_3780_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'copyObject', 'require', 'module', 'keysIn', 'assignInWith', 'createAssigner'])
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('createAssigner', var.get('require')(Js('./_createAssigner')))
    var.put('keysIn', var.get('require')(Js('./keysIn')))
    @Js
    def PyJs_anonymous_3781_(object, source, srcIndex, customizer, this, arguments, var=var):
        var = Scope({'source':source, 'customizer':customizer, 'arguments':arguments, 'srcIndex':srcIndex, 'this':this, 'object':object}, var)
        var.registers(['source', 'object', 'srcIndex', 'customizer'])
        var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'), var.get('customizer'))
    PyJs_anonymous_3781_._set_name('anonymous')
    var.put('assignInWith', var.get('createAssigner')(PyJs_anonymous_3781_))
    var.get('module').put('exports', var.get('assignInWith'))
PyJs_anonymous_3780_._set_name('anonymous')
PyJs_Object_3782_ = Js({'./_copyObject':Js(367.0),'./_createAssigner':Js(370.0),'./keysIn':Js(475.0)})
@Js
def PyJs_anonymous_3783_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['clone', 'exports', 'require', 'module', 'baseClone'])
    @Js
    def PyJsHoisted_clone_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('baseClone')(var.get('value'), Js(False), var.get('true'))
    PyJsHoisted_clone_.__name__ = 'clone'
    var.put('clone', PyJsHoisted_clone_)
    var.put('baseClone', var.get('require')(Js('./_baseClone')))
    pass
    var.get('module').put('exports', var.get('clone'))
PyJs_anonymous_3783_._set_name('anonymous')
PyJs_Object_3784_ = Js({'./_baseClone':Js(314.0)})
@Js
def PyJs_anonymous_3785_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'cloneDeep', 'exports', 'module', 'baseClone'])
    @Js
    def PyJsHoisted_cloneDeep_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('baseClone')(var.get('value'), var.get('true'), var.get('true'))
    PyJsHoisted_cloneDeep_.__name__ = 'cloneDeep'
    var.put('cloneDeep', PyJsHoisted_cloneDeep_)
    var.put('baseClone', var.get('require')(Js('./_baseClone')))
    pass
    var.get('module').put('exports', var.get('cloneDeep'))
PyJs_anonymous_3785_._set_name('anonymous')
PyJs_Object_3786_ = Js({'./_baseClone':Js(314.0)})
@Js
def PyJs_anonymous_3787_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['cloneDeepWith', 'require', 'exports', 'module', 'baseClone'])
    @Js
    def PyJsHoisted_cloneDeepWith_(value, customizer, this, arguments, var=var):
        var = Scope({'this':this, 'customizer':customizer, 'arguments':arguments, 'value':value}, var)
        var.registers(['customizer', 'value'])
        return var.get('baseClone')(var.get('value'), var.get('true'), var.get('true'), var.get('customizer'))
    PyJsHoisted_cloneDeepWith_.__name__ = 'cloneDeepWith'
    var.put('cloneDeepWith', PyJsHoisted_cloneDeepWith_)
    var.put('baseClone', var.get('require')(Js('./_baseClone')))
    pass
    var.get('module').put('exports', var.get('cloneDeepWith'))
PyJs_anonymous_3787_._set_name('anonymous')
PyJs_Object_3788_ = Js({'./_baseClone':Js(314.0)})
@Js
def PyJs_anonymous_3789_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['compact', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_compact_(array, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments}, var)
        var.registers(['index', 'resIndex', 'value', 'length', 'result', 'array'])
        var.put('index', (-Js(1.0)))
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        var.put('resIndex', Js(0.0))
        var.put('result', Js([]))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
            var.put('value', var.get('array').get(var.get('index')))
            if var.get('value'):
                var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
        return var.get('result')
    PyJsHoisted_compact_.__name__ = 'compact'
    var.put('compact', PyJsHoisted_compact_)
    pass
    var.get('module').put('exports', var.get('compact'))
PyJs_anonymous_3789_._set_name('anonymous')
PyJs_Object_3790_ = Js({})
@Js
def PyJs_anonymous_3791_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'defaults', 'require', 'assignInDefaults', 'rest', 'module', 'assignInWith', 'apply'])
    var.put('apply', var.get('require')(Js('./_apply')))
    var.put('assignInDefaults', var.get('require')(Js('./_assignInDefaults')))
    var.put('assignInWith', var.get('require')(Js('./assignInWith')))
    var.put('rest', var.get('require')(Js('./rest')))
    @Js
    def PyJs_anonymous_3792_(args, this, arguments, var=var):
        var = Scope({'this':this, 'args':args, 'arguments':arguments}, var)
        var.registers(['args'])
        var.get('args').callprop('push', var.get('undefined'), var.get('assignInDefaults'))
        return var.get('apply')(var.get('assignInWith'), var.get('undefined'), var.get('args'))
    PyJs_anonymous_3792_._set_name('anonymous')
    var.put('defaults', var.get('rest')(PyJs_anonymous_3792_))
    var.get('module').put('exports', var.get('defaults'))
PyJs_anonymous_3791_._set_name('anonymous')
PyJs_Object_3793_ = Js({'./_apply':Js(300.0),'./_assignInDefaults':Js(308.0),'./assignInWith':Js(437.0),'./rest':Js(484.0)})
@Js
def PyJs_anonymous_3794_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('require')(Js('./forEach')))
PyJs_anonymous_3794_._set_name('anonymous')
PyJs_Object_3795_ = Js({'./forEach':Js(451.0)})
@Js
def PyJs_anonymous_3796_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'eq', 'exports', 'module'])
    @Js
    def PyJsHoisted_eq_(value, other, this, arguments, var=var):
        var = Scope({'this':this, 'other':other, 'arguments':arguments, 'value':value}, var)
        var.registers(['other', 'value'])
        return (PyJsStrictEq(var.get('value'),var.get('other')) or (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other'))))
    PyJsHoisted_eq_.__name__ = 'eq'
    var.put('eq', PyJsHoisted_eq_)
    pass
    var.get('module').put('exports', var.get('eq'))
PyJs_anonymous_3796_._set_name('anonymous')
PyJs_Object_3797_ = Js({})
@Js
def PyJs_anonymous_3798_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'reHasRegExpChar', 'require', 'module', 'toString', 'reRegExpChar', 'escapeRegExp'])
    @Js
    def PyJsHoisted_escapeRegExp_(string, this, arguments, var=var):
        var = Scope({'this':this, 'string':string, 'arguments':arguments}, var)
        var.registers(['string'])
        var.put('string', var.get('toString')(var.get('string')))
        return (var.get('string').callprop('replace', var.get('reRegExpChar'), Js('\\$&')) if (var.get('string') and var.get('reHasRegExpChar').callprop('test', var.get('string'))) else var.get('string'))
    PyJsHoisted_escapeRegExp_.__name__ = 'escapeRegExp'
    var.put('escapeRegExp', PyJsHoisted_escapeRegExp_)
    var.put('toString', var.get('require')(Js('./toString')))
    var.put('reRegExpChar', JsRegExp('/[\\\\^$.*+?()[\\]{}|]/g'))
    var.put('reHasRegExpChar', var.get('RegExp')(var.get('reRegExpChar').get('source')))
    pass
    var.get('module').put('exports', var.get('escapeRegExp'))
PyJs_anonymous_3798_._set_name('anonymous')
PyJs_Object_3799_ = Js({'./toString':Js(493.0)})
@Js
def PyJs_anonymous_3800_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('module').put('exports', var.get('require')(Js('./assignIn')))
PyJs_anonymous_3800_._set_name('anonymous')
PyJs_Object_3801_ = Js({'./assignIn':Js(436.0)})
@Js
def PyJs_anonymous_3802_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'createFind', 'require', 'findIndex', 'module', 'find'])
    var.put('createFind', var.get('require')(Js('./_createFind')))
    var.put('findIndex', var.get('require')(Js('./findIndex')))
    var.put('find', var.get('createFind')(var.get('findIndex')))
    var.get('module').put('exports', var.get('find'))
PyJs_anonymous_3802_._set_name('anonymous')
PyJs_Object_3803_ = Js({'./_createFind':Js(373.0),'./findIndex':Js(448.0)})
@Js
def PyJs_anonymous_3804_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['findIndex', 'nativeMax', 'toInteger', 'baseIteratee', 'exports', 'module', 'baseFindIndex', 'require'])
    @Js
    def PyJsHoisted_findIndex_(array, predicate, fromIndex, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'array':array, 'predicate':predicate, 'fromIndex':fromIndex}, var)
        var.registers(['index', 'length', 'predicate', 'array', 'fromIndex'])
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        if var.get('length').neg():
            return (-Js(1.0))
        var.put('index', (Js(0.0) if (var.get('fromIndex')==var.get("null")) else var.get('toInteger')(var.get('fromIndex'))))
        if (var.get('index')<Js(0.0)):
            var.put('index', var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)))
        return var.get('baseFindIndex')(var.get('array'), var.get('baseIteratee')(var.get('predicate'), Js(3.0)), var.get('index'))
    PyJsHoisted_findIndex_.__name__ = 'findIndex'
    var.put('findIndex', PyJsHoisted_findIndex_)
    var.put('baseFindIndex', var.get('require')(Js('./_baseFindIndex')))
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('nativeMax', var.get('Math').get('max'))
    pass
    var.get('module').put('exports', var.get('findIndex'))
PyJs_anonymous_3804_._set_name('anonymous')
PyJs_Object_3805_ = Js({'./_baseFindIndex':Js(317.0),'./_baseIteratee':Js(331.0),'./toInteger':Js(490.0)})
@Js
def PyJs_anonymous_3806_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'findLastIndex', 'createFind', 'require', 'module', 'findLast'])
    var.put('createFind', var.get('require')(Js('./_createFind')))
    var.put('findLastIndex', var.get('require')(Js('./findLastIndex')))
    var.put('findLast', var.get('createFind')(var.get('findLastIndex')))
    var.get('module').put('exports', var.get('findLast'))
PyJs_anonymous_3806_._set_name('anonymous')
PyJs_Object_3807_ = Js({'./_createFind':Js(373.0),'./findLastIndex':Js(450.0)})
@Js
def PyJs_anonymous_3808_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'findLastIndex', 'nativeMax', 'toInteger', 'baseIteratee', 'module', 'nativeMin', 'baseFindIndex', 'require'])
    @Js
    def PyJsHoisted_findLastIndex_(array, predicate, fromIndex, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'array':array, 'predicate':predicate, 'fromIndex':fromIndex}, var)
        var.registers(['index', 'length', 'predicate', 'array', 'fromIndex'])
        var.put('length', (var.get('array').get('length') if var.get('array') else Js(0.0)))
        if var.get('length').neg():
            return (-Js(1.0))
        var.put('index', (var.get('length')-Js(1.0)))
        if PyJsStrictNeq(var.get('fromIndex'),var.get('undefined')):
            var.put('index', var.get('toInteger')(var.get('fromIndex')))
            var.put('index', (var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)) if (var.get('fromIndex')<Js(0.0)) else var.get('nativeMin')(var.get('index'), (var.get('length')-Js(1.0)))))
        return var.get('baseFindIndex')(var.get('array'), var.get('baseIteratee')(var.get('predicate'), Js(3.0)), var.get('index'), var.get('true'))
    PyJsHoisted_findLastIndex_.__name__ = 'findLastIndex'
    var.put('findLastIndex', PyJsHoisted_findLastIndex_)
    var.put('baseFindIndex', var.get('require')(Js('./_baseFindIndex')))
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('nativeMax', var.get('Math').get('max'))
    var.put('nativeMin', var.get('Math').get('min'))
    pass
    var.get('module').put('exports', var.get('findLastIndex'))
PyJs_anonymous_3808_._set_name('anonymous')
PyJs_Object_3809_ = Js({'./_baseFindIndex':Js(317.0),'./_baseIteratee':Js(331.0),'./toInteger':Js(490.0)})
@Js
def PyJs_anonymous_3810_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseEach', 'isArray', 'exports', 'arrayEach', 'require', 'baseIteratee', 'module', 'forEach'])
    @Js
    def PyJsHoisted_forEach_(collection, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'collection':collection, 'iteratee':iteratee}, var)
        var.registers(['collection', 'func', 'iteratee'])
        var.put('func', (var.get('arrayEach') if var.get('isArray')(var.get('collection')) else var.get('baseEach')))
        return var.get('func')(var.get('collection'), var.get('baseIteratee')(var.get('iteratee'), Js(3.0)))
    PyJsHoisted_forEach_.__name__ = 'forEach'
    var.put('forEach', PyJsHoisted_forEach_)
    var.put('arrayEach', var.get('require')(Js('./_arrayEach')))
    var.put('baseEach', var.get('require')(Js('./_baseEach')))
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    pass
    var.get('module').put('exports', var.get('forEach'))
PyJs_anonymous_3810_._set_name('anonymous')
PyJs_Object_3811_ = Js({'./_arrayEach':Js(301.0),'./_baseEach':Js(316.0),'./_baseIteratee':Js(331.0),'./isArray':Js(458.0)})
@Js
def PyJs_anonymous_3812_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseGet', 'exports', 'require', 'module', 'get'])
    @Js
    def PyJsHoisted_get_(object, path, defaultValue, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'defaultValue':defaultValue, 'object':object, 'arguments':arguments}, var)
        var.registers(['path', 'defaultValue', 'object', 'result'])
        var.put('result', (var.get('undefined') if (var.get('object')==var.get("null")) else var.get('baseGet')(var.get('object'), var.get('path'))))
        return (var.get('defaultValue') if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result'))
    PyJsHoisted_get_.__name__ = 'get'
    var.put('get', PyJsHoisted_get_)
    var.put('baseGet', var.get('require')(Js('./_baseGet')))
    pass
    var.get('module').put('exports', var.get('get'))
PyJs_anonymous_3812_._set_name('anonymous')
PyJs_Object_3813_ = Js({'./_baseGet':Js(321.0)})
@Js
def PyJs_anonymous_3814_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['hasPath', 'baseHas', 'require', 'exports', 'module', 'has'])
    @Js
    def PyJsHoisted_has_(object, path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'object':object, 'arguments':arguments}, var)
        var.registers(['path', 'object'])
        return ((var.get('object')!=var.get("null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHas')))
    PyJsHoisted_has_.__name__ = 'has'
    var.put('has', PyJsHoisted_has_)
    var.put('baseHas', var.get('require')(Js('./_baseHas')))
    var.put('hasPath', var.get('require')(Js('./_hasPath')))
    pass
    var.get('module').put('exports', var.get('has'))
PyJs_anonymous_3814_._set_name('anonymous')
PyJs_Object_3815_ = Js({'./_baseHas':Js(323.0),'./_hasPath':Js(387.0)})
@Js
def PyJs_anonymous_3816_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['hasPath', 'hasIn', 'require', 'exports', 'module', 'baseHasIn'])
    @Js
    def PyJsHoisted_hasIn_(object, path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'object':object, 'arguments':arguments}, var)
        var.registers(['path', 'object'])
        return ((var.get('object')!=var.get("null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHasIn')))
    PyJsHoisted_hasIn_.__name__ = 'hasIn'
    var.put('hasIn', PyJsHoisted_hasIn_)
    var.put('baseHasIn', var.get('require')(Js('./_baseHasIn')))
    var.put('hasPath', var.get('require')(Js('./_hasPath')))
    pass
    var.get('module').put('exports', var.get('hasIn'))
PyJs_anonymous_3816_._set_name('anonymous')
PyJs_Object_3817_ = Js({'./_baseHasIn':Js(324.0),'./_hasPath':Js(387.0)})
@Js
def PyJs_anonymous_3818_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'identity'])
    @Js
    def PyJsHoisted_identity_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('value')
    PyJsHoisted_identity_.__name__ = 'identity'
    var.put('identity', PyJsHoisted_identity_)
    pass
    var.get('module').put('exports', var.get('identity'))
PyJs_anonymous_3818_._set_name('anonymous')
PyJs_Object_3819_ = Js({})
@Js
def PyJs_anonymous_3820_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseIndexOf', 'exports', 'isString', 'nativeMax', 'isArrayLike', 'toInteger', 'module', 'includes', 'values', 'require'])
    @Js
    def PyJsHoisted_includes_(collection, value, fromIndex, guard, this, arguments, var=var):
        var = Scope({'guard':guard, 'collection':collection, 'this':this, 'fromIndex':fromIndex, 'value':value, 'arguments':arguments}, var)
        var.registers(['length', 'guard', 'value', 'collection', 'fromIndex'])
        var.put('collection', (var.get('collection') if var.get('isArrayLike')(var.get('collection')) else var.get('values')(var.get('collection'))))
        var.put('fromIndex', (var.get('toInteger')(var.get('fromIndex')) if (var.get('fromIndex') and var.get('guard').neg()) else Js(0.0)))
        var.put('length', var.get('collection').get('length'))
        if (var.get('fromIndex')<Js(0.0)):
            var.put('fromIndex', var.get('nativeMax')((var.get('length')+var.get('fromIndex')), Js(0.0)))
        return (((var.get('fromIndex')<=var.get('length')) and (var.get('collection').callprop('indexOf', var.get('value'), var.get('fromIndex'))>(-Js(1.0)))) if var.get('isString')(var.get('collection')) else (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('collection'), var.get('value'), var.get('fromIndex'))>(-Js(1.0)))))
    PyJsHoisted_includes_.__name__ = 'includes'
    var.put('includes', PyJsHoisted_includes_)
    var.put('baseIndexOf', var.get('require')(Js('./_baseIndexOf')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isString', var.get('require')(Js('./isString')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('values', var.get('require')(Js('./values')))
    var.put('nativeMax', var.get('Math').get('max'))
    pass
    var.get('module').put('exports', var.get('includes'))
PyJs_anonymous_3820_._set_name('anonymous')
PyJs_Object_3821_ = Js({'./_baseIndexOf':Js(325.0),'./isArrayLike':Js(459.0),'./isString':Js(471.0),'./toInteger':Js(490.0),'./values':Js(496.0)})
@Js
def PyJs_anonymous_3822_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['propertyIsEnumerable', 'exports', 'objectToString', 'require', 'module', 'hasOwnProperty', 'isArrayLikeObject', 'objectProto', 'argsTag', 'isArguments'])
    @Js
    def PyJsHoisted_isArguments_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('isArrayLikeObject')(var.get('value')) and var.get('hasOwnProperty').callprop('call', var.get('value'), Js('callee'))) and (var.get('propertyIsEnumerable').callprop('call', var.get('value'), Js('callee')).neg() or (var.get('objectToString').callprop('call', var.get('value'))==var.get('argsTag'))))
    PyJsHoisted_isArguments_.__name__ = 'isArguments'
    var.put('isArguments', PyJsHoisted_isArguments_)
    var.put('isArrayLikeObject', var.get('require')(Js('./isArrayLikeObject')))
    var.put('argsTag', Js('[object Arguments]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
    pass
    var.get('module').put('exports', var.get('isArguments'))
PyJs_anonymous_3822_._set_name('anonymous')
PyJs_Object_3823_ = Js({'./isArrayLikeObject':Js(460.0)})
@Js
def PyJs_anonymous_3824_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'require', 'exports', 'module'])
    var.put('isArray', var.get('Array').get('isArray'))
    var.get('module').put('exports', var.get('isArray'))
PyJs_anonymous_3824_._set_name('anonymous')
PyJs_Object_3825_ = Js({})
@Js
def PyJs_anonymous_3826_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'isLength', 'getLength', 'require', 'module', 'isArrayLike', 'isFunction'])
    @Js
    def PyJsHoisted_isArrayLike_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (((var.get('value')!=var.get("null")) and var.get('isLength')(var.get('getLength')(var.get('value')))) and var.get('isFunction')(var.get('value')).neg())
    PyJsHoisted_isArrayLike_.__name__ = 'isArrayLike'
    var.put('isArrayLike', PyJsHoisted_isArrayLike_)
    var.put('getLength', var.get('require')(Js('./_getLength')))
    var.put('isFunction', var.get('require')(Js('./isFunction')))
    var.put('isLength', var.get('require')(Js('./isLength')))
    pass
    var.get('module').put('exports', var.get('isArrayLike'))
PyJs_anonymous_3826_._set_name('anonymous')
PyJs_Object_3827_ = Js({'./_getLength':Js(379.0),'./isFunction':Js(463.0),'./isLength':Js(465.0)})
@Js
def PyJs_anonymous_3828_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'isArrayLike', 'require', 'module', 'isArrayLikeObject', 'isObjectLike'])
    @Js
    def PyJsHoisted_isArrayLikeObject_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('isObjectLike')(var.get('value')) and var.get('isArrayLike')(var.get('value')))
    PyJsHoisted_isArrayLikeObject_.__name__ = 'isArrayLikeObject'
    var.put('isArrayLikeObject', PyJsHoisted_isArrayLikeObject_)
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    pass
    var.get('module').put('exports', var.get('isArrayLikeObject'))
PyJs_anonymous_3828_._set_name('anonymous')
PyJs_Object_3829_ = Js({'./isArrayLike':Js(459.0),'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3830_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'isBoolean', 'objectToString', 'require', 'boolTag', 'module', 'isObjectLike', 'objectProto'])
    @Js
    def PyJsHoisted_isBoolean_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((PyJsStrictEq(var.get('value'),var.get('true')) or PyJsStrictEq(var.get('value'),Js(False))) or (var.get('isObjectLike')(var.get('value')) and (var.get('objectToString').callprop('call', var.get('value'))==var.get('boolTag'))))
    PyJsHoisted_isBoolean_.__name__ = 'isBoolean'
    var.put('isBoolean', PyJsHoisted_isBoolean_)
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('boolTag', Js('[object Boolean]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isBoolean'))
PyJs_anonymous_3830_._set_name('anonymous')
PyJs_Object_3831_ = Js({'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3832_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'freeModule', 'Buffer', 'root', 'require', 'freeExports', 'module', 'moduleExports', 'stubFalse', 'isBuffer'])
    var.put('root', var.get('require')(Js('./_root')))
    var.put('stubFalse', var.get('require')(Js('./stubFalse')))
    var.put('freeExports', ((var.get('exports',throw=False).typeof()==Js('object')) and var.get('exports')))
    var.put('freeModule', ((var.get('freeExports') and (var.get('module',throw=False).typeof()==Js('object'))) and var.get('module')))
    var.put('moduleExports', (var.get('freeModule') and PyJsStrictEq(var.get('freeModule').get('exports'),var.get('freeExports'))))
    var.put('Buffer', (var.get('root').get('Buffer') if var.get('moduleExports') else var.get('undefined')))
    @Js
    def PyJs_anonymous_3833_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('value').instanceof(var.get('Buffer'))
    PyJs_anonymous_3833_._set_name('anonymous')
    var.put('isBuffer', (var.get('stubFalse') if var.get('Buffer').neg() else PyJs_anonymous_3833_))
    var.get('module').put('exports', var.get('isBuffer'))
PyJs_anonymous_3832_._set_name('anonymous')
PyJs_Object_3834_ = Js({'./_root':Js(422.0),'./stubFalse':Js(488.0)})
@Js
def PyJs_anonymous_3835_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['genTag', 'exports', 'module', 'objectToString', 'require', 'isFunction', 'funcTag', 'objectProto', 'isObject'])
    @Js
    def PyJsHoisted_isFunction_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['tag', 'value'])
        var.put('tag', (var.get('objectToString').callprop('call', var.get('value')) if var.get('isObject')(var.get('value')) else Js('')))
        return ((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag')))
    PyJsHoisted_isFunction_.__name__ = 'isFunction'
    var.put('isFunction', PyJsHoisted_isFunction_)
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('funcTag', Js('[object Function]'))
    var.put('genTag', Js('[object GeneratorFunction]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isFunction'))
PyJs_anonymous_3835_._set_name('anonymous')
PyJs_Object_3836_ = Js({'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3837_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['toInteger', 'exports', 'require', 'module', 'isInteger'])
    @Js
    def PyJsHoisted_isInteger_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')==var.get('toInteger')(var.get('value'))))
    PyJsHoisted_isInteger_.__name__ = 'isInteger'
    var.put('isInteger', PyJsHoisted_isInteger_)
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    pass
    var.get('module').put('exports', var.get('isInteger'))
PyJs_anonymous_3837_._set_name('anonymous')
PyJs_Object_3838_ = Js({'./toInteger':Js(490.0)})
@Js
def PyJs_anonymous_3839_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['MAX_SAFE_INTEGER', 'require', 'isLength', 'exports', 'module'])
    @Js
    def PyJsHoisted_isLength_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')>(-Js(1.0)))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<=var.get('MAX_SAFE_INTEGER')))
    PyJsHoisted_isLength_.__name__ = 'isLength'
    var.put('isLength', PyJsHoisted_isLength_)
    var.put('MAX_SAFE_INTEGER', Js(9007199254740991.0))
    pass
    var.get('module').put('exports', var.get('isLength'))
PyJs_anonymous_3839_._set_name('anonymous')
PyJs_Object_3840_ = Js({})
@Js
def PyJs_anonymous_3841_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'objectToString', 'require', 'module', 'numberTag', 'isObjectLike', 'objectProto', 'isNumber'])
    @Js
    def PyJsHoisted_isNumber_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('value',throw=False).typeof()==Js('number')) or (var.get('isObjectLike')(var.get('value')) and (var.get('objectToString').callprop('call', var.get('value'))==var.get('numberTag'))))
    PyJsHoisted_isNumber_.__name__ = 'isNumber'
    var.put('isNumber', PyJsHoisted_isNumber_)
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('numberTag', Js('[object Number]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isNumber'))
PyJs_anonymous_3841_._set_name('anonymous')
PyJs_Object_3842_ = Js({'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3843_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'isObject', 'module'])
    @Js
    def PyJsHoisted_isObject_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['type', 'value'])
        var.put('type', var.get('value',throw=False).typeof())
        return (var.get('value').neg().neg() and ((var.get('type')==Js('object')) or (var.get('type')==Js('function'))))
    PyJsHoisted_isObject_.__name__ = 'isObject'
    var.put('isObject', PyJsHoisted_isObject_)
    pass
    var.get('module').put('exports', var.get('isObject'))
PyJs_anonymous_3843_._set_name('anonymous')
PyJs_Object_3844_ = Js({})
@Js
def PyJs_anonymous_3845_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isObjectLike', 'require', 'exports', 'module'])
    @Js
    def PyJsHoisted_isObjectLike_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('value').neg().neg() and (var.get('value',throw=False).typeof()==Js('object')))
    PyJsHoisted_isObjectLike_.__name__ = 'isObjectLike'
    var.put('isObjectLike', PyJsHoisted_isObjectLike_)
    pass
    var.get('module').put('exports', var.get('isObjectLike'))
PyJs_anonymous_3845_._set_name('anonymous')
PyJs_Object_3846_ = Js({})
@Js
def PyJs_anonymous_3847_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'isPlainObject', 'objectTag', 'funcToString', 'isHostObject', 'objectCtorString', 'require', 'objectToString', 'module', 'hasOwnProperty', 'isObjectLike', 'getPrototype', 'objectProto'])
    @Js
    def PyJsHoisted_isPlainObject_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value', 'Ctor', 'proto'])
        if ((var.get('isObjectLike')(var.get('value')).neg() or (var.get('objectToString').callprop('call', var.get('value'))!=var.get('objectTag'))) or var.get('isHostObject')(var.get('value'))):
            return Js(False)
        var.put('proto', var.get('getPrototype')(var.get('value')))
        if PyJsStrictEq(var.get('proto'),var.get("null")):
            return var.get('true')
        var.put('Ctor', (var.get('hasOwnProperty').callprop('call', var.get('proto'), Js('constructor')) and var.get('proto').get('constructor')))
        return (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').instanceof(var.get('Ctor'))) and (var.get('funcToString').callprop('call', var.get('Ctor'))==var.get('objectCtorString')))
    PyJsHoisted_isPlainObject_.__name__ = 'isPlainObject'
    var.put('isPlainObject', PyJsHoisted_isPlainObject_)
    var.put('getPrototype', var.get('require')(Js('./_getPrototype')))
    var.put('isHostObject', var.get('require')(Js('./_isHostObject')))
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('objectTag', Js('[object Object]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('funcToString', var.get('Function').get('prototype').get('toString'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    var.put('objectCtorString', var.get('funcToString').callprop('call', var.get('Object')))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isPlainObject'))
PyJs_anonymous_3847_._set_name('anonymous')
PyJs_Object_3848_ = Js({'./_getPrototype':Js(383.0),'./_isHostObject':Js(400.0),'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3849_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['regexpTag', 'exports', 'objectToString', 'require', 'module', 'objectProto', 'isObject', 'isRegExp'])
    @Js
    def PyJsHoisted_isRegExp_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (var.get('isObject')(var.get('value')) and (var.get('objectToString').callprop('call', var.get('value'))==var.get('regexpTag')))
    PyJsHoisted_isRegExp_.__name__ = 'isRegExp'
    var.put('isRegExp', PyJsHoisted_isRegExp_)
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('regexpTag', Js('[object RegExp]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isRegExp'))
PyJs_anonymous_3849_._set_name('anonymous')
PyJs_Object_3850_ = Js({'./isObject':Js(467.0)})
@Js
def PyJs_anonymous_3851_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'isString', 'objectToString', 'require', 'stringTag', 'module', 'isObjectLike', 'objectProto'])
    @Js
    def PyJsHoisted_isString_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('value',throw=False).typeof()==Js('string')) or ((var.get('isArray')(var.get('value')).neg() and var.get('isObjectLike')(var.get('value'))) and (var.get('objectToString').callprop('call', var.get('value'))==var.get('stringTag'))))
    PyJsHoisted_isString_.__name__ = 'isString'
    var.put('isString', PyJsHoisted_isString_)
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('stringTag', Js('[object String]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isString'))
PyJs_anonymous_3851_._set_name('anonymous')
PyJs_Object_3852_ = Js({'./isArray':Js(458.0),'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3853_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'objectToString', 'require', 'module', 'isObjectLike', 'objectProto', 'isSymbol', 'symbolTag'])
    @Js
    def PyJsHoisted_isSymbol_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('value',throw=False).typeof()==Js('symbol')) or (var.get('isObjectLike')(var.get('value')) and (var.get('objectToString').callprop('call', var.get('value'))==var.get('symbolTag'))))
    PyJsHoisted_isSymbol_.__name__ = 'isSymbol'
    var.put('isSymbol', PyJsHoisted_isSymbol_)
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('symbolTag', Js('[object Symbol]'))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isSymbol'))
PyJs_anonymous_3853_._set_name('anonymous')
PyJs_Object_3854_ = Js({'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3855_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['arrayTag', 'typedArrayTags', 'uint32Tag', 'arrayBufferTag', 'objectTag', 'dataViewTag', 'int8Tag', 'isObjectLike', 'errorTag', 'float64Tag', 'isLength', 'boolTag', 'funcTag', 'isTypedArray', 'float32Tag', 'argsTag', 'regexpTag', 'exports', 'dateTag', 'setTag', 'stringTag', 'int32Tag', 'module', 'mapTag', 'uint8Tag', 'require', 'objectToString', 'uint16Tag', 'weakMapTag', 'int16Tag', 'numberTag', 'objectProto', 'uint8ClampedTag'])
    @Js
    def PyJsHoisted_isTypedArray_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return ((var.get('isObjectLike')(var.get('value')) and var.get('isLength')(var.get('value').get('length'))) and var.get('typedArrayTags').get(var.get('objectToString').callprop('call', var.get('value'))).neg().neg())
    PyJsHoisted_isTypedArray_.__name__ = 'isTypedArray'
    var.put('isTypedArray', PyJsHoisted_isTypedArray_)
    var.put('isLength', var.get('require')(Js('./isLength')))
    var.put('isObjectLike', var.get('require')(Js('./isObjectLike')))
    var.put('argsTag', Js('[object Arguments]'))
    var.put('arrayTag', Js('[object Array]'))
    var.put('boolTag', Js('[object Boolean]'))
    var.put('dateTag', Js('[object Date]'))
    var.put('errorTag', Js('[object Error]'))
    var.put('funcTag', Js('[object Function]'))
    var.put('mapTag', Js('[object Map]'))
    var.put('numberTag', Js('[object Number]'))
    var.put('objectTag', Js('[object Object]'))
    var.put('regexpTag', Js('[object RegExp]'))
    var.put('setTag', Js('[object Set]'))
    var.put('stringTag', Js('[object String]'))
    var.put('weakMapTag', Js('[object WeakMap]'))
    var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
    var.put('dataViewTag', Js('[object DataView]'))
    var.put('float32Tag', Js('[object Float32Array]'))
    var.put('float64Tag', Js('[object Float64Array]'))
    var.put('int8Tag', Js('[object Int8Array]'))
    var.put('int16Tag', Js('[object Int16Array]'))
    var.put('int32Tag', Js('[object Int32Array]'))
    var.put('uint8Tag', Js('[object Uint8Array]'))
    var.put('uint8ClampedTag', Js('[object Uint8ClampedArray]'))
    var.put('uint16Tag', Js('[object Uint16Array]'))
    var.put('uint32Tag', Js('[object Uint32Array]'))
    PyJs_Object_3856_ = Js({})
    var.put('typedArrayTags', PyJs_Object_3856_)
    def PyJs_LONG_3857_(var=var):
        return var.get('typedArrayTags').put(var.get('int8Tag'), var.get('typedArrayTags').put(var.get('int16Tag'), var.get('typedArrayTags').put(var.get('int32Tag'), var.get('typedArrayTags').put(var.get('uint8Tag'), var.get('typedArrayTags').put(var.get('uint8ClampedTag'), var.get('typedArrayTags').put(var.get('uint16Tag'), var.get('typedArrayTags').put(var.get('uint32Tag'), var.get('true'))))))))
    var.get('typedArrayTags').put(var.get('float32Tag'), var.get('typedArrayTags').put(var.get('float64Tag'), PyJs_LONG_3857_()))
    def PyJs_LONG_3859_(var=var):
        def PyJs_LONG_3858_(var=var):
            return var.get('typedArrayTags').put(var.get('funcTag'), var.get('typedArrayTags').put(var.get('mapTag'), var.get('typedArrayTags').put(var.get('numberTag'), var.get('typedArrayTags').put(var.get('objectTag'), var.get('typedArrayTags').put(var.get('regexpTag'), var.get('typedArrayTags').put(var.get('setTag'), var.get('typedArrayTags').put(var.get('stringTag'), var.get('typedArrayTags').put(var.get('weakMapTag'), Js(False)))))))))
        return var.get('typedArrayTags').put(var.get('argsTag'), var.get('typedArrayTags').put(var.get('arrayTag'), var.get('typedArrayTags').put(var.get('arrayBufferTag'), var.get('typedArrayTags').put(var.get('boolTag'), var.get('typedArrayTags').put(var.get('dataViewTag'), var.get('typedArrayTags').put(var.get('dateTag'), var.get('typedArrayTags').put(var.get('errorTag'), PyJs_LONG_3858_())))))))
    PyJs_LONG_3859_()
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('objectToString', var.get('objectProto').get('toString'))
    pass
    var.get('module').put('exports', var.get('isTypedArray'))
PyJs_anonymous_3855_._set_name('anonymous')
PyJs_Object_3860_ = Js({'./isLength':Js(465.0),'./isObjectLike':Js(468.0)})
@Js
def PyJs_anonymous_3861_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['indexKeys', 'exports', 'baseHas', 'baseKeys', 'keys', 'isArrayLike', 'require', 'isIndex', 'module', 'isPrototype'])
    @Js
    def PyJsHoisted_keys_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['skipIndexes', 'object', 'indexes', 'length', 'result', 'key', 'isProto'])
        var.put('isProto', var.get('isPrototype')(var.get('object')))
        if (var.get('isProto') or var.get('isArrayLike')(var.get('object'))).neg():
            return var.get('baseKeys')(var.get('object'))
        var.put('indexes', var.get('indexKeys')(var.get('object')))
        var.put('skipIndexes', var.get('indexes').neg().neg())
        var.put('result', (var.get('indexes') or Js([])))
        var.put('length', var.get('result').get('length'))
        for PyJsTemp in var.get('object'):
            var.put('key', PyJsTemp)
            if ((var.get('baseHas')(var.get('object'), var.get('key')) and (var.get('skipIndexes') and ((var.get('key')==Js('length')) or var.get('isIndex')(var.get('key'), var.get('length')))).neg()) and (var.get('isProto') and (var.get('key')==Js('constructor'))).neg()):
                var.get('result').callprop('push', var.get('key'))
        return var.get('result')
    PyJsHoisted_keys_.__name__ = 'keys'
    var.put('keys', PyJsHoisted_keys_)
    var.put('baseHas', var.get('require')(Js('./_baseHas')))
    var.put('baseKeys', var.get('require')(Js('./_baseKeys')))
    var.put('indexKeys', var.get('require')(Js('./_indexKeys')))
    var.put('isArrayLike', var.get('require')(Js('./isArrayLike')))
    var.put('isIndex', var.get('require')(Js('./_isIndex')))
    var.put('isPrototype', var.get('require')(Js('./_isPrototype')))
    pass
    var.get('module').put('exports', var.get('keys'))
PyJs_anonymous_3861_._set_name('anonymous')
PyJs_Object_3862_ = Js({'./_baseHas':Js(323.0),'./_baseKeys':Js(332.0),'./_indexKeys':Js(393.0),'./_isIndex':Js(401.0),'./_isPrototype':Js(406.0),'./isArrayLike':Js(459.0)})
@Js
def PyJs_anonymous_3863_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['indexKeys', 'exports', 'baseKeysIn', 'require', 'isIndex', 'module', 'keysIn', 'isPrototype', 'hasOwnProperty', 'objectProto'])
    @Js
    def PyJsHoisted_keysIn_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['skipIndexes', 'index', 'object', 'indexes', 'length', 'result', 'key', 'props', 'isProto', 'propsLength'])
        var.put('index', (-Js(1.0)))
        var.put('isProto', var.get('isPrototype')(var.get('object')))
        var.put('props', var.get('baseKeysIn')(var.get('object')))
        var.put('propsLength', var.get('props').get('length'))
        var.put('indexes', var.get('indexKeys')(var.get('object')))
        var.put('skipIndexes', var.get('indexes').neg().neg())
        var.put('result', (var.get('indexes') or Js([])))
        var.put('length', var.get('result').get('length'))
        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('propsLength')):
            var.put('key', var.get('props').get(var.get('index')))
            if ((var.get('skipIndexes') and ((var.get('key')==Js('length')) or var.get('isIndex')(var.get('key'), var.get('length')))).neg() and ((var.get('key')==Js('constructor')) and (var.get('isProto') or var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())).neg()):
                var.get('result').callprop('push', var.get('key'))
        return var.get('result')
    PyJsHoisted_keysIn_.__name__ = 'keysIn'
    var.put('keysIn', PyJsHoisted_keysIn_)
    var.put('baseKeysIn', var.get('require')(Js('./_baseKeysIn')))
    var.put('indexKeys', var.get('require')(Js('./_indexKeys')))
    var.put('isIndex', var.get('require')(Js('./_isIndex')))
    var.put('isPrototype', var.get('require')(Js('./_isPrototype')))
    var.put('objectProto', var.get('Object').get('prototype'))
    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
    pass
    var.get('module').put('exports', var.get('keysIn'))
PyJs_anonymous_3863_._set_name('anonymous')
PyJs_Object_3864_ = Js({'./_baseKeysIn':Js(333.0),'./_indexKeys':Js(393.0),'./_isIndex':Js(401.0),'./_isPrototype':Js(406.0)})
@Js
def PyJs_anonymous_3865_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'map', 'exports', 'require', 'arrayMap', 'baseIteratee', 'module', 'baseMap'])
    @Js
    def PyJsHoisted_map_(collection, iteratee, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'collection':collection, 'iteratee':iteratee}, var)
        var.registers(['collection', 'func', 'iteratee'])
        var.put('func', (var.get('arrayMap') if var.get('isArray')(var.get('collection')) else var.get('baseMap')))
        return var.get('func')(var.get('collection'), var.get('baseIteratee')(var.get('iteratee'), Js(3.0)))
    PyJsHoisted_map_.__name__ = 'map'
    var.put('map', PyJsHoisted_map_)
    var.put('arrayMap', var.get('require')(Js('./_arrayMap')))
    var.put('baseIteratee', var.get('require')(Js('./_baseIteratee')))
    var.put('baseMap', var.get('require')(Js('./_baseMap')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    pass
    var.get('module').put('exports', var.get('map'))
PyJs_anonymous_3865_._set_name('anonymous')
PyJs_Object_3866_ = Js({'./_arrayMap':Js(304.0),'./_baseIteratee':Js(331.0),'./_baseMap':Js(334.0),'./isArray':Js(458.0)})
@Js
def PyJs_anonymous_3867_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'MapCache', 'memoize', 'FUNC_ERROR_TEXT'])
    @Js
    def PyJsHoisted_memoize_(func, resolver, this, arguments, var=var):
        var = Scope({'this':this, 'resolver':resolver, 'func':func, 'arguments':arguments}, var)
        var.registers(['memoized', 'resolver', 'func'])
        if ((var.get('func',throw=False).typeof()!=Js('function')) or (var.get('resolver') and (var.get('resolver',throw=False).typeof()!=Js('function')))):
            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
            raise PyJsTempException
        @Js
        def PyJs_anonymous_3868_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['cache', 'args', 'result', 'key'])
            var.put('args', var.get('arguments'))
            var.put('key', (var.get('resolver').callprop('apply', var.get("this"), var.get('args')) if var.get('resolver') else var.get('args').get('0')))
            var.put('cache', var.get('memoized').get('cache'))
            if var.get('cache').callprop('has', var.get('key')):
                return var.get('cache').callprop('get', var.get('key'))
            var.put('result', var.get('func').callprop('apply', var.get("this"), var.get('args')))
            var.get('memoized').put('cache', var.get('cache').callprop('set', var.get('key'), var.get('result')))
            return var.get('result')
        PyJs_anonymous_3868_._set_name('anonymous')
        var.put('memoized', PyJs_anonymous_3868_)
        var.get('memoized').put('cache', (var.get('memoize').get('Cache') or var.get('MapCache')).create())
        return var.get('memoized')
    PyJsHoisted_memoize_.__name__ = 'memoize'
    var.put('memoize', PyJsHoisted_memoize_)
    var.put('MapCache', var.get('require')(Js('./_MapCache')))
    var.put('FUNC_ERROR_TEXT', Js('Expected a function'))
    pass
    var.get('memoize').put('Cache', var.get('MapCache'))
    var.get('module').put('exports', var.get('memoize'))
PyJs_anonymous_3867_._set_name('anonymous')
PyJs_Object_3869_ = Js({'./_MapCache':Js(289.0)})
@Js
def PyJs_anonymous_3870_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'mergeWith', 'require', 'module', 'baseMerge', 'createAssigner'])
    var.put('baseMerge', var.get('require')(Js('./_baseMerge')))
    var.put('createAssigner', var.get('require')(Js('./_createAssigner')))
    @Js
    def PyJs_anonymous_3871_(object, source, srcIndex, customizer, this, arguments, var=var):
        var = Scope({'source':source, 'customizer':customizer, 'arguments':arguments, 'srcIndex':srcIndex, 'this':this, 'object':object}, var)
        var.registers(['source', 'object', 'srcIndex', 'customizer'])
        var.get('baseMerge')(var.get('object'), var.get('source'), var.get('srcIndex'), var.get('customizer'))
    PyJs_anonymous_3871_._set_name('anonymous')
    var.put('mergeWith', var.get('createAssigner')(PyJs_anonymous_3871_))
    var.get('module').put('exports', var.get('mergeWith'))
PyJs_anonymous_3870_._set_name('anonymous')
PyJs_Object_3872_ = Js({'./_baseMerge':Js(337.0),'./_createAssigner':Js(370.0)})
@Js
def PyJs_anonymous_3873_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'noop', 'exports', 'module'])
    @Js
    def PyJsHoisted_noop_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJsHoisted_noop_.__name__ = 'noop'
    var.put('noop', PyJsHoisted_noop_)
    pass
    var.get('module').put('exports', var.get('noop'))
PyJs_anonymous_3873_._set_name('anonymous')
PyJs_Object_3874_ = Js({})
@Js
def PyJs_anonymous_3875_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['basePropertyDeep', 'baseProperty', 'toKey', 'isKey', 'require', 'exports', 'module', 'property'])
    @Js
    def PyJsHoisted_property_(path, this, arguments, var=var):
        var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
        var.registers(['path'])
        return (var.get('baseProperty')(var.get('toKey')(var.get('path'))) if var.get('isKey')(var.get('path')) else var.get('basePropertyDeep')(var.get('path')))
    PyJsHoisted_property_.__name__ = 'property'
    var.put('property', PyJsHoisted_property_)
    var.put('baseProperty', var.get('require')(Js('./_baseProperty')))
    var.put('basePropertyDeep', var.get('require')(Js('./_basePropertyDeep')))
    var.put('isKey', var.get('require')(Js('./_isKey')))
    var.put('toKey', var.get('require')(Js('./_toKey')))
    pass
    var.get('module').put('exports', var.get('property'))
PyJs_anonymous_3875_._set_name('anonymous')
PyJs_Object_3876_ = Js({'./_baseProperty':Js(340.0),'./_basePropertyDeep':Js(341.0),'./_isKey':Js(403.0),'./_toKey':Js(433.0)})
@Js
def PyJs_anonymous_3877_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['pull', 'exports', 'require', 'module', 'rest', 'pullAll'])
    var.put('pullAll', var.get('require')(Js('./pullAll')))
    var.put('rest', var.get('require')(Js('./rest')))
    var.put('pull', var.get('rest')(var.get('pullAll')))
    var.get('module').put('exports', var.get('pull'))
PyJs_anonymous_3877_._set_name('anonymous')
PyJs_Object_3878_ = Js({'./pullAll':Js(482.0),'./rest':Js(484.0)})
@Js
def PyJs_anonymous_3879_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['pullAll', 'require', 'basePullAll', 'exports', 'module'])
    @Js
    def PyJsHoisted_pullAll_(array, values, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'values':values, 'arguments':arguments}, var)
        var.registers(['array', 'values'])
        return (var.get('basePullAll')(var.get('array'), var.get('values')) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
    PyJsHoisted_pullAll_.__name__ = 'pullAll'
    var.put('pullAll', PyJsHoisted_pullAll_)
    var.put('basePullAll', var.get('require')(Js('./_basePullAll')))
    pass
    var.get('module').put('exports', var.get('pullAll'))
PyJs_anonymous_3879_._set_name('anonymous')
PyJs_Object_3880_ = Js({'./_basePullAll':Js(342.0)})
@Js
def PyJs_anonymous_3881_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'repeat', 'baseRepeat', 'toInteger', 'require', 'module', 'toString', 'isIterateeCall'])
    @Js
    def PyJsHoisted_repeat_(string, n, guard, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'guard':guard, 'string':string, 'n':n}, var)
        var.registers(['guard', 'string', 'n'])
        if (var.get('isIterateeCall')(var.get('string'), var.get('n'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('n'),var.get('undefined'))):
            var.put('n', Js(1.0))
        else:
            var.put('n', var.get('toInteger')(var.get('n')))
        return var.get('baseRepeat')(var.get('toString')(var.get('string')), var.get('n'))
    PyJsHoisted_repeat_.__name__ = 'repeat'
    var.put('repeat', PyJsHoisted_repeat_)
    var.put('baseRepeat', var.get('require')(Js('./_baseRepeat')))
    var.put('isIterateeCall', var.get('require')(Js('./_isIterateeCall')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('toString', var.get('require')(Js('./toString')))
    pass
    var.get('module').put('exports', var.get('repeat'))
PyJs_anonymous_3881_._set_name('anonymous')
PyJs_Object_3882_ = Js({'./_baseRepeat':Js(343.0),'./_isIterateeCall':Js(402.0),'./toInteger':Js(490.0),'./toString':Js(493.0)})
@Js
def PyJs_anonymous_3883_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'nativeMax', 'toInteger', 'rest', 'module', 'apply', 'require', 'FUNC_ERROR_TEXT'])
    @Js
    def PyJsHoisted_rest_(func, start, this, arguments, var=var):
        var = Scope({'this':this, 'start':start, 'arguments':arguments, 'func':func}, var)
        var.registers(['start', 'func'])
        if (var.get('func',throw=False).typeof()!=Js('function')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
            raise PyJsTempException
        var.put('start', var.get('nativeMax')(((var.get('func').get('length')-Js(1.0)) if PyJsStrictEq(var.get('start'),var.get('undefined')) else var.get('toInteger')(var.get('start'))), Js(0.0)))
        @Js
        def PyJs_anonymous_3884_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['otherArgs', 'index', 'length', 'args', 'array'])
            var.put('args', var.get('arguments'))
            var.put('index', (-Js(1.0)))
            var.put('length', var.get('nativeMax')((var.get('args').get('length')-var.get('start')), Js(0.0)))
            var.put('array', var.get('Array')(var.get('length')))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                var.get('array').put(var.get('index'), var.get('args').get((var.get('start')+var.get('index'))))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('start'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return var.get('func').callprop('call', var.get("this"), var.get('array'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    return var.get('func').callprop('call', var.get("this"), var.get('args').get('0'), var.get('array'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return var.get('func').callprop('call', var.get("this"), var.get('args').get('0'), var.get('args').get('1'), var.get('array'))
                SWITCHED = True
                break
            var.put('otherArgs', var.get('Array')((var.get('start')+Js(1.0))))
            var.put('index', (-Js(1.0)))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('start')):
                var.get('otherArgs').put(var.get('index'), var.get('args').get(var.get('index')))
            var.get('otherArgs').put(var.get('start'), var.get('array'))
            return var.get('apply')(var.get('func'), var.get("this"), var.get('otherArgs'))
        PyJs_anonymous_3884_._set_name('anonymous')
        return PyJs_anonymous_3884_
    PyJsHoisted_rest_.__name__ = 'rest'
    var.put('rest', PyJsHoisted_rest_)
    var.put('apply', var.get('require')(Js('./_apply')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('FUNC_ERROR_TEXT', Js('Expected a function'))
    var.put('nativeMax', var.get('Math').get('max'))
    pass
    var.get('module').put('exports', var.get('rest'))
PyJs_anonymous_3883_._set_name('anonymous')
PyJs_Object_3885_ = Js({'./_apply':Js(300.0),'./toInteger':Js(490.0)})
@Js
def PyJs_anonymous_3886_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['isArray', 'exports', 'module', 'baseFlatten', 'require', 'baseOrderBy', 'rest', 'sortBy', 'isFlattenableIteratee', 'isIterateeCall'])
    var.put('baseFlatten', var.get('require')(Js('./_baseFlatten')))
    var.put('baseOrderBy', var.get('require')(Js('./_baseOrderBy')))
    var.put('isArray', var.get('require')(Js('./isArray')))
    var.put('isFlattenableIteratee', var.get('require')(Js('./_isFlattenableIteratee')))
    var.put('isIterateeCall', var.get('require')(Js('./_isIterateeCall')))
    var.put('rest', var.get('require')(Js('./rest')))
    @Js
    def PyJs_anonymous_3887_(collection, iteratees, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'collection':collection, 'iteratees':iteratees}, var)
        var.registers(['length', 'collection', 'iteratees'])
        if (var.get('collection')==var.get("null")):
            return Js([])
        var.put('length', var.get('iteratees').get('length'))
        if ((var.get('length')>Js(1.0)) and var.get('isIterateeCall')(var.get('collection'), var.get('iteratees').get('0'), var.get('iteratees').get('1'))):
            var.put('iteratees', Js([]))
        else:
            if ((var.get('length')>Js(2.0)) and var.get('isIterateeCall')(var.get('iteratees').get('0'), var.get('iteratees').get('1'), var.get('iteratees').get('2'))):
                var.put('iteratees', Js([var.get('iteratees').get('0')]))
        var.put('iteratees', (var.get('iteratees').get('0') if ((var.get('iteratees').get('length')==Js(1.0)) and var.get('isArray')(var.get('iteratees').get('0'))) else var.get('baseFlatten')(var.get('iteratees'), Js(1.0), var.get('isFlattenableIteratee'))))
        return var.get('baseOrderBy')(var.get('collection'), var.get('iteratees'), Js([]))
    PyJs_anonymous_3887_._set_name('anonymous')
    var.put('sortBy', var.get('rest')(PyJs_anonymous_3887_))
    var.get('module').put('exports', var.get('sortBy'))
PyJs_anonymous_3886_._set_name('anonymous')
PyJs_Object_3888_ = Js({'./_baseFlatten':Js(318.0),'./_baseOrderBy':Js(339.0),'./_isFlattenableIteratee':Js(399.0),'./_isIterateeCall':Js(402.0),'./isArray':Js(458.0),'./rest':Js(484.0)})
@Js
def PyJs_anonymous_3889_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['startsWith', 'exports', 'toInteger', 'baseToString', 'baseClamp', 'module', 'toString', 'require'])
    @Js
    def PyJsHoisted_startsWith_(string, target, position, this, arguments, var=var):
        var = Scope({'this':this, 'position':position, 'string':string, 'arguments':arguments, 'target':target}, var)
        var.registers(['position', 'string', 'target'])
        var.put('string', var.get('toString')(var.get('string')))
        var.put('position', var.get('baseClamp')(var.get('toInteger')(var.get('position')), Js(0.0), var.get('string').get('length')))
        return (var.get('string').callprop('lastIndexOf', var.get('baseToString')(var.get('target')), var.get('position'))==var.get('position'))
    PyJsHoisted_startsWith_.__name__ = 'startsWith'
    var.put('startsWith', PyJsHoisted_startsWith_)
    var.put('baseClamp', var.get('require')(Js('./_baseClamp')))
    var.put('baseToString', var.get('require')(Js('./_baseToString')))
    var.put('toInteger', var.get('require')(Js('./toInteger')))
    var.put('toString', var.get('require')(Js('./toString')))
    pass
    var.get('module').put('exports', var.get('startsWith'))
PyJs_anonymous_3889_._set_name('anonymous')
PyJs_Object_3890_ = Js({'./_baseClamp':Js(313.0),'./_baseToString':Js(347.0),'./toInteger':Js(490.0),'./toString':Js(493.0)})
@Js
def PyJs_anonymous_3891_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['stubArray', 'exports', 'require', 'module'])
    @Js
    def PyJsHoisted_stubArray_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js([])
    PyJsHoisted_stubArray_.__name__ = 'stubArray'
    var.put('stubArray', PyJsHoisted_stubArray_)
    pass
    var.get('module').put('exports', var.get('stubArray'))
PyJs_anonymous_3891_._set_name('anonymous')
PyJs_Object_3892_ = Js({})
@Js
def PyJs_anonymous_3893_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'stubFalse', 'exports', 'module'])
    @Js
    def PyJsHoisted_stubFalse_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js(False)
    PyJsHoisted_stubFalse_.__name__ = 'stubFalse'
    var.put('stubFalse', PyJsHoisted_stubFalse_)
    pass
    var.get('module').put('exports', var.get('stubFalse'))
PyJs_anonymous_3893_._set_name('anonymous')
PyJs_Object_3894_ = Js({})
@Js
def PyJs_anonymous_3895_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'INFINITY', 'MAX_INTEGER', 'module', 'toNumber', 'toFinite', 'require'])
    @Js
    def PyJsHoisted_toFinite_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value', 'sign'])
        if var.get('value').neg():
            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else Js(0.0))
        var.put('value', var.get('toNumber')(var.get('value')))
        if (PyJsStrictEq(var.get('value'),var.get('INFINITY')) or PyJsStrictEq(var.get('value'),(-var.get('INFINITY')))):
            var.put('sign', ((-Js(1.0)) if (var.get('value')<Js(0.0)) else Js(1.0)))
            return (var.get('sign')*var.get('MAX_INTEGER'))
        return (var.get('value') if PyJsStrictEq(var.get('value'),var.get('value')) else Js(0.0))
    PyJsHoisted_toFinite_.__name__ = 'toFinite'
    var.put('toFinite', PyJsHoisted_toFinite_)
    var.put('toNumber', var.get('require')(Js('./toNumber')))
    var.put('INFINITY', (Js(1.0)/Js(0.0)))
    var.put('MAX_INTEGER', Js(1.7976931348623157e+308))
    pass
    var.get('module').put('exports', var.get('toFinite'))
PyJs_anonymous_3895_._set_name('anonymous')
PyJs_Object_3896_ = Js({'./toNumber':Js(491.0)})
@Js
def PyJs_anonymous_3897_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'toInteger', 'exports', 'require', 'toFinite'])
    @Js
    def PyJsHoisted_toInteger_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['remainder', 'result', 'value'])
        var.put('result', var.get('toFinite')(var.get('value')))
        var.put('remainder', (var.get('result')%Js(1.0)))
        return (((var.get('result')-var.get('remainder')) if var.get('remainder') else var.get('result')) if PyJsStrictEq(var.get('result'),var.get('result')) else Js(0.0))
    PyJsHoisted_toInteger_.__name__ = 'toInteger'
    var.put('toInteger', PyJsHoisted_toInteger_)
    var.put('toFinite', var.get('require')(Js('./toFinite')))
    pass
    var.get('module').put('exports', var.get('toInteger'))
PyJs_anonymous_3897_._set_name('anonymous')
PyJs_Object_3898_ = Js({'./toFinite':Js(489.0)})
@Js
def PyJs_anonymous_3899_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['reIsBinary', 'exports', 'reIsBadHex', 'freeParseInt', 'NAN', 'require', 'module', 'toNumber', 'reTrim', 'reIsOctal', 'isFunction', 'isSymbol', 'isObject'])
    @Js
    def PyJsHoisted_toNumber_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['other', 'value', 'isBinary'])
        if (var.get('value',throw=False).typeof()==Js('number')):
            return var.get('value')
        if var.get('isSymbol')(var.get('value')):
            return var.get('NAN')
        if var.get('isObject')(var.get('value')):
            var.put('other', (var.get('value').callprop('valueOf') if var.get('isFunction')(var.get('value').get('valueOf')) else var.get('value')))
            var.put('value', ((var.get('other')+Js('')) if var.get('isObject')(var.get('other')) else var.get('other')))
        if (var.get('value',throw=False).typeof()!=Js('string')):
            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else (+var.get('value')))
        var.put('value', var.get('value').callprop('replace', var.get('reTrim'), Js('')))
        var.put('isBinary', var.get('reIsBinary').callprop('test', var.get('value')))
        return (var.get('freeParseInt')(var.get('value').callprop('slice', Js(2.0)), (Js(2.0) if var.get('isBinary') else Js(8.0))) if (var.get('isBinary') or var.get('reIsOctal').callprop('test', var.get('value'))) else (var.get('NAN') if var.get('reIsBadHex').callprop('test', var.get('value')) else (+var.get('value'))))
    PyJsHoisted_toNumber_.__name__ = 'toNumber'
    var.put('toNumber', PyJsHoisted_toNumber_)
    var.put('isFunction', var.get('require')(Js('./isFunction')))
    var.put('isObject', var.get('require')(Js('./isObject')))
    var.put('isSymbol', var.get('require')(Js('./isSymbol')))
    var.put('NAN', (Js(0.0)/Js(0.0)))
    var.put('reTrim', JsRegExp('/^\\s+|\\s+$/g'))
    var.put('reIsBadHex', JsRegExp('/^[-+]0x[0-9a-f]+$/i'))
    var.put('reIsBinary', JsRegExp('/^0b[01]+$/i'))
    var.put('reIsOctal', JsRegExp('/^0o[0-7]+$/i'))
    var.put('freeParseInt', var.get('parseInt'))
    pass
    var.get('module').put('exports', var.get('toNumber'))
PyJs_anonymous_3899_._set_name('anonymous')
PyJs_Object_3900_ = Js({'./isFunction':Js(463.0),'./isObject':Js(467.0),'./isSymbol':Js(472.0)})
@Js
def PyJs_anonymous_3901_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'keysIn', 'toPlainObject', 'copyObject'])
    @Js
    def PyJsHoisted_toPlainObject_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return var.get('copyObject')(var.get('value'), var.get('keysIn')(var.get('value')))
    PyJsHoisted_toPlainObject_.__name__ = 'toPlainObject'
    var.put('toPlainObject', PyJsHoisted_toPlainObject_)
    var.put('copyObject', var.get('require')(Js('./_copyObject')))
    var.put('keysIn', var.get('require')(Js('./keysIn')))
    pass
    var.get('module').put('exports', var.get('toPlainObject'))
PyJs_anonymous_3901_._set_name('anonymous')
PyJs_Object_3902_ = Js({'./_copyObject':Js(367.0),'./keysIn':Js(475.0)})
@Js
def PyJs_anonymous_3903_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'baseToString', 'toString', 'exports', 'module'])
    @Js
    def PyJsHoisted_toString_(value, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
        var.registers(['value'])
        return (Js('') if (var.get('value')==var.get("null")) else var.get('baseToString')(var.get('value')))
    PyJsHoisted_toString_.__name__ = 'toString'
    var.put('toString', PyJsHoisted_toString_)
    var.put('baseToString', var.get('require')(Js('./_baseToString')))
    pass
    var.get('module').put('exports', var.get('toString'))
PyJs_anonymous_3903_._set_name('anonymous')
PyJs_Object_3904_ = Js({'./_baseToString':Js(347.0)})
@Js
def PyJs_anonymous_3905_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'trimEnd', 'require', 'baseToString', 'module', 'reTrimEnd', 'toString', 'stringToArray', 'castSlice', 'charsEndIndex'])
    @Js
    def PyJsHoisted_trimEnd_(string, chars, guard, this, arguments, var=var):
        var = Scope({'this':this, 'chars':chars, 'string':string, 'guard':guard, 'arguments':arguments}, var)
        var.registers(['chars', 'guard', 'end', 'string', 'strSymbols'])
        var.put('string', var.get('toString')(var.get('string')))
        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
            return var.get('string').callprop('replace', var.get('reTrimEnd'), Js(''))
        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
            return var.get('string')
        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
        var.put('end', (var.get('charsEndIndex')(var.get('strSymbols'), var.get('stringToArray')(var.get('chars')))+Js(1.0)))
        return var.get('castSlice')(var.get('strSymbols'), Js(0.0), var.get('end')).callprop('join', Js(''))
    PyJsHoisted_trimEnd_.__name__ = 'trimEnd'
    var.put('trimEnd', PyJsHoisted_trimEnd_)
    var.put('baseToString', var.get('require')(Js('./_baseToString')))
    var.put('castSlice', var.get('require')(Js('./_castSlice')))
    var.put('charsEndIndex', var.get('require')(Js('./_charsEndIndex')))
    var.put('stringToArray', var.get('require')(Js('./_stringToArray')))
    var.put('toString', var.get('require')(Js('./toString')))
    var.put('reTrimEnd', JsRegExp('/\\s+$/'))
    pass
    var.get('module').put('exports', var.get('trimEnd'))
PyJs_anonymous_3905_._set_name('anonymous')
PyJs_Object_3906_ = Js({'./_baseToString':Js(347.0),'./_castSlice':Js(353.0),'./_charsEndIndex':Js(354.0),'./_stringToArray':Js(431.0),'./toString':Js(493.0)})
@Js
def PyJs_anonymous_3907_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['baseUniq', 'require', 'uniq', 'exports', 'module'])
    @Js
    def PyJsHoisted_uniq_(array, this, arguments, var=var):
        var = Scope({'this':this, 'array':array, 'arguments':arguments}, var)
        var.registers(['array'])
        return (var.get('baseUniq')(var.get('array')) if (var.get('array') and var.get('array').get('length')) else Js([]))
    PyJsHoisted_uniq_.__name__ = 'uniq'
    var.put('uniq', PyJsHoisted_uniq_)
    var.put('baseUniq', var.get('require')(Js('./_baseUniq')))
    pass
    var.get('module').put('exports', var.get('uniq'))
PyJs_anonymous_3907_._set_name('anonymous')
PyJs_Object_3908_ = Js({'./_baseUniq':Js(349.0)})
@Js
def PyJs_anonymous_3909_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'keys', 'require', 'module', 'baseValues', 'values'])
    @Js
    def PyJsHoisted_values_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return (var.get('baseValues')(var.get('object'), var.get('keys')(var.get('object'))) if var.get('object') else Js([]))
    PyJsHoisted_values_.__name__ = 'values'
    var.put('values', PyJsHoisted_values_)
    var.put('baseValues', var.get('require')(Js('./_baseValues')))
    var.put('keys', var.get('require')(Js('./keys')))
    pass
    var.get('module').put('exports', var.get('values'))
PyJs_anonymous_3909_._set_name('anonymous')
PyJs_Object_3910_ = Js({'./_baseValues':Js(350.0),'./keys':Js(474.0)})
@Js
def PyJs_anonymous_3911_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'short', 'd', 'h', 'require', 'm', 'long', 'parse', 's', 'module', 'y', 'plural'])
    @Js
    def PyJsHoisted_parse_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['type', 'str', 'match', 'n'])
        var.put('str', (Js('')+var.get('str')))
        if (var.get('str').get('length')>Js(10000.0)):
            return var.get('undefined')
        var.put('match', JsRegExp('/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i').callprop('exec', var.get('str')))
        if var.get('match').neg():
            return var.get('undefined')
        var.put('n', var.get('parseFloat')(var.get('match').get('1')))
        var.put('type', (var.get('match').get('2') or Js('ms')).callprop('toLowerCase'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('years')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('year')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('yrs')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('yr')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('y')):
                SWITCHED = True
                return (var.get('n')*var.get('y'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('days')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('day')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('d')):
                SWITCHED = True
                return (var.get('n')*var.get('d'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('hours')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('hour')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('hrs')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('hr')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('h')):
                SWITCHED = True
                return (var.get('n')*var.get('h'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('minutes')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('minute')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('mins')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('min')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('m')):
                SWITCHED = True
                return (var.get('n')*var.get('m'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('seconds')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('second')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('secs')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('sec')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('s')):
                SWITCHED = True
                return (var.get('n')*var.get('s'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('milliseconds')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('millisecond')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('msecs')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('msec')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('ms')):
                SWITCHED = True
                return var.get('n')
            SWITCHED = True
            break
    PyJsHoisted_parse_.__name__ = 'parse'
    var.put('parse', PyJsHoisted_parse_)
    @Js
    def PyJsHoisted_short_(ms, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'ms':ms}, var)
        var.registers(['ms'])
        if (var.get('ms')>=var.get('d')):
            return (var.get('Math').callprop('round', (var.get('ms')/var.get('d')))+Js('d'))
        if (var.get('ms')>=var.get('h')):
            return (var.get('Math').callprop('round', (var.get('ms')/var.get('h')))+Js('h'))
        if (var.get('ms')>=var.get('m')):
            return (var.get('Math').callprop('round', (var.get('ms')/var.get('m')))+Js('m'))
        if (var.get('ms')>=var.get('s')):
            return (var.get('Math').callprop('round', (var.get('ms')/var.get('s')))+Js('s'))
        return (var.get('ms')+Js('ms'))
    PyJsHoisted_short_.__name__ = 'short'
    var.put('short', PyJsHoisted_short_)
    @Js
    def PyJsHoisted_plural_(ms, n, name, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'name':name, 'ms':ms, 'n':n}, var)
        var.registers(['name', 'ms', 'n'])
        if (var.get('ms')<var.get('n')):
            return var.get('undefined')
        if (var.get('ms')<(var.get('n')*Js(1.5))):
            return ((var.get('Math').callprop('floor', (var.get('ms')/var.get('n')))+Js(' '))+var.get('name'))
        return (((var.get('Math').callprop('ceil', (var.get('ms')/var.get('n')))+Js(' '))+var.get('name'))+Js('s'))
    PyJsHoisted_plural_.__name__ = 'plural'
    var.put('plural', PyJsHoisted_plural_)
    @Js
    def PyJsHoisted_long_(ms, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'ms':ms}, var)
        var.registers(['ms'])
        return ((((var.get('plural')(var.get('ms'), var.get('d'), Js('day')) or var.get('plural')(var.get('ms'), var.get('h'), Js('hour'))) or var.get('plural')(var.get('ms'), var.get('m'), Js('minute'))) or var.get('plural')(var.get('ms'), var.get('s'), Js('second'))) or (var.get('ms')+Js(' ms')))
    PyJsHoisted_long_.__name__ = 'long'
    var.put('long', PyJsHoisted_long_)
    var.put('s', Js(1000.0))
    var.put('m', (var.get('s')*Js(60.0)))
    var.put('h', (var.get('m')*Js(60.0)))
    var.put('d', (var.get('h')*Js(24.0)))
    var.put('y', (var.get('d')*Js(365.25)))
    @Js
    def PyJs_anonymous_3912_(val, options, this, arguments, var=var):
        var = Scope({'this':this, 'options':options, 'val':val, 'arguments':arguments}, var)
        var.registers(['options', 'val'])
        PyJs_Object_3913_ = Js({})
        var.put('options', (var.get('options') or PyJs_Object_3913_))
        if (Js('string')==var.get('val',throw=False).typeof()):
            return var.get('parse')(var.get('val'))
        return (var.get('long')(var.get('val')) if var.get('options').get('long') else var.get('short')(var.get('val')))
    PyJs_anonymous_3912_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_3912_)
    pass
    pass
    pass
    pass
PyJs_anonymous_3911_._set_name('anonymous')
PyJs_Object_3914_ = Js({})
@Js
def PyJs_anonymous_3915_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    @Js
    def PyJs_anonymous_3916_(x, this, arguments, var=var):
        var = Scope({'this':this, 'x':x, 'arguments':arguments}, var)
        var.registers(['x'])
        return PyJsStrictNeq(var.get('x'),var.get('x'))
    PyJs_anonymous_3916_._set_name('anonymous')
    var.get('module').put('exports', (var.get('Number').get('isNaN') or PyJs_anonymous_3916_))
PyJs_anonymous_3915_._set_name('anonymous')
PyJs_Object_3917_ = Js({})
@Js
def PyJs_anonymous_3918_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_3919_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['win32', 'process', 'posix'])
        @Js
        def PyJsHoisted_win32_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['splitDeviceRe', 'device', 'path', 'result', 'isUnc'])
            var.put('splitDeviceRe', JsRegExp('/^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/'))
            var.put('result', var.get('splitDeviceRe').callprop('exec', var.get('path')))
            var.put('device', (var.get('result').get('1') or Js('')))
            var.put('isUnc', (var.get('device').neg().neg() and PyJsStrictNeq(var.get('device').callprop('charAt', Js(1.0)),Js(':'))))
            return (var.get('result').get('2').neg().neg() or var.get('isUnc'))
        PyJsHoisted_win32_.__name__ = 'win32'
        var.put('win32', PyJsHoisted_win32_)
        @Js
        def PyJsHoisted_posix_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path'])
            return PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/'))
        PyJsHoisted_posix_.__name__ = 'posix'
        var.put('posix', PyJsHoisted_posix_)
        Js('use strict')
        pass
        pass
        pass
        pass
        var.get('module').put('exports', (var.get('win32') if PyJsStrictEq(var.get('process').get('platform'),Js('win32')) else var.get('posix')))
        var.get('module').get('exports').put('posix', var.get('posix'))
        var.get('module').get('exports').put('win32', var.get('win32'))
    PyJs_anonymous_3919_._set_name('anonymous')
    PyJs_anonymous_3919_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_3918_._set_name('anonymous')
PyJs_Object_3920_ = Js({'_process':Js(531.0)})
@Js
def PyJs_anonymous_3921_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['rand', 'exports', 'originalCreate', 'defaultCreatorFn', 'uniqueKeys', 'makeUniqueKey', 'originalObject', 'makeAccessor', 'require', 'hasOwn', 'internString', 'numToStr', 'module', 'cloner', 'originalGetOPNs', 'defProp', 'originalDefProp', 'create', 'makeSafeToCall', 'strSlice'])
    @Js
    def PyJsHoisted_defaultCreatorFn_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return var.get('create')(var.get("null"))
    PyJsHoisted_defaultCreatorFn_.__name__ = 'defaultCreatorFn'
    var.put('defaultCreatorFn', PyJsHoisted_defaultCreatorFn_)
    @Js
    def PyJsHoisted_makeAccessor_(secretCreatorFn, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'secretCreatorFn':secretCreatorFn}, var)
        var.registers(['brand', 'register', 'accessor', 'secretCreatorFn', 'passkey'])
        @Js
        def PyJsHoisted_register_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['vault', 'secret', 'object'])
            @Js
            def PyJsHoisted_vault_(key, forget, this, arguments, var=var):
                var = Scope({'this':this, 'forget':forget, 'key':key, 'arguments':arguments}, var)
                var.registers(['forget', 'key'])
                if PyJsStrictEq(var.get('key'),var.get('passkey')):
                    return (var.put('secret', var.get("null")) if var.get('forget') else (var.get('secret') or var.put('secret', var.get('secretCreatorFn')(var.get('object')))))
            PyJsHoisted_vault_.__name__ = 'vault'
            var.put('vault', PyJsHoisted_vault_)
            pass
            pass
            var.get('defProp')(var.get('object'), var.get('brand'), var.get('vault'))
        PyJsHoisted_register_.__name__ = 'register'
        var.put('register', PyJsHoisted_register_)
        @Js
        def PyJsHoisted_accessor_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            if var.get('hasOwn').callprop('call', var.get('object'), var.get('brand')).neg():
                var.get('register')(var.get('object'))
            return var.get('object').callprop(var.get('brand'), var.get('passkey'))
        PyJsHoisted_accessor_.__name__ = 'accessor'
        var.put('accessor', PyJsHoisted_accessor_)
        var.put('brand', var.get('makeUniqueKey')())
        var.put('passkey', var.get('create')(var.get("null")))
        var.put('secretCreatorFn', (var.get('secretCreatorFn') or var.get('defaultCreatorFn')))
        pass
        pass
        @Js
        def PyJs_anonymous_3926_(object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
            var.registers(['object'])
            if var.get('hasOwn').callprop('call', var.get('object'), var.get('brand')):
                var.get('object').callprop(var.get('brand'), var.get('passkey'), var.get('true'))
        PyJs_anonymous_3926_._set_name('anonymous')
        var.get('accessor').put('forget', PyJs_anonymous_3926_)
        return var.get('accessor')
    PyJsHoisted_makeAccessor_.__name__ = 'makeAccessor'
    var.put('makeAccessor', PyJsHoisted_makeAccessor_)
    @Js
    def PyJsHoisted_makeUniqueKey_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['uniqueKey'])
        while 1:
            var.put('uniqueKey', var.get('internString')(var.get('strSlice').callprop('call', var.get('numToStr').callprop('call', var.get('rand')(), Js(36.0)), Js(2.0))))
            if not var.get('hasOwn').callprop('call', var.get('uniqueKeys'), var.get('uniqueKey')):
                break
        return var.get('uniqueKeys').put(var.get('uniqueKey'), var.get('uniqueKey'))
    PyJsHoisted_makeUniqueKey_.__name__ = 'makeUniqueKey'
    var.put('makeUniqueKey', PyJsHoisted_makeUniqueKey_)
    @Js
    def PyJsHoisted_create_(prototype, this, arguments, var=var):
        var = Scope({'this':this, 'prototype':prototype, 'arguments':arguments}, var)
        var.registers(['prototype'])
        if var.get('originalCreate'):
            return var.get('originalCreate').callprop('call', var.get('originalObject'), var.get('prototype'))
        var.get('cloner').put('prototype', (var.get('prototype') or var.get("null")))
        return var.get('cloner').create()
    PyJsHoisted_create_.__name__ = 'create'
    var.put('create', PyJsHoisted_create_)
    @Js
    def PyJsHoisted_internString_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['obj', 'str'])
        PyJs_Object_3924_ = Js({})
        var.put('obj', PyJs_Object_3924_)
        var.get('obj').put(var.get('str'), var.get('true'))
        return var.get('Object').callprop('keys', var.get('obj')).get('0')
    PyJsHoisted_internString_.__name__ = 'internString'
    var.put('internString', PyJsHoisted_internString_)
    @Js
    def PyJsHoisted_defProp_(obj, name, value, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'name':name, 'value':value, 'arguments':arguments}, var)
        var.registers(['obj', 'name', 'value'])
        if var.get('originalDefProp'):
            try:
                PyJs_Object_3922_ = Js({'value':var.get('value')})
                var.get('originalDefProp').callprop('call', var.get('originalObject'), var.get('obj'), var.get('name'), PyJs_Object_3922_)
            except PyJsException as PyJsTempException:
                PyJsHolder_646566696e6550726f7065727479497342726f6b656e496e494538_59123052 = var.own.get('definePropertyIsBrokenInIE8')
                var.force_own_put('definePropertyIsBrokenInIE8', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('obj').put(var.get('name'), var.get('value'))
                finally:
                    if PyJsHolder_646566696e6550726f7065727479497342726f6b656e496e494538_59123052 is not None:
                        var.own['definePropertyIsBrokenInIE8'] = PyJsHolder_646566696e6550726f7065727479497342726f6b656e496e494538_59123052
                    else:
                        del var.own['definePropertyIsBrokenInIE8']
                    del PyJsHolder_646566696e6550726f7065727479497342726f6b656e496e494538_59123052
        else:
            var.get('obj').put(var.get('name'), var.get('value'))
    PyJsHoisted_defProp_.__name__ = 'defProp'
    var.put('defProp', PyJsHoisted_defProp_)
    @Js
    def PyJsHoisted_makeSafeToCall_(fun, this, arguments, var=var):
        var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
        var.registers(['fun'])
        if var.get('fun'):
            var.get('defProp')(var.get('fun'), Js('call'), var.get('fun').get('call'))
            var.get('defProp')(var.get('fun'), Js('apply'), var.get('fun').get('apply'))
        return var.get('fun')
    PyJsHoisted_makeSafeToCall_.__name__ = 'makeSafeToCall'
    var.put('makeSafeToCall', PyJsHoisted_makeSafeToCall_)
    Js('use strict')
    var.put('originalObject', var.get('Object'))
    var.put('originalDefProp', var.get('Object').get('defineProperty'))
    var.put('originalCreate', var.get('Object').get('create'))
    pass
    pass
    var.get('makeSafeToCall')(var.get('originalDefProp'))
    var.get('makeSafeToCall')(var.get('originalCreate'))
    var.put('hasOwn', var.get('makeSafeToCall')(var.get('Object').get('prototype').get('hasOwnProperty')))
    var.put('numToStr', var.get('makeSafeToCall')(var.get('Number').get('prototype').get('toString')))
    var.put('strSlice', var.get('makeSafeToCall')(var.get('String').get('prototype').get('slice')))
    @Js
    def PyJs_anonymous_3923_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJs_anonymous_3923_._set_name('anonymous')
    var.put('cloner', PyJs_anonymous_3923_)
    pass
    var.put('rand', var.get('Math').get('random'))
    var.put('uniqueKeys', var.get('create')(var.get("null")))
    pass
    pass
    var.get('defProp')(var.get('exports'), Js('makeUniqueKey'), var.get('makeUniqueKey'))
    var.put('originalGetOPNs', var.get('Object').get('getOwnPropertyNames'))
    @Js
    def PyJs_getOwnPropertyNames_3925_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_3925_}, var)
        var.registers(['src', 'dst', 'object', 'names', 'len'])
        #for JS loop
        var.put('names', var.get('originalGetOPNs')(var.get('object')))
        var.put('src', Js(0.0))
        var.put('dst', Js(0.0))
        var.put('len', var.get('names').get('length'))
        while (var.get('src')<var.get('len')):
            try:
                if var.get('hasOwn').callprop('call', var.get('uniqueKeys'), var.get('names').get(var.get('src'))).neg():
                    if (var.get('src')>var.get('dst')):
                        var.get('names').put(var.get('dst'), var.get('names').get(var.get('src')))
                    var.put('dst',Js(var.get('dst').to_number())+Js(1))
            finally:
                    var.put('src',Js(var.get('src').to_number())+Js(1))
        var.get('names').put('length', var.get('dst'))
        return var.get('names')
    PyJs_getOwnPropertyNames_3925_._set_name('getOwnPropertyNames')
    var.get('Object').put('getOwnPropertyNames', PyJs_getOwnPropertyNames_3925_)
    pass
    pass
    var.get('defProp')(var.get('exports'), Js('makeAccessor'), var.get('makeAccessor'))
PyJs_anonymous_3921_._set_name('anonymous')
PyJs_Object_3927_ = Js({})
@Js
def PyJs_anonymous_3928_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_3929_ = Js({})
    @Js
    def PyJs_anonymous_3930_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['global'])
        pass
        @Js
        def PyJs_anonymous_3931_(root, this, arguments, var=var):
            var = Scope({'this':this, 'root':root, 'arguments':arguments}, var)
            var.registers(['dataIsEmpty', 'zeroes', 'codePointToString', 'freeModule', 'HIGH_SURROGATE_MIN', 'dataRemove', 'freeExports', 'splitAtBMP', 'dataIntersection', 'lowSurrogate', 'dataContains', 'dataFromCodePoints', 'dataAddData', 'createBMPCharacterClasses', 'createSurrogateCharacterClasses', 'createUnicodeCharacterClasses', 'ERRORS', 'dataToArray', 'floor', 'regenerate', 'hex', 'surrogateSet', 'optimizeByLowSurrogates', 'stringFromCharCode', 'toString', 'dataRemoveData', 'freeGlobal', 'pad', 'LOW_SURROGATE_MAX', 'isArray', 'HIGH_SURROGATE_MAX', 'extend', 'symbolToCodePoint', 'object', 'createCharacterClassesFromData', 'LOW_SURROGATE_MIN', 'slice', 'hasOwnProperty', 'dataRemoveRange', 'isNumber', 'dataAdd', 'highSurrogate', 'codePointToStringUnicode', 'proto', 'dataAddRange', 'regexNull', 'dataIsSingleton', 'root', 'optimizeSurrogateMappings', 'forEach'])
            var.put('freeExports', ((var.get('exports',throw=False).typeof()==Js('object')) and var.get('exports')))
            var.put('freeModule', ((((var.get('module',throw=False).typeof()==Js('object')) and var.get('module')) and (var.get('module').get('exports')==var.get('freeExports'))) and var.get('module')))
            var.put('freeGlobal', ((var.get('global',throw=False).typeof()==Js('object')) and var.get('global')))
            if (PyJsStrictEq(var.get('freeGlobal').get('global'),var.get('freeGlobal')) or PyJsStrictEq(var.get('freeGlobal').get('window'),var.get('freeGlobal'))):
                var.put('root', var.get('freeGlobal'))
            PyJs_Object_3932_ = Js({'rangeOrder':(Js('A range\u2019s `stop` value must be greater than or equal ')+Js('to the `start` value.')),'codePointRange':(Js('Invalid code point value. Code points range from ')+Js('U+000000 to U+10FFFF.'))})
            var.put('ERRORS', PyJs_Object_3932_)
            var.put('HIGH_SURROGATE_MIN', Js(55296))
            var.put('HIGH_SURROGATE_MAX', Js(56319))
            var.put('LOW_SURROGATE_MIN', Js(56320))
            var.put('LOW_SURROGATE_MAX', Js(57343))
            var.put('regexNull', JsRegExp('/\\\\x00([^0123456789]|$)/g'))
            PyJs_Object_3933_ = Js({})
            var.put('object', PyJs_Object_3933_)
            var.put('hasOwnProperty', var.get('object').get('hasOwnProperty'))
            @Js
            def PyJs_anonymous_3934_(destination, source, this, arguments, var=var):
                var = Scope({'this':this, 'source':source, 'destination':destination, 'arguments':arguments}, var)
                var.registers(['source', 'destination', 'key'])
                pass
                for PyJsTemp in var.get('source'):
                    var.put('key', PyJsTemp)
                    if var.get('hasOwnProperty').callprop('call', var.get('source'), var.get('key')):
                        var.get('destination').put(var.get('key'), var.get('source').get(var.get('key')))
                return var.get('destination')
            PyJs_anonymous_3934_._set_name('anonymous')
            var.put('extend', PyJs_anonymous_3934_)
            @Js
            def PyJs_anonymous_3935_(array, callback, this, arguments, var=var):
                var = Scope({'this':this, 'callback':callback, 'array':array, 'arguments':arguments}, var)
                var.registers(['index', 'length', 'array', 'callback'])
                var.put('index', (-Js(1.0)))
                var.put('length', var.get('array').get('length'))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.get('callback')(var.get('array').get(var.get('index')), var.get('index'))
            PyJs_anonymous_3935_._set_name('anonymous')
            var.put('forEach', PyJs_anonymous_3935_)
            var.put('toString', var.get('object').get('toString'))
            @Js
            def PyJs_anonymous_3936_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return (var.get('toString').callprop('call', var.get('value'))==Js('[object Array]'))
            PyJs_anonymous_3936_._set_name('anonymous')
            var.put('isArray', PyJs_anonymous_3936_)
            @Js
            def PyJs_anonymous_3937_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((var.get('value',throw=False).typeof()==Js('number')) or (var.get('toString').callprop('call', var.get('value'))==Js('[object Number]')))
            PyJs_anonymous_3937_._set_name('anonymous')
            var.put('isNumber', PyJs_anonymous_3937_)
            var.put('zeroes', Js('0000'))
            @Js
            def PyJs_anonymous_3938_(number, totalCharacters, this, arguments, var=var):
                var = Scope({'this':this, 'totalCharacters':totalCharacters, 'number':number, 'arguments':arguments}, var)
                var.registers(['totalCharacters', 'string', 'number'])
                var.put('string', var.get('String')(var.get('number')))
                return ((var.get('zeroes')+var.get('string')).callprop('slice', (-var.get('totalCharacters'))) if (var.get('string').get('length')<var.get('totalCharacters')) else var.get('string'))
            PyJs_anonymous_3938_._set_name('anonymous')
            var.put('pad', PyJs_anonymous_3938_)
            @Js
            def PyJs_anonymous_3939_(number, this, arguments, var=var):
                var = Scope({'this':this, 'number':number, 'arguments':arguments}, var)
                var.registers(['number'])
                return var.get('Number')(var.get('number')).callprop('toString', Js(16.0)).callprop('toUpperCase')
            PyJs_anonymous_3939_._set_name('anonymous')
            var.put('hex', PyJs_anonymous_3939_)
            var.put('slice', Js([]).get('slice'))
            @Js
            def PyJs_anonymous_3940_(codePoints, this, arguments, var=var):
                var = Scope({'codePoints':codePoints, 'this':this, 'arguments':arguments}, var)
                var.registers(['tmp', 'index', 'max', 'isStart', 'length', 'result', 'codePoints', 'previous'])
                var.put('index', (-Js(1.0)))
                var.put('length', var.get('codePoints').get('length'))
                var.put('max', (var.get('length')-Js(1.0)))
                var.put('result', Js([]))
                var.put('isStart', var.get('true'))
                pass
                var.put('previous', Js(0.0))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.put('tmp', var.get('codePoints').get(var.get('index')))
                    if var.get('isStart'):
                        var.get('result').callprop('push', var.get('tmp'))
                        var.put('previous', var.get('tmp'))
                        var.put('isStart', Js(False))
                    else:
                        if (var.get('tmp')==(var.get('previous')+Js(1.0))):
                            if (var.get('index')!=var.get('max')):
                                var.put('previous', var.get('tmp'))
                                continue
                            else:
                                var.put('isStart', var.get('true'))
                                var.get('result').callprop('push', (var.get('tmp')+Js(1.0)))
                        else:
                            var.get('result').callprop('push', (var.get('previous')+Js(1.0)), var.get('tmp'))
                            var.put('previous', var.get('tmp'))
                if var.get('isStart').neg():
                    var.get('result').callprop('push', (var.get('tmp')+Js(1.0)))
                return var.get('result')
            PyJs_anonymous_3940_._set_name('anonymous')
            var.put('dataFromCodePoints', PyJs_anonymous_3940_)
            @Js
            def PyJs_anonymous_3941_(data, codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'codePoint', 'end', 'start', 'length', 'data'])
                var.put('index', Js(0.0))
                pass
                pass
                var.put('length', var.get('data').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', var.get('data').get((var.get('index')+Js(1.0))))
                    if ((var.get('codePoint')>=var.get('start')) and (var.get('codePoint')<var.get('end'))):
                        if (var.get('codePoint')==var.get('start')):
                            if (var.get('end')==(var.get('start')+Js(1.0))):
                                var.get('data').callprop('splice', var.get('index'), Js(2.0))
                                return var.get('data')
                            else:
                                var.get('data').put(var.get('index'), (var.get('codePoint')+Js(1.0)))
                                return var.get('data')
                        else:
                            if (var.get('codePoint')==(var.get('end')-Js(1.0))):
                                var.get('data').put((var.get('index')+Js(1.0)), var.get('codePoint'))
                                return var.get('data')
                            else:
                                var.get('data').callprop('splice', var.get('index'), Js(2.0), var.get('start'), var.get('codePoint'), (var.get('codePoint')+Js(1.0)), var.get('end'))
                                return var.get('data')
                    var.put('index', Js(2.0), '+')
                return var.get('data')
            PyJs_anonymous_3941_._set_name('anonymous')
            var.put('dataRemove', PyJs_anonymous_3941_)
            @Js
            def PyJs_anonymous_3942_(data, rangeStart, rangeEnd, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments, 'rangeEnd':rangeEnd, 'rangeStart':rangeStart}, var)
                var.registers(['index', 'end', 'rangeEnd', 'rangeStart', 'start', 'data'])
                if (var.get('rangeEnd')<var.get('rangeStart')):
                    PyJsTempException = JsToPyException(var.get('Error')(var.get('ERRORS').get('rangeOrder')))
                    raise PyJsTempException
                var.put('index', Js(0.0))
                pass
                pass
                while (var.get('index')<var.get('data').get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', (var.get('data').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')>var.get('rangeEnd')):
                        return var.get('data')
                    if ((var.get('rangeStart')<=var.get('start')) and (var.get('rangeEnd')>=var.get('end'))):
                        var.get('data').callprop('splice', var.get('index'), Js(2.0))
                        continue
                    if ((var.get('rangeStart')>=var.get('start')) and (var.get('rangeEnd')<var.get('end'))):
                        if (var.get('rangeStart')==var.get('start')):
                            var.get('data').put(var.get('index'), (var.get('rangeEnd')+Js(1.0)))
                            var.get('data').put((var.get('index')+Js(1.0)), (var.get('end')+Js(1.0)))
                            return var.get('data')
                        var.get('data').callprop('splice', var.get('index'), Js(2.0), var.get('start'), var.get('rangeStart'), (var.get('rangeEnd')+Js(1.0)), (var.get('end')+Js(1.0)))
                        return var.get('data')
                    if ((var.get('rangeStart')>=var.get('start')) and (var.get('rangeStart')<=var.get('end'))):
                        var.get('data').put((var.get('index')+Js(1.0)), var.get('rangeStart'))
                    else:
                        if ((var.get('rangeEnd')>=var.get('start')) and (var.get('rangeEnd')<=var.get('end'))):
                            var.get('data').put(var.get('index'), (var.get('rangeEnd')+Js(1.0)))
                            return var.get('data')
                    var.put('index', Js(2.0), '+')
                return var.get('data')
            PyJs_anonymous_3942_._set_name('anonymous')
            var.put('dataRemoveRange', PyJs_anonymous_3942_)
            @Js
            def PyJs_anonymous_3943_(data, codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'codePoint', 'end', 'lastIndex', 'start', 'length', 'data'])
                var.put('index', Js(0.0))
                pass
                pass
                var.put('lastIndex', var.get("null"))
                var.put('length', var.get('data').get('length'))
                if ((var.get('codePoint')<Js(0)) or (var.get('codePoint')>Js(1114111))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('ERRORS').get('codePointRange')))
                    raise PyJsTempException
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', var.get('data').get((var.get('index')+Js(1.0))))
                    if ((var.get('codePoint')>=var.get('start')) and (var.get('codePoint')<var.get('end'))):
                        return var.get('data')
                    if (var.get('codePoint')==(var.get('start')-Js(1.0))):
                        var.get('data').put(var.get('index'), var.get('codePoint'))
                        return var.get('data')
                    if (var.get('start')>var.get('codePoint')):
                        var.get('data').callprop('splice', ((var.get('lastIndex')+Js(2.0)) if (var.get('lastIndex')!=var.get("null")) else Js(0.0)), Js(0.0), var.get('codePoint'), (var.get('codePoint')+Js(1.0)))
                        return var.get('data')
                    if (var.get('codePoint')==var.get('end')):
                        if ((var.get('codePoint')+Js(1.0))==var.get('data').get((var.get('index')+Js(2.0)))):
                            var.get('data').callprop('splice', var.get('index'), Js(4.0), var.get('start'), var.get('data').get((var.get('index')+Js(3.0))))
                            return var.get('data')
                        var.get('data').put((var.get('index')+Js(1.0)), (var.get('codePoint')+Js(1.0)))
                        return var.get('data')
                    var.put('lastIndex', var.get('index'))
                    var.put('index', Js(2.0), '+')
                var.get('data').callprop('push', var.get('codePoint'), (var.get('codePoint')+Js(1.0)))
                return var.get('data')
            PyJs_anonymous_3943_._set_name('anonymous')
            var.put('dataAdd', PyJs_anonymous_3943_)
            @Js
            def PyJs_anonymous_3944_(dataA, dataB, this, arguments, var=var):
                var = Scope({'this':this, 'dataA':dataA, 'arguments':arguments, 'dataB':dataB}, var)
                var.registers(['index', 'end', 'dataA', 'dataB', 'start', 'length', 'data'])
                var.put('index', Js(0.0))
                pass
                pass
                var.put('data', var.get('dataA').callprop('slice'))
                var.put('length', var.get('dataB').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('dataB').get(var.get('index')))
                    var.put('end', (var.get('dataB').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')==var.get('end')):
                        var.put('data', var.get('dataAdd')(var.get('data'), var.get('start')))
                    else:
                        var.put('data', var.get('dataAddRange')(var.get('data'), var.get('start'), var.get('end')))
                    var.put('index', Js(2.0), '+')
                return var.get('data')
            PyJs_anonymous_3944_._set_name('anonymous')
            var.put('dataAddData', PyJs_anonymous_3944_)
            @Js
            def PyJs_anonymous_3945_(dataA, dataB, this, arguments, var=var):
                var = Scope({'this':this, 'dataA':dataA, 'arguments':arguments, 'dataB':dataB}, var)
                var.registers(['index', 'end', 'dataA', 'dataB', 'start', 'length', 'data'])
                var.put('index', Js(0.0))
                pass
                pass
                var.put('data', var.get('dataA').callprop('slice'))
                var.put('length', var.get('dataB').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('dataB').get(var.get('index')))
                    var.put('end', (var.get('dataB').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')==var.get('end')):
                        var.put('data', var.get('dataRemove')(var.get('data'), var.get('start')))
                    else:
                        var.put('data', var.get('dataRemoveRange')(var.get('data'), var.get('start'), var.get('end')))
                    var.put('index', Js(2.0), '+')
                return var.get('data')
            PyJs_anonymous_3945_._set_name('anonymous')
            var.put('dataRemoveData', PyJs_anonymous_3945_)
            @Js
            def PyJs_anonymous_3946_(data, rangeStart, rangeEnd, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments, 'rangeEnd':rangeEnd, 'rangeStart':rangeStart}, var)
                var.registers(['index', 'added', 'end', 'rangeEnd', 'rangeStart', 'start', 'length', 'data'])
                if (var.get('rangeEnd')<var.get('rangeStart')):
                    PyJsTempException = JsToPyException(var.get('Error')(var.get('ERRORS').get('rangeOrder')))
                    raise PyJsTempException
                if ((((var.get('rangeStart')<Js(0)) or (var.get('rangeStart')>Js(1114111))) or (var.get('rangeEnd')<Js(0))) or (var.get('rangeEnd')>Js(1114111))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('ERRORS').get('codePointRange')))
                    raise PyJsTempException
                var.put('index', Js(0.0))
                pass
                pass
                var.put('added', Js(False))
                var.put('length', var.get('data').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', var.get('data').get((var.get('index')+Js(1.0))))
                    if var.get('added'):
                        if (var.get('start')==(var.get('rangeEnd')+Js(1.0))):
                            var.get('data').callprop('splice', (var.get('index')-Js(1.0)), Js(2.0))
                            return var.get('data')
                        if (var.get('start')>var.get('rangeEnd')):
                            return var.get('data')
                        if ((var.get('start')>=var.get('rangeStart')) and (var.get('start')<=var.get('rangeEnd'))):
                            if ((var.get('end')>var.get('rangeStart')) and ((var.get('end')-Js(1.0))<=var.get('rangeEnd'))):
                                var.get('data').callprop('splice', var.get('index'), Js(2.0))
                                var.put('index', Js(2.0), '-')
                            else:
                                var.get('data').callprop('splice', (var.get('index')-Js(1.0)), Js(2.0))
                                var.put('index', Js(2.0), '-')
                    else:
                        if (var.get('start')==(var.get('rangeEnd')+Js(1.0))):
                            var.get('data').put(var.get('index'), var.get('rangeStart'))
                            return var.get('data')
                        else:
                            if (var.get('start')>var.get('rangeEnd')):
                                var.get('data').callprop('splice', var.get('index'), Js(0.0), var.get('rangeStart'), (var.get('rangeEnd')+Js(1.0)))
                                return var.get('data')
                            else:
                                if (((var.get('rangeStart')>=var.get('start')) and (var.get('rangeStart')<var.get('end'))) and ((var.get('rangeEnd')+Js(1.0))<=var.get('end'))):
                                    return var.get('data')
                                else:
                                    if (((var.get('rangeStart')>=var.get('start')) and (var.get('rangeStart')<var.get('end'))) or (var.get('end')==var.get('rangeStart'))):
                                        var.get('data').put((var.get('index')+Js(1.0)), (var.get('rangeEnd')+Js(1.0)))
                                        var.put('added', var.get('true'))
                                    else:
                                        if ((var.get('rangeStart')<=var.get('start')) and ((var.get('rangeEnd')+Js(1.0))>=var.get('end'))):
                                            var.get('data').put(var.get('index'), var.get('rangeStart'))
                                            var.get('data').put((var.get('index')+Js(1.0)), (var.get('rangeEnd')+Js(1.0)))
                                            var.put('added', var.get('true'))
                    var.put('index', Js(2.0), '+')
                if var.get('added').neg():
                    var.get('data').callprop('push', var.get('rangeStart'), (var.get('rangeEnd')+Js(1.0)))
                return var.get('data')
            PyJs_anonymous_3946_._set_name('anonymous')
            var.put('dataAddRange', PyJs_anonymous_3946_)
            @Js
            def PyJs_anonymous_3947_(data, codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'codePoint', 'end', 'start', 'length', 'data'])
                var.put('index', Js(0.0))
                var.put('length', var.get('data').get('length'))
                var.put('start', var.get('data').get(var.get('index')))
                var.put('end', var.get('data').get((var.get('length')-Js(1.0))))
                if (var.get('length')>=Js(2.0)):
                    if ((var.get('codePoint')<var.get('start')) or (var.get('codePoint')>var.get('end'))):
                        return Js(False)
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', var.get('data').get((var.get('index')+Js(1.0))))
                    if ((var.get('codePoint')>=var.get('start')) and (var.get('codePoint')<var.get('end'))):
                        return var.get('true')
                    var.put('index', Js(2.0), '+')
                return Js(False)
            PyJs_anonymous_3947_._set_name('anonymous')
            var.put('dataContains', PyJs_anonymous_3947_)
            @Js
            def PyJs_anonymous_3948_(data, codePoints, this, arguments, var=var):
                var = Scope({'codePoints':codePoints, 'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'codePoint', 'length', 'result', 'codePoints', 'data'])
                var.put('index', Js(0.0))
                var.put('length', var.get('codePoints').get('length'))
                pass
                var.put('result', Js([]))
                while (var.get('index')<var.get('length')):
                    var.put('codePoint', var.get('codePoints').get(var.get('index')))
                    if var.get('dataContains')(var.get('data'), var.get('codePoint')):
                        var.get('result').callprop('push', var.get('codePoint'))
                    var.put('index',Js(var.get('index').to_number())+Js(1))
                return var.get('dataFromCodePoints')(var.get('result'))
            PyJs_anonymous_3948_._set_name('anonymous')
            var.put('dataIntersection', PyJs_anonymous_3948_)
            @Js
            def PyJs_anonymous_3949_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['data'])
                return var.get('data').get('length').neg()
            PyJs_anonymous_3949_._set_name('anonymous')
            var.put('dataIsEmpty', PyJs_anonymous_3949_)
            @Js
            def PyJs_anonymous_3950_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['data'])
                return ((var.get('data').get('length')==Js(2.0)) and ((var.get('data').get('0')+Js(1.0))==var.get('data').get('1')))
            PyJs_anonymous_3950_._set_name('anonymous')
            var.put('dataIsSingleton', PyJs_anonymous_3950_)
            @Js
            def PyJs_anonymous_3951_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'end', 'start', 'length', 'result', 'data'])
                var.put('index', Js(0.0))
                pass
                pass
                var.put('result', Js([]))
                var.put('length', var.get('data').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', var.get('data').get((var.get('index')+Js(1.0))))
                    while (var.get('start')<var.get('end')):
                        var.get('result').callprop('push', var.get('start'))
                        var.put('start',Js(var.get('start').to_number())+Js(1))
                    var.put('index', Js(2.0), '+')
                return var.get('result')
            PyJs_anonymous_3951_._set_name('anonymous')
            var.put('dataToArray', PyJs_anonymous_3951_)
            var.put('floor', var.get('Math').get('floor'))
            @Js
            def PyJs_anonymous_3952_(codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
                var.registers(['codePoint'])
                return var.get('parseInt')((var.get('floor')(((var.get('codePoint')-Js(65536))/Js(1024)))+var.get('HIGH_SURROGATE_MIN')), Js(10.0))
            PyJs_anonymous_3952_._set_name('anonymous')
            var.put('highSurrogate', PyJs_anonymous_3952_)
            @Js
            def PyJs_anonymous_3953_(codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
                var.registers(['codePoint'])
                return var.get('parseInt')((((var.get('codePoint')-Js(65536))%Js(1024))+var.get('LOW_SURROGATE_MIN')), Js(10.0))
            PyJs_anonymous_3953_._set_name('anonymous')
            var.put('lowSurrogate', PyJs_anonymous_3953_)
            var.put('stringFromCharCode', var.get('String').get('fromCharCode'))
            @Js
            def PyJs_anonymous_3954_(codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
                var.registers(['codePoint', 'string'])
                pass
                if (var.get('codePoint')==Js(9)):
                    var.put('string', Js('\\t'))
                else:
                    if (var.get('codePoint')==Js(10)):
                        var.put('string', Js('\\n'))
                    else:
                        if (var.get('codePoint')==Js(12)):
                            var.put('string', Js('\\f'))
                        else:
                            if (var.get('codePoint')==Js(13)):
                                var.put('string', Js('\\r'))
                            else:
                                if (var.get('codePoint')==Js(92)):
                                    var.put('string', Js('\\\\'))
                                else:
                                    if (((((((var.get('codePoint')==Js(36)) or ((var.get('codePoint')>=Js(40)) and (var.get('codePoint')<=Js(43)))) or (var.get('codePoint')==Js(45))) or (var.get('codePoint')==Js(46))) or (var.get('codePoint')==Js(63))) or ((var.get('codePoint')>=Js(91)) and (var.get('codePoint')<=Js(94)))) or ((var.get('codePoint')>=Js(123)) and (var.get('codePoint')<=Js(125)))):
                                        var.put('string', (Js('\\')+var.get('stringFromCharCode')(var.get('codePoint'))))
                                    else:
                                        if ((var.get('codePoint')>=Js(32)) and (var.get('codePoint')<=Js(126))):
                                            var.put('string', var.get('stringFromCharCode')(var.get('codePoint')))
                                        else:
                                            if (var.get('codePoint')<=Js(255)):
                                                var.put('string', (Js('\\x')+var.get('pad')(var.get('hex')(var.get('codePoint')), Js(2.0))))
                                            else:
                                                var.put('string', (Js('\\u')+var.get('pad')(var.get('hex')(var.get('codePoint')), Js(4.0))))
                return var.get('string')
            PyJs_anonymous_3954_._set_name('anonymous')
            var.put('codePointToString', PyJs_anonymous_3954_)
            @Js
            def PyJs_anonymous_3955_(codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
                var.registers(['codePoint'])
                if (var.get('codePoint')<=Js(65535)):
                    return var.get('codePointToString')(var.get('codePoint'))
                return ((Js('\\u{')+var.get('codePoint').callprop('toString', Js(16.0)).callprop('toUpperCase'))+Js('}'))
            PyJs_anonymous_3955_._set_name('anonymous')
            var.put('codePointToStringUnicode', PyJs_anonymous_3955_)
            @Js
            def PyJs_anonymous_3956_(symbol, this, arguments, var=var):
                var = Scope({'this':this, 'symbol':symbol, 'arguments':arguments}, var)
                var.registers(['symbol', 'length', 'second', 'first'])
                var.put('length', var.get('symbol').get('length'))
                var.put('first', var.get('symbol').callprop('charCodeAt', Js(0.0)))
                pass
                if (((var.get('first')>=var.get('HIGH_SURROGATE_MIN')) and (var.get('first')<=var.get('HIGH_SURROGATE_MAX'))) and (var.get('length')>Js(1.0))):
                    var.put('second', var.get('symbol').callprop('charCodeAt', Js(1.0)))
                    return (((((var.get('first')-var.get('HIGH_SURROGATE_MIN'))*Js(1024))+var.get('second'))-var.get('LOW_SURROGATE_MIN'))+Js(65536))
                return var.get('first')
            PyJs_anonymous_3956_._set_name('anonymous')
            var.put('symbolToCodePoint', PyJs_anonymous_3956_)
            @Js
            def PyJs_anonymous_3957_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'end', 'start', 'length', 'result', 'data'])
                var.put('result', Js(''))
                var.put('index', Js(0.0))
                pass
                pass
                var.put('length', var.get('data').get('length'))
                if var.get('dataIsSingleton')(var.get('data')):
                    return var.get('codePointToString')(var.get('data').get('0'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', (var.get('data').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')==var.get('end')):
                        var.put('result', var.get('codePointToString')(var.get('start')), '+')
                    else:
                        if ((var.get('start')+Js(1.0))==var.get('end')):
                            var.put('result', (var.get('codePointToString')(var.get('start'))+var.get('codePointToString')(var.get('end'))), '+')
                        else:
                            var.put('result', ((var.get('codePointToString')(var.get('start'))+Js('-'))+var.get('codePointToString')(var.get('end'))), '+')
                    var.put('index', Js(2.0), '+')
                return ((Js('[')+var.get('result'))+Js(']'))
            PyJs_anonymous_3957_._set_name('anonymous')
            var.put('createBMPCharacterClasses', PyJs_anonymous_3957_)
            @Js
            def PyJs_anonymous_3958_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'end', 'start', 'length', 'result', 'data'])
                var.put('result', Js(''))
                var.put('index', Js(0.0))
                pass
                pass
                var.put('length', var.get('data').get('length'))
                if var.get('dataIsSingleton')(var.get('data')):
                    return var.get('codePointToStringUnicode')(var.get('data').get('0'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', (var.get('data').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')==var.get('end')):
                        var.put('result', var.get('codePointToStringUnicode')(var.get('start')), '+')
                    else:
                        if ((var.get('start')+Js(1.0))==var.get('end')):
                            var.put('result', (var.get('codePointToStringUnicode')(var.get('start'))+var.get('codePointToStringUnicode')(var.get('end'))), '+')
                        else:
                            var.put('result', ((var.get('codePointToStringUnicode')(var.get('start'))+Js('-'))+var.get('codePointToStringUnicode')(var.get('end'))), '+')
                    var.put('index', Js(2.0), '+')
                return ((Js('[')+var.get('result'))+Js(']'))
            PyJs_anonymous_3958_._set_name('anonymous')
            var.put('createUnicodeCharacterClasses', PyJs_anonymous_3958_)
            @Js
            def PyJs_anonymous_3959_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'end', 'loneLowSurrogates', 'length', 'start', 'bmp', 'astral', 'data', 'loneHighSurrogates'])
                var.put('loneHighSurrogates', Js([]))
                var.put('loneLowSurrogates', Js([]))
                var.put('bmp', Js([]))
                var.put('astral', Js([]))
                var.put('index', Js(0.0))
                pass
                pass
                var.put('length', var.get('data').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', (var.get('data').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    if (var.get('start')<var.get('HIGH_SURROGATE_MIN')):
                        if (var.get('end')<var.get('HIGH_SURROGATE_MIN')):
                            var.get('bmp').callprop('push', var.get('start'), (var.get('end')+Js(1.0)))
                        if ((var.get('end')>=var.get('HIGH_SURROGATE_MIN')) and (var.get('end')<=var.get('HIGH_SURROGATE_MAX'))):
                            var.get('bmp').callprop('push', var.get('start'), var.get('HIGH_SURROGATE_MIN'))
                            var.get('loneHighSurrogates').callprop('push', var.get('HIGH_SURROGATE_MIN'), (var.get('end')+Js(1.0)))
                        if ((var.get('end')>=var.get('LOW_SURROGATE_MIN')) and (var.get('end')<=var.get('LOW_SURROGATE_MAX'))):
                            var.get('bmp').callprop('push', var.get('start'), var.get('HIGH_SURROGATE_MIN'))
                            var.get('loneHighSurrogates').callprop('push', var.get('HIGH_SURROGATE_MIN'), (var.get('HIGH_SURROGATE_MAX')+Js(1.0)))
                            var.get('loneLowSurrogates').callprop('push', var.get('LOW_SURROGATE_MIN'), (var.get('end')+Js(1.0)))
                        if (var.get('end')>var.get('LOW_SURROGATE_MAX')):
                            var.get('bmp').callprop('push', var.get('start'), var.get('HIGH_SURROGATE_MIN'))
                            var.get('loneHighSurrogates').callprop('push', var.get('HIGH_SURROGATE_MIN'), (var.get('HIGH_SURROGATE_MAX')+Js(1.0)))
                            var.get('loneLowSurrogates').callprop('push', var.get('LOW_SURROGATE_MIN'), (var.get('LOW_SURROGATE_MAX')+Js(1.0)))
                            if (var.get('end')<=Js(65535)):
                                var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (var.get('end')+Js(1.0)))
                            else:
                                var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (Js(65535)+Js(1.0)))
                                var.get('astral').callprop('push', (Js(65535)+Js(1.0)), (var.get('end')+Js(1.0)))
                    else:
                        if ((var.get('start')>=var.get('HIGH_SURROGATE_MIN')) and (var.get('start')<=var.get('HIGH_SURROGATE_MAX'))):
                            if ((var.get('end')>=var.get('HIGH_SURROGATE_MIN')) and (var.get('end')<=var.get('HIGH_SURROGATE_MAX'))):
                                var.get('loneHighSurrogates').callprop('push', var.get('start'), (var.get('end')+Js(1.0)))
                            if ((var.get('end')>=var.get('LOW_SURROGATE_MIN')) and (var.get('end')<=var.get('LOW_SURROGATE_MAX'))):
                                var.get('loneHighSurrogates').callprop('push', var.get('start'), (var.get('HIGH_SURROGATE_MAX')+Js(1.0)))
                                var.get('loneLowSurrogates').callprop('push', var.get('LOW_SURROGATE_MIN'), (var.get('end')+Js(1.0)))
                            if (var.get('end')>var.get('LOW_SURROGATE_MAX')):
                                var.get('loneHighSurrogates').callprop('push', var.get('start'), (var.get('HIGH_SURROGATE_MAX')+Js(1.0)))
                                var.get('loneLowSurrogates').callprop('push', var.get('LOW_SURROGATE_MIN'), (var.get('LOW_SURROGATE_MAX')+Js(1.0)))
                                if (var.get('end')<=Js(65535)):
                                    var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (var.get('end')+Js(1.0)))
                                else:
                                    var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (Js(65535)+Js(1.0)))
                                    var.get('astral').callprop('push', (Js(65535)+Js(1.0)), (var.get('end')+Js(1.0)))
                        else:
                            if ((var.get('start')>=var.get('LOW_SURROGATE_MIN')) and (var.get('start')<=var.get('LOW_SURROGATE_MAX'))):
                                if ((var.get('end')>=var.get('LOW_SURROGATE_MIN')) and (var.get('end')<=var.get('LOW_SURROGATE_MAX'))):
                                    var.get('loneLowSurrogates').callprop('push', var.get('start'), (var.get('end')+Js(1.0)))
                                if (var.get('end')>var.get('LOW_SURROGATE_MAX')):
                                    var.get('loneLowSurrogates').callprop('push', var.get('start'), (var.get('LOW_SURROGATE_MAX')+Js(1.0)))
                                    if (var.get('end')<=Js(65535)):
                                        var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (var.get('end')+Js(1.0)))
                                    else:
                                        var.get('bmp').callprop('push', (var.get('LOW_SURROGATE_MAX')+Js(1.0)), (Js(65535)+Js(1.0)))
                                        var.get('astral').callprop('push', (Js(65535)+Js(1.0)), (var.get('end')+Js(1.0)))
                            else:
                                if ((var.get('start')>var.get('LOW_SURROGATE_MAX')) and (var.get('start')<=Js(65535))):
                                    if (var.get('end')<=Js(65535)):
                                        var.get('bmp').callprop('push', var.get('start'), (var.get('end')+Js(1.0)))
                                    else:
                                        var.get('bmp').callprop('push', var.get('start'), (Js(65535)+Js(1.0)))
                                        var.get('astral').callprop('push', (Js(65535)+Js(1.0)), (var.get('end')+Js(1.0)))
                                else:
                                    var.get('astral').callprop('push', var.get('start'), (var.get('end')+Js(1.0)))
                    var.put('index', Js(2.0), '+')
                PyJs_Object_3960_ = Js({'loneHighSurrogates':var.get('loneHighSurrogates'),'loneLowSurrogates':var.get('loneLowSurrogates'),'bmp':var.get('bmp'),'astral':var.get('astral')})
                return PyJs_Object_3960_
            PyJs_anonymous_3959_._set_name('anonymous')
            var.put('splitAtBMP', PyJs_anonymous_3959_)
            @Js
            def PyJs_anonymous_3961_(surrogateMappings, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'surrogateMappings':surrogateMappings}, var)
                var.registers(['nextMapping', 'index', 'lowSurrogates', 'addLow', 'highSurrogates', 'mapping', 'tmpLow', 'length', 'result', 'nextLowSurrogates', 'nextHighSurrogates', 'surrogateMappings'])
                var.put('result', Js([]))
                var.put('tmpLow', Js([]))
                var.put('addLow', Js(False))
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('index', (-Js(1.0)))
                var.put('length', var.get('surrogateMappings').get('length'))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.put('mapping', var.get('surrogateMappings').get(var.get('index')))
                    var.put('nextMapping', var.get('surrogateMappings').get((var.get('index')+Js(1.0))))
                    if var.get('nextMapping').neg():
                        var.get('result').callprop('push', var.get('mapping'))
                        continue
                    var.put('highSurrogates', var.get('mapping').get('0'))
                    var.put('lowSurrogates', var.get('mapping').get('1'))
                    var.put('nextHighSurrogates', var.get('nextMapping').get('0'))
                    var.put('nextLowSurrogates', var.get('nextMapping').get('1'))
                    var.put('tmpLow', var.get('lowSurrogates'))
                    while ((var.get('nextHighSurrogates') and (var.get('highSurrogates').get('0')==var.get('nextHighSurrogates').get('0'))) and (var.get('highSurrogates').get('1')==var.get('nextHighSurrogates').get('1'))):
                        if var.get('dataIsSingleton')(var.get('nextLowSurrogates')):
                            var.put('tmpLow', var.get('dataAdd')(var.get('tmpLow'), var.get('nextLowSurrogates').get('0')))
                        else:
                            var.put('tmpLow', var.get('dataAddRange')(var.get('tmpLow'), var.get('nextLowSurrogates').get('0'), (var.get('nextLowSurrogates').get('1')-Js(1.0))))
                        var.put('index',Js(var.get('index').to_number())+Js(1))
                        var.put('mapping', var.get('surrogateMappings').get(var.get('index')))
                        var.put('highSurrogates', var.get('mapping').get('0'))
                        var.put('lowSurrogates', var.get('mapping').get('1'))
                        var.put('nextMapping', var.get('surrogateMappings').get((var.get('index')+Js(1.0))))
                        var.put('nextHighSurrogates', (var.get('nextMapping') and var.get('nextMapping').get('0')))
                        var.put('nextLowSurrogates', (var.get('nextMapping') and var.get('nextMapping').get('1')))
                        var.put('addLow', var.get('true'))
                    var.get('result').callprop('push', Js([var.get('highSurrogates'), (var.get('tmpLow') if var.get('addLow') else var.get('lowSurrogates'))]))
                    var.put('addLow', Js(False))
                return var.get('optimizeByLowSurrogates')(var.get('result'))
            PyJs_anonymous_3961_._set_name('anonymous')
            var.put('optimizeSurrogateMappings', PyJs_anonymous_3961_)
            @Js
            def PyJs_anonymous_3962_(surrogateMappings, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'surrogateMappings':surrogateMappings}, var)
                var.registers(['index', 'lowSurrogates', 'lowSurrogateEnd', 'lowSurrogateStart', 'mapping', 'otherMapping', 'otherLowSurrogateEnd', 'otherLowSurrogates', 'surrogateMappings', 'otherLowSurrogateStart', 'innerIndex'])
                if (var.get('surrogateMappings').get('length')==Js(1.0)):
                    return var.get('surrogateMappings')
                var.put('index', (-Js(1.0)))
                var.put('innerIndex', (-Js(1.0)))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('surrogateMappings').get('length')):
                    var.put('mapping', var.get('surrogateMappings').get(var.get('index')))
                    var.put('lowSurrogates', var.get('mapping').get('1'))
                    var.put('lowSurrogateStart', var.get('lowSurrogates').get('0'))
                    var.put('lowSurrogateEnd', var.get('lowSurrogates').get('1'))
                    var.put('innerIndex', var.get('index'))
                    while (var.put('innerIndex',Js(var.get('innerIndex').to_number())+Js(1))<var.get('surrogateMappings').get('length')):
                        var.put('otherMapping', var.get('surrogateMappings').get(var.get('innerIndex')))
                        var.put('otherLowSurrogates', var.get('otherMapping').get('1'))
                        var.put('otherLowSurrogateStart', var.get('otherLowSurrogates').get('0'))
                        var.put('otherLowSurrogateEnd', var.get('otherLowSurrogates').get('1'))
                        if ((var.get('lowSurrogateStart')==var.get('otherLowSurrogateStart')) and (var.get('lowSurrogateEnd')==var.get('otherLowSurrogateEnd'))):
                            if var.get('dataIsSingleton')(var.get('otherMapping').get('0')):
                                var.get('mapping').put('0', var.get('dataAdd')(var.get('mapping').get('0'), var.get('otherMapping').get('0').get('0')))
                            else:
                                var.get('mapping').put('0', var.get('dataAddRange')(var.get('mapping').get('0'), var.get('otherMapping').get('0').get('0'), (var.get('otherMapping').get('0').get('1')-Js(1.0))))
                            var.get('surrogateMappings').callprop('splice', var.get('innerIndex'), Js(1.0))
                            var.put('innerIndex',Js(var.get('innerIndex').to_number())-Js(1))
                return var.get('surrogateMappings')
            PyJs_anonymous_3962_._set_name('anonymous')
            var.put('optimizeByLowSurrogates', PyJs_anonymous_3962_)
            @Js
            def PyJs_anonymous_3963_(data, this, arguments, var=var):
                var = Scope({'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['index', 'startLow', 'end', 'complete', 'startHigh', 'startsWithLowestLowSurrogate', 'start', 'length', 'endsWithHighestLowSurrogate', 'endHigh', 'data', 'endLow', 'surrogateMappings'])
                if var.get('data').get('length').neg():
                    return Js([])
                var.put('index', Js(0.0))
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('surrogateMappings', Js([]))
                var.put('length', var.get('data').get('length'))
                while (var.get('index')<var.get('length')):
                    var.put('start', var.get('data').get(var.get('index')))
                    var.put('end', (var.get('data').get((var.get('index')+Js(1.0)))-Js(1.0)))
                    var.put('startHigh', var.get('highSurrogate')(var.get('start')))
                    var.put('startLow', var.get('lowSurrogate')(var.get('start')))
                    var.put('endHigh', var.get('highSurrogate')(var.get('end')))
                    var.put('endLow', var.get('lowSurrogate')(var.get('end')))
                    var.put('startsWithLowestLowSurrogate', (var.get('startLow')==var.get('LOW_SURROGATE_MIN')))
                    var.put('endsWithHighestLowSurrogate', (var.get('endLow')==var.get('LOW_SURROGATE_MAX')))
                    var.put('complete', Js(False))
                    if ((var.get('startHigh')==var.get('endHigh')) or (var.get('startsWithLowestLowSurrogate') and var.get('endsWithHighestLowSurrogate'))):
                        var.get('surrogateMappings').callprop('push', Js([Js([var.get('startHigh'), (var.get('endHigh')+Js(1.0))]), Js([var.get('startLow'), (var.get('endLow')+Js(1.0))])]))
                        var.put('complete', var.get('true'))
                    else:
                        var.get('surrogateMappings').callprop('push', Js([Js([var.get('startHigh'), (var.get('startHigh')+Js(1.0))]), Js([var.get('startLow'), (var.get('LOW_SURROGATE_MAX')+Js(1.0))])]))
                    if (var.get('complete').neg() and ((var.get('startHigh')+Js(1.0))<var.get('endHigh'))):
                        if var.get('endsWithHighestLowSurrogate'):
                            var.get('surrogateMappings').callprop('push', Js([Js([(var.get('startHigh')+Js(1.0)), (var.get('endHigh')+Js(1.0))]), Js([var.get('LOW_SURROGATE_MIN'), (var.get('endLow')+Js(1.0))])]))
                            var.put('complete', var.get('true'))
                        else:
                            var.get('surrogateMappings').callprop('push', Js([Js([(var.get('startHigh')+Js(1.0)), var.get('endHigh')]), Js([var.get('LOW_SURROGATE_MIN'), (var.get('LOW_SURROGATE_MAX')+Js(1.0))])]))
                    if var.get('complete').neg():
                        var.get('surrogateMappings').callprop('push', Js([Js([var.get('endHigh'), (var.get('endHigh')+Js(1.0))]), Js([var.get('LOW_SURROGATE_MIN'), (var.get('endLow')+Js(1.0))])]))
                    var.put('index', Js(2.0), '+')
                return var.get('optimizeSurrogateMappings')(var.get('surrogateMappings'))
            PyJs_anonymous_3963_._set_name('anonymous')
            var.put('surrogateSet', PyJs_anonymous_3963_)
            @Js
            def PyJs_anonymous_3964_(surrogateMappings, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'surrogateMappings':surrogateMappings}, var)
                var.registers(['result', 'surrogateMappings'])
                var.put('result', Js([]))
                @Js
                def PyJs_anonymous_3965_(surrogateMapping, this, arguments, var=var):
                    var = Scope({'this':this, 'surrogateMapping':surrogateMapping, 'arguments':arguments}, var)
                    var.registers(['lowSurrogates', 'highSurrogates', 'surrogateMapping'])
                    var.put('highSurrogates', var.get('surrogateMapping').get('0'))
                    var.put('lowSurrogates', var.get('surrogateMapping').get('1'))
                    var.get('result').callprop('push', (var.get('createBMPCharacterClasses')(var.get('highSurrogates'))+var.get('createBMPCharacterClasses')(var.get('lowSurrogates'))))
                PyJs_anonymous_3965_._set_name('anonymous')
                var.get('forEach')(var.get('surrogateMappings'), PyJs_anonymous_3965_)
                return var.get('result').callprop('join', Js('|'))
            PyJs_anonymous_3964_._set_name('anonymous')
            var.put('createSurrogateCharacterClasses', PyJs_anonymous_3964_)
            @Js
            def PyJs_anonymous_3966_(data, bmpOnly, hasUnicodeFlag, this, arguments, var=var):
                var = Scope({'bmpOnly':bmpOnly, 'hasUnicodeFlag':hasUnicodeFlag, 'this':this, 'data':data, 'arguments':arguments}, var)
                var.registers(['hasLoneHighSurrogates', 'loneLowSurrogates', 'hasLoneLowSurrogates', 'bmp', 'parts', 'result', 'bmpOnly', 'hasUnicodeFlag', 'astral', 'data', 'surrogateMappings', 'loneHighSurrogates'])
                if var.get('hasUnicodeFlag'):
                    return var.get('createUnicodeCharacterClasses')(var.get('data'))
                var.put('result', Js([]))
                var.put('parts', var.get('splitAtBMP')(var.get('data')))
                var.put('loneHighSurrogates', var.get('parts').get('loneHighSurrogates'))
                var.put('loneLowSurrogates', var.get('parts').get('loneLowSurrogates'))
                var.put('bmp', var.get('parts').get('bmp'))
                var.put('astral', var.get('parts').get('astral'))
                var.put('hasLoneHighSurrogates', var.get('dataIsEmpty')(var.get('loneHighSurrogates')).neg())
                var.put('hasLoneLowSurrogates', var.get('dataIsEmpty')(var.get('loneLowSurrogates')).neg())
                var.put('surrogateMappings', var.get('surrogateSet')(var.get('astral')))
                if var.get('bmpOnly'):
                    var.put('bmp', var.get('dataAddData')(var.get('bmp'), var.get('loneHighSurrogates')))
                    var.put('hasLoneHighSurrogates', Js(False))
                    var.put('bmp', var.get('dataAddData')(var.get('bmp'), var.get('loneLowSurrogates')))
                    var.put('hasLoneLowSurrogates', Js(False))
                if var.get('dataIsEmpty')(var.get('bmp')).neg():
                    var.get('result').callprop('push', var.get('createBMPCharacterClasses')(var.get('bmp')))
                if var.get('surrogateMappings').get('length'):
                    var.get('result').callprop('push', var.get('createSurrogateCharacterClasses')(var.get('surrogateMappings')))
                if var.get('hasLoneHighSurrogates'):
                    var.get('result').callprop('push', (var.get('createBMPCharacterClasses')(var.get('loneHighSurrogates'))+Js('(?![\\uDC00-\\uDFFF])')))
                if var.get('hasLoneLowSurrogates'):
                    var.get('result').callprop('push', (Js('(?:[^\\uD800-\\uDBFF]|^)')+var.get('createBMPCharacterClasses')(var.get('loneLowSurrogates'))))
                return var.get('result').callprop('join', Js('|'))
            PyJs_anonymous_3966_._set_name('anonymous')
            var.put('createCharacterClassesFromData', PyJs_anonymous_3966_)
            @Js
            def PyJs_anonymous_3967_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                if (var.get('arguments').get('length')>Js(1.0)):
                    var.put('value', var.get('slice').callprop('call', var.get('arguments')))
                if var.get("this").instanceof(var.get('regenerate')):
                    var.get("this").put('data', Js([]))
                    return (var.get("this").callprop('add', var.get('value')) if var.get('value') else var.get("this"))
                return var.get('regenerate').create().callprop('add', var.get('value'))
            PyJs_anonymous_3967_._set_name('anonymous')
            var.put('regenerate', PyJs_anonymous_3967_)
            var.get('regenerate').put('version', Js('1.3.2'))
            var.put('proto', var.get('regenerate').get('prototype'))
            @Js
            def PyJs_anonymous_3969_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['$this', 'value'])
                var.put('$this', var.get("this"))
                if (var.get('value')==var.get("null")):
                    return var.get('$this')
                if var.get('value').instanceof(var.get('regenerate')):
                    var.get('$this').put('data', var.get('dataAddData')(var.get('$this').get('data'), var.get('value').get('data')))
                    return var.get('$this')
                if (var.get('arguments').get('length')>Js(1.0)):
                    var.put('value', var.get('slice').callprop('call', var.get('arguments')))
                if var.get('isArray')(var.get('value')):
                    @Js
                    def PyJs_anonymous_3970_(item, this, arguments, var=var):
                        var = Scope({'this':this, 'item':item, 'arguments':arguments}, var)
                        var.registers(['item'])
                        var.get('$this').callprop('add', var.get('item'))
                    PyJs_anonymous_3970_._set_name('anonymous')
                    var.get('forEach')(var.get('value'), PyJs_anonymous_3970_)
                    return var.get('$this')
                var.get('$this').put('data', var.get('dataAdd')(var.get('$this').get('data'), (var.get('value') if var.get('isNumber')(var.get('value')) else var.get('symbolToCodePoint')(var.get('value')))))
                return var.get('$this')
            PyJs_anonymous_3969_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3971_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['$this', 'value'])
                var.put('$this', var.get("this"))
                if (var.get('value')==var.get("null")):
                    return var.get('$this')
                if var.get('value').instanceof(var.get('regenerate')):
                    var.get('$this').put('data', var.get('dataRemoveData')(var.get('$this').get('data'), var.get('value').get('data')))
                    return var.get('$this')
                if (var.get('arguments').get('length')>Js(1.0)):
                    var.put('value', var.get('slice').callprop('call', var.get('arguments')))
                if var.get('isArray')(var.get('value')):
                    @Js
                    def PyJs_anonymous_3972_(item, this, arguments, var=var):
                        var = Scope({'this':this, 'item':item, 'arguments':arguments}, var)
                        var.registers(['item'])
                        var.get('$this').callprop('remove', var.get('item'))
                    PyJs_anonymous_3972_._set_name('anonymous')
                    var.get('forEach')(var.get('value'), PyJs_anonymous_3972_)
                    return var.get('$this')
                var.get('$this').put('data', var.get('dataRemove')(var.get('$this').get('data'), (var.get('value') if var.get('isNumber')(var.get('value')) else var.get('symbolToCodePoint')(var.get('value')))))
                return var.get('$this')
            PyJs_anonymous_3971_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3973_(start, end, this, arguments, var=var):
                var = Scope({'this':this, 'start':start, 'end':end, 'arguments':arguments}, var)
                var.registers(['start', 'end', '$this'])
                var.put('$this', var.get("this"))
                var.get('$this').put('data', var.get('dataAddRange')(var.get('$this').get('data'), (var.get('start') if var.get('isNumber')(var.get('start')) else var.get('symbolToCodePoint')(var.get('start'))), (var.get('end') if var.get('isNumber')(var.get('end')) else var.get('symbolToCodePoint')(var.get('end')))))
                return var.get('$this')
            PyJs_anonymous_3973_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3974_(start, end, this, arguments, var=var):
                var = Scope({'this':this, 'start':start, 'end':end, 'arguments':arguments}, var)
                var.registers(['startCodePoint', 'endCodePoint', 'end', '$this', 'start'])
                var.put('$this', var.get("this"))
                var.put('startCodePoint', (var.get('start') if var.get('isNumber')(var.get('start')) else var.get('symbolToCodePoint')(var.get('start'))))
                var.put('endCodePoint', (var.get('end') if var.get('isNumber')(var.get('end')) else var.get('symbolToCodePoint')(var.get('end'))))
                var.get('$this').put('data', var.get('dataRemoveRange')(var.get('$this').get('data'), var.get('startCodePoint'), var.get('endCodePoint')))
                return var.get('$this')
            PyJs_anonymous_3974_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3975_(argument, this, arguments, var=var):
                var = Scope({'this':this, 'argument':argument, 'arguments':arguments}, var)
                var.registers(['array', '$this', 'argument'])
                var.put('$this', var.get("this"))
                var.put('array', (var.get('dataToArray')(var.get('argument').get('data')) if var.get('argument').instanceof(var.get('regenerate')) else var.get('argument')))
                var.get('$this').put('data', var.get('dataIntersection')(var.get('$this').get('data'), var.get('array')))
                return var.get('$this')
            PyJs_anonymous_3975_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3976_(codePoint, this, arguments, var=var):
                var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
                var.registers(['codePoint'])
                return var.get('dataContains')(var.get("this").get('data'), (var.get('codePoint') if var.get('isNumber')(var.get('codePoint')) else var.get('symbolToCodePoint')(var.get('codePoint'))))
            PyJs_anonymous_3976_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3977_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['set'])
                var.put('set', var.get('regenerate').create())
                var.get('set').put('data', var.get("this").get('data').callprop('slice', Js(0.0)))
                return var.get('set')
            PyJs_anonymous_3977_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3978_(options, this, arguments, var=var):
                var = Scope({'this':this, 'options':options, 'arguments':arguments}, var)
                var.registers(['result', 'options'])
                var.put('result', var.get('createCharacterClassesFromData')(var.get("this").get('data'), (var.get('options').get('bmpOnly') if var.get('options') else Js(False)), (var.get('options').get('hasUnicodeFlag') if var.get('options') else Js(False))))
                if var.get('result').neg():
                    return Js('[]')
                return var.get('result').callprop('replace', var.get('regexNull'), Js('\\0$1'))
            PyJs_anonymous_3978_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3979_(flags, this, arguments, var=var):
                var = Scope({'this':this, 'flags':flags, 'arguments':arguments}, var)
                var.registers(['pattern', 'flags'])
                PyJs_Object_3980_ = Js({'hasUnicodeFlag':var.get('true')})
                var.put('pattern', var.get("this").callprop('toString', (PyJs_Object_3980_ if (var.get('flags') and (var.get('flags').callprop('indexOf', Js('u'))!=(-Js(1.0)))) else var.get("null"))))
                return var.get('RegExp')(var.get('pattern'), (var.get('flags') or Js('')))
            PyJs_anonymous_3979_._set_name('anonymous')
            @Js
            def PyJs_anonymous_3981_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('dataToArray')(var.get("this").get('data'))
            PyJs_anonymous_3981_._set_name('anonymous')
            PyJs_Object_3968_ = Js({'add':PyJs_anonymous_3969_,'remove':PyJs_anonymous_3971_,'addRange':PyJs_anonymous_3973_,'removeRange':PyJs_anonymous_3974_,'intersection':PyJs_anonymous_3975_,'contains':PyJs_anonymous_3976_,'clone':PyJs_anonymous_3977_,'toString':PyJs_anonymous_3978_,'toRegExp':PyJs_anonymous_3979_,'valueOf':PyJs_anonymous_3981_})
            var.get('extend')(var.get('proto'), PyJs_Object_3968_)
            var.get('proto').put('toArray', var.get('proto').get('valueOf'))
            if (((var.get('define',throw=False).typeof()==Js('function')) and (var.get('define').get('amd').typeof()==Js('object'))) and var.get('define').get('amd')):
                @Js
                def PyJs_anonymous_3982_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('regenerate')
                PyJs_anonymous_3982_._set_name('anonymous')
                var.get('define')(PyJs_anonymous_3982_)
            else:
                if (var.get('freeExports') and var.get('freeExports').get('nodeType').neg()):
                    if var.get('freeModule'):
                        var.get('freeModule').put('exports', var.get('regenerate'))
                    else:
                        var.get('freeExports').put('regenerate', var.get('regenerate'))
                else:
                    var.get('root').put('regenerate', var.get('regenerate'))
        PyJs_anonymous_3931_._set_name('anonymous')
        PyJs_anonymous_3931_(var.get("this"))
    PyJs_anonymous_3930_._set_name('anonymous')
    PyJs_anonymous_3930_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_3929_))))
PyJs_anonymous_3928_._set_name('anonymous')
PyJs_Object_3983_ = Js({})
@Js
def PyJs_anonymous_3984_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['regenerate', 'require', 'exports', 'module'])
    var.put('regenerate', var.get('require')(Js('regenerate')))
    def PyJs_LONG_3986_(var=var):
        return var.get('regenerate')().callprop('addRange', Js(0), Js(8)).callprop('addRange', Js(14), Js(31)).callprop('addRange', Js(33), Js(159)).callprop('addRange', Js(161), Js(5759)).callprop('addRange', Js(5761), Js(8191)).callprop('addRange', Js(8203), Js(8231)).callprop('addRange', Js(8234), Js(8238)).callprop('addRange', Js(8240), Js(8286)).callprop('addRange', Js(8288), Js(12287)).callprop('addRange', Js(12289), Js(65278))
    PyJs_Object_3985_ = Js({'d':var.get('regenerate')().callprop('addRange', Js(48), Js(57)),'D':var.get('regenerate')().callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(65535)),'s':var.get('regenerate')(Js(32), Js(160), Js(5760), Js(8239), Js(8287), Js(12288), Js(65279)).callprop('addRange', Js(9), Js(13)).callprop('addRange', Js(8192), Js(8202)).callprop('addRange', Js(8232), Js(8233)),'S':PyJs_LONG_3986_().callprop('addRange', Js(65280), Js(65535)),'w':var.get('regenerate')(Js(95)).callprop('addRange', Js(48), Js(57)).callprop('addRange', Js(65), Js(90)).callprop('addRange', Js(97), Js(122)),'W':var.get('regenerate')(Js(96)).callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(64)).callprop('addRange', Js(91), Js(94)).callprop('addRange', Js(123), Js(65535))})
    var.get('exports').put('REGULAR', PyJs_Object_3985_)
    def PyJs_LONG_3988_(var=var):
        return var.get('regenerate')().callprop('addRange', Js(0), Js(8)).callprop('addRange', Js(14), Js(31)).callprop('addRange', Js(33), Js(159)).callprop('addRange', Js(161), Js(5759)).callprop('addRange', Js(5761), Js(8191)).callprop('addRange', Js(8203), Js(8231)).callprop('addRange', Js(8234), Js(8238)).callprop('addRange', Js(8240), Js(8286)).callprop('addRange', Js(8288), Js(12287)).callprop('addRange', Js(12289), Js(65278))
    PyJs_Object_3987_ = Js({'d':var.get('regenerate')().callprop('addRange', Js(48), Js(57)),'D':var.get('regenerate')().callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(1114111)),'s':var.get('regenerate')(Js(32), Js(160), Js(5760), Js(8239), Js(8287), Js(12288), Js(65279)).callprop('addRange', Js(9), Js(13)).callprop('addRange', Js(8192), Js(8202)).callprop('addRange', Js(8232), Js(8233)),'S':PyJs_LONG_3988_().callprop('addRange', Js(65280), Js(1114111)),'w':var.get('regenerate')(Js(95)).callprop('addRange', Js(48), Js(57)).callprop('addRange', Js(65), Js(90)).callprop('addRange', Js(97), Js(122)),'W':var.get('regenerate')(Js(96)).callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(64)).callprop('addRange', Js(91), Js(94)).callprop('addRange', Js(123), Js(1114111))})
    var.get('exports').put('UNICODE', PyJs_Object_3987_)
    def PyJs_LONG_3990_(var=var):
        return var.get('regenerate')().callprop('addRange', Js(0), Js(8)).callprop('addRange', Js(14), Js(31)).callprop('addRange', Js(33), Js(159)).callprop('addRange', Js(161), Js(5759)).callprop('addRange', Js(5761), Js(8191)).callprop('addRange', Js(8203), Js(8231)).callprop('addRange', Js(8234), Js(8238)).callprop('addRange', Js(8240), Js(8286)).callprop('addRange', Js(8288), Js(12287)).callprop('addRange', Js(12289), Js(65278))
    PyJs_Object_3989_ = Js({'d':var.get('regenerate')().callprop('addRange', Js(48), Js(57)),'D':var.get('regenerate')().callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(1114111)),'s':var.get('regenerate')(Js(32), Js(160), Js(5760), Js(8239), Js(8287), Js(12288), Js(65279)).callprop('addRange', Js(9), Js(13)).callprop('addRange', Js(8192), Js(8202)).callprop('addRange', Js(8232), Js(8233)),'S':PyJs_LONG_3990_().callprop('addRange', Js(65280), Js(1114111)),'w':var.get('regenerate')(Js(95), Js(383), Js(8490)).callprop('addRange', Js(48), Js(57)).callprop('addRange', Js(65), Js(90)).callprop('addRange', Js(97), Js(122)),'W':var.get('regenerate')(Js(75), Js(83), Js(96)).callprop('addRange', Js(0), Js(47)).callprop('addRange', Js(58), Js(64)).callprop('addRange', Js(91), Js(94)).callprop('addRange', Js(123), Js(1114111))})
    var.get('exports').put('UNICODE_IGNORE_CASE', PyJs_Object_3989_)
PyJs_anonymous_3984_._set_name('anonymous')
PyJs_Object_3991_ = Js({'regenerate':Js(501.0)})
@Js
def PyJs_anonymous_3992_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_3993_ = Js({'75':Js(8490.0),'83':Js(383.0),'107':Js(8490.0),'115':Js(383.0),'181':Js(924.0),'197':Js(8491.0),'383':Js(83.0),'452':Js(453.0),'453':Js(452.0),'455':Js(456.0),'456':Js(455.0),'458':Js(459.0),'459':Js(458.0),'497':Js(498.0),'498':Js(497.0),'837':Js(8126.0),'914':Js(976.0),'917':Js(1013.0),'920':Js(1012.0),'921':Js(8126.0),'922':Js(1008.0),'924':Js(181.0),'928':Js(982.0),'929':Js(1009.0),'931':Js(962.0),'934':Js(981.0),'937':Js(8486.0),'962':Js(931.0),'976':Js(914.0),'977':Js(1012.0),'981':Js(934.0),'982':Js(928.0),'1008':Js(922.0),'1009':Js(929.0),'1012':Js([Js(920.0), Js(977.0)]),'1013':Js(917.0),'7776':Js(7835.0),'7835':Js(7776.0),'8126':Js([Js(837.0), Js(921.0)]),'8486':Js(937.0),'8490':Js(75.0),'8491':Js(197.0),'66560':Js(66600.0),'66561':Js(66601.0),'66562':Js(66602.0),'66563':Js(66603.0),'66564':Js(66604.0),'66565':Js(66605.0),'66566':Js(66606.0),'66567':Js(66607.0),'66568':Js(66608.0),'66569':Js(66609.0),'66570':Js(66610.0),'66571':Js(66611.0),'66572':Js(66612.0),'66573':Js(66613.0),'66574':Js(66614.0),'66575':Js(66615.0),'66576':Js(66616.0),'66577':Js(66617.0),'66578':Js(66618.0),'66579':Js(66619.0),'66580':Js(66620.0),'66581':Js(66621.0),'66582':Js(66622.0),'66583':Js(66623.0),'66584':Js(66624.0),'66585':Js(66625.0),'66586':Js(66626.0),'66587':Js(66627.0),'66588':Js(66628.0),'66589':Js(66629.0),'66590':Js(66630.0),'66591':Js(66631.0),'66592':Js(66632.0),'66593':Js(66633.0),'66594':Js(66634.0),'66595':Js(66635.0),'66596':Js(66636.0),'66597':Js(66637.0),'66598':Js(66638.0),'66599':Js(66639.0),'66600':Js(66560.0),'66601':Js(66561.0),'66602':Js(66562.0),'66603':Js(66563.0),'66604':Js(66564.0),'66605':Js(66565.0),'66606':Js(66566.0),'66607':Js(66567.0),'66608':Js(66568.0),'66609':Js(66569.0),'66610':Js(66570.0),'66611':Js(66571.0),'66612':Js(66572.0),'66613':Js(66573.0),'66614':Js(66574.0),'66615':Js(66575.0),'66616':Js(66576.0),'66617':Js(66577.0),'66618':Js(66578.0),'66619':Js(66579.0),'66620':Js(66580.0),'66621':Js(66581.0),'66622':Js(66582.0),'66623':Js(66583.0),'66624':Js(66584.0),'66625':Js(66585.0),'66626':Js(66586.0),'66627':Js(66587.0),'66628':Js(66588.0),'66629':Js(66589.0),'66630':Js(66590.0),'66631':Js(66591.0),'66632':Js(66592.0),'66633':Js(66593.0),'66634':Js(66594.0),'66635':Js(66595.0),'66636':Js(66596.0),'66637':Js(66597.0),'66638':Js(66598.0),'66639':Js(66599.0),'68736':Js(68800.0),'68737':Js(68801.0),'68738':Js(68802.0),'68739':Js(68803.0),'68740':Js(68804.0),'68741':Js(68805.0),'68742':Js(68806.0),'68743':Js(68807.0),'68744':Js(68808.0),'68745':Js(68809.0),'68746':Js(68810.0),'68747':Js(68811.0),'68748':Js(68812.0),'68749':Js(68813.0),'68750':Js(68814.0),'68751':Js(68815.0),'68752':Js(68816.0),'68753':Js(68817.0),'68754':Js(68818.0),'68755':Js(68819.0),'68756':Js(68820.0),'68757':Js(68821.0),'68758':Js(68822.0),'68759':Js(68823.0),'68760':Js(68824.0),'68761':Js(68825.0),'68762':Js(68826.0),'68763':Js(68827.0),'68764':Js(68828.0),'68765':Js(68829.0),'68766':Js(68830.0),'68767':Js(68831.0),'68768':Js(68832.0),'68769':Js(68833.0),'68770':Js(68834.0),'68771':Js(68835.0),'68772':Js(68836.0),'68773':Js(68837.0),'68774':Js(68838.0),'68775':Js(68839.0),'68776':Js(68840.0),'68777':Js(68841.0),'68778':Js(68842.0),'68779':Js(68843.0),'68780':Js(68844.0),'68781':Js(68845.0),'68782':Js(68846.0),'68783':Js(68847.0),'68784':Js(68848.0),'68785':Js(68849.0),'68786':Js(68850.0),'68800':Js(68736.0),'68801':Js(68737.0),'68802':Js(68738.0),'68803':Js(68739.0),'68804':Js(68740.0),'68805':Js(68741.0),'68806':Js(68742.0),'68807':Js(68743.0),'68808':Js(68744.0),'68809':Js(68745.0),'68810':Js(68746.0),'68811':Js(68747.0),'68812':Js(68748.0),'68813':Js(68749.0),'68814':Js(68750.0),'68815':Js(68751.0),'68816':Js(68752.0),'68817':Js(68753.0),'68818':Js(68754.0),'68819':Js(68755.0),'68820':Js(68756.0),'68821':Js(68757.0),'68822':Js(68758.0),'68823':Js(68759.0),'68824':Js(68760.0),'68825':Js(68761.0),'68826':Js(68762.0),'68827':Js(68763.0),'68828':Js(68764.0),'68829':Js(68765.0),'68830':Js(68766.0),'68831':Js(68767.0),'68832':Js(68768.0),'68833':Js(68769.0),'68834':Js(68770.0),'68835':Js(68771.0),'68836':Js(68772.0),'68837':Js(68773.0),'68838':Js(68774.0),'68839':Js(68775.0),'68840':Js(68776.0),'68841':Js(68777.0),'68842':Js(68778.0),'68843':Js(68779.0),'68844':Js(68780.0),'68845':Js(68781.0),'68846':Js(68782.0),'68847':Js(68783.0),'68848':Js(68784.0),'68849':Js(68785.0),'68850':Js(68786.0),'71840':Js(71872.0),'71841':Js(71873.0),'71842':Js(71874.0),'71843':Js(71875.0),'71844':Js(71876.0),'71845':Js(71877.0),'71846':Js(71878.0),'71847':Js(71879.0),'71848':Js(71880.0),'71849':Js(71881.0),'71850':Js(71882.0),'71851':Js(71883.0),'71852':Js(71884.0),'71853':Js(71885.0),'71854':Js(71886.0),'71855':Js(71887.0),'71856':Js(71888.0),'71857':Js(71889.0),'71858':Js(71890.0),'71859':Js(71891.0),'71860':Js(71892.0),'71861':Js(71893.0),'71862':Js(71894.0),'71863':Js(71895.0),'71864':Js(71896.0),'71865':Js(71897.0),'71866':Js(71898.0),'71867':Js(71899.0),'71868':Js(71900.0),'71869':Js(71901.0),'71870':Js(71902.0),'71871':Js(71903.0),'71872':Js(71840.0),'71873':Js(71841.0),'71874':Js(71842.0),'71875':Js(71843.0),'71876':Js(71844.0),'71877':Js(71845.0),'71878':Js(71846.0),'71879':Js(71847.0),'71880':Js(71848.0),'71881':Js(71849.0),'71882':Js(71850.0),'71883':Js(71851.0),'71884':Js(71852.0),'71885':Js(71853.0),'71886':Js(71854.0),'71887':Js(71855.0),'71888':Js(71856.0),'71889':Js(71857.0),'71890':Js(71858.0),'71891':Js(71859.0),'71892':Js(71860.0),'71893':Js(71861.0),'71894':Js(71862.0),'71895':Js(71863.0),'71896':Js(71864.0),'71897':Js(71865.0),'71898':Js(71866.0),'71899':Js(71867.0),'71900':Js(71868.0),'71901':Js(71869.0),'71902':Js(71870.0),'71903':Js(71871.0)})
    var.get('module').put('exports', PyJs_Object_3993_)
PyJs_anonymous_3992_._set_name('anonymous')
PyJs_Object_3994_ = Js({})
@Js
def PyJs_anonymous_3995_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['iuMappings', 'module', 'parse', 'unicode', 'wrap', 'hasOwnProperty', 'regenerate', 'ignoreCase', 'caseFold', 'has', 'DOT_SET', 'getCharacterClassEscapeSet', 'exports', 'object', 'update', 'processCharacterClass', 'generate', 'ESCAPE_SETS', 'require', 'processTerm', 'BMP_SET', 'UNICODE_SET', 'assign', 'DOT_SET_UNICODE'])
    @Js
    def PyJsHoisted_getCharacterClassEscapeSet_(character, this, arguments, var=var):
        var = Scope({'this':this, 'character':character, 'arguments':arguments}, var)
        var.registers(['character'])
        if var.get('unicode'):
            if var.get('ignoreCase'):
                return var.get('ESCAPE_SETS').get('UNICODE_IGNORE_CASE').get(var.get('character'))
            return var.get('ESCAPE_SETS').get('UNICODE').get(var.get('character'))
        return var.get('ESCAPE_SETS').get('REGULAR').get(var.get('character'))
    PyJsHoisted_getCharacterClassEscapeSet_.__name__ = 'getCharacterClassEscapeSet'
    var.put('getCharacterClassEscapeSet', PyJsHoisted_getCharacterClassEscapeSet_)
    @Js
    def PyJsHoisted_update_(item, pattern, this, arguments, var=var):
        var = Scope({'this':this, 'item':item, 'arguments':arguments, 'pattern':pattern}, var)
        var.registers(['item', 'tree', 'pattern'])
        if var.get('pattern').neg():
            return var.get('undefined')
        var.put('tree', var.get('parse')(var.get('pattern'), Js('')))
        while 1:
            SWITCHED = False
            CONDITION = (var.get('tree').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('characterClass')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('group')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('value')):
                SWITCHED = True
                break
            if True:
                SWITCHED = True
                var.put('tree', var.get('wrap')(var.get('tree'), var.get('pattern')))
            SWITCHED = True
            break
        var.get('assign')(var.get('item'), var.get('tree'))
    PyJsHoisted_update_.__name__ = 'update'
    var.put('update', PyJsHoisted_update_)
    @Js
    def PyJsHoisted_processTerm_(item, this, arguments, var=var):
        var = Scope({'this':this, 'item':item, 'arguments':arguments}, var)
        var.registers(['item', 'codePoint', 'set', 'folded'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get('item').get('type'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js('dot')):
                SWITCHED = True
                var.get('update')(var.get('item'), (var.get('DOT_SET_UNICODE') if var.get('unicode') else var.get('DOT_SET')).callprop('toString'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('characterClass')):
                SWITCHED = True
                var.put('item', var.get('processCharacterClass')(var.get('item')))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('characterClassEscape')):
                SWITCHED = True
                var.get('update')(var.get('item'), var.get('getCharacterClassEscapeSet')(var.get('item').get('value')).callprop('toString'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('alternative')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('disjunction')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('group')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('quantifier')):
                SWITCHED = True
                var.get('item').put('body', var.get('item').get('body').callprop('map', var.get('processTerm')))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('value')):
                SWITCHED = True
                var.put('codePoint', var.get('item').get('codePoint'))
                var.put('set', var.get('regenerate')(var.get('codePoint')))
                if (var.get('ignoreCase') and var.get('unicode')):
                    var.put('folded', var.get('caseFold')(var.get('codePoint')))
                    if var.get('folded'):
                        var.get('set').callprop('add', var.get('folded'))
                var.get('update')(var.get('item'), var.get('set').callprop('toString'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js('anchor')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('empty')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('group')):
                SWITCHED = True
                pass
            if SWITCHED or PyJsStrictEq(CONDITION, Js('reference')):
                SWITCHED = True
                break
            if True:
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get('Error')((Js('Unknown term type: ')+var.get('item').get('type'))))
                raise PyJsTempException
            SWITCHED = True
            break
        return var.get('item')
    PyJsHoisted_processTerm_.__name__ = 'processTerm'
    var.put('processTerm', PyJsHoisted_processTerm_)
    @Js
    def PyJsHoisted_caseFold_(codePoint, this, arguments, var=var):
        var = Scope({'this':this, 'codePoint':codePoint, 'arguments':arguments}, var)
        var.registers(['codePoint'])
        return (var.get('iuMappings').get(var.get('codePoint')) if var.get('has')(var.get('iuMappings'), var.get('codePoint')) else Js(False))
    PyJsHoisted_caseFold_.__name__ = 'caseFold'
    var.put('caseFold', PyJsHoisted_caseFold_)
    @Js
    def PyJsHoisted_processCharacterClass_(characterClassItem, this, arguments, var=var):
        var = Scope({'this':this, 'characterClassItem':characterClassItem, 'arguments':arguments}, var)
        var.registers(['body', 'set', 'characterClassItem'])
        var.put('set', var.get('regenerate')())
        @Js
        def PyJs_anonymous_3999_(item, this, arguments, var=var):
            var = Scope({'this':this, 'item':item, 'arguments':arguments}, var)
            var.registers(['max', 'folded', 'item', 'min'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('item').get('type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('value')):
                    SWITCHED = True
                    var.get('set').callprop('add', var.get('item').get('codePoint'))
                    if (var.get('ignoreCase') and var.get('unicode')):
                        var.put('folded', var.get('caseFold')(var.get('item').get('codePoint')))
                        if var.get('folded'):
                            var.get('set').callprop('add', var.get('folded'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('characterClassRange')):
                    SWITCHED = True
                    var.put('min', var.get('item').get('min').get('codePoint'))
                    var.put('max', var.get('item').get('max').get('codePoint'))
                    var.get('set').callprop('addRange', var.get('min'), var.get('max'))
                    if (var.get('ignoreCase') and var.get('unicode')):
                        var.get('set').callprop('iuAddRange', var.get('min'), var.get('max'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('characterClassEscape')):
                    SWITCHED = True
                    var.get('set').callprop('add', var.get('getCharacterClassEscapeSet')(var.get('item').get('value')))
                    break
                if True:
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error')((Js('Unknown term type: ')+var.get('item').get('type'))))
                    raise PyJsTempException
                SWITCHED = True
                break
        PyJs_anonymous_3999_._set_name('anonymous')
        var.put('body', var.get('characterClassItem').get('body').callprop('forEach', PyJs_anonymous_3999_))
        if var.get('characterClassItem').get('negative'):
            var.put('set', (var.get('UNICODE_SET') if var.get('unicode') else var.get('BMP_SET')).callprop('clone').callprop('remove', var.get('set')))
        var.get('update')(var.get('characterClassItem'), var.get('set').callprop('toString'))
        return var.get('characterClassItem')
    PyJsHoisted_processCharacterClass_.__name__ = 'processCharacterClass'
    var.put('processCharacterClass', PyJsHoisted_processCharacterClass_)
    @Js
    def PyJsHoisted_wrap_(tree, pattern, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'tree':tree, 'arguments':arguments}, var)
        var.registers(['pattern', 'tree'])
        PyJs_Object_3998_ = Js({'type':Js('group'),'behavior':Js('ignore'),'body':Js([var.get('tree')]),'raw':((Js('(?:')+var.get('pattern'))+Js(')'))})
        return PyJs_Object_3998_
    PyJsHoisted_wrap_.__name__ = 'wrap'
    var.put('wrap', PyJsHoisted_wrap_)
    @Js
    def PyJsHoisted_has_(object, property, this, arguments, var=var):
        var = Scope({'this':this, 'property':property, 'object':object, 'arguments':arguments}, var)
        var.registers(['property', 'object'])
        return var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('property'))
    PyJsHoisted_has_.__name__ = 'has'
    var.put('has', PyJsHoisted_has_)
    @Js
    def PyJsHoisted_assign_(target, source, this, arguments, var=var):
        var = Scope({'this':this, 'source':source, 'target':target, 'arguments':arguments}, var)
        var.registers(['source', 'target', 'key'])
        for PyJsTemp in var.get('source'):
            var.put('key', PyJsTemp)
            var.get('target').put(var.get('key'), var.get('source').get(var.get('key')))
    PyJsHoisted_assign_.__name__ = 'assign'
    var.put('assign', PyJsHoisted_assign_)
    var.put('generate', var.get('require')(Js('regjsgen')).get('generate'))
    var.put('parse', var.get('require')(Js('regjsparser')).get('parse'))
    var.put('regenerate', var.get('require')(Js('regenerate')))
    var.put('iuMappings', var.get('require')(Js('./data/iu-mappings.json')))
    var.put('ESCAPE_SETS', var.get('require')(Js('./data/character-class-escape-sets.js')))
    pass
    PyJs_Object_3996_ = Js({})
    var.put('object', PyJs_Object_3996_)
    var.put('hasOwnProperty', var.get('object').get('hasOwnProperty'))
    pass
    var.put('UNICODE_SET', var.get('regenerate')().callprop('addRange', Js(0), Js(1114111)))
    var.put('BMP_SET', var.get('regenerate')().callprop('addRange', Js(0), Js(65535)))
    var.put('DOT_SET_UNICODE', var.get('UNICODE_SET').callprop('clone').callprop('remove', Js(10), Js(13), Js(8232), Js(8233)))
    var.put('DOT_SET', var.get('DOT_SET_UNICODE').callprop('clone').callprop('intersection', var.get('BMP_SET')))
    @Js
    def PyJs_anonymous_3997_(min, max, this, arguments, var=var):
        var = Scope({'this':this, 'max':max, 'arguments':arguments, 'min':min}, var)
        var.registers(['max', 'folded', '$this', 'min'])
        var.put('$this', var.get("this"))
        while 1:
            var.put('folded', var.get('caseFold')(var.get('min')))
            if var.get('folded'):
                var.get('$this').callprop('add', var.get('folded'))
            if not (var.put('min',Js(var.get('min').to_number())+Js(1))<=var.get('max')):
                break
        return var.get('$this')
    PyJs_anonymous_3997_._set_name('anonymous')
    var.get('regenerate').get('prototype').put('iuAddRange', PyJs_anonymous_3997_)
    pass
    pass
    pass
    pass
    var.put('ignoreCase', Js(False))
    var.put('unicode', Js(False))
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_4000_(pattern, flags, this, arguments, var=var):
        var = Scope({'this':this, 'pattern':pattern, 'flags':flags, 'arguments':arguments}, var)
        var.registers(['pattern', 'tree', 'flags'])
        var.put('tree', var.get('parse')(var.get('pattern'), var.get('flags')))
        var.put('ignoreCase', ((var.get('flags').callprop('indexOf', Js('i'))>(-Js(1.0))) if var.get('flags') else Js(False)))
        var.put('unicode', ((var.get('flags').callprop('indexOf', Js('u'))>(-Js(1.0))) if var.get('flags') else Js(False)))
        var.get('assign')(var.get('tree'), var.get('processTerm')(var.get('tree')))
        return var.get('generate')(var.get('tree'))
    PyJs_anonymous_4000_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_4000_)
PyJs_anonymous_3995_._set_name('anonymous')
PyJs_Object_4001_ = Js({'./data/character-class-escape-sets.js':Js(502.0),'./data/iu-mappings.json':Js(503.0),'regenerate':Js(501.0),'regjsgen':Js(505.0),'regjsparser':Js(506.0)})
@Js
def PyJs_anonymous_4002_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_4003_ = Js({})
    @Js
    def PyJs_anonymous_4004_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['global'])
        pass
        @Js
        def PyJs_anonymous_4005_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['freeModule', 'objectTypes', 'freeGlobal', 'generateCharacterClassRange', 'freeExports', 'generateCharacterClassEscape', 'assertType', 'generateReference', 'generateCharacterClass', 'generateAlternative', 'generateClassAtom', 'floor', 'generateDisjunction', 'stringFromCharCode', 'generate', 'generateQuantifier', 'generateDot', 'fromCodePoint', 'generateValue', 'generateAnchor', 'generateAtom', 'oldRoot', 'generateTerm', 'root', 'generateGroup'])
            @Js
            def PyJsHoisted_generateQuantifier_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'max', 'quantifier', 'min'])
                var.get('assertType')(var.get('node').get('type'), Js('quantifier'))
                var.put('quantifier', Js(''))
                var.put('min', var.get('node').get('min'))
                var.put('max', var.get('node').get('max'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('max'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('undefined')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get("null")):
                        SWITCHED = True
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('min'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                SWITCHED = True
                                var.put('quantifier', Js('*'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                SWITCHED = True
                                var.put('quantifier', Js('+'))
                                break
                            if True:
                                SWITCHED = True
                                var.put('quantifier', ((Js('{')+var.get('min'))+Js(',}')))
                                break
                            SWITCHED = True
                            break
                        break
                    if True:
                        SWITCHED = True
                        if (var.get('min')==var.get('max')):
                            var.put('quantifier', ((Js('{')+var.get('min'))+Js('}')))
                        else:
                            if ((var.get('min')==Js(0.0)) and (var.get('max')==Js(1.0))):
                                var.put('quantifier', Js('?'))
                            else:
                                var.put('quantifier', ((((Js('{')+var.get('min'))+Js(','))+var.get('max'))+Js('}')))
                        break
                    SWITCHED = True
                    break
                if var.get('node').get('greedy').neg():
                    var.put('quantifier', Js('?'), '+')
                return (var.get('generateAtom')(var.get('node').get('body').get('0'))+var.get('quantifier'))
            PyJsHoisted_generateQuantifier_.__name__ = 'generateQuantifier'
            var.put('generateQuantifier', PyJsHoisted_generateQuantifier_)
            @Js
            def PyJsHoisted_generateTerm_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value'))
                return var.get('generate')(var.get('node'))
            PyJsHoisted_generateTerm_.__name__ = 'generateTerm'
            var.put('generateTerm', PyJsHoisted_generateTerm_)
            @Js
            def PyJsHoisted_generateCharacterClass_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'node', 'length', 'classRanges', 'result'])
                var.get('assertType')(var.get('node').get('type'), Js('characterClass'))
                var.put('classRanges', var.get('node').get('body'))
                var.put('length', (var.get('classRanges').get('length') if var.get('classRanges') else Js(0.0)))
                var.put('i', (-Js(1.0)))
                var.put('result', Js('['))
                if var.get('node').get('negative'):
                    var.put('result', Js('^'), '+')
                while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('length')):
                    var.put('result', var.get('generateClassAtom')(var.get('classRanges').get(var.get('i'))), '+')
                var.put('result', Js(']'), '+')
                return var.get('result')
            PyJsHoisted_generateCharacterClass_.__name__ = 'generateCharacterClass'
            var.put('generateCharacterClass', PyJsHoisted_generateCharacterClass_)
            @Js
            def PyJsHoisted_generateClassAtom_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('anchor|characterClassEscape|characterClassRange|dot|value'))
                return var.get('generate')(var.get('node'))
            PyJsHoisted_generateClassAtom_.__name__ = 'generateClassAtom'
            var.put('generateClassAtom', PyJsHoisted_generateClassAtom_)
            @Js
            def PyJsHoisted_fromCodePoint_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['index', 'codePoint', 'codeUnits', 'length', 'result', 'lowSurrogate', 'MAX_SIZE', 'highSurrogate'])
                var.put('MAX_SIZE', Js(16384))
                var.put('codeUnits', Js([]))
                pass
                pass
                var.put('index', (-Js(1.0)))
                var.put('length', var.get('arguments').get('length'))
                if var.get('length').neg():
                    return Js('')
                var.put('result', Js(''))
                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                    var.put('codePoint', var.get('Number')(var.get('arguments').get(var.get('index'))))
                    if (((var.get('isFinite')(var.get('codePoint')).neg() or (var.get('codePoint')<Js(0.0))) or (var.get('codePoint')>Js(1114111))) or (var.get('floor')(var.get('codePoint'))!=var.get('codePoint'))):
                        PyJsTempException = JsToPyException(var.get('RangeError')((Js('Invalid code point: ')+var.get('codePoint'))))
                        raise PyJsTempException
                    if (var.get('codePoint')<=Js(65535)):
                        var.get('codeUnits').callprop('push', var.get('codePoint'))
                    else:
                        var.put('codePoint', Js(65536), '-')
                        var.put('highSurrogate', ((var.get('codePoint')>>Js(10.0))+Js(55296)))
                        var.put('lowSurrogate', ((var.get('codePoint')%Js(1024))+Js(56320)))
                        var.get('codeUnits').callprop('push', var.get('highSurrogate'), var.get('lowSurrogate'))
                    if (((var.get('index')+Js(1.0))==var.get('length')) or (var.get('codeUnits').get('length')>var.get('MAX_SIZE'))):
                        var.put('result', var.get('stringFromCharCode').callprop('apply', var.get("null"), var.get('codeUnits')), '+')
                        var.get('codeUnits').put('length', Js(0.0))
                return var.get('result')
            PyJsHoisted_fromCodePoint_.__name__ = 'fromCodePoint'
            var.put('fromCodePoint', PyJsHoisted_fromCodePoint_)
            @Js
            def PyJsHoisted_generateDisjunction_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['body', 'i', 'length', 'node', 'result'])
                var.get('assertType')(var.get('node').get('type'), Js('disjunction'))
                var.put('body', var.get('node').get('body'))
                var.put('length', (var.get('body').get('length') if var.get('body') else Js(0.0)))
                if (var.get('length')==Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('Error')(Js('No body')))
                    raise PyJsTempException
                else:
                    if (var.get('length')==Js(1.0)):
                        return var.get('generate')(var.get('body').get('0'))
                    else:
                        var.put('i', (-Js(1.0)))
                        var.put('result', Js(''))
                        while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('length')):
                            if (var.get('i')!=Js(0.0)):
                                var.put('result', Js('|'), '+')
                            var.put('result', var.get('generate')(var.get('body').get(var.get('i'))), '+')
                        return var.get('result')
            PyJsHoisted_generateDisjunction_.__name__ = 'generateDisjunction'
            var.put('generateDisjunction', PyJsHoisted_generateDisjunction_)
            @Js
            def PyJsHoisted_assertType_(type, expected, this, arguments, var=var):
                var = Scope({'expected':expected, 'this':this, 'type':type, 'arguments':arguments}, var)
                var.registers(['expected', 'type'])
                if (var.get('expected').callprop('indexOf', Js('|'))==(-Js(1.0))):
                    if (var.get('type')==var.get('expected')):
                        return var.get('undefined')
                    PyJsTempException = JsToPyException(var.get('Error')((Js('Invalid node type: ')+var.get('type'))))
                    raise PyJsTempException
                var.put('expected', (var.get('assertType').get(var.get('expected')) if var.get('assertType').callprop('hasOwnProperty', var.get('expected')) else var.get('assertType').put(var.get('expected'), var.get('RegExp')(((Js('^(?:')+var.get('expected'))+Js(')$'))))))
                if var.get('expected').callprop('test', var.get('type')):
                    return var.get('undefined')
                PyJsTempException = JsToPyException(var.get('Error')((Js('Invalid node type: ')+var.get('type'))))
                raise PyJsTempException
            PyJsHoisted_assertType_.__name__ = 'assertType'
            var.put('assertType', PyJsHoisted_assertType_)
            @Js
            def PyJsHoisted_generateCharacterClassRange_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'max', 'min'])
                var.get('assertType')(var.get('node').get('type'), Js('characterClassRange'))
                var.put('min', var.get('node').get('min'))
                var.put('max', var.get('node').get('max'))
                if ((var.get('min').get('type')==Js('characterClassRange')) or (var.get('max').get('type')==Js('characterClassRange'))):
                    PyJsTempException = JsToPyException(var.get('Error')(Js('Invalid character class range')))
                    raise PyJsTempException
                return ((var.get('generateClassAtom')(var.get('min'))+Js('-'))+var.get('generateClassAtom')(var.get('max')))
            PyJsHoisted_generateCharacterClassRange_.__name__ = 'generateCharacterClassRange'
            var.put('generateCharacterClassRange', PyJsHoisted_generateCharacterClassRange_)
            @Js
            def PyJsHoisted_generateAnchor_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('anchor'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('node').get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('start')):
                        SWITCHED = True
                        return Js('^')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('end')):
                        SWITCHED = True
                        return Js('$')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('boundary')):
                        SWITCHED = True
                        return Js('\\b')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('not-boundary')):
                        SWITCHED = True
                        return Js('\\B')
                    if True:
                        SWITCHED = True
                        PyJsTempException = JsToPyException(var.get('Error')(Js('Invalid assertion')))
                        raise PyJsTempException
                    SWITCHED = True
                    break
            PyJsHoisted_generateAnchor_.__name__ = 'generateAnchor'
            var.put('generateAnchor', PyJsHoisted_generateAnchor_)
            @Js
            def PyJsHoisted_generateAtom_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('anchor|characterClass|characterClassEscape|dot|group|reference|value'))
                return var.get('generate')(var.get('node'))
            PyJsHoisted_generateAtom_.__name__ = 'generateAtom'
            var.put('generateAtom', PyJsHoisted_generateAtom_)
            @Js
            def PyJsHoisted_generateAlternative_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'node', 'length', 'terms', 'result'])
                var.get('assertType')(var.get('node').get('type'), Js('alternative'))
                var.put('terms', var.get('node').get('body'))
                var.put('length', (var.get('terms').get('length') if var.get('terms') else Js(0.0)))
                if (var.get('length')==Js(1.0)):
                    return var.get('generateTerm')(var.get('terms').get('0'))
                else:
                    var.put('i', (-Js(1.0)))
                    var.put('result', Js(''))
                    while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('length')):
                        var.put('result', var.get('generateTerm')(var.get('terms').get(var.get('i'))), '+')
                    return var.get('result')
            PyJsHoisted_generateAlternative_.__name__ = 'generateAlternative'
            var.put('generateAlternative', PyJsHoisted_generateAlternative_)
            @Js
            def PyJsHoisted_generateValue_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'kind', 'codePoint'])
                var.get('assertType')(var.get('node').get('type'), Js('value'))
                var.put('kind', var.get('node').get('kind'))
                var.put('codePoint', var.get('node').get('codePoint'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('controlLetter')):
                        SWITCHED = True
                        return (Js('\\c')+var.get('fromCodePoint')((var.get('codePoint')+Js(64.0))))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hexadecimalEscape')):
                        SWITCHED = True
                        return (Js('\\x')+(Js('00')+var.get('codePoint').callprop('toString', Js(16.0)).callprop('toUpperCase')).callprop('slice', (-Js(2.0))))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('identifier')):
                        SWITCHED = True
                        return (Js('\\')+var.get('fromCodePoint')(var.get('codePoint')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('null')):
                        SWITCHED = True
                        return (Js('\\')+var.get('codePoint'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('octal')):
                        SWITCHED = True
                        return (Js('\\')+var.get('codePoint').callprop('toString', Js(8.0)))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('singleEscape')):
                        SWITCHED = True
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('codePoint'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(8)):
                                SWITCHED = True
                                return Js('\\b')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(9)):
                                SWITCHED = True
                                return Js('\\t')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(10)):
                                SWITCHED = True
                                return Js('\\n')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(11)):
                                SWITCHED = True
                                return Js('\\v')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(12)):
                                SWITCHED = True
                                return Js('\\f')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(13)):
                                SWITCHED = True
                                return Js('\\r')
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error')((Js('Invalid codepoint: ')+var.get('codePoint'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('symbol')):
                        SWITCHED = True
                        return var.get('fromCodePoint')(var.get('codePoint'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('unicodeEscape')):
                        SWITCHED = True
                        return (Js('\\u')+(Js('0000')+var.get('codePoint').callprop('toString', Js(16.0)).callprop('toUpperCase')).callprop('slice', (-Js(4.0))))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('unicodeCodePointEscape')):
                        SWITCHED = True
                        return ((Js('\\u{')+var.get('codePoint').callprop('toString', Js(16.0)).callprop('toUpperCase'))+Js('}'))
                    if True:
                        SWITCHED = True
                        PyJsTempException = JsToPyException(var.get('Error')((Js('Unsupported node kind: ')+var.get('kind'))))
                        raise PyJsTempException
                    SWITCHED = True
                    break
            PyJsHoisted_generateValue_.__name__ = 'generateValue'
            var.put('generateValue', PyJsHoisted_generateValue_)
            @Js
            def PyJsHoisted_generateGroup_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['body', 'i', 'length', 'node', 'result'])
                var.get('assertType')(var.get('node').get('type'), Js('group'))
                var.put('result', Js('('))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('node').get('behavior'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('normal')):
                        SWITCHED = True
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ignore')):
                        SWITCHED = True
                        var.put('result', Js('?:'), '+')
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('lookahead')):
                        SWITCHED = True
                        var.put('result', Js('?='), '+')
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('negativeLookahead')):
                        SWITCHED = True
                        var.put('result', Js('?!'), '+')
                        break
                    if True:
                        SWITCHED = True
                        PyJsTempException = JsToPyException(var.get('Error')((Js('Invalid behaviour: ')+var.get('node').get('behaviour'))))
                        raise PyJsTempException
                    SWITCHED = True
                    break
                var.put('body', var.get('node').get('body'))
                var.put('length', (var.get('body').get('length') if var.get('body') else Js(0.0)))
                if (var.get('length')==Js(1.0)):
                    var.put('result', var.get('generate')(var.get('body').get('0')), '+')
                else:
                    var.put('i', (-Js(1.0)))
                    while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('length')):
                        var.put('result', var.get('generate')(var.get('body').get(var.get('i'))), '+')
                var.put('result', Js(')'), '+')
                return var.get('result')
            PyJsHoisted_generateGroup_.__name__ = 'generateGroup'
            var.put('generateGroup', PyJsHoisted_generateGroup_)
            @Js
            def PyJsHoisted_generateReference_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('reference'))
                return (Js('\\')+var.get('node').get('matchIndex'))
            PyJsHoisted_generateReference_.__name__ = 'generateReference'
            var.put('generateReference', PyJsHoisted_generateReference_)
            @Js
            def PyJsHoisted_generateCharacterClassEscape_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('characterClassEscape'))
                return (Js('\\')+var.get('node').get('value'))
            PyJsHoisted_generateCharacterClassEscape_.__name__ = 'generateCharacterClassEscape'
            var.put('generateCharacterClassEscape', PyJsHoisted_generateCharacterClassEscape_)
            @Js
            def PyJsHoisted_generate_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'type'])
                var.put('type', var.get('node').get('type'))
                if (var.get('generate').callprop('hasOwnProperty', var.get('type')) and (var.get('generate').get(var.get('type')).typeof()==Js('function'))):
                    return var.get('generate').callprop(var.get('type'), var.get('node'))
                PyJsTempException = JsToPyException(var.get('Error')((Js('Invalid node type: ')+var.get('type'))))
                raise PyJsTempException
            PyJsHoisted_generate_.__name__ = 'generate'
            var.put('generate', PyJsHoisted_generate_)
            @Js
            def PyJsHoisted_generateDot_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('assertType')(var.get('node').get('type'), Js('dot'))
                return Js('.')
            PyJsHoisted_generateDot_.__name__ = 'generateDot'
            var.put('generateDot', PyJsHoisted_generateDot_)
            Js('use strict')
            PyJs_Object_4006_ = Js({'function':var.get('true'),'object':var.get('true')})
            var.put('objectTypes', PyJs_Object_4006_)
            var.put('root', ((var.get('objectTypes').get(var.get('window',throw=False).typeof()) and var.get('window')) or var.get("this")))
            var.put('oldRoot', var.get('root'))
            var.put('freeExports', (var.get('objectTypes').get(var.get('exports',throw=False).typeof()) and var.get('exports')))
            var.put('freeModule', (((var.get('objectTypes').get(var.get('module',throw=False).typeof()) and var.get('module')) and var.get('module').get('nodeType').neg()) and var.get('module')))
            var.put('freeGlobal', (((var.get('freeExports') and var.get('freeModule')) and (var.get('global',throw=False).typeof()==Js('object'))) and var.get('global')))
            if (var.get('freeGlobal') and ((PyJsStrictEq(var.get('freeGlobal').get('global'),var.get('freeGlobal')) or PyJsStrictEq(var.get('freeGlobal').get('window'),var.get('freeGlobal'))) or PyJsStrictEq(var.get('freeGlobal').get('self'),var.get('freeGlobal')))):
                var.put('root', var.get('freeGlobal'))
            var.put('stringFromCharCode', var.get('String').get('fromCharCode'))
            var.put('floor', var.get('Math').get('floor'))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.get('generate').put('alternative', var.get('generateAlternative'))
            var.get('generate').put('anchor', var.get('generateAnchor'))
            var.get('generate').put('characterClass', var.get('generateCharacterClass'))
            var.get('generate').put('characterClassEscape', var.get('generateCharacterClassEscape'))
            var.get('generate').put('characterClassRange', var.get('generateCharacterClassRange'))
            var.get('generate').put('disjunction', var.get('generateDisjunction'))
            var.get('generate').put('dot', var.get('generateDot'))
            var.get('generate').put('group', var.get('generateGroup'))
            var.get('generate').put('quantifier', var.get('generateQuantifier'))
            var.get('generate').put('reference', var.get('generateReference'))
            var.get('generate').put('value', var.get('generateValue'))
            if (((var.get('define',throw=False).typeof()==Js('function')) and (var.get('define').get('amd').typeof()==Js('object'))) and var.get('define').get('amd')):
                @Js
                def PyJs_anonymous_4007_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJs_Object_4008_ = Js({'generate':var.get('generate')})
                    return PyJs_Object_4008_
                PyJs_anonymous_4007_._set_name('anonymous')
                var.get('define')(PyJs_anonymous_4007_)
            else:
                if (var.get('freeExports') and var.get('freeModule')):
                    var.get('freeExports').put('generate', var.get('generate'))
                else:
                    PyJs_Object_4009_ = Js({'generate':var.get('generate')})
                    var.get('root').put('regjsgen', PyJs_Object_4009_)
        PyJs_anonymous_4005_._set_name('anonymous')
        PyJs_anonymous_4005_.callprop('call', var.get("this"))
    PyJs_anonymous_4004_._set_name('anonymous')
    PyJs_anonymous_4004_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_4003_))))
PyJs_anonymous_4002_._set_name('anonymous')
PyJs_Object_4010_ = Js({})
@Js
def PyJs_anonymous_4011_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_4012_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['parse', 'regjsparser'])
        @Js
        def PyJsHoisted_parse_(str, flags, this, arguments, var=var):
            var = Scope({'this':this, 'flags':flags, 'arguments':arguments, 'str':str}, var)
            var.registers(['parseQuantifier', 'parseDisjunction', 'flattenBody', 'backrefDenied', 'skip', 'matchReg', 'pos', 'closedCaptureCounter', 'result', 'addRaw', 'parseNonemptyClassRanges', 'parseHelperClassRanges', 'bail', 'parseIdentityEscape', 'createDot', 'incr', 'parseAnchor', 'parseAtom', 'parseAtomEscape', 'next', 'current', 'updateRawStart', 'isEmpty', 'createDisjunction', 'parseClassEscape', 'parseCharacterEscape', 'parseGroup', 'parseClassAtomNoDash', 'createAnchor', 'match', 'parseCharacterClass', 'createValue', 'str', 'createReference', 'parseNonemptyClassRangesNoDash', 'createCharacterClassEscape', 'hasUnicodeFlag', 'parseAlternative', 'firstIteration', 'isIdentifierPart', 'createQuantifier', 'createCharacter', 'i', 'lookahead', 'createClassRange', 'createAlternative', 'parseClassRanges', 'createEscaped', 'parseUnicodeSurrogatePairEscape', 'flags', 'parseTerm', 'createGroup', 'parseDecimalEscape', 'parseClassAtom', 'createCharacterClass'])
            @Js
            def PyJsHoisted_parseQuantifier_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'quantifier', 'from', 'max', 'min'])
                var.put('from', var.get('pos'))
                pass
                pass
                if var.get('match')(Js('*')):
                    var.put('quantifier', var.get('createQuantifier')(Js(0.0)))
                else:
                    if var.get('match')(Js('+')):
                        var.put('quantifier', var.get('createQuantifier')(Js(1.0)))
                    else:
                        if var.get('match')(Js('?')):
                            var.put('quantifier', var.get('createQuantifier')(Js(0.0), Js(1.0)))
                        else:
                            if var.put('res', var.get('matchReg')(JsRegExp('/^\\{([0-9]+)\\}/'))):
                                var.put('min', var.get('parseInt')(var.get('res').get('1'), Js(10.0)))
                                var.put('quantifier', var.get('createQuantifier')(var.get('min'), var.get('min'), var.get('res').get('range').get('0'), var.get('res').get('range').get('1')))
                            else:
                                if var.put('res', var.get('matchReg')(JsRegExp('/^\\{([0-9]+),\\}/'))):
                                    var.put('min', var.get('parseInt')(var.get('res').get('1'), Js(10.0)))
                                    var.put('quantifier', var.get('createQuantifier')(var.get('min'), var.get('undefined'), var.get('res').get('range').get('0'), var.get('res').get('range').get('1')))
                                else:
                                    if var.put('res', var.get('matchReg')(JsRegExp('/^\\{([0-9]+),([0-9]+)\\}/'))):
                                        var.put('min', var.get('parseInt')(var.get('res').get('1'), Js(10.0)))
                                        var.put('max', var.get('parseInt')(var.get('res').get('2'), Js(10.0)))
                                        if (var.get('min')>var.get('max')):
                                            var.get('bail')(Js('numbers out of order in {} quantifier'), Js(''), var.get('from'), var.get('pos'))
                                        var.put('quantifier', var.get('createQuantifier')(var.get('min'), var.get('max'), var.get('res').get('range').get('0'), var.get('res').get('range').get('1')))
                if var.get('quantifier'):
                    if var.get('match')(Js('?')):
                        var.get('quantifier').put('greedy', Js(False))
                        var.get('quantifier').get('range').put('1', Js(1.0), '+')
                return var.get('quantifier')
            PyJsHoisted_parseQuantifier_.__name__ = 'parseQuantifier'
            var.put('parseQuantifier', PyJsHoisted_parseQuantifier_)
            @Js
            def PyJsHoisted_parseDisjunction_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'from'])
                var.put('res', Js([]))
                var.put('from', var.get('pos'))
                var.get('res').callprop('push', var.get('parseAlternative')())
                while var.get('match')(Js('|')):
                    var.get('res').callprop('push', var.get('parseAlternative')())
                if PyJsStrictEq(var.get('res').get('length'),Js(1.0)):
                    return var.get('res').get('0')
                return var.get('createDisjunction')(var.get('res'), var.get('from'), var.get('pos'))
            PyJsHoisted_parseDisjunction_.__name__ = 'parseDisjunction'
            var.put('parseDisjunction', PyJsHoisted_parseDisjunction_)
            @Js
            def PyJsHoisted_flattenBody_(body, this, arguments, var=var):
                var = Scope({'body':body, 'this':this, 'arguments':arguments}, var)
                var.registers(['body'])
                if PyJsStrictEq(var.get('body').get('type'),Js('alternative')):
                    return var.get('body').get('body')
                else:
                    return Js([var.get('body')])
            PyJsHoisted_flattenBody_.__name__ = 'flattenBody'
            var.put('flattenBody', PyJsHoisted_flattenBody_)
            @Js
            def PyJsHoisted_skip_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                if var.get('match')(var.get('value')).neg():
                    var.get('bail')(Js('character'), var.get('value'))
            PyJsHoisted_skip_.__name__ = 'skip'
            var.put('skip', PyJsHoisted_skip_)
            @Js
            def PyJsHoisted_matchReg_(regExp, this, arguments, var=var):
                var = Scope({'this':this, 'regExp':regExp, 'arguments':arguments}, var)
                var.registers(['subStr', 'regExp', 'res'])
                var.put('subStr', var.get('str').callprop('substring', var.get('pos')))
                var.put('res', var.get('subStr').callprop('match', var.get('regExp')))
                if var.get('res'):
                    var.get('res').put('range', Js([]))
                    var.get('res').get('range').put('0', var.get('pos'))
                    var.get('incr')(var.get('res').get('0').get('length'))
                    var.get('res').get('range').put('1', var.get('pos'))
                return var.get('res')
            PyJsHoisted_matchReg_.__name__ = 'matchReg'
            var.put('matchReg', PyJsHoisted_matchReg_)
            @Js
            def PyJsHoisted_addRaw_(node, this, arguments, var=var):
                var = Scope({'node':node, 'this':this, 'arguments':arguments}, var)
                var.registers(['node'])
                var.get('node').put('raw', var.get('str').callprop('substring', var.get('node').get('range').get('0'), var.get('node').get('range').get('1')))
                return var.get('node')
            PyJsHoisted_addRaw_.__name__ = 'addRaw'
            var.put('addRaw', PyJsHoisted_addRaw_)
            @Js
            def PyJsHoisted_parseNonemptyClassRanges_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['atom'])
                var.put('atom', var.get('parseClassAtom')())
                if var.get('atom').neg():
                    var.get('bail')(Js('classAtom'))
                if var.get('current')(Js(']')):
                    return Js([var.get('atom')])
                return var.get('parseHelperClassRanges')(var.get('atom'))
            PyJsHoisted_parseNonemptyClassRanges_.__name__ = 'parseNonemptyClassRanges'
            var.put('parseNonemptyClassRanges', PyJsHoisted_parseNonemptyClassRanges_)
            @Js
            def PyJsHoisted_parseHelperClassRanges_(atom, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'atom':atom}, var)
                var.registers(['to', 'atom', 'from', 'classRanges', 'res'])
                pass
                if (var.get('current')(Js('-')) and var.get('next')(Js(']')).neg()):
                    var.get('skip')(Js('-'))
                    var.put('res', var.get('parseClassAtom')())
                    if var.get('res').neg():
                        var.get('bail')(Js('classAtom'))
                    var.put('to', var.get('pos'))
                    var.put('classRanges', var.get('parseClassRanges')())
                    if var.get('classRanges').neg():
                        var.get('bail')(Js('classRanges'))
                    var.put('from', var.get('atom').get('range').get('0'))
                    if PyJsStrictEq(var.get('classRanges').get('type'),Js('empty')):
                        return Js([var.get('createClassRange')(var.get('atom'), var.get('res'), var.get('from'), var.get('to'))])
                    return Js([var.get('createClassRange')(var.get('atom'), var.get('res'), var.get('from'), var.get('to'))]).callprop('concat', var.get('classRanges'))
                var.put('res', var.get('parseNonemptyClassRangesNoDash')())
                if var.get('res').neg():
                    var.get('bail')(Js('nonEmptyClassRangesNoDash'))
                return Js([var.get('atom')]).callprop('concat', var.get('res'))
            PyJsHoisted_parseHelperClassRanges_.__name__ = 'parseHelperClassRanges'
            var.put('parseHelperClassRanges', PyJsHoisted_parseHelperClassRanges_)
            @Js
            def PyJsHoisted_bail_(message, details, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'from':PyJsArg_66726f6d_, 'details':details, 'this':this, 'message':message, 'arguments':arguments}, var)
                var.registers(['from', 'contextEnd', 'to', 'details', 'context', 'contextStart', 'message', 'pointer'])
                var.put('from', (var.get('pos') if (var.get('from')==var.get("null")) else var.get('from')))
                var.put('to', (var.get('from') if (var.get('to')==var.get("null")) else var.get('to')))
                var.put('contextStart', var.get('Math').callprop('max', Js(0.0), (var.get('from')-Js(10.0))))
                var.put('contextEnd', var.get('Math').callprop('min', (var.get('to')+Js(10.0)), var.get('str').get('length')))
                var.put('context', (Js('    ')+var.get('str').callprop('substring', var.get('contextStart'), var.get('contextEnd'))))
                var.put('pointer', ((Js('    ')+var.get('Array').create(((var.get('from')-var.get('contextStart'))+Js(1.0))).callprop('join', Js(' ')))+Js('^')))
                PyJsTempException = JsToPyException(var.get('SyntaxError')((((((((var.get('message')+Js(' at position '))+var.get('from'))+((Js(': ')+var.get('details')) if var.get('details') else Js('')))+Js('\n'))+var.get('context'))+Js('\n'))+var.get('pointer'))))
                raise PyJsTempException
            PyJsHoisted_bail_.__name__ = 'bail'
            var.put('bail', PyJsHoisted_bail_)
            @Js
            def PyJsHoisted_parseIdentityEscape_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['tmp', 'ZWNJ', 'ZWJ'])
                var.put('ZWJ', Js('\u200c'))
                var.put('ZWNJ', Js('\u200d'))
                pass
                if var.get('isIdentifierPart')(var.get('lookahead')()).neg():
                    var.put('tmp', var.get('incr')())
                    return var.get('createEscaped')(Js('identifier'), var.get('tmp').callprop('charCodeAt', Js(0.0)), var.get('tmp'), Js(1.0))
                if var.get('match')(var.get('ZWJ')):
                    return var.get('createEscaped')(Js('identifier'), Js(8204), var.get('ZWJ'))
                else:
                    if var.get('match')(var.get('ZWNJ')):
                        return var.get('createEscaped')(Js('identifier'), Js(8205), var.get('ZWNJ'))
                return var.get("null")
            PyJsHoisted_parseIdentityEscape_.__name__ = 'parseIdentityEscape'
            var.put('parseIdentityEscape', PyJsHoisted_parseIdentityEscape_)
            @Js
            def PyJsHoisted_createDot_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJs_Object_4016_ = Js({'type':Js('dot'),'range':Js([(var.get('pos')-Js(1.0)), var.get('pos')])})
                return var.get('addRaw')(PyJs_Object_4016_)
            PyJsHoisted_createDot_.__name__ = 'createDot'
            var.put('createDot', PyJsHoisted_createDot_)
            @Js
            def PyJsHoisted_incr_(amount, this, arguments, var=var):
                var = Scope({'this':this, 'amount':amount, 'arguments':arguments}, var)
                var.registers(['res', 'amount'])
                var.put('amount', (var.get('amount') or Js(1.0)))
                var.put('res', var.get('str').callprop('substring', var.get('pos'), (var.get('pos')+var.get('amount'))))
                var.put('pos', (var.get('amount') or Js(1.0)), '+')
                return var.get('res')
            PyJsHoisted_incr_.__name__ = 'incr'
            var.put('incr', PyJsHoisted_incr_)
            @Js
            def PyJsHoisted_parseAnchor_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'from'])
                var.put('from', var.get('pos'))
                if var.get('match')(Js('^')):
                    return var.get('createAnchor')(Js('start'), Js(1.0))
                else:
                    if var.get('match')(Js('$')):
                        return var.get('createAnchor')(Js('end'), Js(1.0))
                    else:
                        if var.get('match')(Js('\\b')):
                            return var.get('createAnchor')(Js('boundary'), Js(2.0))
                        else:
                            if var.get('match')(Js('\\B')):
                                return var.get('createAnchor')(Js('not-boundary'), Js(2.0))
                            else:
                                return var.get('parseGroup')(Js('(?='), Js('lookahead'), Js('(?!'), Js('negativeLookahead'))
            PyJsHoisted_parseAnchor_.__name__ = 'parseAnchor'
            var.put('parseAnchor', PyJsHoisted_parseAnchor_)
            @Js
            def PyJsHoisted_parseAtom_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res'])
                pass
                if var.put('res', var.get('matchReg')(JsRegExp('/^[^^$\\\\.*+?(){[|]/'))):
                    return var.get('createCharacter')(var.get('res'))
                else:
                    if var.get('match')(Js('.')):
                        return var.get('createDot')()
                    else:
                        if var.get('match')(Js('\\')):
                            var.put('res', var.get('parseAtomEscape')())
                            if var.get('res').neg():
                                var.get('bail')(Js('atomEscape'))
                            return var.get('res')
                        else:
                            if var.put('res', var.get('parseCharacterClass')()):
                                return var.get('res')
                            else:
                                return var.get('parseGroup')(Js('(?:'), Js('ignore'), Js('('), Js('normal'))
            PyJsHoisted_parseAtom_.__name__ = 'parseAtom'
            var.put('parseAtom', PyJsHoisted_parseAtom_)
            @Js
            def PyJsHoisted_parseAtomEscape_(insideCharacterClass, this, arguments, var=var):
                var = Scope({'this':this, 'insideCharacterClass':insideCharacterClass, 'arguments':arguments}, var)
                var.registers(['res', 'insideCharacterClass', 'from'])
                var.put('from', var.get('pos'))
                var.put('res', var.get('parseDecimalEscape')())
                if var.get('res'):
                    return var.get('res')
                if var.get('insideCharacterClass'):
                    if var.get('match')(Js('b')):
                        return var.get('createEscaped')(Js('singleEscape'), Js(8), Js('\\b'))
                    else:
                        if var.get('match')(Js('B')):
                            var.get('bail')(Js('\\B not possible inside of CharacterClass'), Js(''), var.get('from'))
                var.put('res', var.get('parseCharacterEscape')())
                return var.get('res')
            PyJsHoisted_parseAtomEscape_.__name__ = 'parseAtomEscape'
            var.put('parseAtomEscape', PyJsHoisted_parseAtomEscape_)
            @Js
            def PyJsHoisted_next_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return PyJsStrictEq(var.get('str').get((var.get('pos')+Js(1.0))),var.get('value'))
            PyJsHoisted_next_.__name__ = 'next'
            var.put('next', PyJsHoisted_next_)
            @Js
            def PyJsHoisted_current_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return PyJsStrictEq(var.get('str').callprop('indexOf', var.get('value'), var.get('pos')),var.get('pos'))
            PyJsHoisted_current_.__name__ = 'current'
            var.put('current', PyJsHoisted_current_)
            @Js
            def PyJsHoisted_updateRawStart_(node, start, this, arguments, var=var):
                var = Scope({'node':node, 'start':start, 'this':this, 'arguments':arguments}, var)
                var.registers(['node', 'start'])
                var.get('node').get('range').put('0', var.get('start'))
                return var.get('addRaw')(var.get('node'))
            PyJsHoisted_updateRawStart_.__name__ = 'updateRawStart'
            var.put('updateRawStart', PyJsHoisted_updateRawStart_)
            @Js
            def PyJsHoisted_isEmpty_(obj, this, arguments, var=var):
                var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
                var.registers(['obj'])
                return PyJsStrictEq(var.get('obj').get('type'),Js('empty'))
            PyJsHoisted_isEmpty_.__name__ = 'isEmpty'
            var.put('isEmpty', PyJsHoisted_isEmpty_)
            @Js
            def PyJsHoisted_createDisjunction_(alternatives, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'this':this, 'from':PyJsArg_66726f6d_, 'alternatives':alternatives, 'arguments':arguments, 'to':to}, var)
                var.registers(['from', 'alternatives', 'to'])
                PyJs_Object_4015_ = Js({'type':Js('disjunction'),'body':var.get('alternatives'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4015_)
            PyJsHoisted_createDisjunction_.__name__ = 'createDisjunction'
            var.put('createDisjunction', PyJsHoisted_createDisjunction_)
            @Js
            def PyJsHoisted_parseClassEscape_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('parseAtomEscape')(var.get('true'))
            PyJsHoisted_parseClassEscape_.__name__ = 'parseClassEscape'
            var.put('parseClassEscape', PyJsHoisted_parseClassEscape_)
            @Js
            def PyJsHoisted_parseCharacterEscape_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'codePoint'])
                pass
                if var.put('res', var.get('matchReg')(JsRegExp('/^[fnrtv]/'))):
                    var.put('codePoint', Js(0.0))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('res').get('0'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('t')):
                            SWITCHED = True
                            var.put('codePoint', Js(9))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('n')):
                            SWITCHED = True
                            var.put('codePoint', Js(10))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('v')):
                            SWITCHED = True
                            var.put('codePoint', Js(11))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('f')):
                            SWITCHED = True
                            var.put('codePoint', Js(12))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('r')):
                            SWITCHED = True
                            var.put('codePoint', Js(13))
                            break
                        SWITCHED = True
                        break
                    return var.get('createEscaped')(Js('singleEscape'), var.get('codePoint'), (Js('\\')+var.get('res').get('0')))
                else:
                    if var.put('res', var.get('matchReg')(JsRegExp('/^c([a-zA-Z])/'))):
                        return var.get('createEscaped')(Js('controlLetter'), (var.get('res').get('1').callprop('charCodeAt', Js(0.0))%Js(32.0)), var.get('res').get('1'), Js(2.0))
                    else:
                        if var.put('res', var.get('matchReg')(JsRegExp('/^x([0-9a-fA-F]{2})/'))):
                            return var.get('createEscaped')(Js('hexadecimalEscape'), var.get('parseInt')(var.get('res').get('1'), Js(16.0)), var.get('res').get('1'), Js(2.0))
                        else:
                            if var.put('res', var.get('matchReg')(JsRegExp('/^u([0-9a-fA-F]{4})/'))):
                                return var.get('parseUnicodeSurrogatePairEscape')(var.get('createEscaped')(Js('unicodeEscape'), var.get('parseInt')(var.get('res').get('1'), Js(16.0)), var.get('res').get('1'), Js(2.0)))
                            else:
                                if (var.get('hasUnicodeFlag') and var.put('res', var.get('matchReg')(JsRegExp('/^u\\{([0-9a-fA-F]+)\\}/')))):
                                    return var.get('createEscaped')(Js('unicodeCodePointEscape'), var.get('parseInt')(var.get('res').get('1'), Js(16.0)), var.get('res').get('1'), Js(4.0))
                                else:
                                    return var.get('parseIdentityEscape')()
            PyJsHoisted_parseCharacterEscape_.__name__ = 'parseCharacterEscape'
            var.put('parseCharacterEscape', PyJsHoisted_parseCharacterEscape_)
            @Js
            def PyJsHoisted_parseGroup_(matchA, typeA, matchB, typeB, this, arguments, var=var):
                var = Scope({'matchB':matchB, 'matchA':matchA, 'this':this, 'arguments':arguments, 'typeA':typeA, 'typeB':typeB}, var)
                var.registers(['body', 'from', 'typeA', 'typeB', 'matchB', 'matchA', 'group', 'type'])
                var.put('type', var.get("null"))
                var.put('from', var.get('pos'))
                if var.get('match')(var.get('matchA')):
                    var.put('type', var.get('typeA'))
                else:
                    if var.get('match')(var.get('matchB')):
                        var.put('type', var.get('typeB'))
                    else:
                        return Js(False)
                var.put('body', var.get('parseDisjunction')())
                if var.get('body').neg():
                    var.get('bail')(Js('Expected disjunction'))
                var.get('skip')(Js(')'))
                var.put('group', var.get('createGroup')(var.get('type'), var.get('flattenBody')(var.get('body')), var.get('from'), var.get('pos')))
                if (var.get('type')==Js('normal')):
                    if var.get('firstIteration'):
                        (var.put('closedCaptureCounter',Js(var.get('closedCaptureCounter').to_number())+Js(1))-Js(1))
                return var.get('group')
            PyJsHoisted_parseGroup_.__name__ = 'parseGroup'
            var.put('parseGroup', PyJsHoisted_parseGroup_)
            @Js
            def PyJsHoisted_parseClassAtomNoDash_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res'])
                pass
                if var.put('res', var.get('matchReg')(JsRegExp('/^[^\\\\\\]-]/'))):
                    return var.get('createCharacter')(var.get('res').get('0'))
                else:
                    if var.get('match')(Js('\\')):
                        var.put('res', var.get('parseClassEscape')())
                        if var.get('res').neg():
                            var.get('bail')(Js('classEscape'))
                        return var.get('parseUnicodeSurrogatePairEscape')(var.get('res'))
            PyJsHoisted_parseClassAtomNoDash_.__name__ = 'parseClassAtomNoDash'
            var.put('parseClassAtomNoDash', PyJsHoisted_parseClassAtomNoDash_)
            @Js
            def PyJsHoisted_createAnchor_(kind, rawLength, this, arguments, var=var):
                var = Scope({'this':this, 'kind':kind, 'arguments':arguments, 'rawLength':rawLength}, var)
                var.registers(['kind', 'rawLength'])
                PyJs_Object_4013_ = Js({'type':Js('anchor'),'kind':var.get('kind'),'range':Js([(var.get('pos')-var.get('rawLength')), var.get('pos')])})
                return var.get('addRaw')(PyJs_Object_4013_)
            PyJsHoisted_createAnchor_.__name__ = 'createAnchor'
            var.put('createAnchor', PyJsHoisted_createAnchor_)
            @Js
            def PyJsHoisted_match_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                if PyJsStrictEq(var.get('str').callprop('indexOf', var.get('value'), var.get('pos')),var.get('pos')):
                    return var.get('incr')(var.get('value').get('length'))
            PyJsHoisted_match_.__name__ = 'match'
            var.put('match', PyJsHoisted_match_)
            @Js
            def PyJsHoisted_parseCharacterClass_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'from'])
                var.put('from', var.get('pos'))
                if var.put('res', var.get('matchReg')(JsRegExp('/^\\[\\^/'))):
                    var.put('res', var.get('parseClassRanges')())
                    var.get('skip')(Js(']'))
                    return var.get('createCharacterClass')(var.get('res'), var.get('true'), var.get('from'), var.get('pos'))
                else:
                    if var.get('match')(Js('[')):
                        var.put('res', var.get('parseClassRanges')())
                        var.get('skip')(Js(']'))
                        return var.get('createCharacterClass')(var.get('res'), Js(False), var.get('from'), var.get('pos'))
                return var.get("null")
            PyJsHoisted_parseCharacterClass_.__name__ = 'parseCharacterClass'
            var.put('parseCharacterClass', PyJsHoisted_parseCharacterClass_)
            @Js
            def PyJsHoisted_createValue_(kind, codePoint, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'kind':kind, 'from':PyJsArg_66726f6d_, 'arguments':arguments, 'this':this, 'codePoint':codePoint}, var)
                var.registers(['to', 'kind', 'from', 'codePoint'])
                PyJs_Object_4014_ = Js({'type':Js('value'),'kind':var.get('kind'),'codePoint':var.get('codePoint'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4014_)
            PyJsHoisted_createValue_.__name__ = 'createValue'
            var.put('createValue', PyJsHoisted_createValue_)
            @Js
            def PyJsHoisted_createReference_(matchIndex, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'matchIndex':matchIndex}, var)
                var.registers(['matchIndex'])
                PyJs_Object_4018_ = Js({'type':Js('reference'),'matchIndex':var.get('parseInt')(var.get('matchIndex'), Js(10.0)),'range':Js([((var.get('pos')-Js(1.0))-var.get('matchIndex').get('length')), var.get('pos')])})
                return var.get('addRaw')(PyJs_Object_4018_)
            PyJsHoisted_createReference_.__name__ = 'createReference'
            var.put('createReference', PyJsHoisted_createReference_)
            @Js
            def PyJsHoisted_parseNonemptyClassRangesNoDash_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res'])
                var.put('res', var.get('parseClassAtom')())
                if var.get('res').neg():
                    var.get('bail')(Js('classAtom'))
                if var.get('current')(Js(']')):
                    return var.get('res')
                return var.get('parseHelperClassRanges')(var.get('res'))
            PyJsHoisted_parseNonemptyClassRangesNoDash_.__name__ = 'parseNonemptyClassRangesNoDash'
            var.put('parseNonemptyClassRangesNoDash', PyJsHoisted_parseNonemptyClassRangesNoDash_)
            @Js
            def PyJsHoisted_createCharacterClassEscape_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                PyJs_Object_4017_ = Js({'type':Js('characterClassEscape'),'value':var.get('value'),'range':Js([(var.get('pos')-Js(2.0)), var.get('pos')])})
                return var.get('addRaw')(PyJs_Object_4017_)
            PyJsHoisted_createCharacterClassEscape_.__name__ = 'createCharacterClassEscape'
            var.put('createCharacterClassEscape', PyJsHoisted_createCharacterClassEscape_)
            @Js
            def PyJsHoisted_parseAlternative_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'term', 'from'])
                var.put('res', Js([]))
                var.put('from', var.get('pos'))
                pass
                while var.put('term', var.get('parseTerm')()):
                    var.get('res').callprop('push', var.get('term'))
                if PyJsStrictEq(var.get('res').get('length'),Js(1.0)):
                    return var.get('res').get('0')
                return var.get('createAlternative')(var.get('res'), var.get('from'), var.get('pos'))
            PyJsHoisted_parseAlternative_.__name__ = 'parseAlternative'
            var.put('parseAlternative', PyJsHoisted_parseAlternative_)
            @Js
            def PyJsHoisted_isIdentifierPart_(ch, this, arguments, var=var):
                var = Scope({'this':this, 'ch':ch, 'arguments':arguments}, var)
                var.registers(['ch', 'NonAsciiIdentifierPart'])
                def PyJs_LONG_4024_(var=var):
                    return var.get('RegExp').create(Js('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0-\u08b2\u08e4-\u0963\u0966-\u096f\u0971-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d01-\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191e\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1ab0-\u1abd\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1cf8\u1cf9\u1d00-\u1df5\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua69d\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua7ad\ua7b0\ua7b1\ua7f7-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\ua9e0-\ua9fe\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab5f\uab64\uab65\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe2d\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'))
                var.put('NonAsciiIdentifierPart', PyJs_LONG_4024_())
                def PyJs_LONG_4025_(var=var):
                    return ((((((PyJsStrictEq(var.get('ch'),Js(36.0)) or PyJsStrictEq(var.get('ch'),Js(95.0))) or ((var.get('ch')>=Js(65.0)) and (var.get('ch')<=Js(90.0)))) or ((var.get('ch')>=Js(97.0)) and (var.get('ch')<=Js(122.0)))) or ((var.get('ch')>=Js(48.0)) and (var.get('ch')<=Js(57.0)))) or PyJsStrictEq(var.get('ch'),Js(92.0))) or ((var.get('ch')>=Js(128)) and var.get('NonAsciiIdentifierPart').callprop('test', var.get('String').callprop('fromCharCode', var.get('ch')))))
                return PyJs_LONG_4025_()
            PyJsHoisted_isIdentifierPart_.__name__ = 'isIdentifierPart'
            var.put('isIdentifierPart', PyJsHoisted_isIdentifierPart_)
            @Js
            def PyJsHoisted_createQuantifier_(min, max, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'from':PyJsArg_66726f6d_, 'arguments':arguments, 'min':min, 'this':this, 'max':max}, var)
                var.registers(['max', 'from', 'to', 'min'])
                if (var.get('to')==var.get("null")):
                    var.put('from', (var.get('pos')-Js(1.0)))
                    var.put('to', var.get('pos'))
                PyJs_Object_4020_ = Js({'type':Js('quantifier'),'min':var.get('min'),'max':var.get('max'),'greedy':var.get('true'),'body':var.get("null"),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4020_)
            PyJsHoisted_createQuantifier_.__name__ = 'createQuantifier'
            var.put('createQuantifier', PyJsHoisted_createQuantifier_)
            @Js
            def PyJsHoisted_createCharacter_(matches, this, arguments, var=var):
                var = Scope({'matches':matches, 'this':this, 'arguments':arguments}, var)
                var.registers(['matches', '_char', 'second', 'first'])
                var.put('_char', var.get('matches').get('0'))
                var.put('first', var.get('_char').callprop('charCodeAt', Js(0.0)))
                if var.get('hasUnicodeFlag'):
                    pass
                    if ((PyJsStrictEq(var.get('_char').get('length'),Js(1.0)) and (var.get('first')>=Js(55296))) and (var.get('first')<=Js(56319))):
                        var.put('second', var.get('lookahead')().callprop('charCodeAt', Js(0.0)))
                        if ((var.get('second')>=Js(56320)) and (var.get('second')<=Js(57343))):
                            (var.put('pos',Js(var.get('pos').to_number())+Js(1))-Js(1))
                            return var.get('createValue')(Js('symbol'), (((((var.get('first')-Js(55296))*Js(1024))+var.get('second'))-Js(56320))+Js(65536)), (var.get('pos')-Js(2.0)), var.get('pos'))
                return var.get('createValue')(Js('symbol'), var.get('first'), (var.get('pos')-Js(1.0)), var.get('pos'))
            PyJsHoisted_createCharacter_.__name__ = 'createCharacter'
            var.put('createCharacter', PyJsHoisted_createCharacter_)
            @Js
            def PyJsHoisted_lookahead_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('str').get(var.get('pos'))
            PyJsHoisted_lookahead_.__name__ = 'lookahead'
            var.put('lookahead', PyJsHoisted_lookahead_)
            @Js
            def PyJsHoisted_createClassRange_(min, max, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'from':PyJsArg_66726f6d_, 'arguments':arguments, 'min':min, 'this':this, 'max':max}, var)
                var.registers(['max', 'from', 'to', 'min'])
                if (var.get('min').get('codePoint')>var.get('max').get('codePoint')):
                    var.get('bail')(Js('invalid range in character class'), ((var.get('min').get('raw')+Js('-'))+var.get('max').get('raw')), var.get('from'), var.get('to'))
                PyJs_Object_4023_ = Js({'type':Js('characterClassRange'),'min':var.get('min'),'max':var.get('max'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4023_)
            PyJsHoisted_createClassRange_.__name__ = 'createClassRange'
            var.put('createClassRange', PyJsHoisted_createClassRange_)
            @Js
            def PyJsHoisted_createAlternative_(terms, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'this':this, 'from':PyJsArg_66726f6d_, 'terms':terms, 'arguments':arguments, 'to':to}, var)
                var.registers(['from', 'terms', 'to'])
                PyJs_Object_4021_ = Js({'type':Js('alternative'),'body':var.get('terms'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4021_)
            PyJsHoisted_createAlternative_.__name__ = 'createAlternative'
            var.put('createAlternative', PyJsHoisted_createAlternative_)
            @Js
            def PyJsHoisted_parseClassRanges_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res'])
                pass
                if var.get('current')(Js(']')):
                    return Js([])
                else:
                    var.put('res', var.get('parseNonemptyClassRanges')())
                    if var.get('res').neg():
                        var.get('bail')(Js('nonEmptyClassRanges'))
                    return var.get('res')
            PyJsHoisted_parseClassRanges_.__name__ = 'parseClassRanges'
            var.put('parseClassRanges', PyJsHoisted_parseClassRanges_)
            @Js
            def PyJsHoisted_createEscaped_(kind, codePoint, value, fromOffset, this, arguments, var=var):
                var = Scope({'kind':kind, 'arguments':arguments, 'this':this, 'fromOffset':fromOffset, 'codePoint':codePoint, 'value':value}, var)
                var.registers(['kind', 'fromOffset', 'codePoint', 'value'])
                var.put('fromOffset', (var.get('fromOffset') or Js(0.0)))
                return var.get('createValue')(var.get('kind'), var.get('codePoint'), (var.get('pos')-(var.get('value').get('length')+var.get('fromOffset'))), var.get('pos'))
            PyJsHoisted_createEscaped_.__name__ = 'createEscaped'
            var.put('createEscaped', PyJsHoisted_createEscaped_)
            @Js
            def PyJsHoisted_parseUnicodeSurrogatePairEscape_(firstEscape, this, arguments, var=var):
                var = Scope({'firstEscape':firstEscape, 'this':this, 'arguments':arguments}, var)
                var.registers(['firstEscape', 'secondEscape', 'second', 'prevPos', 'first'])
                if var.get('hasUnicodeFlag'):
                    pass
                    if (((((var.get('firstEscape').get('kind')==Js('unicodeEscape')) and (var.put('first', var.get('firstEscape').get('codePoint'))>=Js(55296))) and (var.get('first')<=Js(56319))) and var.get('current')(Js('\\'))) and var.get('next')(Js('u'))):
                        var.put('prevPos', var.get('pos'))
                        (var.put('pos',Js(var.get('pos').to_number())+Js(1))-Js(1))
                        var.put('secondEscape', var.get('parseClassEscape')())
                        if (((var.get('secondEscape').get('kind')==Js('unicodeEscape')) and (var.put('second', var.get('secondEscape').get('codePoint'))>=Js(56320))) and (var.get('second')<=Js(57343))):
                            var.get('firstEscape').get('range').put('1', var.get('secondEscape').get('range').get('1'))
                            var.get('firstEscape').put('codePoint', (((((var.get('first')-Js(55296))*Js(1024))+var.get('second'))-Js(56320))+Js(65536)))
                            var.get('firstEscape').put('type', Js('value'))
                            var.get('firstEscape').put('kind', Js('unicodeCodePointEscape'))
                            var.get('addRaw')(var.get('firstEscape'))
                        else:
                            var.put('pos', var.get('prevPos'))
                return var.get('firstEscape')
            PyJsHoisted_parseUnicodeSurrogatePairEscape_.__name__ = 'parseUnicodeSurrogatePairEscape'
            var.put('parseUnicodeSurrogatePairEscape', PyJsHoisted_parseUnicodeSurrogatePairEscape_)
            @Js
            def PyJsHoisted_parseTerm_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['quantifier', 'anchor', 'atom'])
                if (((var.get('pos')>=var.get('str').get('length')) or var.get('current')(Js('|'))) or var.get('current')(Js(')'))):
                    return var.get("null")
                var.put('anchor', var.get('parseAnchor')())
                if var.get('anchor'):
                    return var.get('anchor')
                var.put('atom', var.get('parseAtom')())
                if var.get('atom').neg():
                    var.get('bail')(Js('Expected atom'))
                var.put('quantifier', (var.get('parseQuantifier')() or Js(False)))
                if var.get('quantifier'):
                    var.get('quantifier').put('body', var.get('flattenBody')(var.get('atom')))
                    var.get('updateRawStart')(var.get('quantifier'), var.get('atom').get('range').get('0'))
                    return var.get('quantifier')
                return var.get('atom')
            PyJsHoisted_parseTerm_.__name__ = 'parseTerm'
            var.put('parseTerm', PyJsHoisted_parseTerm_)
            @Js
            def PyJsHoisted_createGroup_(behavior, disjunction, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'from':PyJsArg_66726f6d_, 'arguments':arguments, 'behavior':behavior, 'this':this, 'disjunction':disjunction}, var)
                var.registers(['to', 'disjunction', 'from', 'behavior'])
                PyJs_Object_4019_ = Js({'type':Js('group'),'behavior':var.get('behavior'),'body':var.get('disjunction'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4019_)
            PyJsHoisted_createGroup_.__name__ = 'createGroup'
            var.put('createGroup', PyJsHoisted_createGroup_)
            @Js
            def PyJsHoisted_parseDecimalEscape_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['res', 'refIdx', 'match'])
                pass
                if var.put('res', var.get('matchReg')(JsRegExp('/^(?!0)\\d+/'))):
                    var.put('match', var.get('res').get('0'))
                    var.put('refIdx', var.get('parseInt')(var.get('res').get('0'), Js(10.0)))
                    if (var.get('refIdx')<=var.get('closedCaptureCounter')):
                        return var.get('createReference')(var.get('res').get('0'))
                    else:
                        var.get('backrefDenied').callprop('push', var.get('refIdx'))
                        var.get('incr')((-var.get('res').get('0').get('length')))
                        if var.put('res', var.get('matchReg')(JsRegExp('/^[0-7]{1,3}/'))):
                            return var.get('createEscaped')(Js('octal'), var.get('parseInt')(var.get('res').get('0'), Js(8.0)), var.get('res').get('0'), Js(1.0))
                        else:
                            var.put('res', var.get('createCharacter')(var.get('matchReg')(JsRegExp('/^[89]/'))))
                            return var.get('updateRawStart')(var.get('res'), (var.get('res').get('range').get('0')-Js(1.0)))
                else:
                    if var.put('res', var.get('matchReg')(JsRegExp('/^[0-7]{1,3}/'))):
                        var.put('match', var.get('res').get('0'))
                        if JsRegExp('/^0{1,3}$/').callprop('test', var.get('match')):
                            return var.get('createEscaped')(Js('null'), Js(0), Js('0'), (var.get('match').get('length')+Js(1.0)))
                        else:
                            return var.get('createEscaped')(Js('octal'), var.get('parseInt')(var.get('match'), Js(8.0)), var.get('match'), Js(1.0))
                    else:
                        if var.put('res', var.get('matchReg')(JsRegExp('/^[dDsSwW]/'))):
                            return var.get('createCharacterClassEscape')(var.get('res').get('0'))
                return Js(False)
            PyJsHoisted_parseDecimalEscape_.__name__ = 'parseDecimalEscape'
            var.put('parseDecimalEscape', PyJsHoisted_parseDecimalEscape_)
            @Js
            def PyJsHoisted_parseClassAtom_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('match')(Js('-')):
                    return var.get('createCharacter')(Js('-'))
                else:
                    return var.get('parseClassAtomNoDash')()
            PyJsHoisted_parseClassAtom_.__name__ = 'parseClassAtom'
            var.put('parseClassAtom', PyJsHoisted_parseClassAtom_)
            @Js
            def PyJsHoisted_createCharacterClass_(classRanges, negative, PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'to':to, 'from':PyJsArg_66726f6d_, 'classRanges':classRanges, 'this':this, 'negative':negative, 'arguments':arguments}, var)
                var.registers(['to', 'from', 'classRanges', 'negative'])
                PyJs_Object_4022_ = Js({'type':Js('characterClass'),'body':var.get('classRanges'),'negative':var.get('negative'),'range':Js([var.get('from'), var.get('to')])})
                return var.get('addRaw')(PyJs_Object_4022_)
            PyJsHoisted_createCharacterClass_.__name__ = 'createCharacterClass'
            var.put('createCharacterClass', PyJsHoisted_createCharacterClass_)
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.put('backrefDenied', Js([]))
            var.put('closedCaptureCounter', Js(0.0))
            var.put('firstIteration', var.get('true'))
            var.put('hasUnicodeFlag', PyJsStrictNeq((var.get('flags') or Js('')).callprop('indexOf', Js('u')),(-Js(1.0))))
            var.put('pos', Js(0.0))
            var.put('str', var.get('String')(var.get('str')))
            if PyJsStrictEq(var.get('str'),Js('')):
                var.put('str', Js('(?:)'))
            var.put('result', var.get('parseDisjunction')())
            if PyJsStrictNeq(var.get('result').get('range').get('1'),var.get('str').get('length')):
                var.get('bail')(Js('Could not parse entire input - got stuck'), Js(''), var.get('result').get('range').get('1'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('backrefDenied').get('length')):
                try:
                    if (var.get('backrefDenied').get(var.get('i'))<=var.get('closedCaptureCounter')):
                        var.put('pos', Js(0.0))
                        var.put('firstIteration', Js(False))
                        return var.get('parseDisjunction')()
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('result')
        PyJsHoisted_parse_.__name__ = 'parse'
        var.put('parse', PyJsHoisted_parse_)
        pass
        PyJs_Object_4026_ = Js({'parse':var.get('parse')})
        var.put('regjsparser', PyJs_Object_4026_)
        if (PyJsStrictNeq(var.get('module',throw=False).typeof(),Js('undefined')) and var.get('module').get('exports')):
            var.get('module').put('exports', var.get('regjsparser'))
        else:
            var.get('window').put('regjsparser', var.get('regjsparser'))
    PyJs_anonymous_4012_._set_name('anonymous')
    PyJs_anonymous_4012_()
PyJs_anonymous_4011_._set_name('anonymous')
PyJs_Object_4027_ = Js({})
@Js
def PyJs_anonymous_4028_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'isFinite', 'module'])
    Js('use strict')
    var.put('isFinite', var.get('require')(Js('is-finite')))
    @Js
    def PyJs_anonymous_4029_(str, n, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str, 'n':n}, var)
        var.registers(['str', 'ret', 'n'])
        if PyJsStrictNeq(var.get('str',throw=False).typeof(),Js('string')):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Expected `input` to be a string')))
            raise PyJsTempException
        if ((var.get('n')<Js(0.0)) or var.get('isFinite')(var.get('n')).neg()):
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Expected `count` to be a positive finite number')))
            raise PyJsTempException
        var.put('ret', Js(''))
        while 1:
            if (var.get('n')&Js(1.0)):
                var.put('ret', var.get('str'), '+')
            var.put('str', var.get('str'), '+')
            if not var.put('n', Js(1.0), '>>'):
                break
        return var.get('ret')
    PyJs_anonymous_4029_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_4029_)
PyJs_anonymous_4028_._set_name('anonymous')
PyJs_Object_4030_ = Js({'is-finite':Js(281.0)})
@Js
def PyJs_anonymous_4031_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    @Js
    def PyJs_anonymous_4032_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['isExtendedLengthPath', 'hasNonAscii', 'str'])
        var.put('isExtendedLengthPath', JsRegExp('/^\\\\\\\\\\?\\\\/').callprop('test', var.get('str')))
        var.put('hasNonAscii', JsRegExp('/[^\\x00-\\x80]+/').callprop('test', var.get('str')))
        if (var.get('isExtendedLengthPath') or var.get('hasNonAscii')):
            return var.get('str')
        return var.get('str').callprop('replace', JsRegExp('/\\\\/g'), Js('/'))
    PyJs_anonymous_4032_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_4032_)
PyJs_anonymous_4031_._set_name('anonymous')
PyJs_Object_4033_ = Js({})
@Js
def PyJs_anonymous_4034_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'require', 'module', 'util', 'ArraySet', 'has'])
    @Js
    def PyJsHoisted_ArraySet_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('_array', Js([]))
        var.get("this").put('_set', var.get('Object').callprop('create', var.get("null")))
    PyJsHoisted_ArraySet_.__name__ = 'ArraySet'
    var.put('ArraySet', PyJsHoisted_ArraySet_)
    var.put('util', var.get('require')(Js('./util')))
    var.put('has', var.get('Object').get('prototype').get('hasOwnProperty'))
    pass
    @Js
    def PyJs_ArraySet_fromArray_4035_(aArray, aAllowDuplicates, this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_fromArray':PyJs_ArraySet_fromArray_4035_, 'aAllowDuplicates':aAllowDuplicates, 'aArray':aArray, 'arguments':arguments}, var)
        var.registers(['i', 'aAllowDuplicates', 'set', 'aArray', 'len'])
        var.put('set', var.get('ArraySet').create())
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('aArray').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('set').callprop('add', var.get('aArray').get(var.get('i')), var.get('aAllowDuplicates'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('set')
    PyJs_ArraySet_fromArray_4035_._set_name('ArraySet_fromArray')
    var.get('ArraySet').put('fromArray', PyJs_ArraySet_fromArray_4035_)
    @Js
    def PyJs_ArraySet_size_4036_(this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_size':PyJs_ArraySet_size_4036_, 'arguments':arguments}, var)
        var.registers([])
        return var.get('Object').callprop('getOwnPropertyNames', var.get("this").get('_set')).get('length')
    PyJs_ArraySet_size_4036_._set_name('ArraySet_size')
    var.get('ArraySet').get('prototype').put('size', PyJs_ArraySet_size_4036_)
    @Js
    def PyJs_ArraySet_add_4037_(aStr, aAllowDuplicates, this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_add':PyJs_ArraySet_add_4037_, 'aStr':aStr, 'arguments':arguments, 'aAllowDuplicates':aAllowDuplicates}, var)
        var.registers(['sStr', 'isDuplicate', 'aStr', 'aAllowDuplicates', 'idx'])
        var.put('sStr', var.get('util').callprop('toSetString', var.get('aStr')))
        var.put('isDuplicate', var.get('has').callprop('call', var.get("this").get('_set'), var.get('sStr')))
        var.put('idx', var.get("this").get('_array').get('length'))
        if (var.get('isDuplicate').neg() or var.get('aAllowDuplicates')):
            var.get("this").get('_array').callprop('push', var.get('aStr'))
        if var.get('isDuplicate').neg():
            var.get("this").get('_set').put(var.get('sStr'), var.get('idx'))
    PyJs_ArraySet_add_4037_._set_name('ArraySet_add')
    var.get('ArraySet').get('prototype').put('add', PyJs_ArraySet_add_4037_)
    @Js
    def PyJs_ArraySet_has_4038_(aStr, this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_has':PyJs_ArraySet_has_4038_, 'aStr':aStr, 'arguments':arguments}, var)
        var.registers(['sStr', 'aStr'])
        var.put('sStr', var.get('util').callprop('toSetString', var.get('aStr')))
        return var.get('has').callprop('call', var.get("this").get('_set'), var.get('sStr'))
    PyJs_ArraySet_has_4038_._set_name('ArraySet_has')
    var.get('ArraySet').get('prototype').put('has', PyJs_ArraySet_has_4038_)
    @Js
    def PyJs_ArraySet_indexOf_4039_(aStr, this, arguments, var=var):
        var = Scope({'this':this, 'aStr':aStr, 'ArraySet_indexOf':PyJs_ArraySet_indexOf_4039_, 'arguments':arguments}, var)
        var.registers(['sStr', 'aStr'])
        var.put('sStr', var.get('util').callprop('toSetString', var.get('aStr')))
        if var.get('has').callprop('call', var.get("this").get('_set'), var.get('sStr')):
            return var.get("this").get('_set').get(var.get('sStr'))
        PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aStr'))+Js('" is not in the set.'))))
        raise PyJsTempException
    PyJs_ArraySet_indexOf_4039_._set_name('ArraySet_indexOf')
    var.get('ArraySet').get('prototype').put('indexOf', PyJs_ArraySet_indexOf_4039_)
    @Js
    def PyJs_ArraySet_at_4040_(aIdx, this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_at':PyJs_ArraySet_at_4040_, 'aIdx':aIdx, 'arguments':arguments}, var)
        var.registers(['aIdx'])
        if ((var.get('aIdx')>=Js(0.0)) and (var.get('aIdx')<var.get("this").get('_array').get('length'))):
            return var.get("this").get('_array').get(var.get('aIdx'))
        PyJsTempException = JsToPyException(var.get('Error').create((Js('No element indexed by ')+var.get('aIdx'))))
        raise PyJsTempException
    PyJs_ArraySet_at_4040_._set_name('ArraySet_at')
    var.get('ArraySet').get('prototype').put('at', PyJs_ArraySet_at_4040_)
    @Js
    def PyJs_ArraySet_toArray_4041_(this, arguments, var=var):
        var = Scope({'this':this, 'ArraySet_toArray':PyJs_ArraySet_toArray_4041_, 'arguments':arguments}, var)
        var.registers([])
        return var.get("this").get('_array').callprop('slice')
    PyJs_ArraySet_toArray_4041_._set_name('ArraySet_toArray')
    var.get('ArraySet').get('prototype').put('toArray', PyJs_ArraySet_toArray_4041_)
    var.get('exports').put('ArraySet', var.get('ArraySet'))
PyJs_anonymous_4034_._set_name('anonymous')
PyJs_Object_4042_ = Js({'./util':Js(518.0)})
@Js
def PyJs_anonymous_4043_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'VLQ_CONTINUATION_BIT', 'VLQ_BASE', 'require', 'base64', 'toVLQSigned', 'module', 'VLQ_BASE_MASK', 'fromVLQSigned', 'VLQ_BASE_SHIFT'])
    @Js
    def PyJsHoisted_toVLQSigned_(aValue, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'aValue':aValue}, var)
        var.registers(['aValue'])
        return ((((-var.get('aValue'))<<Js(1.0))+Js(1.0)) if (var.get('aValue')<Js(0.0)) else ((var.get('aValue')<<Js(1.0))+Js(0.0)))
    PyJsHoisted_toVLQSigned_.__name__ = 'toVLQSigned'
    var.put('toVLQSigned', PyJsHoisted_toVLQSigned_)
    @Js
    def PyJsHoisted_fromVLQSigned_(aValue, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'aValue':aValue}, var)
        var.registers(['shifted', 'aValue', 'isNegative'])
        var.put('isNegative', PyJsStrictEq((var.get('aValue')&Js(1.0)),Js(1.0)))
        var.put('shifted', (var.get('aValue')>>Js(1.0)))
        return ((-var.get('shifted')) if var.get('isNegative') else var.get('shifted'))
    PyJsHoisted_fromVLQSigned_.__name__ = 'fromVLQSigned'
    var.put('fromVLQSigned', PyJsHoisted_fromVLQSigned_)
    var.put('base64', var.get('require')(Js('./base64')))
    var.put('VLQ_BASE_SHIFT', Js(5.0))
    var.put('VLQ_BASE', (Js(1.0)<<var.get('VLQ_BASE_SHIFT')))
    var.put('VLQ_BASE_MASK', (var.get('VLQ_BASE')-Js(1.0)))
    var.put('VLQ_CONTINUATION_BIT', var.get('VLQ_BASE'))
    pass
    pass
    @Js
    def PyJs_base64VLQ_encode_4044_(aValue, this, arguments, var=var):
        var = Scope({'this':this, 'base64VLQ_encode':PyJs_base64VLQ_encode_4044_, 'arguments':arguments, 'aValue':aValue}, var)
        var.registers(['vlq', 'encoded', 'digit', 'aValue'])
        var.put('encoded', Js(''))
        pass
        var.put('vlq', var.get('toVLQSigned')(var.get('aValue')))
        while 1:
            var.put('digit', (var.get('vlq')&var.get('VLQ_BASE_MASK')))
            var.put('vlq', var.get('VLQ_BASE_SHIFT'), '>>>')
            if (var.get('vlq')>Js(0.0)):
                var.put('digit', var.get('VLQ_CONTINUATION_BIT'), '|')
            var.put('encoded', var.get('base64').callprop('encode', var.get('digit')), '+')
            if not (var.get('vlq')>Js(0.0)):
                break
        return var.get('encoded')
    PyJs_base64VLQ_encode_4044_._set_name('base64VLQ_encode')
    var.get('exports').put('encode', PyJs_base64VLQ_encode_4044_)
    @Js
    def PyJs_base64VLQ_decode_4045_(aStr, aIndex, aOutParam, this, arguments, var=var):
        var = Scope({'base64VLQ_decode':PyJs_base64VLQ_decode_4045_, 'this':this, 'arguments':arguments, 'aStr':aStr, 'aOutParam':aOutParam, 'aIndex':aIndex}, var)
        var.registers(['digit', 'shift', 'result', 'continuation', 'aStr', 'aOutParam', 'strLen', 'aIndex'])
        var.put('strLen', var.get('aStr').get('length'))
        var.put('result', Js(0.0))
        var.put('shift', Js(0.0))
        pass
        while 1:
            if (var.get('aIndex')>=var.get('strLen')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Expected more digits in base 64 VLQ value.')))
                raise PyJsTempException
            var.put('digit', var.get('base64').callprop('decode', var.get('aStr').callprop('charCodeAt', (var.put('aIndex',Js(var.get('aIndex').to_number())+Js(1))-Js(1)))))
            if PyJsStrictEq(var.get('digit'),(-Js(1.0))):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid base64 digit: ')+var.get('aStr').callprop('charAt', (var.get('aIndex')-Js(1.0))))))
                raise PyJsTempException
            var.put('continuation', (var.get('digit')&var.get('VLQ_CONTINUATION_BIT')).neg().neg())
            var.put('digit', var.get('VLQ_BASE_MASK'), '&')
            var.put('result', (var.get('result')+(var.get('digit')<<var.get('shift'))))
            var.put('shift', var.get('VLQ_BASE_SHIFT'), '+')
            if not var.get('continuation'):
                break
        var.get('aOutParam').put('value', var.get('fromVLQSigned')(var.get('result')))
        var.get('aOutParam').put('rest', var.get('aIndex'))
    PyJs_base64VLQ_decode_4045_._set_name('base64VLQ_decode')
    var.get('exports').put('decode', PyJs_base64VLQ_decode_4045_)
PyJs_anonymous_4043_._set_name('anonymous')
PyJs_Object_4046_ = Js({'./base64':Js(511.0)})
@Js
def PyJs_anonymous_4047_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['intToCharMap', 'exports', 'require', 'module'])
    var.put('intToCharMap', Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/').callprop('split', Js('')))
    @Js
    def PyJs_anonymous_4048_(number, this, arguments, var=var):
        var = Scope({'this':this, 'number':number, 'arguments':arguments}, var)
        var.registers(['number'])
        if ((Js(0.0)<=var.get('number')) and (var.get('number')<var.get('intToCharMap').get('length'))):
            return var.get('intToCharMap').get(var.get('number'))
        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Must be between 0 and 63: ')+var.get('number'))))
        raise PyJsTempException
    PyJs_anonymous_4048_._set_name('anonymous')
    var.get('exports').put('encode', PyJs_anonymous_4048_)
    @Js
    def PyJs_anonymous_4049_(charCode, this, arguments, var=var):
        var = Scope({'this':this, 'charCode':charCode, 'arguments':arguments}, var)
        var.registers(['bigZ', 'littleOffset', 'charCode', 'numberOffset', 'littleA', 'littleZ', 'zero', 'nine', 'slash', 'plus', 'bigA'])
        var.put('bigA', Js(65.0))
        var.put('bigZ', Js(90.0))
        var.put('littleA', Js(97.0))
        var.put('littleZ', Js(122.0))
        var.put('zero', Js(48.0))
        var.put('nine', Js(57.0))
        var.put('plus', Js(43.0))
        var.put('slash', Js(47.0))
        var.put('littleOffset', Js(26.0))
        var.put('numberOffset', Js(52.0))
        if ((var.get('bigA')<=var.get('charCode')) and (var.get('charCode')<=var.get('bigZ'))):
            return (var.get('charCode')-var.get('bigA'))
        if ((var.get('littleA')<=var.get('charCode')) and (var.get('charCode')<=var.get('littleZ'))):
            return ((var.get('charCode')-var.get('littleA'))+var.get('littleOffset'))
        if ((var.get('zero')<=var.get('charCode')) and (var.get('charCode')<=var.get('nine'))):
            return ((var.get('charCode')-var.get('zero'))+var.get('numberOffset'))
        if (var.get('charCode')==var.get('plus')):
            return Js(62.0)
        if (var.get('charCode')==var.get('slash')):
            return Js(63.0)
        return (-Js(1.0))
    PyJs_anonymous_4049_._set_name('anonymous')
    var.get('exports').put('decode', PyJs_anonymous_4049_)
PyJs_anonymous_4047_._set_name('anonymous')
PyJs_Object_4050_ = Js({})
@Js
def PyJs_anonymous_4051_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module', 'recursiveSearch'])
    @Js
    def PyJsHoisted_recursiveSearch_(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias, this, arguments, var=var):
        var = Scope({'aNeedle':aNeedle, 'this':this, 'aBias':aBias, 'aCompare':aCompare, 'aHigh':aHigh, 'aLow':aLow, 'aHaystack':aHaystack, 'arguments':arguments}, var)
        var.registers(['aNeedle', 'aBias', 'mid', 'aCompare', 'aHigh', 'aLow', 'aHaystack', 'cmp'])
        var.put('mid', (var.get('Math').callprop('floor', ((var.get('aHigh')-var.get('aLow'))/Js(2.0)))+var.get('aLow')))
        var.put('cmp', var.get('aCompare')(var.get('aNeedle'), var.get('aHaystack').get(var.get('mid')), var.get('true')))
        if PyJsStrictEq(var.get('cmp'),Js(0.0)):
            return var.get('mid')
        else:
            if (var.get('cmp')>Js(0.0)):
                if ((var.get('aHigh')-var.get('mid'))>Js(1.0)):
                    return var.get('recursiveSearch')(var.get('mid'), var.get('aHigh'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'), var.get('aBias'))
                if (var.get('aBias')==var.get('exports').get('LEAST_UPPER_BOUND')):
                    return (var.get('aHigh') if (var.get('aHigh')<var.get('aHaystack').get('length')) else (-Js(1.0)))
                else:
                    return var.get('mid')
            else:
                if ((var.get('mid')-var.get('aLow'))>Js(1.0)):
                    return var.get('recursiveSearch')(var.get('aLow'), var.get('mid'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'), var.get('aBias'))
                if (var.get('aBias')==var.get('exports').get('LEAST_UPPER_BOUND')):
                    return var.get('mid')
                else:
                    return ((-Js(1.0)) if (var.get('aLow')<Js(0.0)) else var.get('aLow'))
    PyJsHoisted_recursiveSearch_.__name__ = 'recursiveSearch'
    var.put('recursiveSearch', PyJsHoisted_recursiveSearch_)
    var.get('exports').put('GREATEST_LOWER_BOUND', Js(1.0))
    var.get('exports').put('LEAST_UPPER_BOUND', Js(2.0))
    pass
    @Js
    def PyJs_search_4052_(aNeedle, aHaystack, aCompare, aBias, this, arguments, var=var):
        var = Scope({'search':PyJs_search_4052_, 'aNeedle':aNeedle, 'arguments':arguments, 'aHaystack':aHaystack, 'this':this, 'aBias':aBias, 'aCompare':aCompare}, var)
        var.registers(['aBias', 'index', 'aNeedle', 'aCompare', 'aHaystack'])
        if PyJsStrictEq(var.get('aHaystack').get('length'),Js(0.0)):
            return (-Js(1.0))
        var.put('index', var.get('recursiveSearch')((-Js(1.0)), var.get('aHaystack').get('length'), var.get('aNeedle'), var.get('aHaystack'), var.get('aCompare'), (var.get('aBias') or var.get('exports').get('GREATEST_LOWER_BOUND'))))
        if (var.get('index')<Js(0.0)):
            return (-Js(1.0))
        while ((var.get('index')-Js(1.0))>=Js(0.0)):
            if PyJsStrictNeq(var.get('aCompare')(var.get('aHaystack').get(var.get('index')), var.get('aHaystack').get((var.get('index')-Js(1.0))), var.get('true')),Js(0.0)):
                break
            var.put('index',Js(var.get('index').to_number())-Js(1))
        return var.get('index')
    PyJs_search_4052_._set_name('search')
    var.get('exports').put('search', PyJs_search_4052_)
PyJs_anonymous_4051_._set_name('anonymous')
PyJs_Object_4053_ = Js({})
@Js
def PyJs_anonymous_4054_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['generatedPositionAfter', 'require', 'exports', 'module', 'util', 'MappingList'])
    @Js
    def PyJsHoisted_generatedPositionAfter_(mappingA, mappingB, this, arguments, var=var):
        var = Scope({'this':this, 'mappingB':mappingB, 'arguments':arguments, 'mappingA':mappingA}, var)
        var.registers(['columnA', 'columnB', 'mappingB', 'mappingA', 'lineB', 'lineA'])
        var.put('lineA', var.get('mappingA').get('generatedLine'))
        var.put('lineB', var.get('mappingB').get('generatedLine'))
        var.put('columnA', var.get('mappingA').get('generatedColumn'))
        var.put('columnB', var.get('mappingB').get('generatedColumn'))
        return (((var.get('lineB')>var.get('lineA')) or ((var.get('lineB')==var.get('lineA')) and (var.get('columnB')>=var.get('columnA')))) or (var.get('util').callprop('compareByGeneratedPositionsInflated', var.get('mappingA'), var.get('mappingB'))<=Js(0.0)))
    PyJsHoisted_generatedPositionAfter_.__name__ = 'generatedPositionAfter'
    var.put('generatedPositionAfter', PyJsHoisted_generatedPositionAfter_)
    @Js
    def PyJsHoisted_MappingList_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('_array', Js([]))
        var.get("this").put('_sorted', var.get('true'))
        PyJs_Object_4055_ = Js({'generatedLine':(-Js(1.0)),'generatedColumn':Js(0.0)})
        var.get("this").put('_last', PyJs_Object_4055_)
    PyJsHoisted_MappingList_.__name__ = 'MappingList'
    var.put('MappingList', PyJsHoisted_MappingList_)
    var.put('util', var.get('require')(Js('./util')))
    pass
    pass
    @Js
    def PyJs_MappingList_forEach_4056_(aCallback, aThisArg, this, arguments, var=var):
        var = Scope({'this':this, 'aThisArg':aThisArg, 'aCallback':aCallback, 'MappingList_forEach':PyJs_MappingList_forEach_4056_, 'arguments':arguments}, var)
        var.registers(['aThisArg', 'aCallback'])
        var.get("this").get('_array').callprop('forEach', var.get('aCallback'), var.get('aThisArg'))
    PyJs_MappingList_forEach_4056_._set_name('MappingList_forEach')
    var.get('MappingList').get('prototype').put('unsortedForEach', PyJs_MappingList_forEach_4056_)
    @Js
    def PyJs_MappingList_add_4057_(aMapping, this, arguments, var=var):
        var = Scope({'this':this, 'MappingList_add':PyJs_MappingList_add_4057_, 'aMapping':aMapping, 'arguments':arguments}, var)
        var.registers(['aMapping'])
        if var.get('generatedPositionAfter')(var.get("this").get('_last'), var.get('aMapping')):
            var.get("this").put('_last', var.get('aMapping'))
            var.get("this").get('_array').callprop('push', var.get('aMapping'))
        else:
            var.get("this").put('_sorted', Js(False))
            var.get("this").get('_array').callprop('push', var.get('aMapping'))
    PyJs_MappingList_add_4057_._set_name('MappingList_add')
    var.get('MappingList').get('prototype').put('add', PyJs_MappingList_add_4057_)
    @Js
    def PyJs_MappingList_toArray_4058_(this, arguments, var=var):
        var = Scope({'this':this, 'MappingList_toArray':PyJs_MappingList_toArray_4058_, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('_sorted').neg():
            var.get("this").get('_array').callprop('sort', var.get('util').get('compareByGeneratedPositionsInflated'))
            var.get("this").put('_sorted', var.get('true'))
        return var.get("this").get('_array')
    PyJs_MappingList_toArray_4058_._set_name('MappingList_toArray')
    var.get('MappingList').get('prototype').put('toArray', PyJs_MappingList_toArray_4058_)
    var.get('exports').put('MappingList', var.get('MappingList'))
PyJs_anonymous_4054_._set_name('anonymous')
PyJs_Object_4059_ = Js({'./util':Js(518.0)})
@Js
def PyJs_anonymous_4060_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'randomIntInRange', 'require', 'module', 'doQuickSort', 'swap'])
    @Js
    def PyJsHoisted_randomIntInRange_(low, high, this, arguments, var=var):
        var = Scope({'high':high, 'this':this, 'low':low, 'arguments':arguments}, var)
        var.registers(['high', 'low'])
        return var.get('Math').callprop('round', (var.get('low')+(var.get('Math').callprop('random')*(var.get('high')-var.get('low')))))
    PyJsHoisted_randomIntInRange_.__name__ = 'randomIntInRange'
    var.put('randomIntInRange', PyJsHoisted_randomIntInRange_)
    @Js
    def PyJsHoisted_swap_(ary, x, y, this, arguments, var=var):
        var = Scope({'y':y, 'ary':ary, 'this':this, 'arguments':arguments, 'x':x}, var)
        var.registers(['y', 'ary', 'temp', 'x'])
        var.put('temp', var.get('ary').get(var.get('x')))
        var.get('ary').put(var.get('x'), var.get('ary').get(var.get('y')))
        var.get('ary').put(var.get('y'), var.get('temp'))
    PyJsHoisted_swap_.__name__ = 'swap'
    var.put('swap', PyJsHoisted_swap_)
    @Js
    def PyJsHoisted_doQuickSort_(ary, comparator, p, r, this, arguments, var=var):
        var = Scope({'p':p, 'r':r, 'arguments':arguments, 'comparator':comparator, 'this':this, 'ary':ary}, var)
        var.registers(['comparator', 'i', 'ary', 'pivotIndex', 'j', 'q', 'p', 'r', 'pivot'])
        if (var.get('p')<var.get('r')):
            var.put('pivotIndex', var.get('randomIntInRange')(var.get('p'), var.get('r')))
            var.put('i', (var.get('p')-Js(1.0)))
            var.get('swap')(var.get('ary'), var.get('pivotIndex'), var.get('r'))
            var.put('pivot', var.get('ary').get(var.get('r')))
            #for JS loop
            var.put('j', var.get('p'))
            while (var.get('j')<var.get('r')):
                try:
                    if (var.get('comparator')(var.get('ary').get(var.get('j')), var.get('pivot'))<=Js(0.0)):
                        var.put('i', Js(1.0), '+')
                        var.get('swap')(var.get('ary'), var.get('i'), var.get('j'))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.get('swap')(var.get('ary'), (var.get('i')+Js(1.0)), var.get('j'))
            var.put('q', (var.get('i')+Js(1.0)))
            var.get('doQuickSort')(var.get('ary'), var.get('comparator'), var.get('p'), (var.get('q')-Js(1.0)))
            var.get('doQuickSort')(var.get('ary'), var.get('comparator'), (var.get('q')+Js(1.0)), var.get('r'))
    PyJsHoisted_doQuickSort_.__name__ = 'doQuickSort'
    var.put('doQuickSort', PyJsHoisted_doQuickSort_)
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_4061_(ary, comparator, this, arguments, var=var):
        var = Scope({'this':this, 'ary':ary, 'arguments':arguments, 'comparator':comparator}, var)
        var.registers(['ary', 'comparator'])
        var.get('doQuickSort')(var.get('ary'), var.get('comparator'), Js(0.0), (var.get('ary').get('length')-Js(1.0)))
    PyJs_anonymous_4061_._set_name('anonymous')
    var.get('exports').put('quickSort', PyJs_anonymous_4061_)
PyJs_anonymous_4060_._set_name('anonymous')
PyJs_Object_4062_ = Js({})
@Js
def PyJs_anonymous_4063_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'base64VLQ', 'IndexedSourceMapConsumer', 'quickSort', 'Mapping', 'SourceMapConsumer', 'binarySearch', 'util', 'ArraySet', 'module', 'require', 'BasicSourceMapConsumer'])
    @Js
    def PyJsHoisted_IndexedSourceMapConsumer_(aSourceMap, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceMap':aSourceMap, 'arguments':arguments}, var)
        var.registers(['sourceMap', 'version', 'sections', 'aSourceMap', 'lastOffset'])
        var.put('sourceMap', var.get('aSourceMap'))
        if PyJsStrictEq(var.get('aSourceMap',throw=False).typeof(),Js('string')):
            var.put('sourceMap', var.get('JSON').callprop('parse', var.get('aSourceMap').callprop('replace', JsRegExp("/^\\)\\]\\}'/"), Js(''))))
        var.put('version', var.get('util').callprop('getArg', var.get('sourceMap'), Js('version')))
        var.put('sections', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sections')))
        if (var.get('version')!=var.get("this").get('_version')):
            PyJsTempException = JsToPyException(var.get('Error').create((Js('Unsupported version: ')+var.get('version'))))
            raise PyJsTempException
        var.get("this").put('_sources', var.get('ArraySet').create())
        var.get("this").put('_names', var.get('ArraySet').create())
        PyJs_Object_4100_ = Js({'line':(-Js(1.0)),'column':Js(0.0)})
        var.put('lastOffset', PyJs_Object_4100_)
        @Js
        def PyJs_anonymous_4101_(s, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
            var.registers(['offsetLine', 's', 'offsetColumn', 'offset'])
            if var.get('s').get('url'):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Support for url field in sections not implemented.')))
                raise PyJsTempException
            var.put('offset', var.get('util').callprop('getArg', var.get('s'), Js('offset')))
            var.put('offsetLine', var.get('util').callprop('getArg', var.get('offset'), Js('line')))
            var.put('offsetColumn', var.get('util').callprop('getArg', var.get('offset'), Js('column')))
            if ((var.get('offsetLine')<var.get('lastOffset').get('line')) or (PyJsStrictEq(var.get('offsetLine'),var.get('lastOffset').get('line')) and (var.get('offsetColumn')<var.get('lastOffset').get('column')))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Section offsets must be ordered and non-overlapping.')))
                raise PyJsTempException
            var.put('lastOffset', var.get('offset'))
            PyJs_Object_4103_ = Js({'generatedLine':(var.get('offsetLine')+Js(1.0)),'generatedColumn':(var.get('offsetColumn')+Js(1.0))})
            PyJs_Object_4102_ = Js({'generatedOffset':PyJs_Object_4103_,'consumer':var.get('SourceMapConsumer').create(var.get('util').callprop('getArg', var.get('s'), Js('map')))})
            return PyJs_Object_4102_
        PyJs_anonymous_4101_._set_name('anonymous')
        var.get("this").put('_sections', var.get('sections').callprop('map', PyJs_anonymous_4101_))
    PyJsHoisted_IndexedSourceMapConsumer_.__name__ = 'IndexedSourceMapConsumer'
    var.put('IndexedSourceMapConsumer', PyJsHoisted_IndexedSourceMapConsumer_)
    @Js
    def PyJsHoisted_Mapping_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").put('generatedLine', Js(0.0))
        var.get("this").put('generatedColumn', Js(0.0))
        var.get("this").put('source', var.get("null"))
        var.get("this").put('originalLine', var.get("null"))
        var.get("this").put('originalColumn', var.get("null"))
        var.get("this").put('name', var.get("null"))
    PyJsHoisted_Mapping_.__name__ = 'Mapping'
    var.put('Mapping', PyJsHoisted_Mapping_)
    @Js
    def PyJsHoisted_SourceMapConsumer_(aSourceMap, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceMap':aSourceMap, 'arguments':arguments}, var)
        var.registers(['sourceMap', 'aSourceMap'])
        var.put('sourceMap', var.get('aSourceMap'))
        if PyJsStrictEq(var.get('aSourceMap',throw=False).typeof(),Js('string')):
            var.put('sourceMap', var.get('JSON').callprop('parse', var.get('aSourceMap').callprop('replace', JsRegExp("/^\\)\\]\\}'/"), Js(''))))
        return (var.get('IndexedSourceMapConsumer').create(var.get('sourceMap')) if (var.get('sourceMap').get('sections')!=var.get("null")) else var.get('BasicSourceMapConsumer').create(var.get('sourceMap')))
    PyJsHoisted_SourceMapConsumer_.__name__ = 'SourceMapConsumer'
    var.put('SourceMapConsumer', PyJsHoisted_SourceMapConsumer_)
    @Js
    def PyJsHoisted_BasicSourceMapConsumer_(aSourceMap, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceMap':aSourceMap, 'arguments':arguments}, var)
        var.registers(['mappings', 'sourcesContent', 'aSourceMap', 'sourceRoot', 'sources', 'sourceMap', 'version', 'names', 'file'])
        var.put('sourceMap', var.get('aSourceMap'))
        if PyJsStrictEq(var.get('aSourceMap',throw=False).typeof(),Js('string')):
            var.put('sourceMap', var.get('JSON').callprop('parse', var.get('aSourceMap').callprop('replace', JsRegExp("/^\\)\\]\\}'/"), Js(''))))
        var.put('version', var.get('util').callprop('getArg', var.get('sourceMap'), Js('version')))
        var.put('sources', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sources')))
        var.put('names', var.get('util').callprop('getArg', var.get('sourceMap'), Js('names'), Js([])))
        var.put('sourceRoot', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sourceRoot'), var.get("null")))
        var.put('sourcesContent', var.get('util').callprop('getArg', var.get('sourceMap'), Js('sourcesContent'), var.get("null")))
        var.put('mappings', var.get('util').callprop('getArg', var.get('sourceMap'), Js('mappings')))
        var.put('file', var.get('util').callprop('getArg', var.get('sourceMap'), Js('file'), var.get("null")))
        if (var.get('version')!=var.get("this").get('_version')):
            PyJsTempException = JsToPyException(var.get('Error').create((Js('Unsupported version: ')+var.get('version'))))
            raise PyJsTempException
        @Js
        def PyJs_anonymous_4078_(source, this, arguments, var=var):
            var = Scope({'this':this, 'source':source, 'arguments':arguments}, var)
            var.registers(['source'])
            return (var.get('util').callprop('relative', var.get('sourceRoot'), var.get('source')) if ((var.get('sourceRoot') and var.get('util').callprop('isAbsolute', var.get('sourceRoot'))) and var.get('util').callprop('isAbsolute', var.get('source'))) else var.get('source'))
        PyJs_anonymous_4078_._set_name('anonymous')
        var.put('sources', var.get('sources').callprop('map', var.get('String')).callprop('map', var.get('util').get('normalize')).callprop('map', PyJs_anonymous_4078_))
        var.get("this").put('_names', var.get('ArraySet').callprop('fromArray', var.get('names').callprop('map', var.get('String')), var.get('true')))
        var.get("this").put('_sources', var.get('ArraySet').callprop('fromArray', var.get('sources'), var.get('true')))
        var.get("this").put('sourceRoot', var.get('sourceRoot'))
        var.get("this").put('sourcesContent', var.get('sourcesContent'))
        var.get("this").put('_mappings', var.get('mappings'))
        var.get("this").put('file', var.get('file'))
    PyJsHoisted_BasicSourceMapConsumer_.__name__ = 'BasicSourceMapConsumer'
    var.put('BasicSourceMapConsumer', PyJsHoisted_BasicSourceMapConsumer_)
    var.put('util', var.get('require')(Js('./util')))
    var.put('binarySearch', var.get('require')(Js('./binary-search')))
    var.put('ArraySet', var.get('require')(Js('./array-set')).get('ArraySet'))
    var.put('base64VLQ', var.get('require')(Js('./base64-vlq')))
    var.put('quickSort', var.get('require')(Js('./quick-sort')).get('quickSort'))
    pass
    @Js
    def PyJs_anonymous_4064_(aSourceMap, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceMap':aSourceMap, 'arguments':arguments}, var)
        var.registers(['aSourceMap'])
        return var.get('BasicSourceMapConsumer').callprop('fromSourceMap', var.get('aSourceMap'))
    PyJs_anonymous_4064_._set_name('anonymous')
    var.get('SourceMapConsumer').put('fromSourceMap', PyJs_anonymous_4064_)
    var.get('SourceMapConsumer').get('prototype').put('_version', Js(3.0))
    var.get('SourceMapConsumer').get('prototype').put('__generatedMappings', var.get("null"))
    @Js
    def PyJs_anonymous_4066_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('__generatedMappings').neg():
            var.get("this").callprop('_parseMappings', var.get("this").get('_mappings'), var.get("this").get('sourceRoot'))
        return var.get("this").get('__generatedMappings')
    PyJs_anonymous_4066_._set_name('anonymous')
    PyJs_Object_4065_ = Js({'get':PyJs_anonymous_4066_})
    var.get('Object').callprop('defineProperty', var.get('SourceMapConsumer').get('prototype'), Js('_generatedMappings'), PyJs_Object_4065_)
    var.get('SourceMapConsumer').get('prototype').put('__originalMappings', var.get("null"))
    @Js
    def PyJs_anonymous_4068_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('__originalMappings').neg():
            var.get("this").callprop('_parseMappings', var.get("this").get('_mappings'), var.get("this").get('sourceRoot'))
        return var.get("this").get('__originalMappings')
    PyJs_anonymous_4068_._set_name('anonymous')
    PyJs_Object_4067_ = Js({'get':PyJs_anonymous_4068_})
    var.get('Object').callprop('defineProperty', var.get('SourceMapConsumer').get('prototype'), Js('_originalMappings'), PyJs_Object_4067_)
    @Js
    def PyJs_SourceMapConsumer_charIsMappingSeparator_4069_(aStr, index, this, arguments, var=var):
        var = Scope({'this':this, 'index':index, 'aStr':aStr, 'arguments':arguments, 'SourceMapConsumer_charIsMappingSeparator':PyJs_SourceMapConsumer_charIsMappingSeparator_4069_}, var)
        var.registers(['index', 'c', 'aStr'])
        var.put('c', var.get('aStr').callprop('charAt', var.get('index')))
        return (PyJsStrictEq(var.get('c'),Js(';')) or PyJsStrictEq(var.get('c'),Js(',')))
    PyJs_SourceMapConsumer_charIsMappingSeparator_4069_._set_name('SourceMapConsumer_charIsMappingSeparator')
    var.get('SourceMapConsumer').get('prototype').put('_charIsMappingSeparator', PyJs_SourceMapConsumer_charIsMappingSeparator_4069_)
    @Js
    def PyJs_SourceMapConsumer_parseMappings_4070_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapConsumer_parseMappings':PyJs_SourceMapConsumer_parseMappings_4070_, 'aStr':aStr, 'aSourceRoot':aSourceRoot, 'arguments':arguments}, var)
        var.registers(['aStr', 'aSourceRoot'])
        PyJsTempException = JsToPyException(var.get('Error').create(Js('Subclasses must implement _parseMappings')))
        raise PyJsTempException
    PyJs_SourceMapConsumer_parseMappings_4070_._set_name('SourceMapConsumer_parseMappings')
    var.get('SourceMapConsumer').get('prototype').put('_parseMappings', PyJs_SourceMapConsumer_parseMappings_4070_)
    var.get('SourceMapConsumer').put('GENERATED_ORDER', Js(1.0))
    var.get('SourceMapConsumer').put('ORIGINAL_ORDER', Js(2.0))
    var.get('SourceMapConsumer').put('GREATEST_LOWER_BOUND', Js(1.0))
    var.get('SourceMapConsumer').put('LEAST_UPPER_BOUND', Js(2.0))
    @Js
    def PyJs_SourceMapConsumer_eachMapping_4071_(aCallback, aContext, aOrder, this, arguments, var=var):
        var = Scope({'this':this, 'aCallback':aCallback, 'aOrder':aOrder, 'arguments':arguments, 'aContext':aContext, 'SourceMapConsumer_eachMapping':PyJs_SourceMapConsumer_eachMapping_4071_}, var)
        var.registers(['context', 'aCallback', 'sourceRoot', 'aOrder', 'aContext', 'order', 'mappings'])
        var.put('context', (var.get('aContext') or var.get("null")))
        var.put('order', (var.get('aOrder') or var.get('SourceMapConsumer').get('GENERATED_ORDER')))
        pass
        while 1:
            SWITCHED = False
            CONDITION = (var.get('order'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('SourceMapConsumer').get('GENERATED_ORDER')):
                SWITCHED = True
                var.put('mappings', var.get("this").get('_generatedMappings'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get('SourceMapConsumer').get('ORIGINAL_ORDER')):
                SWITCHED = True
                var.put('mappings', var.get("this").get('_originalMappings'))
                break
            if True:
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unknown order of iteration.')))
                raise PyJsTempException
            SWITCHED = True
            break
        var.put('sourceRoot', var.get("this").get('sourceRoot'))
        @Js
        def PyJs_anonymous_4072_(mapping, this, arguments, var=var):
            var = Scope({'this':this, 'mapping':mapping, 'arguments':arguments}, var)
            var.registers(['source', 'mapping'])
            var.put('source', (var.get("null") if PyJsStrictEq(var.get('mapping').get('source'),var.get("null")) else var.get("this").get('_sources').callprop('at', var.get('mapping').get('source'))))
            if ((var.get('source')!=var.get("null")) and (var.get('sourceRoot')!=var.get("null"))):
                var.put('source', var.get('util').callprop('join', var.get('sourceRoot'), var.get('source')))
            PyJs_Object_4073_ = Js({'source':var.get('source'),'generatedLine':var.get('mapping').get('generatedLine'),'generatedColumn':var.get('mapping').get('generatedColumn'),'originalLine':var.get('mapping').get('originalLine'),'originalColumn':var.get('mapping').get('originalColumn'),'name':(var.get("null") if PyJsStrictEq(var.get('mapping').get('name'),var.get("null")) else var.get("this").get('_names').callprop('at', var.get('mapping').get('name')))})
            return PyJs_Object_4073_
        PyJs_anonymous_4072_._set_name('anonymous')
        var.get('mappings').callprop('map', PyJs_anonymous_4072_, var.get("this")).callprop('forEach', var.get('aCallback'), var.get('context'))
    PyJs_SourceMapConsumer_eachMapping_4071_._set_name('SourceMapConsumer_eachMapping')
    var.get('SourceMapConsumer').get('prototype').put('eachMapping', PyJs_SourceMapConsumer_eachMapping_4071_)
    @Js
    def PyJs_SourceMapConsumer_allGeneratedPositionsFor_4074_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapConsumer_allGeneratedPositionsFor':PyJs_SourceMapConsumer_allGeneratedPositionsFor_4074_, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['index', 'mappings', 'originalColumn', 'needle', 'mapping', 'originalLine', 'aArgs', 'line'])
        var.put('line', var.get('util').callprop('getArg', var.get('aArgs'), Js('line')))
        PyJs_Object_4075_ = Js({'source':var.get('util').callprop('getArg', var.get('aArgs'), Js('source')),'originalLine':var.get('line'),'originalColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'), Js(0.0))})
        var.put('needle', PyJs_Object_4075_)
        if (var.get("this").get('sourceRoot')!=var.get("null")):
            var.get('needle').put('source', var.get('util').callprop('relative', var.get("this").get('sourceRoot'), var.get('needle').get('source')))
        if var.get("this").get('_sources').callprop('has', var.get('needle').get('source')).neg():
            return Js([])
        var.get('needle').put('source', var.get("this").get('_sources').callprop('indexOf', var.get('needle').get('source')))
        var.put('mappings', Js([]))
        var.put('index', var.get("this").callprop('_findMapping', var.get('needle'), var.get("this").get('_originalMappings'), Js('originalLine'), Js('originalColumn'), var.get('util').get('compareByOriginalPositions'), var.get('binarySearch').get('LEAST_UPPER_BOUND')))
        if (var.get('index')>=Js(0.0)):
            var.put('mapping', var.get("this").get('_originalMappings').get(var.get('index')))
            if PyJsStrictEq(var.get('aArgs').get('column'),var.get('undefined')):
                var.put('originalLine', var.get('mapping').get('originalLine'))
                while (var.get('mapping') and PyJsStrictEq(var.get('mapping').get('originalLine'),var.get('originalLine'))):
                    PyJs_Object_4076_ = Js({'line':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedLine'), var.get("null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedColumn'), var.get("null")),'lastColumn':var.get('util').callprop('getArg', var.get('mapping'), Js('lastGeneratedColumn'), var.get("null"))})
                    var.get('mappings').callprop('push', PyJs_Object_4076_)
                    var.put('mapping', var.get("this").get('_originalMappings').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
            else:
                var.put('originalColumn', var.get('mapping').get('originalColumn'))
                while ((var.get('mapping') and PyJsStrictEq(var.get('mapping').get('originalLine'),var.get('line'))) and (var.get('mapping').get('originalColumn')==var.get('originalColumn'))):
                    PyJs_Object_4077_ = Js({'line':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedLine'), var.get("null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedColumn'), var.get("null")),'lastColumn':var.get('util').callprop('getArg', var.get('mapping'), Js('lastGeneratedColumn'), var.get("null"))})
                    var.get('mappings').callprop('push', PyJs_Object_4077_)
                    var.put('mapping', var.get("this").get('_originalMappings').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
        return var.get('mappings')
    PyJs_SourceMapConsumer_allGeneratedPositionsFor_4074_._set_name('SourceMapConsumer_allGeneratedPositionsFor')
    var.get('SourceMapConsumer').get('prototype').put('allGeneratedPositionsFor', PyJs_SourceMapConsumer_allGeneratedPositionsFor_4074_)
    var.get('exports').put('SourceMapConsumer', var.get('SourceMapConsumer'))
    pass
    var.get('BasicSourceMapConsumer').put('prototype', var.get('Object').callprop('create', var.get('SourceMapConsumer').get('prototype')))
    var.get('BasicSourceMapConsumer').get('prototype').put('consumer', var.get('SourceMapConsumer'))
    @Js
    def PyJs_SourceMapConsumer_fromSourceMap_4079_(aSourceMap, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceMap':aSourceMap, 'SourceMapConsumer_fromSourceMap':PyJs_SourceMapConsumer_fromSourceMap_4079_, 'arguments':arguments}, var)
        var.registers(['i', 'aSourceMap', 'srcMapping', 'destGeneratedMappings', 'destMapping', 'destOriginalMappings', 'sources', 'length', 'generatedMappings', 'names', 'smc'])
        var.put('smc', var.get('Object').callprop('create', var.get('BasicSourceMapConsumer').get('prototype')))
        var.put('names', var.get('smc').put('_names', var.get('ArraySet').callprop('fromArray', var.get('aSourceMap').get('_names').callprop('toArray'), var.get('true'))))
        var.put('sources', var.get('smc').put('_sources', var.get('ArraySet').callprop('fromArray', var.get('aSourceMap').get('_sources').callprop('toArray'), var.get('true'))))
        var.get('smc').put('sourceRoot', var.get('aSourceMap').get('_sourceRoot'))
        var.get('smc').put('sourcesContent', var.get('aSourceMap').callprop('_generateSourcesContent', var.get('smc').get('_sources').callprop('toArray'), var.get('smc').get('sourceRoot')))
        var.get('smc').put('file', var.get('aSourceMap').get('_file'))
        var.put('generatedMappings', var.get('aSourceMap').get('_mappings').callprop('toArray').callprop('slice'))
        var.put('destGeneratedMappings', var.get('smc').put('__generatedMappings', Js([])))
        var.put('destOriginalMappings', var.get('smc').put('__originalMappings', Js([])))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('length', var.get('generatedMappings').get('length'))
        while (var.get('i')<var.get('length')):
            try:
                var.put('srcMapping', var.get('generatedMappings').get(var.get('i')))
                var.put('destMapping', var.get('Mapping').create())
                var.get('destMapping').put('generatedLine', var.get('srcMapping').get('generatedLine'))
                var.get('destMapping').put('generatedColumn', var.get('srcMapping').get('generatedColumn'))
                if var.get('srcMapping').get('source'):
                    var.get('destMapping').put('source', var.get('sources').callprop('indexOf', var.get('srcMapping').get('source')))
                    var.get('destMapping').put('originalLine', var.get('srcMapping').get('originalLine'))
                    var.get('destMapping').put('originalColumn', var.get('srcMapping').get('originalColumn'))
                    if var.get('srcMapping').get('name'):
                        var.get('destMapping').put('name', var.get('names').callprop('indexOf', var.get('srcMapping').get('name')))
                    var.get('destOriginalMappings').callprop('push', var.get('destMapping'))
                var.get('destGeneratedMappings').callprop('push', var.get('destMapping'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.get('quickSort')(var.get('smc').get('__originalMappings'), var.get('util').get('compareByOriginalPositions'))
        return var.get('smc')
    PyJs_SourceMapConsumer_fromSourceMap_4079_._set_name('SourceMapConsumer_fromSourceMap')
    var.get('BasicSourceMapConsumer').put('fromSourceMap', PyJs_SourceMapConsumer_fromSourceMap_4079_)
    var.get('BasicSourceMapConsumer').get('prototype').put('_version', Js(3.0))
    @Js
    def PyJs_anonymous_4081_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_4082_(s, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
            var.registers(['s'])
            return (var.get('util').callprop('join', var.get("this").get('sourceRoot'), var.get('s')) if (var.get("this").get('sourceRoot')!=var.get("null")) else var.get('s'))
        PyJs_anonymous_4082_._set_name('anonymous')
        return var.get("this").get('_sources').callprop('toArray').callprop('map', PyJs_anonymous_4082_, var.get("this"))
    PyJs_anonymous_4081_._set_name('anonymous')
    PyJs_Object_4080_ = Js({'get':PyJs_anonymous_4081_})
    var.get('Object').callprop('defineProperty', var.get('BasicSourceMapConsumer').get('prototype'), Js('sources'), PyJs_Object_4080_)
    pass
    @Js
    def PyJs_SourceMapConsumer_parseMappings_4083_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapConsumer_parseMappings':PyJs_SourceMapConsumer_parseMappings_4083_, 'aStr':aStr, 'aSourceRoot':aSourceRoot, 'arguments':arguments}, var)
        var.registers(['originalMappings', 'index', 'previousOriginalLine', 'previousOriginalColumn', 'previousSource', 'previousGeneratedColumn', 'end', 'mapping', 'previousName', 'aSourceRoot', 'length', 'generatedMappings', 'generatedLine', 'temp', 'str', 'cachedSegments', 'aStr', 'value', 'segment'])
        var.put('generatedLine', Js(1.0))
        var.put('previousGeneratedColumn', Js(0.0))
        var.put('previousOriginalLine', Js(0.0))
        var.put('previousOriginalColumn', Js(0.0))
        var.put('previousSource', Js(0.0))
        var.put('previousName', Js(0.0))
        var.put('length', var.get('aStr').get('length'))
        var.put('index', Js(0.0))
        PyJs_Object_4084_ = Js({})
        var.put('cachedSegments', PyJs_Object_4084_)
        PyJs_Object_4085_ = Js({})
        var.put('temp', PyJs_Object_4085_)
        var.put('originalMappings', Js([]))
        var.put('generatedMappings', Js([]))
        pass
        while (var.get('index')<var.get('length')):
            if PyJsStrictEq(var.get('aStr').callprop('charAt', var.get('index')),Js(';')):
                (var.put('generatedLine',Js(var.get('generatedLine').to_number())+Js(1))-Js(1))
                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                var.put('previousGeneratedColumn', Js(0.0))
            else:
                if PyJsStrictEq(var.get('aStr').callprop('charAt', var.get('index')),Js(',')):
                    (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                else:
                    var.put('mapping', var.get('Mapping').create())
                    var.get('mapping').put('generatedLine', var.get('generatedLine'))
                    #for JS loop
                    var.put('end', var.get('index'))
                    while (var.get('end')<var.get('length')):
                        try:
                            if var.get("this").callprop('_charIsMappingSeparator', var.get('aStr'), var.get('end')):
                                break
                        finally:
                                (var.put('end',Js(var.get('end').to_number())+Js(1))-Js(1))
                    var.put('str', var.get('aStr').callprop('slice', var.get('index'), var.get('end')))
                    var.put('segment', var.get('cachedSegments').get(var.get('str')))
                    if var.get('segment'):
                        var.put('index', var.get('str').get('length'), '+')
                    else:
                        var.put('segment', Js([]))
                        while (var.get('index')<var.get('end')):
                            var.get('base64VLQ').callprop('decode', var.get('aStr'), var.get('index'), var.get('temp'))
                            var.put('value', var.get('temp').get('value'))
                            var.put('index', var.get('temp').get('rest'))
                            var.get('segment').callprop('push', var.get('value'))
                        if PyJsStrictEq(var.get('segment').get('length'),Js(2.0)):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Found a source, but no line and column')))
                            raise PyJsTempException
                        if PyJsStrictEq(var.get('segment').get('length'),Js(3.0)):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Found a source and line, but no column')))
                            raise PyJsTempException
                        var.get('cachedSegments').put(var.get('str'), var.get('segment'))
                    var.get('mapping').put('generatedColumn', (var.get('previousGeneratedColumn')+var.get('segment').get('0')))
                    var.put('previousGeneratedColumn', var.get('mapping').get('generatedColumn'))
                    if (var.get('segment').get('length')>Js(1.0)):
                        var.get('mapping').put('source', (var.get('previousSource')+var.get('segment').get('1')))
                        var.put('previousSource', var.get('segment').get('1'), '+')
                        var.get('mapping').put('originalLine', (var.get('previousOriginalLine')+var.get('segment').get('2')))
                        var.put('previousOriginalLine', var.get('mapping').get('originalLine'))
                        var.get('mapping').put('originalLine', Js(1.0), '+')
                        var.get('mapping').put('originalColumn', (var.get('previousOriginalColumn')+var.get('segment').get('3')))
                        var.put('previousOriginalColumn', var.get('mapping').get('originalColumn'))
                        if (var.get('segment').get('length')>Js(4.0)):
                            var.get('mapping').put('name', (var.get('previousName')+var.get('segment').get('4')))
                            var.put('previousName', var.get('segment').get('4'), '+')
                    var.get('generatedMappings').callprop('push', var.get('mapping'))
                    if PyJsStrictEq(var.get('mapping').get('originalLine').typeof(),Js('number')):
                        var.get('originalMappings').callprop('push', var.get('mapping'))
        var.get('quickSort')(var.get('generatedMappings'), var.get('util').get('compareByGeneratedPositionsDeflated'))
        var.get("this").put('__generatedMappings', var.get('generatedMappings'))
        var.get('quickSort')(var.get('originalMappings'), var.get('util').get('compareByOriginalPositions'))
        var.get("this").put('__originalMappings', var.get('originalMappings'))
    PyJs_SourceMapConsumer_parseMappings_4083_._set_name('SourceMapConsumer_parseMappings')
    var.get('BasicSourceMapConsumer').get('prototype').put('_parseMappings', PyJs_SourceMapConsumer_parseMappings_4083_)
    @Js
    def PyJs_SourceMapConsumer_findMapping_4086_(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias, this, arguments, var=var):
        var = Scope({'aNeedle':aNeedle, 'SourceMapConsumer_findMapping':PyJs_SourceMapConsumer_findMapping_4086_, 'this':this, 'aBias':aBias, 'aColumnName':aColumnName, 'aComparator':aComparator, 'arguments':arguments, 'aMappings':aMappings, 'aLineName':aLineName}, var)
        var.registers(['aNeedle', 'aBias', 'aColumnName', 'aComparator', 'aMappings', 'aLineName'])
        if (var.get('aNeedle').get(var.get('aLineName'))<=Js(0.0)):
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Line must be greater than or equal to 1, got ')+var.get('aNeedle').get(var.get('aLineName')))))
            raise PyJsTempException
        if (var.get('aNeedle').get(var.get('aColumnName'))<Js(0.0)):
            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Column must be greater than or equal to 0, got ')+var.get('aNeedle').get(var.get('aColumnName')))))
            raise PyJsTempException
        return var.get('binarySearch').callprop('search', var.get('aNeedle'), var.get('aMappings'), var.get('aComparator'), var.get('aBias'))
    PyJs_SourceMapConsumer_findMapping_4086_._set_name('SourceMapConsumer_findMapping')
    var.get('BasicSourceMapConsumer').get('prototype').put('_findMapping', PyJs_SourceMapConsumer_findMapping_4086_)
    @Js
    def PyJs_SourceMapConsumer_computeColumnSpans_4087_(this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapConsumer_computeColumnSpans':PyJs_SourceMapConsumer_computeColumnSpans_4087_, 'arguments':arguments}, var)
        var.registers(['nextMapping', 'index', 'mapping'])
        #for JS loop
        var.put('index', Js(0.0))
        while (var.get('index')<var.get("this").get('_generatedMappings').get('length')):
            try:
                var.put('mapping', var.get("this").get('_generatedMappings').get(var.get('index')))
                if ((var.get('index')+Js(1.0))<var.get("this").get('_generatedMappings').get('length')):
                    var.put('nextMapping', var.get("this").get('_generatedMappings').get((var.get('index')+Js(1.0))))
                    if PyJsStrictEq(var.get('mapping').get('generatedLine'),var.get('nextMapping').get('generatedLine')):
                        var.get('mapping').put('lastGeneratedColumn', (var.get('nextMapping').get('generatedColumn')-Js(1.0)))
                        continue
                var.get('mapping').put('lastGeneratedColumn', var.get('Infinity'))
            finally:
                    var.put('index',Js(var.get('index').to_number())+Js(1))
    PyJs_SourceMapConsumer_computeColumnSpans_4087_._set_name('SourceMapConsumer_computeColumnSpans')
    var.get('BasicSourceMapConsumer').get('prototype').put('computeColumnSpans', PyJs_SourceMapConsumer_computeColumnSpans_4087_)
    @Js
    def PyJs_SourceMapConsumer_originalPositionFor_4088_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'SourceMapConsumer_originalPositionFor':PyJs_SourceMapConsumer_originalPositionFor_4088_, 'aArgs':aArgs}, var)
        var.registers(['index', 'name', 'aArgs', 'needle', 'mapping', 'source'])
        PyJs_Object_4089_ = Js({'generatedLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'generatedColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'))})
        var.put('needle', PyJs_Object_4089_)
        var.put('index', var.get("this").callprop('_findMapping', var.get('needle'), var.get("this").get('_generatedMappings'), Js('generatedLine'), Js('generatedColumn'), var.get('util').get('compareByGeneratedPositionsDeflated'), var.get('util').callprop('getArg', var.get('aArgs'), Js('bias'), var.get('SourceMapConsumer').get('GREATEST_LOWER_BOUND'))))
        if (var.get('index')>=Js(0.0)):
            var.put('mapping', var.get("this").get('_generatedMappings').get(var.get('index')))
            if PyJsStrictEq(var.get('mapping').get('generatedLine'),var.get('needle').get('generatedLine')):
                var.put('source', var.get('util').callprop('getArg', var.get('mapping'), Js('source'), var.get("null")))
                if PyJsStrictNeq(var.get('source'),var.get("null")):
                    var.put('source', var.get("this").get('_sources').callprop('at', var.get('source')))
                    if (var.get("this").get('sourceRoot')!=var.get("null")):
                        var.put('source', var.get('util').callprop('join', var.get("this").get('sourceRoot'), var.get('source')))
                var.put('name', var.get('util').callprop('getArg', var.get('mapping'), Js('name'), var.get("null")))
                if PyJsStrictNeq(var.get('name'),var.get("null")):
                    var.put('name', var.get("this").get('_names').callprop('at', var.get('name')))
                PyJs_Object_4090_ = Js({'source':var.get('source'),'line':var.get('util').callprop('getArg', var.get('mapping'), Js('originalLine'), var.get("null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('originalColumn'), var.get("null")),'name':var.get('name')})
                return PyJs_Object_4090_
        PyJs_Object_4091_ = Js({'source':var.get("null"),'line':var.get("null"),'column':var.get("null"),'name':var.get("null")})
        return PyJs_Object_4091_
    PyJs_SourceMapConsumer_originalPositionFor_4088_._set_name('SourceMapConsumer_originalPositionFor')
    var.get('BasicSourceMapConsumer').get('prototype').put('originalPositionFor', PyJs_SourceMapConsumer_originalPositionFor_4088_)
    @Js
    def PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_4092_(this, arguments, var=var):
        var = Scope({'this':this, 'BasicSourceMapConsumer_hasContentsOfAllSources':PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_4092_, 'arguments':arguments}, var)
        var.registers([])
        if var.get("this").get('sourcesContent').neg():
            return Js(False)
        @Js
        def PyJs_anonymous_4093_(sc, this, arguments, var=var):
            var = Scope({'sc':sc, 'this':this, 'arguments':arguments}, var)
            var.registers(['sc'])
            return (var.get('sc')==var.get("null"))
        PyJs_anonymous_4093_._set_name('anonymous')
        return ((var.get("this").get('sourcesContent').get('length')>=var.get("this").get('_sources').callprop('size')) and var.get("this").get('sourcesContent').callprop('some', PyJs_anonymous_4093_).neg())
    PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_4092_._set_name('BasicSourceMapConsumer_hasContentsOfAllSources')
    var.get('BasicSourceMapConsumer').get('prototype').put('hasContentsOfAllSources', PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_4092_)
    @Js
    def PyJs_SourceMapConsumer_sourceContentFor_4094_(aSource, nullOnMissing, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'SourceMapConsumer_sourceContentFor':PyJs_SourceMapConsumer_sourceContentFor_4094_, 'aSource':aSource, 'nullOnMissing':nullOnMissing}, var)
        var.registers(['url', 'fileUriAbsPath', 'aSource', 'nullOnMissing'])
        if var.get("this").get('sourcesContent').neg():
            return var.get("null")
        if (var.get("this").get('sourceRoot')!=var.get("null")):
            var.put('aSource', var.get('util').callprop('relative', var.get("this").get('sourceRoot'), var.get('aSource')))
        if var.get("this").get('_sources').callprop('has', var.get('aSource')):
            return var.get("this").get('sourcesContent').get(var.get("this").get('_sources').callprop('indexOf', var.get('aSource')))
        pass
        if ((var.get("this").get('sourceRoot')!=var.get("null")) and var.put('url', var.get('util').callprop('urlParse', var.get("this").get('sourceRoot')))):
            var.put('fileUriAbsPath', var.get('aSource').callprop('replace', JsRegExp('/^file:\\/\\//'), Js('')))
            if ((var.get('url').get('scheme')==Js('file')) and var.get("this").get('_sources').callprop('has', var.get('fileUriAbsPath'))):
                return var.get("this").get('sourcesContent').get(var.get("this").get('_sources').callprop('indexOf', var.get('fileUriAbsPath')))
            if ((var.get('url').get('path').neg() or (var.get('url').get('path')==Js('/'))) and var.get("this").get('_sources').callprop('has', (Js('/')+var.get('aSource')))):
                return var.get("this").get('sourcesContent').get(var.get("this").get('_sources').callprop('indexOf', (Js('/')+var.get('aSource'))))
        if var.get('nullOnMissing'):
            return var.get("null")
        else:
            PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aSource'))+Js('" is not in the SourceMap.'))))
            raise PyJsTempException
    PyJs_SourceMapConsumer_sourceContentFor_4094_._set_name('SourceMapConsumer_sourceContentFor')
    var.get('BasicSourceMapConsumer').get('prototype').put('sourceContentFor', PyJs_SourceMapConsumer_sourceContentFor_4094_)
    @Js
    def PyJs_SourceMapConsumer_generatedPositionFor_4095_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapConsumer_generatedPositionFor':PyJs_SourceMapConsumer_generatedPositionFor_4095_, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['aArgs', 'source', 'needle', 'mapping', 'index'])
        var.put('source', var.get('util').callprop('getArg', var.get('aArgs'), Js('source')))
        if (var.get("this").get('sourceRoot')!=var.get("null")):
            var.put('source', var.get('util').callprop('relative', var.get("this").get('sourceRoot'), var.get('source')))
        if var.get("this").get('_sources').callprop('has', var.get('source')).neg():
            PyJs_Object_4096_ = Js({'line':var.get("null"),'column':var.get("null"),'lastColumn':var.get("null")})
            return PyJs_Object_4096_
        var.put('source', var.get("this").get('_sources').callprop('indexOf', var.get('source')))
        PyJs_Object_4097_ = Js({'source':var.get('source'),'originalLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'originalColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'))})
        var.put('needle', PyJs_Object_4097_)
        var.put('index', var.get("this").callprop('_findMapping', var.get('needle'), var.get("this").get('_originalMappings'), Js('originalLine'), Js('originalColumn'), var.get('util').get('compareByOriginalPositions'), var.get('util').callprop('getArg', var.get('aArgs'), Js('bias'), var.get('SourceMapConsumer').get('GREATEST_LOWER_BOUND'))))
        if (var.get('index')>=Js(0.0)):
            var.put('mapping', var.get("this").get('_originalMappings').get(var.get('index')))
            if PyJsStrictEq(var.get('mapping').get('source'),var.get('needle').get('source')):
                PyJs_Object_4098_ = Js({'line':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedLine'), var.get("null")),'column':var.get('util').callprop('getArg', var.get('mapping'), Js('generatedColumn'), var.get("null")),'lastColumn':var.get('util').callprop('getArg', var.get('mapping'), Js('lastGeneratedColumn'), var.get("null"))})
                return PyJs_Object_4098_
        PyJs_Object_4099_ = Js({'line':var.get("null"),'column':var.get("null"),'lastColumn':var.get("null")})
        return PyJs_Object_4099_
    PyJs_SourceMapConsumer_generatedPositionFor_4095_._set_name('SourceMapConsumer_generatedPositionFor')
    var.get('BasicSourceMapConsumer').get('prototype').put('generatedPositionFor', PyJs_SourceMapConsumer_generatedPositionFor_4095_)
    var.get('exports').put('BasicSourceMapConsumer', var.get('BasicSourceMapConsumer'))
    pass
    var.get('IndexedSourceMapConsumer').put('prototype', var.get('Object').callprop('create', var.get('SourceMapConsumer').get('prototype')))
    var.get('IndexedSourceMapConsumer').get('prototype').put('constructor', var.get('SourceMapConsumer'))
    var.get('IndexedSourceMapConsumer').get('prototype').put('_version', Js(3.0))
    @Js
    def PyJs_anonymous_4105_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'sources', 'j'])
        var.put('sources', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get("this").get('_sections').get('length')):
            try:
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get("this").get('_sections').get(var.get('i')).get('consumer').get('sources').get('length')):
                    try:
                        var.get('sources').callprop('push', var.get("this").get('_sections').get(var.get('i')).get('consumer').get('sources').get(var.get('j')))
                    finally:
                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('sources')
    PyJs_anonymous_4105_._set_name('anonymous')
    PyJs_Object_4104_ = Js({'get':PyJs_anonymous_4105_})
    var.get('Object').callprop('defineProperty', var.get('IndexedSourceMapConsumer').get('prototype'), Js('sources'), PyJs_Object_4104_)
    @Js
    def PyJs_IndexedSourceMapConsumer_originalPositionFor_4106_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'IndexedSourceMapConsumer_originalPositionFor':PyJs_IndexedSourceMapConsumer_originalPositionFor_4106_, 'aArgs':aArgs}, var)
        var.registers(['section', 'needle', 'aArgs', 'sectionIndex'])
        PyJs_Object_4107_ = Js({'generatedLine':var.get('util').callprop('getArg', var.get('aArgs'), Js('line')),'generatedColumn':var.get('util').callprop('getArg', var.get('aArgs'), Js('column'))})
        var.put('needle', PyJs_Object_4107_)
        @Js
        def PyJs_anonymous_4108_(needle, section, this, arguments, var=var):
            var = Scope({'this':this, 'section':section, 'needle':needle, 'arguments':arguments}, var)
            var.registers(['section', 'needle', 'cmp'])
            var.put('cmp', (var.get('needle').get('generatedLine')-var.get('section').get('generatedOffset').get('generatedLine')))
            if var.get('cmp'):
                return var.get('cmp')
            return (var.get('needle').get('generatedColumn')-var.get('section').get('generatedOffset').get('generatedColumn'))
        PyJs_anonymous_4108_._set_name('anonymous')
        var.put('sectionIndex', var.get('binarySearch').callprop('search', var.get('needle'), var.get("this").get('_sections'), PyJs_anonymous_4108_))
        var.put('section', var.get("this").get('_sections').get(var.get('sectionIndex')))
        if var.get('section').neg():
            PyJs_Object_4109_ = Js({'source':var.get("null"),'line':var.get("null"),'column':var.get("null"),'name':var.get("null")})
            return PyJs_Object_4109_
        PyJs_Object_4110_ = Js({'line':(var.get('needle').get('generatedLine')-(var.get('section').get('generatedOffset').get('generatedLine')-Js(1.0))),'column':(var.get('needle').get('generatedColumn')-((var.get('section').get('generatedOffset').get('generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get('section').get('generatedOffset').get('generatedLine'),var.get('needle').get('generatedLine')) else Js(0.0))),'bias':var.get('aArgs').get('bias')})
        return var.get('section').get('consumer').callprop('originalPositionFor', PyJs_Object_4110_)
    PyJs_IndexedSourceMapConsumer_originalPositionFor_4106_._set_name('IndexedSourceMapConsumer_originalPositionFor')
    var.get('IndexedSourceMapConsumer').get('prototype').put('originalPositionFor', PyJs_IndexedSourceMapConsumer_originalPositionFor_4106_)
    @Js
    def PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_4111_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'IndexedSourceMapConsumer_hasContentsOfAllSources':PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_4111_}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_4112_(s, this, arguments, var=var):
            var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
            var.registers(['s'])
            return var.get('s').get('consumer').callprop('hasContentsOfAllSources')
        PyJs_anonymous_4112_._set_name('anonymous')
        return var.get("this").get('_sections').callprop('every', PyJs_anonymous_4112_)
    PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_4111_._set_name('IndexedSourceMapConsumer_hasContentsOfAllSources')
    var.get('IndexedSourceMapConsumer').get('prototype').put('hasContentsOfAllSources', PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_4111_)
    @Js
    def PyJs_IndexedSourceMapConsumer_sourceContentFor_4113_(aSource, nullOnMissing, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'IndexedSourceMapConsumer_sourceContentFor':PyJs_IndexedSourceMapConsumer_sourceContentFor_4113_, 'aSource':aSource, 'nullOnMissing':nullOnMissing}, var)
        var.registers(['i', 'content', 'section', 'aSource', 'nullOnMissing'])
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get("this").get('_sections').get('length')):
            try:
                var.put('section', var.get("this").get('_sections').get(var.get('i')))
                var.put('content', var.get('section').get('consumer').callprop('sourceContentFor', var.get('aSource'), var.get('true')))
                if var.get('content'):
                    return var.get('content')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        if var.get('nullOnMissing'):
            return var.get("null")
        else:
            PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aSource'))+Js('" is not in the SourceMap.'))))
            raise PyJsTempException
    PyJs_IndexedSourceMapConsumer_sourceContentFor_4113_._set_name('IndexedSourceMapConsumer_sourceContentFor')
    var.get('IndexedSourceMapConsumer').get('prototype').put('sourceContentFor', PyJs_IndexedSourceMapConsumer_sourceContentFor_4113_)
    @Js
    def PyJs_IndexedSourceMapConsumer_generatedPositionFor_4114_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'IndexedSourceMapConsumer_generatedPositionFor':PyJs_IndexedSourceMapConsumer_generatedPositionFor_4114_, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['i', 'section', 'generatedPosition', 'ret', 'aArgs'])
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get("this").get('_sections').get('length')):
            try:
                var.put('section', var.get("this").get('_sections').get(var.get('i')))
                if PyJsStrictEq(var.get('section').get('consumer').get('sources').callprop('indexOf', var.get('util').callprop('getArg', var.get('aArgs'), Js('source'))),(-Js(1.0))):
                    continue
                var.put('generatedPosition', var.get('section').get('consumer').callprop('generatedPositionFor', var.get('aArgs')))
                if var.get('generatedPosition'):
                    PyJs_Object_4115_ = Js({'line':(var.get('generatedPosition').get('line')+(var.get('section').get('generatedOffset').get('generatedLine')-Js(1.0))),'column':(var.get('generatedPosition').get('column')+((var.get('section').get('generatedOffset').get('generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get('section').get('generatedOffset').get('generatedLine'),var.get('generatedPosition').get('line')) else Js(0.0)))})
                    var.put('ret', PyJs_Object_4115_)
                    return var.get('ret')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_Object_4116_ = Js({'line':var.get("null"),'column':var.get("null")})
        return PyJs_Object_4116_
    PyJs_IndexedSourceMapConsumer_generatedPositionFor_4114_._set_name('IndexedSourceMapConsumer_generatedPositionFor')
    var.get('IndexedSourceMapConsumer').get('prototype').put('generatedPositionFor', PyJs_IndexedSourceMapConsumer_generatedPositionFor_4114_)
    @Js
    def PyJs_IndexedSourceMapConsumer_parseMappings_4117_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({'this':this, 'aStr':aStr, 'aSourceRoot':aSourceRoot, 'IndexedSourceMapConsumer_parseMappings':PyJs_IndexedSourceMapConsumer_parseMappings_4117_, 'arguments':arguments}, var)
        var.registers(['name', 'i', 'section', 'j', 'aSourceRoot', 'mapping', 'adjustedMapping', 'source', 'sectionMappings', 'aStr'])
        var.get("this").put('__generatedMappings', Js([]))
        var.get("this").put('__originalMappings', Js([]))
        #for JS loop
        var.put('i', Js(0.0))
        while (var.get('i')<var.get("this").get('_sections').get('length')):
            try:
                var.put('section', var.get("this").get('_sections').get(var.get('i')))
                var.put('sectionMappings', var.get('section').get('consumer').get('_generatedMappings'))
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get('sectionMappings').get('length')):
                    try:
                        var.put('mapping', var.get('sectionMappings').get(var.get('j')))
                        var.put('source', var.get('section').get('consumer').get('_sources').callprop('at', var.get('mapping').get('source')))
                        if PyJsStrictNeq(var.get('section').get('consumer').get('sourceRoot'),var.get("null")):
                            var.put('source', var.get('util').callprop('join', var.get('section').get('consumer').get('sourceRoot'), var.get('source')))
                        var.get("this").get('_sources').callprop('add', var.get('source'))
                        var.put('source', var.get("this").get('_sources').callprop('indexOf', var.get('source')))
                        var.put('name', var.get('section').get('consumer').get('_names').callprop('at', var.get('mapping').get('name')))
                        var.get("this").get('_names').callprop('add', var.get('name'))
                        var.put('name', var.get("this").get('_names').callprop('indexOf', var.get('name')))
                        PyJs_Object_4118_ = Js({'source':var.get('source'),'generatedLine':(var.get('mapping').get('generatedLine')+(var.get('section').get('generatedOffset').get('generatedLine')-Js(1.0))),'generatedColumn':(var.get('mapping').get('generatedColumn')+((var.get('section').get('generatedOffset').get('generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get('section').get('generatedOffset').get('generatedLine'),var.get('mapping').get('generatedLine')) else Js(0.0))),'originalLine':var.get('mapping').get('originalLine'),'originalColumn':var.get('mapping').get('originalColumn'),'name':var.get('name')})
                        var.put('adjustedMapping', PyJs_Object_4118_)
                        var.get("this").get('__generatedMappings').callprop('push', var.get('adjustedMapping'))
                        if PyJsStrictEq(var.get('adjustedMapping').get('originalLine').typeof(),Js('number')):
                            var.get("this").get('__originalMappings').callprop('push', var.get('adjustedMapping'))
                    finally:
                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.get('quickSort')(var.get("this").get('__generatedMappings'), var.get('util').get('compareByGeneratedPositionsDeflated'))
        var.get('quickSort')(var.get("this").get('__originalMappings'), var.get('util').get('compareByOriginalPositions'))
    PyJs_IndexedSourceMapConsumer_parseMappings_4117_._set_name('IndexedSourceMapConsumer_parseMappings')
    var.get('IndexedSourceMapConsumer').get('prototype').put('_parseMappings', PyJs_IndexedSourceMapConsumer_parseMappings_4117_)
    var.get('exports').put('IndexedSourceMapConsumer', var.get('IndexedSourceMapConsumer'))
PyJs_anonymous_4063_._set_name('anonymous')
PyJs_Object_4119_ = Js({'./array-set':Js(509.0),'./base64-vlq':Js(510.0),'./binary-search':Js(512.0),'./quick-sort':Js(514.0),'./util':Js(518.0)})
@Js
def PyJs_anonymous_4120_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['SourceMapGenerator', 'exports', 'base64VLQ', 'require', 'module', 'util', 'ArraySet', 'MappingList'])
    @Js
    def PyJsHoisted_SourceMapGenerator_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['aArgs'])
        if var.get('aArgs').neg():
            PyJs_Object_4121_ = Js({})
            var.put('aArgs', PyJs_Object_4121_)
        var.get("this").put('_file', var.get('util').callprop('getArg', var.get('aArgs'), Js('file'), var.get("null")))
        var.get("this").put('_sourceRoot', var.get('util').callprop('getArg', var.get('aArgs'), Js('sourceRoot'), var.get("null")))
        var.get("this").put('_skipValidation', var.get('util').callprop('getArg', var.get('aArgs'), Js('skipValidation'), Js(False)))
        var.get("this").put('_sources', var.get('ArraySet').create())
        var.get("this").put('_names', var.get('ArraySet').create())
        var.get("this").put('_mappings', var.get('MappingList').create())
        var.get("this").put('_sourcesContents', var.get("null"))
    PyJsHoisted_SourceMapGenerator_.__name__ = 'SourceMapGenerator'
    var.put('SourceMapGenerator', PyJsHoisted_SourceMapGenerator_)
    var.put('base64VLQ', var.get('require')(Js('./base64-vlq')))
    var.put('util', var.get('require')(Js('./util')))
    var.put('ArraySet', var.get('require')(Js('./array-set')).get('ArraySet'))
    var.put('MappingList', var.get('require')(Js('./mapping-list')).get('MappingList'))
    pass
    var.get('SourceMapGenerator').get('prototype').put('_version', Js(3.0))
    @Js
    def PyJs_SourceMapGenerator_fromSourceMap_4122_(aSourceMapConsumer, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapGenerator_fromSourceMap':PyJs_SourceMapGenerator_fromSourceMap_4122_, 'arguments':arguments, 'aSourceMapConsumer':aSourceMapConsumer}, var)
        var.registers(['aSourceMapConsumer', 'sourceRoot', 'generator'])
        var.put('sourceRoot', var.get('aSourceMapConsumer').get('sourceRoot'))
        PyJs_Object_4123_ = Js({'file':var.get('aSourceMapConsumer').get('file'),'sourceRoot':var.get('sourceRoot')})
        var.put('generator', var.get('SourceMapGenerator').create(PyJs_Object_4123_))
        @Js
        def PyJs_anonymous_4124_(mapping, this, arguments, var=var):
            var = Scope({'this':this, 'mapping':mapping, 'arguments':arguments}, var)
            var.registers(['newMapping', 'mapping'])
            PyJs_Object_4126_ = Js({'line':var.get('mapping').get('generatedLine'),'column':var.get('mapping').get('generatedColumn')})
            PyJs_Object_4125_ = Js({'generated':PyJs_Object_4126_})
            var.put('newMapping', PyJs_Object_4125_)
            if (var.get('mapping').get('source')!=var.get("null")):
                var.get('newMapping').put('source', var.get('mapping').get('source'))
                if (var.get('sourceRoot')!=var.get("null")):
                    var.get('newMapping').put('source', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('newMapping').get('source')))
                PyJs_Object_4127_ = Js({'line':var.get('mapping').get('originalLine'),'column':var.get('mapping').get('originalColumn')})
                var.get('newMapping').put('original', PyJs_Object_4127_)
                if (var.get('mapping').get('name')!=var.get("null")):
                    var.get('newMapping').put('name', var.get('mapping').get('name'))
            var.get('generator').callprop('addMapping', var.get('newMapping'))
        PyJs_anonymous_4124_._set_name('anonymous')
        var.get('aSourceMapConsumer').callprop('eachMapping', PyJs_anonymous_4124_)
        @Js
        def PyJs_anonymous_4128_(sourceFile, this, arguments, var=var):
            var = Scope({'this':this, 'sourceFile':sourceFile, 'arguments':arguments}, var)
            var.registers(['content', 'sourceFile'])
            var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
            if (var.get('content')!=var.get("null")):
                var.get('generator').callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
        PyJs_anonymous_4128_._set_name('anonymous')
        var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_4128_)
        return var.get('generator')
    PyJs_SourceMapGenerator_fromSourceMap_4122_._set_name('SourceMapGenerator_fromSourceMap')
    var.get('SourceMapGenerator').put('fromSourceMap', PyJs_SourceMapGenerator_fromSourceMap_4122_)
    @Js
    def PyJs_SourceMapGenerator_addMapping_4129_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapGenerator_addMapping':PyJs_SourceMapGenerator_addMapping_4129_, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['source', 'generated', 'aArgs', 'original', 'name'])
        var.put('generated', var.get('util').callprop('getArg', var.get('aArgs'), Js('generated')))
        var.put('original', var.get('util').callprop('getArg', var.get('aArgs'), Js('original'), var.get("null")))
        var.put('source', var.get('util').callprop('getArg', var.get('aArgs'), Js('source'), var.get("null")))
        var.put('name', var.get('util').callprop('getArg', var.get('aArgs'), Js('name'), var.get("null")))
        if var.get("this").get('_skipValidation').neg():
            var.get("this").callprop('_validateMapping', var.get('generated'), var.get('original'), var.get('source'), var.get('name'))
        if (var.get('source')!=var.get("null")):
            var.put('source', var.get('String')(var.get('source')))
            if var.get("this").get('_sources').callprop('has', var.get('source')).neg():
                var.get("this").get('_sources').callprop('add', var.get('source'))
        if (var.get('name')!=var.get("null")):
            var.put('name', var.get('String')(var.get('name')))
            if var.get("this").get('_names').callprop('has', var.get('name')).neg():
                var.get("this").get('_names').callprop('add', var.get('name'))
        PyJs_Object_4130_ = Js({'generatedLine':var.get('generated').get('line'),'generatedColumn':var.get('generated').get('column'),'originalLine':((var.get('original')!=var.get("null")) and var.get('original').get('line')),'originalColumn':((var.get('original')!=var.get("null")) and var.get('original').get('column')),'source':var.get('source'),'name':var.get('name')})
        var.get("this").get('_mappings').callprop('add', PyJs_Object_4130_)
    PyJs_SourceMapGenerator_addMapping_4129_._set_name('SourceMapGenerator_addMapping')
    var.get('SourceMapGenerator').get('prototype').put('addMapping', PyJs_SourceMapGenerator_addMapping_4129_)
    @Js
    def PyJs_SourceMapGenerator_setSourceContent_4131_(aSourceFile, aSourceContent, this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapGenerator_setSourceContent':PyJs_SourceMapGenerator_setSourceContent_4131_, 'aSourceContent':aSourceContent, 'aSourceFile':aSourceFile, 'arguments':arguments}, var)
        var.registers(['source', 'aSourceContent', 'aSourceFile'])
        var.put('source', var.get('aSourceFile'))
        if (var.get("this").get('_sourceRoot')!=var.get("null")):
            var.put('source', var.get('util').callprop('relative', var.get("this").get('_sourceRoot'), var.get('source')))
        if (var.get('aSourceContent')!=var.get("null")):
            if var.get("this").get('_sourcesContents').neg():
                var.get("this").put('_sourcesContents', var.get('Object').callprop('create', var.get("null")))
            var.get("this").get('_sourcesContents').put(var.get('util').callprop('toSetString', var.get('source')), var.get('aSourceContent'))
        else:
            if var.get("this").get('_sourcesContents'):
                var.get("this").get('_sourcesContents').delete(var.get('util').callprop('toSetString', var.get('source')))
                if PyJsStrictEq(var.get('Object').callprop('keys', var.get("this").get('_sourcesContents')).get('length'),Js(0.0)):
                    var.get("this").put('_sourcesContents', var.get("null"))
    PyJs_SourceMapGenerator_setSourceContent_4131_._set_name('SourceMapGenerator_setSourceContent')
    var.get('SourceMapGenerator').get('prototype').put('setSourceContent', PyJs_SourceMapGenerator_setSourceContent_4131_)
    @Js
    def PyJs_SourceMapGenerator_applySourceMap_4132_(aSourceMapConsumer, aSourceFile, aSourceMapPath, this, arguments, var=var):
        var = Scope({'SourceMapGenerator_applySourceMap':PyJs_SourceMapGenerator_applySourceMap_4132_, 'aSourceMapConsumer':aSourceMapConsumer, 'this':this, 'aSourceMapPath':aSourceMapPath, 'arguments':arguments, 'aSourceFile':aSourceFile}, var)
        var.registers(['aSourceMapConsumer', 'sourceFile', 'sourceRoot', 'aSourceMapPath', 'newNames', 'newSources', 'aSourceFile'])
        var.put('sourceFile', var.get('aSourceFile'))
        if (var.get('aSourceFile')==var.get("null")):
            if (var.get('aSourceMapConsumer').get('file')==var.get("null")):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ')+Js('or the source map\'s "file" property. Both were omitted.'))))
                raise PyJsTempException
            var.put('sourceFile', var.get('aSourceMapConsumer').get('file'))
        var.put('sourceRoot', var.get("this").get('_sourceRoot'))
        if (var.get('sourceRoot')!=var.get("null")):
            var.put('sourceFile', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('sourceFile')))
        var.put('newSources', var.get('ArraySet').create())
        var.put('newNames', var.get('ArraySet').create())
        @Js
        def PyJs_anonymous_4133_(mapping, this, arguments, var=var):
            var = Scope({'this':this, 'mapping':mapping, 'arguments':arguments}, var)
            var.registers(['source', 'mapping', 'original', 'name'])
            if (PyJsStrictEq(var.get('mapping').get('source'),var.get('sourceFile')) and (var.get('mapping').get('originalLine')!=var.get("null"))):
                PyJs_Object_4134_ = Js({'line':var.get('mapping').get('originalLine'),'column':var.get('mapping').get('originalColumn')})
                var.put('original', var.get('aSourceMapConsumer').callprop('originalPositionFor', PyJs_Object_4134_))
                if (var.get('original').get('source')!=var.get("null")):
                    var.get('mapping').put('source', var.get('original').get('source'))
                    if (var.get('aSourceMapPath')!=var.get("null")):
                        var.get('mapping').put('source', var.get('util').callprop('join', var.get('aSourceMapPath'), var.get('mapping').get('source')))
                    if (var.get('sourceRoot')!=var.get("null")):
                        var.get('mapping').put('source', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('mapping').get('source')))
                    var.get('mapping').put('originalLine', var.get('original').get('line'))
                    var.get('mapping').put('originalColumn', var.get('original').get('column'))
                    if (var.get('original').get('name')!=var.get("null")):
                        var.get('mapping').put('name', var.get('original').get('name'))
            var.put('source', var.get('mapping').get('source'))
            if ((var.get('source')!=var.get("null")) and var.get('newSources').callprop('has', var.get('source')).neg()):
                var.get('newSources').callprop('add', var.get('source'))
            var.put('name', var.get('mapping').get('name'))
            if ((var.get('name')!=var.get("null")) and var.get('newNames').callprop('has', var.get('name')).neg()):
                var.get('newNames').callprop('add', var.get('name'))
        PyJs_anonymous_4133_._set_name('anonymous')
        var.get("this").get('_mappings').callprop('unsortedForEach', PyJs_anonymous_4133_, var.get("this"))
        var.get("this").put('_sources', var.get('newSources'))
        var.get("this").put('_names', var.get('newNames'))
        @Js
        def PyJs_anonymous_4135_(sourceFile, this, arguments, var=var):
            var = Scope({'this':this, 'sourceFile':sourceFile, 'arguments':arguments}, var)
            var.registers(['content', 'sourceFile'])
            var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
            if (var.get('content')!=var.get("null")):
                if (var.get('aSourceMapPath')!=var.get("null")):
                    var.put('sourceFile', var.get('util').callprop('join', var.get('aSourceMapPath'), var.get('sourceFile')))
                if (var.get('sourceRoot')!=var.get("null")):
                    var.put('sourceFile', var.get('util').callprop('relative', var.get('sourceRoot'), var.get('sourceFile')))
                var.get("this").callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
        PyJs_anonymous_4135_._set_name('anonymous')
        var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_4135_, var.get("this"))
    PyJs_SourceMapGenerator_applySourceMap_4132_._set_name('SourceMapGenerator_applySourceMap')
    var.get('SourceMapGenerator').get('prototype').put('applySourceMap', PyJs_SourceMapGenerator_applySourceMap_4132_)
    @Js
    def PyJs_SourceMapGenerator_validateMapping_4136_(aGenerated, aOriginal, aSource, aName, this, arguments, var=var):
        var = Scope({'aOriginal':aOriginal, 'aGenerated':aGenerated, 'SourceMapGenerator_validateMapping':PyJs_SourceMapGenerator_validateMapping_4136_, 'aSource':aSource, 'this':this, 'aName':aName, 'arguments':arguments}, var)
        var.registers(['aOriginal', 'aGenerated', 'aSource', 'aName'])
        if (((((((var.get('aGenerated') and var.get('aGenerated').contains(Js('line'))) and var.get('aGenerated').contains(Js('column'))) and (var.get('aGenerated').get('line')>Js(0.0))) and (var.get('aGenerated').get('column')>=Js(0.0))) and var.get('aOriginal').neg()) and var.get('aSource').neg()) and var.get('aName').neg()):
            return var.get('undefined')
        else:
            def PyJs_LONG_4137_(var=var):
                return ((((((((var.get('aGenerated') and var.get('aGenerated').contains(Js('line'))) and var.get('aGenerated').contains(Js('column'))) and var.get('aOriginal')) and var.get('aOriginal').contains(Js('line'))) and var.get('aOriginal').contains(Js('column'))) and (var.get('aGenerated').get('line')>Js(0.0))) and (var.get('aGenerated').get('column')>=Js(0.0))) and (var.get('aOriginal').get('line')>Js(0.0)))
            if ((PyJs_LONG_4137_() and (var.get('aOriginal').get('column')>=Js(0.0))) and var.get('aSource')):
                return var.get('undefined')
            else:
                PyJs_Object_4138_ = Js({'generated':var.get('aGenerated'),'source':var.get('aSource'),'original':var.get('aOriginal'),'name':var.get('aName')})
                PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid mapping: ')+var.get('JSON').callprop('stringify', PyJs_Object_4138_))))
                raise PyJsTempException
    PyJs_SourceMapGenerator_validateMapping_4136_._set_name('SourceMapGenerator_validateMapping')
    var.get('SourceMapGenerator').get('prototype').put('_validateMapping', PyJs_SourceMapGenerator_validateMapping_4136_)
    @Js
    def PyJs_SourceMapGenerator_serializeMappings_4139_(this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapGenerator_serializeMappings':PyJs_SourceMapGenerator_serializeMappings_4139_, 'arguments':arguments}, var)
        var.registers(['previousOriginalColumn', 'previousOriginalLine', 'previousGeneratedLine', 'previousSource', 'previousGeneratedColumn', 'i', 'mapping', 'previousName', 'next', 'len', 'nameIdx', 'sourceIdx', 'result', 'mappings'])
        var.put('previousGeneratedColumn', Js(0.0))
        var.put('previousGeneratedLine', Js(1.0))
        var.put('previousOriginalColumn', Js(0.0))
        var.put('previousOriginalLine', Js(0.0))
        var.put('previousName', Js(0.0))
        var.put('previousSource', Js(0.0))
        var.put('result', Js(''))
        pass
        pass
        pass
        pass
        var.put('mappings', var.get("this").get('_mappings').callprop('toArray'))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('mappings').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.put('mapping', var.get('mappings').get(var.get('i')))
                var.put('next', Js(''))
                if PyJsStrictNeq(var.get('mapping').get('generatedLine'),var.get('previousGeneratedLine')):
                    var.put('previousGeneratedColumn', Js(0.0))
                    while PyJsStrictNeq(var.get('mapping').get('generatedLine'),var.get('previousGeneratedLine')):
                        var.put('next', Js(';'), '+')
                        (var.put('previousGeneratedLine',Js(var.get('previousGeneratedLine').to_number())+Js(1))-Js(1))
                else:
                    if (var.get('i')>Js(0.0)):
                        if var.get('util').callprop('compareByGeneratedPositionsInflated', var.get('mapping'), var.get('mappings').get((var.get('i')-Js(1.0)))).neg():
                            continue
                        var.put('next', Js(','), '+')
                var.put('next', var.get('base64VLQ').callprop('encode', (var.get('mapping').get('generatedColumn')-var.get('previousGeneratedColumn'))), '+')
                var.put('previousGeneratedColumn', var.get('mapping').get('generatedColumn'))
                if (var.get('mapping').get('source')!=var.get("null")):
                    var.put('sourceIdx', var.get("this").get('_sources').callprop('indexOf', var.get('mapping').get('source')))
                    var.put('next', var.get('base64VLQ').callprop('encode', (var.get('sourceIdx')-var.get('previousSource'))), '+')
                    var.put('previousSource', var.get('sourceIdx'))
                    var.put('next', var.get('base64VLQ').callprop('encode', ((var.get('mapping').get('originalLine')-Js(1.0))-var.get('previousOriginalLine'))), '+')
                    var.put('previousOriginalLine', (var.get('mapping').get('originalLine')-Js(1.0)))
                    var.put('next', var.get('base64VLQ').callprop('encode', (var.get('mapping').get('originalColumn')-var.get('previousOriginalColumn'))), '+')
                    var.put('previousOriginalColumn', var.get('mapping').get('originalColumn'))
                    if (var.get('mapping').get('name')!=var.get("null")):
                        var.put('nameIdx', var.get("this").get('_names').callprop('indexOf', var.get('mapping').get('name')))
                        var.put('next', var.get('base64VLQ').callprop('encode', (var.get('nameIdx')-var.get('previousName'))), '+')
                        var.put('previousName', var.get('nameIdx'))
                var.put('result', var.get('next'), '+')
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        return var.get('result')
    PyJs_SourceMapGenerator_serializeMappings_4139_._set_name('SourceMapGenerator_serializeMappings')
    var.get('SourceMapGenerator').get('prototype').put('_serializeMappings', PyJs_SourceMapGenerator_serializeMappings_4139_)
    @Js
    def PyJs_SourceMapGenerator_generateSourcesContent_4140_(aSources, aSourceRoot, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'SourceMapGenerator_generateSourcesContent':PyJs_SourceMapGenerator_generateSourcesContent_4140_, 'aSources':aSources, 'aSourceRoot':aSourceRoot}, var)
        var.registers(['aSources', 'aSourceRoot'])
        @Js
        def PyJs_anonymous_4141_(source, this, arguments, var=var):
            var = Scope({'this':this, 'source':source, 'arguments':arguments}, var)
            var.registers(['source', 'key'])
            if var.get("this").get('_sourcesContents').neg():
                return var.get("null")
            if (var.get('aSourceRoot')!=var.get("null")):
                var.put('source', var.get('util').callprop('relative', var.get('aSourceRoot'), var.get('source')))
            var.put('key', var.get('util').callprop('toSetString', var.get('source')))
            return (var.get("this").get('_sourcesContents').get(var.get('key')) if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get("this").get('_sourcesContents'), var.get('key')) else var.get("null"))
        PyJs_anonymous_4141_._set_name('anonymous')
        return var.get('aSources').callprop('map', PyJs_anonymous_4141_, var.get("this"))
    PyJs_SourceMapGenerator_generateSourcesContent_4140_._set_name('SourceMapGenerator_generateSourcesContent')
    var.get('SourceMapGenerator').get('prototype').put('_generateSourcesContent', PyJs_SourceMapGenerator_generateSourcesContent_4140_)
    @Js
    def PyJs_SourceMapGenerator_toJSON_4142_(this, arguments, var=var):
        var = Scope({'this':this, 'SourceMapGenerator_toJSON':PyJs_SourceMapGenerator_toJSON_4142_, 'arguments':arguments}, var)
        var.registers(['map'])
        PyJs_Object_4143_ = Js({'version':var.get("this").get('_version'),'sources':var.get("this").get('_sources').callprop('toArray'),'names':var.get("this").get('_names').callprop('toArray'),'mappings':var.get("this").callprop('_serializeMappings')})
        var.put('map', PyJs_Object_4143_)
        if (var.get("this").get('_file')!=var.get("null")):
            var.get('map').put('file', var.get("this").get('_file'))
        if (var.get("this").get('_sourceRoot')!=var.get("null")):
            var.get('map').put('sourceRoot', var.get("this").get('_sourceRoot'))
        if var.get("this").get('_sourcesContents'):
            var.get('map').put('sourcesContent', var.get("this").callprop('_generateSourcesContent', var.get('map').get('sources'), var.get('map').get('sourceRoot')))
        return var.get('map')
    PyJs_SourceMapGenerator_toJSON_4142_._set_name('SourceMapGenerator_toJSON')
    var.get('SourceMapGenerator').get('prototype').put('toJSON', PyJs_SourceMapGenerator_toJSON_4142_)
    @Js
    def PyJs_SourceMapGenerator_toString_4144_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'SourceMapGenerator_toString':PyJs_SourceMapGenerator_toString_4144_}, var)
        var.registers([])
        return var.get('JSON').callprop('stringify', var.get("this").callprop('toJSON'))
    PyJs_SourceMapGenerator_toString_4144_._set_name('SourceMapGenerator_toString')
    var.get('SourceMapGenerator').get('prototype').put('toString', PyJs_SourceMapGenerator_toString_4144_)
    var.get('exports').put('SourceMapGenerator', var.get('SourceMapGenerator'))
PyJs_anonymous_4120_._set_name('anonymous')
PyJs_Object_4145_ = Js({'./array-set':Js(509.0),'./base64-vlq':Js(510.0),'./mapping-list':Js(513.0),'./util':Js(518.0)})
@Js
def PyJs_anonymous_4146_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['util', 'exports', 'NEWLINE_CODE', 'SourceNode', 'require', 'isSourceNode', 'module', 'SourceMapGenerator', 'REGEX_NEWLINE'])
    @Js
    def PyJsHoisted_SourceNode_(aLine, aColumn, aSource, aChunks, aName, this, arguments, var=var):
        var = Scope({'aChunks':aChunks, 'aSource':aSource, 'aLine':aLine, 'this':this, 'aColumn':aColumn, 'aName':aName, 'arguments':arguments}, var)
        var.registers(['aChunks', 'aColumn', 'aSource', 'aLine', 'aName'])
        var.get("this").put('children', Js([]))
        PyJs_Object_4147_ = Js({})
        var.get("this").put('sourceContents', PyJs_Object_4147_)
        var.get("this").put('line', (var.get("null") if (var.get('aLine')==var.get("null")) else var.get('aLine')))
        var.get("this").put('column', (var.get("null") if (var.get('aColumn')==var.get("null")) else var.get('aColumn')))
        var.get("this").put('source', (var.get("null") if (var.get('aSource')==var.get("null")) else var.get('aSource')))
        var.get("this").put('name', (var.get("null") if (var.get('aName')==var.get("null")) else var.get('aName')))
        var.get("this").put(var.get('isSourceNode'), var.get('true'))
        if (var.get('aChunks')!=var.get("null")):
            var.get("this").callprop('add', var.get('aChunks'))
    PyJsHoisted_SourceNode_.__name__ = 'SourceNode'
    var.put('SourceNode', PyJsHoisted_SourceNode_)
    var.put('SourceMapGenerator', var.get('require')(Js('./source-map-generator')).get('SourceMapGenerator'))
    var.put('util', var.get('require')(Js('./util')))
    var.put('REGEX_NEWLINE', JsRegExp('/(\\r?\\n)/'))
    var.put('NEWLINE_CODE', Js(10.0))
    var.put('isSourceNode', Js('$$$isSourceNode$$$'))
    pass
    @Js
    def PyJs_SourceNode_fromStringWithSourceMap_4148_(aGeneratedCode, aSourceMapConsumer, aRelativePath, this, arguments, var=var):
        var = Scope({'aSourceMapConsumer':aSourceMapConsumer, 'this':this, 'aRelativePath':aRelativePath, 'aGeneratedCode':aGeneratedCode, 'SourceNode_fromStringWithSourceMap':PyJs_SourceNode_fromStringWithSourceMap_4148_, 'arguments':arguments}, var)
        var.registers(['node', 'lastMapping', 'remainingLines', 'aSourceMapConsumer', 'aGeneratedCode', 'lastGeneratedLine', 'aRelativePath', 'addMappingWithCode', 'shiftNextLine', 'lastGeneratedColumn'])
        @Js
        def PyJsHoisted_addMappingWithCode_(mapping, code, this, arguments, var=var):
            var = Scope({'this':this, 'code':code, 'mapping':mapping, 'arguments':arguments}, var)
            var.registers(['source', 'code', 'mapping'])
            if (PyJsStrictEq(var.get('mapping'),var.get("null")) or PyJsStrictEq(var.get('mapping').get('source'),var.get('undefined'))):
                var.get('node').callprop('add', var.get('code'))
            else:
                var.put('source', (var.get('util').callprop('join', var.get('aRelativePath'), var.get('mapping').get('source')) if var.get('aRelativePath') else var.get('mapping').get('source')))
                var.get('node').callprop('add', var.get('SourceNode').create(var.get('mapping').get('originalLine'), var.get('mapping').get('originalColumn'), var.get('source'), var.get('code'), var.get('mapping').get('name')))
        PyJsHoisted_addMappingWithCode_.__name__ = 'addMappingWithCode'
        var.put('addMappingWithCode', PyJsHoisted_addMappingWithCode_)
        var.put('node', var.get('SourceNode').create())
        var.put('remainingLines', var.get('aGeneratedCode').callprop('split', var.get('REGEX_NEWLINE')))
        @Js
        def PyJs_anonymous_4149_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['newLine', 'lineContents'])
            var.put('lineContents', var.get('remainingLines').callprop('shift'))
            var.put('newLine', (var.get('remainingLines').callprop('shift') or Js('')))
            return (var.get('lineContents')+var.get('newLine'))
        PyJs_anonymous_4149_._set_name('anonymous')
        var.put('shiftNextLine', PyJs_anonymous_4149_)
        var.put('lastGeneratedLine', Js(1.0))
        var.put('lastGeneratedColumn', Js(0.0))
        var.put('lastMapping', var.get("null"))
        @Js
        def PyJs_anonymous_4150_(mapping, this, arguments, var=var):
            var = Scope({'this':this, 'mapping':mapping, 'arguments':arguments}, var)
            var.registers(['nextLine', 'code', 'mapping'])
            if PyJsStrictNeq(var.get('lastMapping'),var.get("null")):
                if (var.get('lastGeneratedLine')<var.get('mapping').get('generatedLine')):
                    var.get('addMappingWithCode')(var.get('lastMapping'), var.get('shiftNextLine')())
                    (var.put('lastGeneratedLine',Js(var.get('lastGeneratedLine').to_number())+Js(1))-Js(1))
                    var.put('lastGeneratedColumn', Js(0.0))
                else:
                    var.put('nextLine', var.get('remainingLines').get('0'))
                    var.put('code', var.get('nextLine').callprop('substr', Js(0.0), (var.get('mapping').get('generatedColumn')-var.get('lastGeneratedColumn'))))
                    var.get('remainingLines').put('0', var.get('nextLine').callprop('substr', (var.get('mapping').get('generatedColumn')-var.get('lastGeneratedColumn'))))
                    var.put('lastGeneratedColumn', var.get('mapping').get('generatedColumn'))
                    var.get('addMappingWithCode')(var.get('lastMapping'), var.get('code'))
                    var.put('lastMapping', var.get('mapping'))
                    return var.get('undefined')
            while (var.get('lastGeneratedLine')<var.get('mapping').get('generatedLine')):
                var.get('node').callprop('add', var.get('shiftNextLine')())
                (var.put('lastGeneratedLine',Js(var.get('lastGeneratedLine').to_number())+Js(1))-Js(1))
            if (var.get('lastGeneratedColumn')<var.get('mapping').get('generatedColumn')):
                var.put('nextLine', var.get('remainingLines').get('0'))
                var.get('node').callprop('add', var.get('nextLine').callprop('substr', Js(0.0), var.get('mapping').get('generatedColumn')))
                var.get('remainingLines').put('0', var.get('nextLine').callprop('substr', var.get('mapping').get('generatedColumn')))
                var.put('lastGeneratedColumn', var.get('mapping').get('generatedColumn'))
            var.put('lastMapping', var.get('mapping'))
        PyJs_anonymous_4150_._set_name('anonymous')
        var.get('aSourceMapConsumer').callprop('eachMapping', PyJs_anonymous_4150_, var.get("this"))
        if (var.get('remainingLines').get('length')>Js(0.0)):
            if var.get('lastMapping'):
                var.get('addMappingWithCode')(var.get('lastMapping'), var.get('shiftNextLine')())
            var.get('node').callprop('add', var.get('remainingLines').callprop('join', Js('')))
        @Js
        def PyJs_anonymous_4151_(sourceFile, this, arguments, var=var):
            var = Scope({'this':this, 'sourceFile':sourceFile, 'arguments':arguments}, var)
            var.registers(['content', 'sourceFile'])
            var.put('content', var.get('aSourceMapConsumer').callprop('sourceContentFor', var.get('sourceFile')))
            if (var.get('content')!=var.get("null")):
                if (var.get('aRelativePath')!=var.get("null")):
                    var.put('sourceFile', var.get('util').callprop('join', var.get('aRelativePath'), var.get('sourceFile')))
                var.get('node').callprop('setSourceContent', var.get('sourceFile'), var.get('content'))
        PyJs_anonymous_4151_._set_name('anonymous')
        var.get('aSourceMapConsumer').get('sources').callprop('forEach', PyJs_anonymous_4151_)
        return var.get('node')
        pass
    PyJs_SourceNode_fromStringWithSourceMap_4148_._set_name('SourceNode_fromStringWithSourceMap')
    var.get('SourceNode').put('fromStringWithSourceMap', PyJs_SourceNode_fromStringWithSourceMap_4148_)
    @Js
    def PyJs_SourceNode_add_4152_(aChunk, this, arguments, var=var):
        var = Scope({'this':this, 'SourceNode_add':PyJs_SourceNode_add_4152_, 'arguments':arguments, 'aChunk':aChunk}, var)
        var.registers(['aChunk'])
        if var.get('Array').callprop('isArray', var.get('aChunk')):
            @Js
            def PyJs_anonymous_4153_(chunk, this, arguments, var=var):
                var = Scope({'this':this, 'chunk':chunk, 'arguments':arguments}, var)
                var.registers(['chunk'])
                var.get("this").callprop('add', var.get('chunk'))
            PyJs_anonymous_4153_._set_name('anonymous')
            var.get('aChunk').callprop('forEach', PyJs_anonymous_4153_, var.get("this"))
        else:
            if (var.get('aChunk').get(var.get('isSourceNode')) or PyJsStrictEq(var.get('aChunk',throw=False).typeof(),Js('string'))):
                if var.get('aChunk'):
                    var.get("this").get('children').callprop('push', var.get('aChunk'))
            else:
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get('aChunk'))))
                raise PyJsTempException
        return var.get("this")
    PyJs_SourceNode_add_4152_._set_name('SourceNode_add')
    var.get('SourceNode').get('prototype').put('add', PyJs_SourceNode_add_4152_)
    @Js
    def PyJs_SourceNode_prepend_4154_(aChunk, this, arguments, var=var):
        var = Scope({'this':this, 'SourceNode_prepend':PyJs_SourceNode_prepend_4154_, 'arguments':arguments, 'aChunk':aChunk}, var)
        var.registers(['i', 'aChunk'])
        if var.get('Array').callprop('isArray', var.get('aChunk')):
            #for JS loop
            var.put('i', (var.get('aChunk').get('length')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.get("this").callprop('prepend', var.get('aChunk').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        else:
            if (var.get('aChunk').get(var.get('isSourceNode')) or PyJsStrictEq(var.get('aChunk',throw=False).typeof(),Js('string'))):
                var.get("this").get('children').callprop('unshift', var.get('aChunk'))
            else:
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get('aChunk'))))
                raise PyJsTempException
        return var.get("this")
    PyJs_SourceNode_prepend_4154_._set_name('SourceNode_prepend')
    var.get('SourceNode').get('prototype').put('prepend', PyJs_SourceNode_prepend_4154_)
    @Js
    def PyJs_SourceNode_walk_4155_(aFn, this, arguments, var=var):
        var = Scope({'this':this, 'aFn':aFn, 'arguments':arguments, 'SourceNode_walk':PyJs_SourceNode_walk_4155_}, var)
        var.registers(['i', 'chunk', 'aFn', 'len'])
        pass
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get("this").get('children').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.put('chunk', var.get("this").get('children').get(var.get('i')))
                if var.get('chunk').get(var.get('isSourceNode')):
                    var.get('chunk').callprop('walk', var.get('aFn'))
                else:
                    if PyJsStrictNeq(var.get('chunk'),Js('')):
                        PyJs_Object_4156_ = Js({'source':var.get("this").get('source'),'line':var.get("this").get('line'),'column':var.get("this").get('column'),'name':var.get("this").get('name')})
                        var.get('aFn')(var.get('chunk'), PyJs_Object_4156_)
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_SourceNode_walk_4155_._set_name('SourceNode_walk')
    var.get('SourceNode').get('prototype').put('walk', PyJs_SourceNode_walk_4155_)
    @Js
    def PyJs_SourceNode_join_4157_(aSep, this, arguments, var=var):
        var = Scope({'this':this, 'SourceNode_join':PyJs_SourceNode_join_4157_, 'aSep':aSep, 'arguments':arguments}, var)
        var.registers(['newChildren', 'i', 'aSep', 'len'])
        pass
        pass
        var.put('len', var.get("this").get('children').get('length'))
        if (var.get('len')>Js(0.0)):
            var.put('newChildren', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<(var.get('len')-Js(1.0))):
                try:
                    var.get('newChildren').callprop('push', var.get("this").get('children').get(var.get('i')))
                    var.get('newChildren').callprop('push', var.get('aSep'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('newChildren').callprop('push', var.get("this").get('children').get(var.get('i')))
            var.get("this").put('children', var.get('newChildren'))
        return var.get("this")
    PyJs_SourceNode_join_4157_._set_name('SourceNode_join')
    var.get('SourceNode').get('prototype').put('join', PyJs_SourceNode_join_4157_)
    @Js
    def PyJs_SourceNode_replaceRight_4158_(aPattern, aReplacement, this, arguments, var=var):
        var = Scope({'this':this, 'aPattern':aPattern, 'aReplacement':aReplacement, 'arguments':arguments, 'SourceNode_replaceRight':PyJs_SourceNode_replaceRight_4158_}, var)
        var.registers(['aPattern', 'lastChild', 'aReplacement'])
        var.put('lastChild', var.get("this").get('children').get((var.get("this").get('children').get('length')-Js(1.0))))
        if var.get('lastChild').get(var.get('isSourceNode')):
            var.get('lastChild').callprop('replaceRight', var.get('aPattern'), var.get('aReplacement'))
        else:
            if PyJsStrictEq(var.get('lastChild',throw=False).typeof(),Js('string')):
                var.get("this").get('children').put((var.get("this").get('children').get('length')-Js(1.0)), var.get('lastChild').callprop('replace', var.get('aPattern'), var.get('aReplacement')))
            else:
                var.get("this").get('children').callprop('push', Js('').callprop('replace', var.get('aPattern'), var.get('aReplacement')))
        return var.get("this")
    PyJs_SourceNode_replaceRight_4158_._set_name('SourceNode_replaceRight')
    var.get('SourceNode').get('prototype').put('replaceRight', PyJs_SourceNode_replaceRight_4158_)
    @Js
    def PyJs_SourceNode_setSourceContent_4159_(aSourceFile, aSourceContent, this, arguments, var=var):
        var = Scope({'this':this, 'aSourceContent':aSourceContent, 'aSourceFile':aSourceFile, 'arguments':arguments, 'SourceNode_setSourceContent':PyJs_SourceNode_setSourceContent_4159_}, var)
        var.registers(['aSourceContent', 'aSourceFile'])
        var.get("this").get('sourceContents').put(var.get('util').callprop('toSetString', var.get('aSourceFile')), var.get('aSourceContent'))
    PyJs_SourceNode_setSourceContent_4159_._set_name('SourceNode_setSourceContent')
    var.get('SourceNode').get('prototype').put('setSourceContent', PyJs_SourceNode_setSourceContent_4159_)
    @Js
    def PyJs_SourceNode_walkSourceContents_4160_(aFn, this, arguments, var=var):
        var = Scope({'this':this, 'aFn':aFn, 'arguments':arguments, 'SourceNode_walkSourceContents':PyJs_SourceNode_walkSourceContents_4160_}, var)
        var.registers(['i', 'sources', 'aFn', 'len'])
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get("this").get('children').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                if var.get("this").get('children').get(var.get('i')).get(var.get('isSourceNode')):
                    var.get("this").get('children').get(var.get('i')).callprop('walkSourceContents', var.get('aFn'))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.put('sources', var.get('Object').callprop('keys', var.get("this").get('sourceContents')))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('sources').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('aFn')(var.get('util').callprop('fromSetString', var.get('sources').get(var.get('i'))), var.get("this").get('sourceContents').get(var.get('sources').get(var.get('i'))))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_SourceNode_walkSourceContents_4160_._set_name('SourceNode_walkSourceContents')
    var.get('SourceNode').get('prototype').put('walkSourceContents', PyJs_SourceNode_walkSourceContents_4160_)
    @Js
    def PyJs_SourceNode_toString_4161_(this, arguments, var=var):
        var = Scope({'this':this, 'SourceNode_toString':PyJs_SourceNode_toString_4161_, 'arguments':arguments}, var)
        var.registers(['str'])
        var.put('str', Js(''))
        @Js
        def PyJs_anonymous_4162_(chunk, this, arguments, var=var):
            var = Scope({'this':this, 'chunk':chunk, 'arguments':arguments}, var)
            var.registers(['chunk'])
            var.put('str', var.get('chunk'), '+')
        PyJs_anonymous_4162_._set_name('anonymous')
        var.get("this").callprop('walk', PyJs_anonymous_4162_)
        return var.get('str')
    PyJs_SourceNode_toString_4161_._set_name('SourceNode_toString')
    var.get('SourceNode').get('prototype').put('toString', PyJs_SourceNode_toString_4161_)
    @Js
    def PyJs_SourceNode_toStringWithSourceMap_4163_(aArgs, this, arguments, var=var):
        var = Scope({'this':this, 'SourceNode_toStringWithSourceMap':PyJs_SourceNode_toStringWithSourceMap_4163_, 'arguments':arguments, 'aArgs':aArgs}, var)
        var.registers(['map', 'lastOriginalName', 'sourceMappingActive', 'aArgs', 'lastOriginalSource', 'lastOriginalLine', 'generated', 'lastOriginalColumn'])
        PyJs_Object_4164_ = Js({'code':Js(''),'line':Js(1.0),'column':Js(0.0)})
        var.put('generated', PyJs_Object_4164_)
        var.put('map', var.get('SourceMapGenerator').create(var.get('aArgs')))
        var.put('sourceMappingActive', Js(False))
        var.put('lastOriginalSource', var.get("null"))
        var.put('lastOriginalLine', var.get("null"))
        var.put('lastOriginalColumn', var.get("null"))
        var.put('lastOriginalName', var.get("null"))
        @Js
        def PyJs_anonymous_4165_(chunk, original, this, arguments, var=var):
            var = Scope({'this':this, 'chunk':chunk, 'original':original, 'arguments':arguments}, var)
            var.registers(['length', 'chunk', 'idx', 'original'])
            var.get('generated').put('code', var.get('chunk'), '+')
            if ((PyJsStrictNeq(var.get('original').get('source'),var.get("null")) and PyJsStrictNeq(var.get('original').get('line'),var.get("null"))) and PyJsStrictNeq(var.get('original').get('column'),var.get("null"))):
                if (((PyJsStrictNeq(var.get('lastOriginalSource'),var.get('original').get('source')) or PyJsStrictNeq(var.get('lastOriginalLine'),var.get('original').get('line'))) or PyJsStrictNeq(var.get('lastOriginalColumn'),var.get('original').get('column'))) or PyJsStrictNeq(var.get('lastOriginalName'),var.get('original').get('name'))):
                    PyJs_Object_4167_ = Js({'line':var.get('original').get('line'),'column':var.get('original').get('column')})
                    PyJs_Object_4168_ = Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')})
                    PyJs_Object_4166_ = Js({'source':var.get('original').get('source'),'original':PyJs_Object_4167_,'generated':PyJs_Object_4168_,'name':var.get('original').get('name')})
                    var.get('map').callprop('addMapping', PyJs_Object_4166_)
                var.put('lastOriginalSource', var.get('original').get('source'))
                var.put('lastOriginalLine', var.get('original').get('line'))
                var.put('lastOriginalColumn', var.get('original').get('column'))
                var.put('lastOriginalName', var.get('original').get('name'))
                var.put('sourceMappingActive', var.get('true'))
            else:
                if var.get('sourceMappingActive'):
                    PyJs_Object_4170_ = Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')})
                    PyJs_Object_4169_ = Js({'generated':PyJs_Object_4170_})
                    var.get('map').callprop('addMapping', PyJs_Object_4169_)
                    var.put('lastOriginalSource', var.get("null"))
                    var.put('sourceMappingActive', Js(False))
            #for JS loop
            var.put('idx', Js(0.0))
            var.put('length', var.get('chunk').get('length'))
            while (var.get('idx')<var.get('length')):
                try:
                    if PyJsStrictEq(var.get('chunk').callprop('charCodeAt', var.get('idx')),var.get('NEWLINE_CODE')):
                        (var.get('generated').put('line',Js(var.get('generated').get('line').to_number())+Js(1))-Js(1))
                        var.get('generated').put('column', Js(0.0))
                        if PyJsStrictEq((var.get('idx')+Js(1.0)),var.get('length')):
                            var.put('lastOriginalSource', var.get("null"))
                            var.put('sourceMappingActive', Js(False))
                        else:
                            if var.get('sourceMappingActive'):
                                PyJs_Object_4172_ = Js({'line':var.get('original').get('line'),'column':var.get('original').get('column')})
                                PyJs_Object_4173_ = Js({'line':var.get('generated').get('line'),'column':var.get('generated').get('column')})
                                PyJs_Object_4171_ = Js({'source':var.get('original').get('source'),'original':PyJs_Object_4172_,'generated':PyJs_Object_4173_,'name':var.get('original').get('name')})
                                var.get('map').callprop('addMapping', PyJs_Object_4171_)
                    else:
                        (var.get('generated').put('column',Js(var.get('generated').get('column').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('idx',Js(var.get('idx').to_number())+Js(1))-Js(1))
        PyJs_anonymous_4165_._set_name('anonymous')
        var.get("this").callprop('walk', PyJs_anonymous_4165_)
        @Js
        def PyJs_anonymous_4174_(sourceFile, sourceContent, this, arguments, var=var):
            var = Scope({'this':this, 'sourceFile':sourceFile, 'sourceContent':sourceContent, 'arguments':arguments}, var)
            var.registers(['sourceFile', 'sourceContent'])
            var.get('map').callprop('setSourceContent', var.get('sourceFile'), var.get('sourceContent'))
        PyJs_anonymous_4174_._set_name('anonymous')
        var.get("this").callprop('walkSourceContents', PyJs_anonymous_4174_)
        PyJs_Object_4175_ = Js({'code':var.get('generated').get('code'),'map':var.get('map')})
        return PyJs_Object_4175_
    PyJs_SourceNode_toStringWithSourceMap_4163_._set_name('SourceNode_toStringWithSourceMap')
    var.get('SourceNode').get('prototype').put('toStringWithSourceMap', PyJs_SourceNode_toStringWithSourceMap_4163_)
    var.get('exports').put('SourceNode', var.get('SourceNode'))
PyJs_anonymous_4146_._set_name('anonymous')
PyJs_Object_4176_ = Js({'./source-map-generator':Js(516.0),'./util':Js(518.0)})
@Js
def PyJs_anonymous_4177_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['normalize', 'urlGenerate', 'exports', 'compareByGeneratedPositionsDeflated', 'join', 'module', 'relative', 'require', 'fromSetString', 'strcmp', 'urlParse', 'dataUrlRegexp', 'identity', 'supportsNullProto', 'compareByGeneratedPositionsInflated', 'isProtoString', 'compareByOriginalPositions', 'urlRegexp', 'getArg', 'toSetString'])
    @Js
    def PyJsHoisted_normalize_(aPath, this, arguments, var=var):
        var = Scope({'this':this, 'aPath':aPath, 'arguments':arguments}, var)
        var.registers(['url', 'parts', 'up', 'i', 'part', 'isAbsolute', 'aPath', 'path'])
        var.put('path', var.get('aPath'))
        var.put('url', var.get('urlParse')(var.get('aPath')))
        if var.get('url'):
            if var.get('url').get('path').neg():
                return var.get('aPath')
            var.put('path', var.get('url').get('path'))
        var.put('isAbsolute', var.get('exports').callprop('isAbsolute', var.get('path')))
        var.put('parts', var.get('path').callprop('split', JsRegExp('/\\/+/')))
        #for JS loop
        var.put('up', Js(0.0))
        var.put('i', (var.get('parts').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                var.put('part', var.get('parts').get(var.get('i')))
                if PyJsStrictEq(var.get('part'),Js('.')):
                    var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                else:
                    if PyJsStrictEq(var.get('part'),Js('..')):
                        (var.put('up',Js(var.get('up').to_number())+Js(1))-Js(1))
                    else:
                        if (var.get('up')>Js(0.0)):
                            if PyJsStrictEq(var.get('part'),Js('')):
                                var.get('parts').callprop('splice', (var.get('i')+Js(1.0)), var.get('up'))
                                var.put('up', Js(0.0))
                            else:
                                var.get('parts').callprop('splice', var.get('i'), Js(2.0))
                                (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1))
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        var.put('path', var.get('parts').callprop('join', Js('/')))
        if PyJsStrictEq(var.get('path'),Js('')):
            var.put('path', (Js('/') if var.get('isAbsolute') else Js('.')))
        if var.get('url'):
            var.get('url').put('path', var.get('path'))
            return var.get('urlGenerate')(var.get('url'))
        return var.get('path')
    PyJsHoisted_normalize_.__name__ = 'normalize'
    var.put('normalize', PyJsHoisted_normalize_)
    @Js
    def PyJsHoisted_urlGenerate_(aParsedUrl, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'aParsedUrl':aParsedUrl}, var)
        var.registers(['url', 'aParsedUrl'])
        var.put('url', Js(''))
        if var.get('aParsedUrl').get('scheme'):
            var.put('url', (var.get('aParsedUrl').get('scheme')+Js(':')), '+')
        var.put('url', Js('//'), '+')
        if var.get('aParsedUrl').get('auth'):
            var.put('url', (var.get('aParsedUrl').get('auth')+Js('@')), '+')
        if var.get('aParsedUrl').get('host'):
            var.put('url', var.get('aParsedUrl').get('host'), '+')
        if var.get('aParsedUrl').get('port'):
            var.put('url', (Js(':')+var.get('aParsedUrl').get('port')), '+')
        if var.get('aParsedUrl').get('path'):
            var.put('url', var.get('aParsedUrl').get('path'), '+')
        return var.get('url')
    PyJsHoisted_urlGenerate_.__name__ = 'urlGenerate'
    var.put('urlGenerate', PyJsHoisted_urlGenerate_)
    @Js
    def PyJsHoisted_compareByGeneratedPositionsDeflated_(mappingA, mappingB, onlyCompareGenerated, this, arguments, var=var):
        var = Scope({'this':this, 'mappingB':mappingB, 'arguments':arguments, 'onlyCompareGenerated':onlyCompareGenerated, 'mappingA':mappingA}, var)
        var.registers(['mappingA', 'mappingB', 'onlyCompareGenerated', 'cmp'])
        var.put('cmp', (var.get('mappingA').get('generatedLine')-var.get('mappingB').get('generatedLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('generatedColumn')-var.get('mappingB').get('generatedColumn')))
        if (PyJsStrictNeq(var.get('cmp'),Js(0.0)) or var.get('onlyCompareGenerated')):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('source')-var.get('mappingB').get('source')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalLine')-var.get('mappingB').get('originalLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalColumn')-var.get('mappingB').get('originalColumn')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        return (var.get('mappingA').get('name')-var.get('mappingB').get('name'))
    PyJsHoisted_compareByGeneratedPositionsDeflated_.__name__ = 'compareByGeneratedPositionsDeflated'
    var.put('compareByGeneratedPositionsDeflated', PyJsHoisted_compareByGeneratedPositionsDeflated_)
    @Js
    def PyJsHoisted_join_(aRoot, aPath, this, arguments, var=var):
        var = Scope({'aRoot':aRoot, 'aPath':aPath, 'this':this, 'arguments':arguments}, var)
        var.registers(['aRootUrl', 'aRoot', 'aPath', 'joined', 'aPathUrl'])
        if PyJsStrictEq(var.get('aRoot'),Js('')):
            var.put('aRoot', Js('.'))
        if PyJsStrictEq(var.get('aPath'),Js('')):
            var.put('aPath', Js('.'))
        var.put('aPathUrl', var.get('urlParse')(var.get('aPath')))
        var.put('aRootUrl', var.get('urlParse')(var.get('aRoot')))
        if var.get('aRootUrl'):
            var.put('aRoot', (var.get('aRootUrl').get('path') or Js('/')))
        if (var.get('aPathUrl') and var.get('aPathUrl').get('scheme').neg()):
            if var.get('aRootUrl'):
                var.get('aPathUrl').put('scheme', var.get('aRootUrl').get('scheme'))
            return var.get('urlGenerate')(var.get('aPathUrl'))
        if (var.get('aPathUrl') or var.get('aPath').callprop('match', var.get('dataUrlRegexp'))):
            return var.get('aPath')
        if ((var.get('aRootUrl') and var.get('aRootUrl').get('host').neg()) and var.get('aRootUrl').get('path').neg()):
            var.get('aRootUrl').put('host', var.get('aPath'))
            return var.get('urlGenerate')(var.get('aRootUrl'))
        var.put('joined', (var.get('aPath') if PyJsStrictEq(var.get('aPath').callprop('charAt', Js(0.0)),Js('/')) else var.get('normalize')(((var.get('aRoot').callprop('replace', JsRegExp('/\\/+$/'), Js(''))+Js('/'))+var.get('aPath')))))
        if var.get('aRootUrl'):
            var.get('aRootUrl').put('path', var.get('joined'))
            return var.get('urlGenerate')(var.get('aRootUrl'))
        return var.get('joined')
    PyJsHoisted_join_.__name__ = 'join'
    var.put('join', PyJsHoisted_join_)
    @Js
    def PyJsHoisted_relative_(aRoot, aPath, this, arguments, var=var):
        var = Scope({'aRoot':aRoot, 'aPath':aPath, 'this':this, 'arguments':arguments}, var)
        var.registers(['aRoot', 'index', 'aPath', 'level'])
        if PyJsStrictEq(var.get('aRoot'),Js('')):
            var.put('aRoot', Js('.'))
        var.put('aRoot', var.get('aRoot').callprop('replace', JsRegExp('/\\/$/'), Js('')))
        var.put('level', Js(0.0))
        while PyJsStrictNeq(var.get('aPath').callprop('indexOf', (var.get('aRoot')+Js('/'))),Js(0.0)):
            var.put('index', var.get('aRoot').callprop('lastIndexOf', Js('/')))
            if (var.get('index')<Js(0.0)):
                return var.get('aPath')
            var.put('aRoot', var.get('aRoot').callprop('slice', Js(0.0), var.get('index')))
            if var.get('aRoot').callprop('match', JsRegExp('/^([^\\/]+:\\/)?\\/*$/')):
                return var.get('aPath')
            var.put('level',Js(var.get('level').to_number())+Js(1))
        return (var.get('Array')((var.get('level')+Js(1.0))).callprop('join', Js('../'))+var.get('aPath').callprop('substr', (var.get('aRoot').get('length')+Js(1.0))))
    PyJsHoisted_relative_.__name__ = 'relative'
    var.put('relative', PyJsHoisted_relative_)
    @Js
    def PyJsHoisted_fromSetString_(aStr, this, arguments, var=var):
        var = Scope({'this':this, 'aStr':aStr, 'arguments':arguments}, var)
        var.registers(['aStr'])
        if var.get('isProtoString')(var.get('aStr')):
            return var.get('aStr').callprop('slice', Js(1.0))
        return var.get('aStr')
    PyJsHoisted_fromSetString_.__name__ = 'fromSetString'
    var.put('fromSetString', PyJsHoisted_fromSetString_)
    @Js
    def PyJsHoisted_urlParse_(aUrl, this, arguments, var=var):
        var = Scope({'aUrl':aUrl, 'this':this, 'arguments':arguments}, var)
        var.registers(['aUrl', 'match'])
        var.put('match', var.get('aUrl').callprop('match', var.get('urlRegexp')))
        if var.get('match').neg():
            return var.get("null")
        PyJs_Object_4178_ = Js({'scheme':var.get('match').get('1'),'auth':var.get('match').get('2'),'host':var.get('match').get('3'),'port':var.get('match').get('4'),'path':var.get('match').get('5')})
        return PyJs_Object_4178_
    PyJsHoisted_urlParse_.__name__ = 'urlParse'
    var.put('urlParse', PyJsHoisted_urlParse_)
    @Js
    def PyJsHoisted_identity_(s, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
        var.registers(['s'])
        return var.get('s')
    PyJsHoisted_identity_.__name__ = 'identity'
    var.put('identity', PyJsHoisted_identity_)
    @Js
    def PyJsHoisted_compareByGeneratedPositionsInflated_(mappingA, mappingB, this, arguments, var=var):
        var = Scope({'this':this, 'mappingB':mappingB, 'arguments':arguments, 'mappingA':mappingA}, var)
        var.registers(['mappingA', 'mappingB', 'cmp'])
        var.put('cmp', (var.get('mappingA').get('generatedLine')-var.get('mappingB').get('generatedLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('generatedColumn')-var.get('mappingB').get('generatedColumn')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', var.get('strcmp')(var.get('mappingA').get('source'), var.get('mappingB').get('source')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalLine')-var.get('mappingB').get('originalLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalColumn')-var.get('mappingB').get('originalColumn')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        return var.get('strcmp')(var.get('mappingA').get('name'), var.get('mappingB').get('name'))
    PyJsHoisted_compareByGeneratedPositionsInflated_.__name__ = 'compareByGeneratedPositionsInflated'
    var.put('compareByGeneratedPositionsInflated', PyJsHoisted_compareByGeneratedPositionsInflated_)
    @Js
    def PyJsHoisted_isProtoString_(s, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments}, var)
        var.registers(['i', 'length', 's'])
        if var.get('s').neg():
            return Js(False)
        var.put('length', var.get('s').get('length'))
        if (var.get('length')<Js(9.0)):
            return Js(False)
        def PyJs_LONG_4182_(var=var):
            def PyJs_LONG_4181_(var=var):
                return ((((PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(1.0))),Js(95.0)) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(2.0))),Js(95.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(3.0))),Js(111.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(4.0))),Js(116.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(5.0))),Js(111.0)))
            return ((((PyJs_LONG_4181_() or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(6.0))),Js(114.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(7.0))),Js(112.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(8.0))),Js(95.0))) or PyJsStrictNeq(var.get('s').callprop('charCodeAt', (var.get('length')-Js(9.0))),Js(95.0)))
        if PyJs_LONG_4182_():
            return Js(False)
        #for JS loop
        var.put('i', (var.get('length')-Js(10.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                if PyJsStrictNeq(var.get('s').callprop('charCodeAt', var.get('i')),Js(36.0)):
                    return Js(False)
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        return var.get('true')
    PyJsHoisted_isProtoString_.__name__ = 'isProtoString'
    var.put('isProtoString', PyJsHoisted_isProtoString_)
    @Js
    def PyJsHoisted_compareByOriginalPositions_(mappingA, mappingB, onlyCompareOriginal, this, arguments, var=var):
        var = Scope({'this':this, 'onlyCompareOriginal':onlyCompareOriginal, 'mappingB':mappingB, 'arguments':arguments, 'mappingA':mappingA}, var)
        var.registers(['onlyCompareOriginal', 'mappingA', 'mappingB', 'cmp'])
        var.put('cmp', (var.get('mappingA').get('source')-var.get('mappingB').get('source')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalLine')-var.get('mappingB').get('originalLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('originalColumn')-var.get('mappingB').get('originalColumn')))
        if (PyJsStrictNeq(var.get('cmp'),Js(0.0)) or var.get('onlyCompareOriginal')):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('generatedColumn')-var.get('mappingB').get('generatedColumn')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        var.put('cmp', (var.get('mappingA').get('generatedLine')-var.get('mappingB').get('generatedLine')))
        if PyJsStrictNeq(var.get('cmp'),Js(0.0)):
            return var.get('cmp')
        return (var.get('mappingA').get('name')-var.get('mappingB').get('name'))
    PyJsHoisted_compareByOriginalPositions_.__name__ = 'compareByOriginalPositions'
    var.put('compareByOriginalPositions', PyJsHoisted_compareByOriginalPositions_)
    @Js
    def PyJsHoisted_strcmp_(aStr1, aStr2, this, arguments, var=var):
        var = Scope({'this':this, 'aStr2':aStr2, 'aStr1':aStr1, 'arguments':arguments}, var)
        var.registers(['aStr2', 'aStr1'])
        if PyJsStrictEq(var.get('aStr1'),var.get('aStr2')):
            return Js(0.0)
        if (var.get('aStr1')>var.get('aStr2')):
            return Js(1.0)
        return (-Js(1.0))
    PyJsHoisted_strcmp_.__name__ = 'strcmp'
    var.put('strcmp', PyJsHoisted_strcmp_)
    @Js
    def PyJsHoisted_getArg_(aArgs, aName, aDefaultValue, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'aDefaultValue':aDefaultValue, 'aName':aName, 'aArgs':aArgs}, var)
        var.registers(['aDefaultValue', 'aName', 'aArgs'])
        if var.get('aArgs').contains(var.get('aName')):
            return var.get('aArgs').get(var.get('aName'))
        else:
            if PyJsStrictEq(var.get('arguments').get('length'),Js(3.0)):
                return var.get('aDefaultValue')
            else:
                PyJsTempException = JsToPyException(var.get('Error').create(((Js('"')+var.get('aName'))+Js('" is a required argument.'))))
                raise PyJsTempException
    PyJsHoisted_getArg_.__name__ = 'getArg'
    var.put('getArg', PyJsHoisted_getArg_)
    @Js
    def PyJsHoisted_toSetString_(aStr, this, arguments, var=var):
        var = Scope({'this':this, 'aStr':aStr, 'arguments':arguments}, var)
        var.registers(['aStr'])
        if var.get('isProtoString')(var.get('aStr')):
            return (Js('$')+var.get('aStr'))
        return var.get('aStr')
    PyJsHoisted_toSetString_.__name__ = 'toSetString'
    var.put('toSetString', PyJsHoisted_toSetString_)
    pass
    var.get('exports').put('getArg', var.get('getArg'))
    var.put('urlRegexp', JsRegExp('/^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/'))
    var.put('dataUrlRegexp', JsRegExp('/^data:.+\\,.+$/'))
    pass
    var.get('exports').put('urlParse', var.get('urlParse'))
    pass
    var.get('exports').put('urlGenerate', var.get('urlGenerate'))
    pass
    var.get('exports').put('normalize', var.get('normalize'))
    pass
    var.get('exports').put('join', var.get('join'))
    @Js
    def PyJs_anonymous_4179_(aPath, this, arguments, var=var):
        var = Scope({'this':this, 'aPath':aPath, 'arguments':arguments}, var)
        var.registers(['aPath'])
        return (PyJsStrictEq(var.get('aPath').callprop('charAt', Js(0.0)),Js('/')) or var.get('aPath').callprop('match', var.get('urlRegexp')).neg().neg())
    PyJs_anonymous_4179_._set_name('anonymous')
    var.get('exports').put('isAbsolute', PyJs_anonymous_4179_)
    pass
    var.get('exports').put('relative', var.get('relative'))
    @Js
    def PyJs_anonymous_4180_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['obj'])
        var.put('obj', var.get('Object').callprop('create', var.get("null")))
        return var.get('obj').contains(Js('__proto__')).neg()
    PyJs_anonymous_4180_._set_name('anonymous')
    var.put('supportsNullProto', PyJs_anonymous_4180_())
    pass
    pass
    var.get('exports').put('toSetString', (var.get('identity') if var.get('supportsNullProto') else var.get('toSetString')))
    pass
    var.get('exports').put('fromSetString', (var.get('identity') if var.get('supportsNullProto') else var.get('fromSetString')))
    pass
    pass
    var.get('exports').put('compareByOriginalPositions', var.get('compareByOriginalPositions'))
    pass
    var.get('exports').put('compareByGeneratedPositionsDeflated', var.get('compareByGeneratedPositionsDeflated'))
    pass
    pass
    var.get('exports').put('compareByGeneratedPositionsInflated', var.get('compareByGeneratedPositionsInflated'))
PyJs_anonymous_4177_._set_name('anonymous')
PyJs_Object_4183_ = Js({})
@Js
def PyJs_anonymous_4184_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('exports').put('SourceMapGenerator', var.get('require')(Js('./lib/source-map-generator')).get('SourceMapGenerator'))
    var.get('exports').put('SourceMapConsumer', var.get('require')(Js('./lib/source-map-consumer')).get('SourceMapConsumer'))
    var.get('exports').put('SourceNode', var.get('require')(Js('./lib/source-node')).get('SourceNode'))
PyJs_anonymous_4184_._set_name('anonymous')
PyJs_Object_4185_ = Js({'./lib/source-map-consumer':Js(515.0),'./lib/source-map-generator':Js(516.0),'./lib/source-node':Js(517.0)})
@Js
def PyJs_anonymous_4186_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'ansiRegex', 'exports', 'module'])
    Js('use strict')
    var.put('ansiRegex', var.get('require')(Js('ansi-regex'))())
    @Js
    def PyJs_anonymous_4187_(str, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
        var.registers(['str'])
        return (var.get('str').callprop('replace', var.get('ansiRegex'), Js('')) if PyJsStrictEq(var.get('str',throw=False).typeof(),Js('string')) else var.get('str'))
    PyJs_anonymous_4187_._set_name('anonymous')
    var.get('module').put('exports', PyJs_anonymous_4187_)
PyJs_anonymous_4186_._set_name('anonymous')
PyJs_Object_4188_ = Js({'ansi-regex':Js(2.0)})
@Js
def PyJs_anonymous_4189_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_4190_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['process', 'hasFlag', 'terminator', 'argv'])
        Js('use strict')
        var.put('argv', var.get('process').get('argv'))
        var.put('terminator', var.get('argv').callprop('indexOf', Js('--')))
        @Js
        def PyJs_anonymous_4191_(flag, this, arguments, var=var):
            var = Scope({'this':this, 'flag':flag, 'arguments':arguments}, var)
            var.registers(['flag', 'pos'])
            var.put('flag', (Js('--')+var.get('flag')))
            var.put('pos', var.get('argv').callprop('indexOf', var.get('flag')))
            return (PyJsStrictNeq(var.get('pos'),(-Js(1.0))) and ((var.get('pos')<var.get('terminator')) if PyJsStrictNeq(var.get('terminator'),(-Js(1.0))) else var.get('true')))
        PyJs_anonymous_4191_._set_name('anonymous')
        var.put('hasFlag', PyJs_anonymous_4191_)
        @Js
        def PyJs_anonymous_4192_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get('process').get('env').contains(Js('FORCE_COLOR')):
                return var.get('true')
            if ((var.get('hasFlag')(Js('no-color')) or var.get('hasFlag')(Js('no-colors'))) or var.get('hasFlag')(Js('color=false'))):
                return Js(False)
            if (((var.get('hasFlag')(Js('color')) or var.get('hasFlag')(Js('colors'))) or var.get('hasFlag')(Js('color=true'))) or var.get('hasFlag')(Js('color=always'))):
                return var.get('true')
            if (var.get('process').get('stdout') and var.get('process').get('stdout').get('isTTY').neg()):
                return Js(False)
            if PyJsStrictEq(var.get('process').get('platform'),Js('win32')):
                return var.get('true')
            if var.get('process').get('env').contains(Js('COLORTERM')):
                return var.get('true')
            if PyJsStrictEq(var.get('process').get('env').get('TERM'),Js('dumb')):
                return Js(False)
            if JsRegExp('/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i').callprop('test', var.get('process').get('env').get('TERM')):
                return var.get('true')
            return Js(False)
        PyJs_anonymous_4192_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_4192_())
    PyJs_anonymous_4190_._set_name('anonymous')
    PyJs_anonymous_4190_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_4189_._set_name('anonymous')
PyJs_Object_4193_ = Js({'_process':Js(531.0)})
@Js
def PyJs_anonymous_4194_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    Js('use strict')
    @Js
    def PyJs_toFastProperties_4195_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments, 'toFastProperties':PyJs_toFastProperties_4195_}, var)
        var.registers(['obj', 'f'])
        @Js
        def PyJsHoisted_f_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_f_.__name__ = 'f'
        var.put('f', PyJsHoisted_f_)
        pass
        var.get('f').put('prototype', var.get('obj'))
        var.get('f').create()
        return var.get('undefined')
        var.get('eval')(var.get('obj'))
    PyJs_toFastProperties_4195_._set_name('toFastProperties')
    var.get('module').put('exports', PyJs_toFastProperties_4195_)
PyJs_anonymous_4194_._set_name('anonymous')
PyJs_Object_4196_ = Js({})
@Js
def PyJs_anonymous_4197_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    var.get('arguments').get('4').get('212').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
PyJs_anonymous_4197_._set_name('anonymous')
PyJs_Object_4198_ = Js({'dup':Js(212.0)})
@Js
def PyJs_anonymous_4199_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['pSlice', 'replacer', '_throws', 'ok', '_deepEqual', 'truncate', 'assert', 'expectedException', 'exports', 'hasOwn', 'util', 'getMessage', 'module', 'objectKeys', 'fail', 'objEquiv', 'require', 'isArguments'])
    @Js
    def PyJsHoisted_replacer_(key, value, this, arguments, var=var):
        var = Scope({'this':this, 'value':value, 'key':key, 'arguments':arguments}, var)
        var.registers(['value', 'key'])
        if var.get('util').callprop('isUndefined', var.get('value')):
            return (Js('')+var.get('value'))
        if (var.get('util').callprop('isNumber', var.get('value')) and var.get('isFinite')(var.get('value')).neg()):
            return var.get('value').callprop('toString')
        if (var.get('util').callprop('isFunction', var.get('value')) or var.get('util').callprop('isRegExp', var.get('value'))):
            return var.get('value').callprop('toString')
        return var.get('value')
    PyJsHoisted_replacer_.__name__ = 'replacer'
    var.put('replacer', PyJsHoisted_replacer_)
    @Js
    def PyJsHoisted__throws_(shouldThrow, block, expected, message, this, arguments, var=var):
        var = Scope({'this':this, 'shouldThrow':shouldThrow, 'arguments':arguments, 'expected':expected, 'message':message, 'block':block}, var)
        var.registers(['expected', 'shouldThrow', 'message', 'actual', 'block'])
        pass
        if var.get('util').callprop('isString', var.get('expected')):
            var.put('message', var.get('expected'))
            var.put('expected', var.get("null"))
        try:
            var.get('block')()
        except PyJsException as PyJsTempException:
            PyJsHolder_65_5622760 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                var.put('actual', var.get('e'))
            finally:
                if PyJsHolder_65_5622760 is not None:
                    var.own['e'] = PyJsHolder_65_5622760
                else:
                    del var.own['e']
                del PyJsHolder_65_5622760
        var.put('message', ((((Js(' (')+var.get('expected').get('name'))+Js(').')) if (var.get('expected') and var.get('expected').get('name')) else Js('.'))+((Js(' ')+var.get('message')) if var.get('message') else Js('.'))))
        if (var.get('shouldThrow') and var.get('actual').neg()):
            var.get('fail')(var.get('actual'), var.get('expected'), (Js('Missing expected exception')+var.get('message')))
        if (var.get('shouldThrow').neg() and var.get('expectedException')(var.get('actual'), var.get('expected'))):
            var.get('fail')(var.get('actual'), var.get('expected'), (Js('Got unwanted exception')+var.get('message')))
        if ((((var.get('shouldThrow') and var.get('actual')) and var.get('expected')) and var.get('expectedException')(var.get('actual'), var.get('expected')).neg()) or (var.get('shouldThrow').neg() and var.get('actual'))):
            PyJsTempException = JsToPyException(var.get('actual'))
            raise PyJsTempException
    PyJsHoisted__throws_.__name__ = '_throws'
    var.put('_throws', PyJsHoisted__throws_)
    @Js
    def PyJsHoisted_ok_(value, message, this, arguments, var=var):
        var = Scope({'this':this, 'message':message, 'arguments':arguments, 'value':value}, var)
        var.registers(['message', 'value'])
        if var.get('value').neg():
            var.get('fail')(var.get('value'), var.get('true'), var.get('message'), Js('=='), var.get('assert').get('ok'))
    PyJsHoisted_ok_.__name__ = 'ok'
    var.put('ok', PyJsHoisted_ok_)
    @Js
    def PyJsHoisted__deepEqual_(actual, expected, this, arguments, var=var):
        var = Scope({'expected':expected, 'this':this, 'actual':actual, 'arguments':arguments}, var)
        var.registers(['i', 'expected', 'actual'])
        if PyJsStrictEq(var.get('actual'),var.get('expected')):
            return var.get('true')
        else:
            if (var.get('util').callprop('isBuffer', var.get('actual')) and var.get('util').callprop('isBuffer', var.get('expected'))):
                if (var.get('actual').get('length')!=var.get('expected').get('length')):
                    return Js(False)
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('actual').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('actual').get(var.get('i')),var.get('expected').get(var.get('i'))):
                            return Js(False)
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('true')
            else:
                if (var.get('util').callprop('isDate', var.get('actual')) and var.get('util').callprop('isDate', var.get('expected'))):
                    return PyJsStrictEq(var.get('actual').callprop('getTime'),var.get('expected').callprop('getTime'))
                else:
                    if (var.get('util').callprop('isRegExp', var.get('actual')) and var.get('util').callprop('isRegExp', var.get('expected'))):
                        def PyJs_LONG_4205_(var=var):
                            return ((((PyJsStrictEq(var.get('actual').get('source'),var.get('expected').get('source')) and PyJsStrictEq(var.get('actual').get('global'),var.get('expected').get('global'))) and PyJsStrictEq(var.get('actual').get('multiline'),var.get('expected').get('multiline'))) and PyJsStrictEq(var.get('actual').get('lastIndex'),var.get('expected').get('lastIndex'))) and PyJsStrictEq(var.get('actual').get('ignoreCase'),var.get('expected').get('ignoreCase')))
                        return PyJs_LONG_4205_()
                    else:
                        if (var.get('util').callprop('isObject', var.get('actual')).neg() and var.get('util').callprop('isObject', var.get('expected')).neg()):
                            return (var.get('actual')==var.get('expected'))
                        else:
                            return var.get('objEquiv')(var.get('actual'), var.get('expected'))
    PyJsHoisted__deepEqual_.__name__ = '_deepEqual'
    var.put('_deepEqual', PyJsHoisted__deepEqual_)
    @Js
    def PyJsHoisted_truncate_(s, n, this, arguments, var=var):
        var = Scope({'this':this, 's':s, 'arguments':arguments, 'n':n}, var)
        var.registers(['s', 'n'])
        if var.get('util').callprop('isString', var.get('s')):
            return (var.get('s') if (var.get('s').get('length')<var.get('n')) else var.get('s').callprop('slice', Js(0.0), var.get('n')))
        else:
            return var.get('s')
    PyJsHoisted_truncate_.__name__ = 'truncate'
    var.put('truncate', PyJsHoisted_truncate_)
    @Js
    def PyJsHoisted_expectedException_(actual, expected, this, arguments, var=var):
        var = Scope({'expected':expected, 'this':this, 'actual':actual, 'arguments':arguments}, var)
        var.registers(['expected', 'actual'])
        if (var.get('actual').neg() or var.get('expected').neg()):
            return Js(False)
        if (var.get('Object').get('prototype').get('toString').callprop('call', var.get('expected'))==Js('[object RegExp]')):
            return var.get('expected').callprop('test', var.get('actual'))
        else:
            if var.get('actual').instanceof(var.get('expected')):
                return var.get('true')
            else:
                PyJs_Object_4209_ = Js({})
                if PyJsStrictEq(var.get('expected').callprop('call', PyJs_Object_4209_, var.get('actual')),var.get('true')):
                    return var.get('true')
        return Js(False)
    PyJsHoisted_expectedException_.__name__ = 'expectedException'
    var.put('expectedException', PyJsHoisted_expectedException_)
    @Js
    def PyJsHoisted_getMessage_(self, this, arguments, var=var):
        var = Scope({'this':this, 'self':self, 'arguments':arguments}, var)
        var.registers(['self'])
        return ((((var.get('truncate')(var.get('JSON').callprop('stringify', var.get('self').get('actual'), var.get('replacer')), Js(128.0))+Js(' '))+var.get('self').get('operator'))+Js(' '))+var.get('truncate')(var.get('JSON').callprop('stringify', var.get('self').get('expected'), var.get('replacer')), Js(128.0)))
    PyJsHoisted_getMessage_.__name__ = 'getMessage'
    var.put('getMessage', PyJsHoisted_getMessage_)
    @Js
    def PyJsHoisted_fail_(actual, expected, message, operator, stackStartFunction, this, arguments, var=var):
        var = Scope({'operator':operator, 'actual':actual, 'arguments':arguments, 'stackStartFunction':stackStartFunction, 'expected':expected, 'message':message, 'this':this}, var)
        var.registers(['expected', 'operator', 'message', 'actual', 'stackStartFunction'])
        PyJs_Object_4201_ = Js({'message':var.get('message'),'actual':var.get('actual'),'expected':var.get('expected'),'operator':var.get('operator'),'stackStartFunction':var.get('stackStartFunction')})
        PyJsTempException = JsToPyException(var.get('assert').get('AssertionError').create(PyJs_Object_4201_))
        raise PyJsTempException
    PyJsHoisted_fail_.__name__ = 'fail'
    var.put('fail', PyJsHoisted_fail_)
    @Js
    def PyJsHoisted_objEquiv_(a, b, this, arguments, var=var):
        var = Scope({'a':a, 'this':this, 'b':b, 'arguments':arguments}, var)
        var.registers(['a', 'aIsArgs', 'ka', 'b', 'kb', 'i', 'key', 'bIsArgs'])
        if (var.get('util').callprop('isNullOrUndefined', var.get('a')) or var.get('util').callprop('isNullOrUndefined', var.get('b'))):
            return Js(False)
        if PyJsStrictNeq(var.get('a').get('prototype'),var.get('b').get('prototype')):
            return Js(False)
        if (var.get('util').callprop('isPrimitive', var.get('a')) or var.get('util').callprop('isPrimitive', var.get('b'))):
            return PyJsStrictEq(var.get('a'),var.get('b'))
        var.put('aIsArgs', var.get('isArguments')(var.get('a')))
        var.put('bIsArgs', var.get('isArguments')(var.get('b')))
        if ((var.get('aIsArgs') and var.get('bIsArgs').neg()) or (var.get('aIsArgs').neg() and var.get('bIsArgs'))):
            return Js(False)
        if var.get('aIsArgs'):
            var.put('a', var.get('pSlice').callprop('call', var.get('a')))
            var.put('b', var.get('pSlice').callprop('call', var.get('b')))
            return var.get('_deepEqual')(var.get('a'), var.get('b'))
        var.put('ka', var.get('objectKeys')(var.get('a')))
        var.put('kb', var.get('objectKeys')(var.get('b')))
        if (var.get('ka').get('length')!=var.get('kb').get('length')):
            return Js(False)
        var.get('ka').callprop('sort')
        var.get('kb').callprop('sort')
        #for JS loop
        var.put('i', (var.get('ka').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                if (var.get('ka').get(var.get('i'))!=var.get('kb').get(var.get('i'))):
                    return Js(False)
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        #for JS loop
        var.put('i', (var.get('ka').get('length')-Js(1.0)))
        while (var.get('i')>=Js(0.0)):
            try:
                var.put('key', var.get('ka').get(var.get('i')))
                if var.get('_deepEqual')(var.get('a').get(var.get('key')), var.get('b').get(var.get('key'))).neg():
                    return Js(False)
            finally:
                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
        return var.get('true')
    PyJsHoisted_objEquiv_.__name__ = 'objEquiv'
    var.put('objEquiv', PyJsHoisted_objEquiv_)
    @Js
    def PyJsHoisted_isArguments_(object, this, arguments, var=var):
        var = Scope({'this':this, 'object':object, 'arguments':arguments}, var)
        var.registers(['object'])
        return (var.get('Object').get('prototype').get('toString').callprop('call', var.get('object'))==Js('[object Arguments]'))
    PyJsHoisted_isArguments_.__name__ = 'isArguments'
    var.put('isArguments', PyJsHoisted_isArguments_)
    var.put('util', var.get('require')(Js('util/')))
    var.put('pSlice', var.get('Array').get('prototype').get('slice'))
    var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
    var.put('assert', var.get('module').put('exports', var.get('ok')))
    @Js
    def PyJs_AssertionError_4200_(options, this, arguments, var=var):
        var = Scope({'this':this, 'AssertionError':PyJs_AssertionError_4200_, 'options':options, 'arguments':arguments}, var)
        var.registers(['next_line', 'err', 'idx', 'stackStartFunction', 'fn_name', 'options', 'out'])
        var.get("this").put('name', Js('AssertionError'))
        var.get("this").put('actual', var.get('options').get('actual'))
        var.get("this").put('expected', var.get('options').get('expected'))
        var.get("this").put('operator', var.get('options').get('operator'))
        if var.get('options').get('message'):
            var.get("this").put('message', var.get('options').get('message'))
            var.get("this").put('generatedMessage', Js(False))
        else:
            var.get("this").put('message', var.get('getMessage')(var.get("this")))
            var.get("this").put('generatedMessage', var.get('true'))
        var.put('stackStartFunction', (var.get('options').get('stackStartFunction') or var.get('fail')))
        if var.get('Error').get('captureStackTrace'):
            var.get('Error').callprop('captureStackTrace', var.get("this"), var.get('stackStartFunction'))
        else:
            var.put('err', var.get('Error').create())
            if var.get('err').get('stack'):
                var.put('out', var.get('err').get('stack'))
                var.put('fn_name', var.get('stackStartFunction').get('name'))
                var.put('idx', var.get('out').callprop('indexOf', (Js('\n')+var.get('fn_name'))))
                if (var.get('idx')>=Js(0.0)):
                    var.put('next_line', var.get('out').callprop('indexOf', Js('\n'), (var.get('idx')+Js(1.0))))
                    var.put('out', var.get('out').callprop('substring', (var.get('next_line')+Js(1.0))))
                var.get("this").put('stack', var.get('out'))
    PyJs_AssertionError_4200_._set_name('AssertionError')
    var.get('assert').put('AssertionError', PyJs_AssertionError_4200_)
    var.get('util').callprop('inherits', var.get('assert').get('AssertionError'), var.get('Error'))
    pass
    pass
    pass
    pass
    var.get('assert').put('fail', var.get('fail'))
    pass
    var.get('assert').put('ok', var.get('ok'))
    @Js
    def PyJs_equal_4202_(actual, expected, message, this, arguments, var=var):
        var = Scope({'actual':actual, 'this':this, 'equal':PyJs_equal_4202_, 'arguments':arguments, 'expected':expected, 'message':message}, var)
        var.registers(['expected', 'message', 'actual'])
        if (var.get('actual')!=var.get('expected')):
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('=='), var.get('assert').get('equal'))
    PyJs_equal_4202_._set_name('equal')
    var.get('assert').put('equal', PyJs_equal_4202_)
    @Js
    def PyJs_notEqual_4203_(actual, expected, message, this, arguments, var=var):
        var = Scope({'notEqual':PyJs_notEqual_4203_, 'actual':actual, 'this':this, 'arguments':arguments, 'expected':expected, 'message':message}, var)
        var.registers(['expected', 'message', 'actual'])
        if (var.get('actual')==var.get('expected')):
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('!='), var.get('assert').get('notEqual'))
    PyJs_notEqual_4203_._set_name('notEqual')
    var.get('assert').put('notEqual', PyJs_notEqual_4203_)
    @Js
    def PyJs_deepEqual_4204_(actual, expected, message, this, arguments, var=var):
        var = Scope({'actual':actual, 'this':this, 'arguments':arguments, 'expected':expected, 'message':message, 'deepEqual':PyJs_deepEqual_4204_}, var)
        var.registers(['expected', 'message', 'actual'])
        if var.get('_deepEqual')(var.get('actual'), var.get('expected')).neg():
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('deepEqual'), var.get('assert').get('deepEqual'))
    PyJs_deepEqual_4204_._set_name('deepEqual')
    var.get('assert').put('deepEqual', PyJs_deepEqual_4204_)
    pass
    pass
    pass
    @Js
    def PyJs_notDeepEqual_4206_(actual, expected, message, this, arguments, var=var):
        var = Scope({'actual':actual, 'this':this, 'notDeepEqual':PyJs_notDeepEqual_4206_, 'arguments':arguments, 'expected':expected, 'message':message}, var)
        var.registers(['expected', 'message', 'actual'])
        if var.get('_deepEqual')(var.get('actual'), var.get('expected')):
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('notDeepEqual'), var.get('assert').get('notDeepEqual'))
    PyJs_notDeepEqual_4206_._set_name('notDeepEqual')
    var.get('assert').put('notDeepEqual', PyJs_notDeepEqual_4206_)
    @Js
    def PyJs_strictEqual_4207_(actual, expected, message, this, arguments, var=var):
        var = Scope({'actual':actual, 'this':this, 'arguments':arguments, 'expected':expected, 'message':message, 'strictEqual':PyJs_strictEqual_4207_}, var)
        var.registers(['expected', 'message', 'actual'])
        if PyJsStrictNeq(var.get('actual'),var.get('expected')):
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('==='), var.get('assert').get('strictEqual'))
    PyJs_strictEqual_4207_._set_name('strictEqual')
    var.get('assert').put('strictEqual', PyJs_strictEqual_4207_)
    @Js
    def PyJs_notStrictEqual_4208_(actual, expected, message, this, arguments, var=var):
        var = Scope({'actual':actual, 'this':this, 'arguments':arguments, 'notStrictEqual':PyJs_notStrictEqual_4208_, 'expected':expected, 'message':message}, var)
        var.registers(['expected', 'message', 'actual'])
        if PyJsStrictEq(var.get('actual'),var.get('expected')):
            var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('!=='), var.get('assert').get('notStrictEqual'))
    PyJs_notStrictEqual_4208_._set_name('notStrictEqual')
    var.get('assert').put('notStrictEqual', PyJs_notStrictEqual_4208_)
    pass
    pass
    @Js
    def PyJs_anonymous_4210_(block, error, message, this, arguments, var=var):
        var = Scope({'this':this, 'message':message, 'arguments':arguments, 'block':block, 'error':error}, var)
        var.registers(['message', 'block', 'error'])
        var.get('_throws').callprop('apply', var.get("this"), Js([var.get('true')]).callprop('concat', var.get('pSlice').callprop('call', var.get('arguments'))))
    PyJs_anonymous_4210_._set_name('anonymous')
    var.get('assert').put('throws', PyJs_anonymous_4210_)
    @Js
    def PyJs_anonymous_4211_(block, message, this, arguments, var=var):
        var = Scope({'this':this, 'message':message, 'arguments':arguments, 'block':block}, var)
        var.registers(['message', 'block'])
        var.get('_throws').callprop('apply', var.get("this"), Js([Js(False)]).callprop('concat', var.get('pSlice').callprop('call', var.get('arguments'))))
    PyJs_anonymous_4211_._set_name('anonymous')
    var.get('assert').put('doesNotThrow', PyJs_anonymous_4211_)
    @Js
    def PyJs_anonymous_4212_(err, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'err':err}, var)
        var.registers(['err'])
        if var.get('err'):
            PyJsTempException = JsToPyException(var.get('err'))
            raise PyJsTempException
    PyJs_anonymous_4212_._set_name('anonymous')
    var.get('assert').put('ifError', PyJs_anonymous_4212_)
    @Js
    def PyJs_anonymous_4213_(obj, this, arguments, var=var):
        var = Scope({'this':this, 'obj':obj, 'arguments':arguments}, var)
        var.registers(['keys', 'obj', 'key'])
        var.put('keys', Js([]))
        for PyJsTemp in var.get('obj'):
            var.put('key', PyJsTemp)
            if var.get('hasOwn').callprop('call', var.get('obj'), var.get('key')):
                var.get('keys').callprop('push', var.get('key'))
        return var.get('keys')
    PyJs_anonymous_4213_._set_name('anonymous')
    var.put('objectKeys', (var.get('Object').get('keys') or PyJs_anonymous_4213_))
PyJs_anonymous_4199_._set_name('anonymous')
PyJs_Object_4214_ = Js({'util/':Js(534.0)})
@Js
def PyJs_anonymous_4215_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    PyJs_Object_4216_ = Js({})
    @Js
    def PyJs_anonymous_4217_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
        var.registers(['binarySlice', 'asciiWrite', 'objectWriteUInt16', 'ieee754', 'fromBuffer', 'base64Write', 'fromObject', 'fromString', 'global', 'fromArrayBuffer', 'fromJsonObject', 'asciiToBytes', 'hexSlice', 'slowToString', 'byteLength', 'checked', 'Buffer', 'base64', 'base64ToBytes', 'kMaxLength', 'writeFloat', 'utf8Slice', 'allocate', 'checkInt', 'objectWriteUInt32', 'INVALID_BASE64_RE', 'toHex', 'isArray', 'fromNumber', 'SlowBuffer', 'hexWrite', 'fromArrayLike', 'checkIEEE754', 'utf16leToBytes', 'ucs2Write', 'base64clean', 'asciiSlice', 'checkOffset', 'decodeCodePointsArray', 'fromArray', 'binaryWrite', 'fromTypedArray', 'rootParent', 'utf16leSlice', 'typedArraySupport', 'utf8Write', 'utf8ToBytes', 'writeDouble', 'MAX_ARGUMENTS_LENGTH', 'blitBuffer', 'base64Slice', 'stringtrim'])
        @Js
        def PyJsHoisted_binarySlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['i', 'start', 'end', 'buf', 'ret'])
            var.put('ret', Js(''))
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('ret', var.get('String').callprop('fromCharCode', var.get('buf').get(var.get('i'))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ret')
        PyJsHoisted_binarySlice_.__name__ = 'binarySlice'
        var.put('binarySlice', PyJsHoisted_binarySlice_)
        @Js
        def PyJsHoisted_objectWriteUInt16_(buf, value, offset, littleEndian, this, arguments, var=var):
            var = Scope({'arguments':arguments, 'offset':offset, 'this':this, 'littleEndian':littleEndian, 'buf':buf, 'value':value}, var)
            var.registers(['i', 'j', 'value', 'offset', 'littleEndian', 'buf'])
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(65535)+var.get('value'))+Js(1.0)))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('j', var.get('Math').callprop('min', (var.get('buf').get('length')-var.get('offset')), Js(2.0)))
            while (var.get('i')<var.get('j')):
                try:
                    var.get('buf').put((var.get('offset')+var.get('i')), PyJsBshift((var.get('value')&(Js(255)<<(Js(8.0)*(var.get('i') if var.get('littleEndian') else (Js(1.0)-var.get('i')))))),((var.get('i') if var.get('littleEndian') else (Js(1.0)-var.get('i')))*Js(8.0))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_objectWriteUInt16_.__name__ = 'objectWriteUInt16'
        var.put('objectWriteUInt16', PyJsHoisted_objectWriteUInt16_)
        @Js
        def PyJsHoisted_hexSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['end', 'i', 'len', 'start', 'buf', 'out'])
            var.put('len', var.get('buf').get('length'))
            if (var.get('start').neg() or (var.get('start')<Js(0.0))):
                var.put('start', Js(0.0))
            if ((var.get('end').neg() or (var.get('end')<Js(0.0))) or (var.get('end')>var.get('len'))):
                var.put('end', var.get('len'))
            var.put('out', Js(''))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('out', var.get('toHex')(var.get('buf').get(var.get('i'))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('out')
        PyJsHoisted_hexSlice_.__name__ = 'hexSlice'
        var.put('hexSlice', PyJsHoisted_hexSlice_)
        @Js
        def PyJsHoisted_fromBuffer_(that, buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, 'that':that}, var)
            var.registers(['buffer', 'length', 'that'])
            var.put('length', (var.get('checked')(var.get('buffer').get('length'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            var.get('buffer').callprop('copy', var.get('that'), Js(0.0), Js(0.0), var.get('length'))
            return var.get('that')
        PyJsHoisted_fromBuffer_.__name__ = 'fromBuffer'
        var.put('fromBuffer', PyJsHoisted_fromBuffer_)
        @Js
        def PyJsHoisted_base64Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['length', 'buf', 'string', 'offset'])
            return var.get('blitBuffer')(var.get('base64ToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_base64Write_.__name__ = 'base64Write'
        var.put('base64Write', PyJsHoisted_base64Write_)
        @Js
        def PyJsHoisted_fromObject_(that, object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments, 'that':that}, var)
            var.registers(['object', 'that'])
            if var.get('Buffer').callprop('isBuffer', var.get('object')):
                return var.get('fromBuffer')(var.get('that'), var.get('object'))
            if var.get('isArray')(var.get('object')):
                return var.get('fromArray')(var.get('that'), var.get('object'))
            if (var.get('object')==var.get("null")):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('must start with number, buffer, array or string')))
                raise PyJsTempException
            if PyJsStrictNeq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')):
                if var.get('object').get('buffer').instanceof(var.get('ArrayBuffer')):
                    return var.get('fromTypedArray')(var.get('that'), var.get('object'))
                if var.get('object').instanceof(var.get('ArrayBuffer')):
                    return var.get('fromArrayBuffer')(var.get('that'), var.get('object'))
            if var.get('object').get('length'):
                return var.get('fromArrayLike')(var.get('that'), var.get('object'))
            return var.get('fromJsonObject')(var.get('that'), var.get('object'))
        PyJsHoisted_fromObject_.__name__ = 'fromObject'
        var.put('fromObject', PyJsHoisted_fromObject_)
        @Js
        def PyJsHoisted_fromString_(that, string, encoding, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'encoding':encoding, 'string':string, 'that':that}, var)
            var.registers(['length', 'encoding', 'string', 'that'])
            if (PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string')) or PyJsStrictEq(var.get('encoding'),Js(''))):
                var.put('encoding', Js('utf8'))
            var.put('length', (var.get('byteLength')(var.get('string'), var.get('encoding'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            var.get('that').callprop('write', var.get('string'), var.get('encoding'))
            return var.get('that')
        PyJsHoisted_fromString_.__name__ = 'fromString'
        var.put('fromString', PyJsHoisted_fromString_)
        @Js
        def PyJsHoisted_fromArrayBuffer_(that, array, this, arguments, var=var):
            var = Scope({'this':this, 'array':array, 'arguments':arguments, 'that':that}, var)
            var.registers(['array', 'that'])
            var.get('array').get('byteLength')
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.put('that', var.get('Uint8Array').create(var.get('array')))
                var.get('that').put('__proto__', var.get('Buffer').get('prototype'))
            else:
                var.put('that', var.get('fromTypedArray')(var.get('that'), var.get('Uint8Array').create(var.get('array'))))
            return var.get('that')
        PyJsHoisted_fromArrayBuffer_.__name__ = 'fromArrayBuffer'
        var.put('fromArrayBuffer', PyJsHoisted_fromArrayBuffer_)
        @Js
        def PyJsHoisted_fromJsonObject_(that, object, this, arguments, var=var):
            var = Scope({'this':this, 'object':object, 'arguments':arguments, 'that':that}, var)
            var.registers(['i', 'array', 'object', 'length', 'that'])
            pass
            var.put('length', Js(0.0))
            if (PyJsStrictEq(var.get('object').get('type'),Js('Buffer')) and var.get('isArray')(var.get('object').get('data'))):
                var.put('array', var.get('object').get('data'))
                var.put('length', (var.get('checked')(var.get('array').get('length'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.get('that').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('that')
        PyJsHoisted_fromJsonObject_.__name__ = 'fromJsonObject'
        var.put('fromJsonObject', PyJsHoisted_fromJsonObject_)
        @Js
        def PyJsHoisted_asciiToBytes_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['byteArray', 'i', 'str'])
            var.put('byteArray', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('str').get('length')):
                try:
                    var.get('byteArray').callprop('push', (var.get('str').callprop('charCodeAt', var.get('i'))&Js(255)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('byteArray')
        PyJsHoisted_asciiToBytes_.__name__ = 'asciiToBytes'
        var.put('asciiToBytes', PyJsHoisted_asciiToBytes_)
        @Js
        def PyJsHoisted_slowToString_(encoding, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'arguments':arguments, 'encoding':encoding}, var)
            var.registers(['start', 'loweredCase', 'end', 'encoding'])
            var.put('loweredCase', Js(False))
            var.put('start', (var.get('start')|Js(0.0)))
            var.put('end', (var.get("this").get('length') if (PyJsStrictEq(var.get('end'),var.get('undefined')) or PyJsStrictEq(var.get('end'),var.get('Infinity'))) else (var.get('end')|Js(0.0))))
            if var.get('encoding').neg():
                var.put('encoding', Js('utf8'))
            if (var.get('start')<Js(0.0)):
                var.put('start', Js(0.0))
            if (var.get('end')>var.get("this").get('length')):
                var.put('end', var.get("this").get('length'))
            if (var.get('end')<=var.get('start')):
                return Js('')
            while var.get('true'):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('hexSlice')(var.get("this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8Slice')(var.get("this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        return var.get('asciiSlice')(var.get("this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return var.get('binarySlice')(var.get("this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64Slice')(var.get("this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return var.get('utf16leSlice')(var.get("this"), var.get('start'), var.get('end'))
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        var.put('encoding', (var.get('encoding')+Js('')).callprop('toLowerCase'))
                        var.put('loweredCase', var.get('true'))
                    SWITCHED = True
                    break
        PyJsHoisted_slowToString_.__name__ = 'slowToString'
        var.put('slowToString', PyJsHoisted_slowToString_)
        @Js
        def PyJsHoisted_byteLength_(string, encoding, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'string':string, 'encoding':encoding}, var)
            var.registers(['loweredCase', 'string', 'len', 'encoding'])
            if PyJsStrictNeq(var.get('string',throw=False).typeof(),Js('string')):
                var.put('string', (Js('')+var.get('string')))
            var.put('len', var.get('string').get('length'))
            if PyJsStrictEq(var.get('len'),Js(0.0)):
                return Js(0.0)
            var.put('loweredCase', Js(False))
            #for JS loop
            
            while 1:
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('raw')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('raws')):
                        SWITCHED = True
                        return var.get('len')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8ToBytes')(var.get('string')).get('length')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return (var.get('len')*Js(2.0))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return PyJsBshift(var.get('len'),Js(1.0))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64ToBytes')(var.get('string')).get('length')
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            return var.get('utf8ToBytes')(var.get('string')).get('length')
                        var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                        var.put('loweredCase', var.get('true'))
                    SWITCHED = True
                    break
            
        PyJsHoisted_byteLength_.__name__ = 'byteLength'
        var.put('byteLength', PyJsHoisted_byteLength_)
        @Js
        def PyJsHoisted_checked_(length, this, arguments, var=var):
            var = Scope({'this':this, 'length':length, 'arguments':arguments}, var)
            var.registers(['length'])
            if (var.get('length')>=var.get('kMaxLength')()):
                PyJsTempException = JsToPyException(var.get('RangeError').create((((Js('Attempt to allocate Buffer larger than maximum ')+Js('size: 0x'))+var.get('kMaxLength')().callprop('toString', Js(16.0)))+Js(' bytes'))))
                raise PyJsTempException
            return (var.get('length')|Js(0.0))
        PyJsHoisted_checked_.__name__ = 'checked'
        var.put('checked', PyJsHoisted_checked_)
        @Js
        def PyJsHoisted_Buffer_(arg, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
            var.registers(['arg'])
            if var.get("this").instanceof(var.get('Buffer')).neg():
                if (var.get('arguments').get('length')>Js(1.0)):
                    return var.get('Buffer').create(var.get('arg'), var.get('arguments').get('1'))
                return var.get('Buffer').create(var.get('arg'))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg():
                var.get("this").put('length', Js(0.0))
                var.get("this").put('parent', var.get('undefined'))
            if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number')):
                return var.get('fromNumber')(var.get("this"), var.get('arg'))
            if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string')):
                return var.get('fromString')(var.get("this"), var.get('arg'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else Js('utf8')))
            return var.get('fromObject')(var.get("this"), var.get('arg'))
        PyJsHoisted_Buffer_.__name__ = 'Buffer'
        var.put('Buffer', PyJsHoisted_Buffer_)
        @Js
        def PyJsHoisted_asciiSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['i', 'start', 'end', 'buf', 'ret'])
            var.put('ret', Js(''))
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('ret', var.get('String').callprop('fromCharCode', (var.get('buf').get(var.get('i'))&Js(127))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ret')
        PyJsHoisted_asciiSlice_.__name__ = 'asciiSlice'
        var.put('asciiSlice', PyJsHoisted_asciiSlice_)
        @Js
        def PyJsHoisted_base64ToBytes_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            return var.get('base64').callprop('toByteArray', var.get('base64clean')(var.get('str')))
        PyJsHoisted_base64ToBytes_.__name__ = 'base64ToBytes'
        var.put('base64ToBytes', PyJsHoisted_base64ToBytes_)
        @Js
        def PyJsHoisted_kMaxLength_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (Js(2147483647) if var.get('Buffer').get('TYPED_ARRAY_SUPPORT') else Js(1073741823))
        PyJsHoisted_kMaxLength_.__name__ = 'kMaxLength'
        var.put('kMaxLength', PyJsHoisted_kMaxLength_)
        @Js
        def PyJsHoisted_writeFloat_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'littleEndian':littleEndian, 'buf':buf, 'value':value}, var)
            var.registers(['littleEndian', 'noAssert', 'buf', 'value', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(4.0), Js(3.4028234663852886e+38), (-Js(3.4028234663852886e+38)))
            var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(23.0), Js(4.0))
            return (var.get('offset')+Js(4.0))
        PyJsHoisted_writeFloat_.__name__ = 'writeFloat'
        var.put('writeFloat', PyJsHoisted_writeFloat_)
        @Js
        def PyJsHoisted_utf8Slice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['codePoint', 'fourthByte', 'firstByte', 'start', 'i', 'res', 'tempCodePoint', 'bytesPerSequence', 'secondByte', 'end', 'buf', 'thirdByte'])
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            var.put('res', Js([]))
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                var.put('firstByte', var.get('buf').get(var.get('i')))
                var.put('codePoint', var.get("null"))
                var.put('bytesPerSequence', (Js(4.0) if (var.get('firstByte')>Js(239)) else (Js(3.0) if (var.get('firstByte')>Js(223)) else (Js(2.0) if (var.get('firstByte')>Js(191)) else Js(1.0)))))
                if ((var.get('i')+var.get('bytesPerSequence'))<=var.get('end')):
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('bytesPerSequence'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            if (var.get('firstByte')<Js(128)):
                                var.put('codePoint', var.get('firstByte'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            if PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)):
                                var.put('tempCodePoint', (((var.get('firstByte')&Js(31))<<Js(6))|(var.get('secondByte')&Js(63))))
                                if (var.get('tempCodePoint')>Js(127)):
                                    var.put('codePoint', var.get('tempCodePoint'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                            if (PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))):
                                var.put('tempCodePoint', ((((var.get('firstByte')&Js(15))<<Js(12))|((var.get('secondByte')&Js(63))<<Js(6)))|(var.get('thirdByte')&Js(63))))
                                if ((var.get('tempCodePoint')>Js(2047)) and ((var.get('tempCodePoint')<Js(55296)) or (var.get('tempCodePoint')>Js(57343)))):
                                    var.put('codePoint', var.get('tempCodePoint'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                            var.put('fourthByte', var.get('buf').get((var.get('i')+Js(3.0))))
                            if ((PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))) and PyJsStrictEq((var.get('fourthByte')&Js(192)),Js(128))):
                                var.put('tempCodePoint', (((((var.get('firstByte')&Js(15))<<Js(18))|((var.get('secondByte')&Js(63))<<Js(12)))|((var.get('thirdByte')&Js(63))<<Js(6)))|(var.get('fourthByte')&Js(63))))
                                if ((var.get('tempCodePoint')>Js(65535)) and (var.get('tempCodePoint')<Js(1114112))):
                                    var.put('codePoint', var.get('tempCodePoint'))
                        SWITCHED = True
                        break
                if PyJsStrictEq(var.get('codePoint'),var.get("null")):
                    var.put('codePoint', Js(65533))
                    var.put('bytesPerSequence', Js(1.0))
                else:
                    if (var.get('codePoint')>Js(65535)):
                        var.put('codePoint', Js(65536), '-')
                        var.get('res').callprop('push', ((PyJsBshift(var.get('codePoint'),Js(10.0))&Js(1023))|Js(55296)))
                        var.put('codePoint', (Js(56320)|(var.get('codePoint')&Js(1023))))
                var.get('res').callprop('push', var.get('codePoint'))
                var.put('i', var.get('bytesPerSequence'), '+')
            return var.get('decodeCodePointsArray')(var.get('res'))
        PyJsHoisted_utf8Slice_.__name__ = 'utf8Slice'
        var.put('utf8Slice', PyJsHoisted_utf8Slice_)
        @Js
        def PyJsHoisted_allocate_(that, length, this, arguments, var=var):
            var = Scope({'this':this, 'length':length, 'arguments':arguments, 'that':that}, var)
            var.registers(['fromPool', 'length', 'that'])
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.put('that', var.get('Uint8Array').create(var.get('length')))
                var.get('that').put('__proto__', var.get('Buffer').get('prototype'))
            else:
                var.get('that').put('length', var.get('length'))
            var.put('fromPool', (PyJsStrictNeq(var.get('length'),Js(0.0)) and (var.get('length')<=PyJsBshift(var.get('Buffer').get('poolSize'),Js(1.0)))))
            if var.get('fromPool'):
                var.get('that').put('parent', var.get('rootParent'))
            return var.get('that')
        PyJsHoisted_allocate_.__name__ = 'allocate'
        var.put('allocate', PyJsHoisted_allocate_)
        @Js
        def PyJsHoisted_checkInt_(buf, value, offset, ext, max, min, this, arguments, var=var):
            var = Scope({'min':min, 'this':this, 'max':max, 'value':value, 'ext':ext, 'arguments':arguments, 'offset':offset, 'buf':buf}, var)
            var.registers(['min', 'max', 'value', 'ext', 'offset', 'buf'])
            if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('buffer must be a Buffer instance')))
                raise PyJsTempException
            if ((var.get('value')>var.get('max')) or (var.get('value')<var.get('min'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('value is out of bounds')))
                raise PyJsTempException
            if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('index out of range')))
                raise PyJsTempException
        PyJsHoisted_checkInt_.__name__ = 'checkInt'
        var.put('checkInt', PyJsHoisted_checkInt_)
        @Js
        def PyJsHoisted_objectWriteUInt32_(buf, value, offset, littleEndian, this, arguments, var=var):
            var = Scope({'arguments':arguments, 'offset':offset, 'this':this, 'littleEndian':littleEndian, 'buf':buf, 'value':value}, var)
            var.registers(['i', 'j', 'value', 'offset', 'littleEndian', 'buf'])
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(4294967295)+var.get('value'))+Js(1.0)))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('j', var.get('Math').callprop('min', (var.get('buf').get('length')-var.get('offset')), Js(4.0)))
            while (var.get('i')<var.get('j')):
                try:
                    var.get('buf').put((var.get('offset')+var.get('i')), (PyJsBshift(var.get('value'),((var.get('i') if var.get('littleEndian') else (Js(3.0)-var.get('i')))*Js(8.0)))&Js(255)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_objectWriteUInt32_.__name__ = 'objectWriteUInt32'
        var.put('objectWriteUInt32', PyJsHoisted_objectWriteUInt32_)
        @Js
        def PyJsHoisted_toHex_(n, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'n':n}, var)
            var.registers(['n'])
            if (var.get('n')<Js(16.0)):
                return (Js('0')+var.get('n').callprop('toString', Js(16.0)))
            return var.get('n').callprop('toString', Js(16.0))
        PyJsHoisted_toHex_.__name__ = 'toHex'
        var.put('toHex', PyJsHoisted_toHex_)
        @Js
        def PyJsHoisted_asciiWrite_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['length', 'buf', 'string', 'offset'])
            return var.get('blitBuffer')(var.get('asciiToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_asciiWrite_.__name__ = 'asciiWrite'
        var.put('asciiWrite', PyJsHoisted_asciiWrite_)
        @Js
        def PyJsHoisted_fromNumber_(that, length, this, arguments, var=var):
            var = Scope({'this':this, 'length':length, 'arguments':arguments, 'that':that}, var)
            var.registers(['i', 'length', 'that'])
            var.put('that', var.get('allocate')(var.get('that'), (Js(0.0) if (var.get('length')<Js(0.0)) else (var.get('checked')(var.get('length'))|Js(0.0)))))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg():
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('length')):
                    try:
                        var.get('that').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('that')
        PyJsHoisted_fromNumber_.__name__ = 'fromNumber'
        var.put('fromNumber', PyJsHoisted_fromNumber_)
        @Js
        def PyJsHoisted_SlowBuffer_(subject, encoding, this, arguments, var=var):
            var = Scope({'this':this, 'encoding':encoding, 'arguments':arguments, 'subject':subject}, var)
            var.registers(['encoding', 'buf', 'subject'])
            if var.get("this").instanceof(var.get('SlowBuffer')).neg():
                return var.get('SlowBuffer').create(var.get('subject'), var.get('encoding'))
            var.put('buf', var.get('Buffer').create(var.get('subject'), var.get('encoding')))
            var.get('buf').delete('parent')
            return var.get('buf')
        PyJsHoisted_SlowBuffer_.__name__ = 'SlowBuffer'
        var.put('SlowBuffer', PyJsHoisted_SlowBuffer_)
        @Js
        def PyJsHoisted_hexWrite_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['string', 'i', 'strLen', 'parsed', 'length', 'offset', 'buf', 'remaining'])
            var.put('offset', (var.get('Number')(var.get('offset')) or Js(0.0)))
            var.put('remaining', (var.get('buf').get('length')-var.get('offset')))
            if var.get('length').neg():
                var.put('length', var.get('remaining'))
            else:
                var.put('length', var.get('Number')(var.get('length')))
                if (var.get('length')>var.get('remaining')):
                    var.put('length', var.get('remaining'))
            var.put('strLen', var.get('string').get('length'))
            if PyJsStrictNeq((var.get('strLen')%Js(2.0)),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid hex string')))
                raise PyJsTempException
            if (var.get('length')>(var.get('strLen')/Js(2.0))):
                var.put('length', (var.get('strLen')/Js(2.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.put('parsed', var.get('parseInt')(var.get('string').callprop('substr', (var.get('i')*Js(2.0)), Js(2.0)), Js(16.0)))
                    if var.get('isNaN')(var.get('parsed')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid hex string')))
                        raise PyJsTempException
                    var.get('buf').put((var.get('offset')+var.get('i')), var.get('parsed'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('i')
        PyJsHoisted_hexWrite_.__name__ = 'hexWrite'
        var.put('hexWrite', PyJsHoisted_hexWrite_)
        @Js
        def PyJsHoisted_fromArrayLike_(that, array, this, arguments, var=var):
            var = Scope({'this':this, 'array':array, 'arguments':arguments, 'that':that}, var)
            var.registers(['i', 'length', 'array', 'that'])
            var.put('length', (var.get('checked')(var.get('array').get('length'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.get('that').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('that')
        PyJsHoisted_fromArrayLike_.__name__ = 'fromArrayLike'
        var.put('fromArrayLike', PyJsHoisted_fromArrayLike_)
        @Js
        def PyJsHoisted_checkIEEE754_(buf, value, offset, ext, max, min, this, arguments, var=var):
            var = Scope({'min':min, 'this':this, 'max':max, 'value':value, 'ext':ext, 'arguments':arguments, 'offset':offset, 'buf':buf}, var)
            var.registers(['min', 'max', 'value', 'ext', 'offset', 'buf'])
            if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('index out of range')))
                raise PyJsTempException
            if (var.get('offset')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('index out of range')))
                raise PyJsTempException
        PyJsHoisted_checkIEEE754_.__name__ = 'checkIEEE754'
        var.put('checkIEEE754', PyJsHoisted_checkIEEE754_)
        @Js
        def PyJsHoisted_utf16leToBytes_(str, units, this, arguments, var=var):
            var = Scope({'units':units, 'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['byteArray', 'c', 'i', 'lo', 'hi', 'str', 'units'])
            pass
            var.put('byteArray', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('str').get('length')):
                try:
                    if (var.put('units', Js(2.0), '-')<Js(0.0)):
                        break
                    var.put('c', var.get('str').callprop('charCodeAt', var.get('i')))
                    var.put('hi', (var.get('c')>>Js(8.0)))
                    var.put('lo', (var.get('c')%Js(256.0)))
                    var.get('byteArray').callprop('push', var.get('lo'))
                    var.get('byteArray').callprop('push', var.get('hi'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('byteArray')
        PyJsHoisted_utf16leToBytes_.__name__ = 'utf16leToBytes'
        var.put('utf16leToBytes', PyJsHoisted_utf16leToBytes_)
        @Js
        def PyJsHoisted_ucs2Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['length', 'buf', 'string', 'offset'])
            return var.get('blitBuffer')(var.get('utf16leToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_ucs2Write_.__name__ = 'ucs2Write'
        var.put('ucs2Write', PyJsHoisted_ucs2Write_)
        @Js
        def PyJsHoisted_base64clean_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            var.put('str', var.get('stringtrim')(var.get('str')).callprop('replace', var.get('INVALID_BASE64_RE'), Js('')))
            if (var.get('str').get('length')<Js(2.0)):
                return Js('')
            while PyJsStrictNeq((var.get('str').get('length')%Js(4.0)),Js(0.0)):
                var.put('str', (var.get('str')+Js('=')))
            return var.get('str')
        PyJsHoisted_base64clean_.__name__ = 'base64clean'
        var.put('base64clean', PyJsHoisted_base64clean_)
        @Js
        def PyJsHoisted_checkOffset_(offset, ext, length, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'ext':ext, 'length':length, 'offset':offset}, var)
            var.registers(['ext', 'length', 'offset'])
            if (PyJsStrictNeq((var.get('offset')%Js(1.0)),Js(0.0)) or (var.get('offset')<Js(0.0))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('offset is not uint')))
                raise PyJsTempException
            if ((var.get('offset')+var.get('ext'))>var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Trying to access beyond buffer length')))
                raise PyJsTempException
        PyJsHoisted_checkOffset_.__name__ = 'checkOffset'
        var.put('checkOffset', PyJsHoisted_checkOffset_)
        @Js
        def PyJsHoisted_decodeCodePointsArray_(codePoints, this, arguments, var=var):
            var = Scope({'codePoints':codePoints, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'res', 'len', 'codePoints'])
            var.put('len', var.get('codePoints').get('length'))
            if (var.get('len')<=var.get('MAX_ARGUMENTS_LENGTH')):
                return var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints'))
            var.put('res', Js(''))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                var.put('res', var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints').callprop('slice', var.get('i'), var.put('i', var.get('MAX_ARGUMENTS_LENGTH'), '+'))), '+')
            return var.get('res')
        PyJsHoisted_decodeCodePointsArray_.__name__ = 'decodeCodePointsArray'
        var.put('decodeCodePointsArray', PyJsHoisted_decodeCodePointsArray_)
        @Js
        def PyJsHoisted_fromArray_(that, array, this, arguments, var=var):
            var = Scope({'this':this, 'array':array, 'arguments':arguments, 'that':that}, var)
            var.registers(['i', 'length', 'array', 'that'])
            var.put('length', (var.get('checked')(var.get('array').get('length'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.get('that').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('that')
        PyJsHoisted_fromArray_.__name__ = 'fromArray'
        var.put('fromArray', PyJsHoisted_fromArray_)
        @Js
        def PyJsHoisted_binaryWrite_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['length', 'buf', 'string', 'offset'])
            return var.get('asciiWrite')(var.get('buf'), var.get('string'), var.get('offset'), var.get('length'))
        PyJsHoisted_binaryWrite_.__name__ = 'binaryWrite'
        var.put('binaryWrite', PyJsHoisted_binaryWrite_)
        @Js
        def PyJsHoisted_fromTypedArray_(that, array, this, arguments, var=var):
            var = Scope({'this':this, 'array':array, 'arguments':arguments, 'that':that}, var)
            var.registers(['i', 'length', 'array', 'that'])
            var.put('length', (var.get('checked')(var.get('array').get('length'))|Js(0.0)))
            var.put('that', var.get('allocate')(var.get('that'), var.get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.get('that').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('that')
        PyJsHoisted_fromTypedArray_.__name__ = 'fromTypedArray'
        var.put('fromTypedArray', PyJsHoisted_fromTypedArray_)
        @Js
        def PyJsHoisted_utf16leSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['end', 'i', 'res', 'bytes', 'start', 'buf'])
            var.put('bytes', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
            var.put('res', Js(''))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('bytes').get('length')):
                try:
                    var.put('res', var.get('String').callprop('fromCharCode', (var.get('bytes').get(var.get('i'))+(var.get('bytes').get((var.get('i')+Js(1.0)))*Js(256.0)))), '+')
                finally:
                        var.put('i', Js(2.0), '+')
            return var.get('res')
        PyJsHoisted_utf16leSlice_.__name__ = 'utf16leSlice'
        var.put('utf16leSlice', PyJsHoisted_utf16leSlice_)
        @Js
        def PyJsHoisted_typedArraySupport_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['arr'])
            try:
                var.put('arr', var.get('Uint8ArrayNotExising').create(Js(1.0)))
                @Js
                def PyJs_anonymous_4219_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js(42.0)
                PyJs_anonymous_4219_._set_name('anonymous')
                var.get('arr').put('foo', PyJs_anonymous_4219_)
                return ((PyJsStrictEq(var.get('arr').callprop('foo'),Js(42.0)) and PyJsStrictEq(var.get('arr').get('subarray').typeof(),Js('function'))) and PyJsStrictEq(var.get('arr').callprop('subarray', Js(1.0), Js(1.0)).get('byteLength'),Js(0.0)))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_42861762 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_42861762 is not None:
                        var.own['e'] = PyJsHolder_65_42861762
                    else:
                        del var.own['e']
                    del PyJsHolder_65_42861762
        PyJsHoisted_typedArraySupport_.__name__ = 'typedArraySupport'
        var.put('typedArraySupport', PyJsHoisted_typedArraySupport_)
        @Js
        def PyJsHoisted_utf8Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'length':length, 'string':string, 'offset':offset, 'this':this, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['length', 'buf', 'string', 'offset'])
            return var.get('blitBuffer')(var.get('utf8ToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_utf8Write_.__name__ = 'utf8Write'
        var.put('utf8Write', PyJsHoisted_utf8Write_)
        @Js
        def PyJsHoisted_utf8ToBytes_(string, units, this, arguments, var=var):
            var = Scope({'units':units, 'this':this, 'string':string, 'arguments':arguments}, var)
            var.registers(['codePoint', 'string', 'i', 'bytes', 'leadSurrogate', 'length', 'units'])
            var.put('units', (var.get('units') or var.get('Infinity')))
            pass
            var.put('length', var.get('string').get('length'))
            var.put('leadSurrogate', var.get("null"))
            var.put('bytes', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.put('codePoint', var.get('string').callprop('charCodeAt', var.get('i')))
                    if ((var.get('codePoint')>Js(55295)) and (var.get('codePoint')<Js(57344))):
                        if var.get('leadSurrogate').neg():
                            if (var.get('codePoint')>Js(56319)):
                                if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                    var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                continue
                            else:
                                if PyJsStrictEq((var.get('i')+Js(1.0)),var.get('length')):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                    continue
                            var.put('leadSurrogate', var.get('codePoint'))
                            continue
                        if (var.get('codePoint')<Js(56320)):
                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                            var.put('leadSurrogate', var.get('codePoint'))
                            continue
                        var.put('codePoint', ((((var.get('leadSurrogate')-Js(55296))<<Js(10.0))|(var.get('codePoint')-Js(56320)))+Js(65536)))
                    else:
                        if var.get('leadSurrogate'):
                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                    var.put('leadSurrogate', var.get("null"))
                    if (var.get('codePoint')<Js(128)):
                        if (var.put('units', Js(1.0), '-')<Js(0.0)):
                            break
                        var.get('bytes').callprop('push', var.get('codePoint'))
                    else:
                        if (var.get('codePoint')<Js(2048)):
                            if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                break
                            var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(6))|Js(192)), ((var.get('codePoint')&Js(63))|Js(128)))
                        else:
                            if (var.get('codePoint')<Js(65536)):
                                if (var.put('units', Js(3.0), '-')<Js(0.0)):
                                    break
                                var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(12))|Js(224)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                            else:
                                if (var.get('codePoint')<Js(1114112)):
                                    if (var.put('units', Js(4.0), '-')<Js(0.0)):
                                        break
                                    var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(18))|Js(240)), (((var.get('codePoint')>>Js(12))&Js(63))|Js(128)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                else:
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid code point')))
                                    raise PyJsTempException
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('bytes')
        PyJsHoisted_utf8ToBytes_.__name__ = 'utf8ToBytes'
        var.put('utf8ToBytes', PyJsHoisted_utf8ToBytes_)
        @Js
        def PyJsHoisted_writeDouble_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'littleEndian':littleEndian, 'buf':buf, 'value':value}, var)
            var.registers(['littleEndian', 'noAssert', 'buf', 'value', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(8.0), Js(1.7976931348623157e+308), (-Js(1.7976931348623157e+308)))
            var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(52.0), Js(8.0))
            return (var.get('offset')+Js(8.0))
        PyJsHoisted_writeDouble_.__name__ = 'writeDouble'
        var.put('writeDouble', PyJsHoisted_writeDouble_)
        @Js
        def PyJsHoisted_blitBuffer_(src, dst, offset, length, this, arguments, var=var):
            var = Scope({'src':src, 'length':length, 'arguments':arguments, 'offset':offset, 'this':this, 'dst':dst}, var)
            var.registers(['i', 'src', 'dst', 'length', 'offset'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    if (((var.get('i')+var.get('offset'))>=var.get('dst').get('length')) or (var.get('i')>=var.get('src').get('length'))):
                        break
                    var.get('dst').put((var.get('i')+var.get('offset')), var.get('src').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('i')
        PyJsHoisted_blitBuffer_.__name__ = 'blitBuffer'
        var.put('blitBuffer', PyJsHoisted_blitBuffer_)
        @Js
        def PyJsHoisted_base64Slice_(buf, start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'end':end, 'buf':buf, 'arguments':arguments}, var)
            var.registers(['start', 'end', 'buf'])
            if (PyJsStrictEq(var.get('start'),Js(0.0)) and PyJsStrictEq(var.get('end'),var.get('buf').get('length'))):
                return var.get('base64').callprop('fromByteArray', var.get('buf'))
            else:
                return var.get('base64').callprop('fromByteArray', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
        PyJsHoisted_base64Slice_.__name__ = 'base64Slice'
        var.put('base64Slice', PyJsHoisted_base64Slice_)
        @Js
        def PyJsHoisted_stringtrim_(str, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'str':str}, var)
            var.registers(['str'])
            if var.get('str').get('trim'):
                return var.get('str').callprop('trim')
            return var.get('str').callprop('replace', JsRegExp('/^\\s+|\\s+$/g'), Js(''))
        PyJsHoisted_stringtrim_.__name__ = 'stringtrim'
        var.put('stringtrim', PyJsHoisted_stringtrim_)
        Js('use strict')
        var.put('base64', var.get('require')(Js('base64-js')))
        var.put('ieee754', var.get('require')(Js('ieee754')))
        var.put('isArray', var.get('require')(Js('isarray')))
        var.get('exports').put('Buffer', var.get('Buffer'))
        var.get('exports').put('SlowBuffer', var.get('SlowBuffer'))
        var.get('exports').put('INSPECT_MAX_BYTES', Js(50.0))
        var.get('Buffer').put('poolSize', Js(8192.0))
        PyJs_Object_4218_ = Js({})
        var.put('rootParent', PyJs_Object_4218_)
        var.get('Buffer').put('TYPED_ARRAY_SUPPORT', (var.get('global').get('TYPED_ARRAY_SUPPORT') if PyJsStrictNeq(var.get('global').get('TYPED_ARRAY_SUPPORT'),var.get('undefined')) else var.get('typedArraySupport')()))
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_4220_(arr, this, arguments, var=var):
            var = Scope({'this':this, 'arr':arr, 'arguments':arguments}, var)
            var.registers(['arr'])
            var.get('arr').put('__proto__', var.get('Buffer').get('prototype'))
            return var.get('arr')
        PyJs_anonymous_4220_._set_name('anonymous')
        var.get('Buffer').put('_augment', PyJs_anonymous_4220_)
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
            var.get('Buffer').get('prototype').put('__proto__', var.get('Uint8Array').get('prototype'))
            var.get('Buffer').put('__proto__', var.get('Uint8Array'))
            if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and var.get('Symbol').get('species')) and PyJsStrictEq(var.get('Buffer').get(var.get('Symbol').get('species')),var.get('Buffer'))):
                PyJs_Object_4221_ = Js({'value':var.get("null"),'configurable':var.get('true')})
                var.get('Object').callprop('defineProperty', var.get('Buffer'), var.get('Symbol').get('species'), PyJs_Object_4221_)
        else:
            var.get('Buffer').get('prototype').put('length', var.get('undefined'))
            var.get('Buffer').get('prototype').put('parent', var.get('undefined'))
        pass
        pass
        pass
        @Js
        def PyJs_isBuffer_4222_(b, this, arguments, var=var):
            var = Scope({'this':this, 'b':b, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_4222_}, var)
            var.registers(['b'])
            return ((var.get('b')!=var.get("null")) and var.get('b').get('_isBuffer')).neg().neg()
        PyJs_isBuffer_4222_._set_name('isBuffer')
        var.get('Buffer').put('isBuffer', PyJs_isBuffer_4222_)
        @Js
        def PyJs_compare_4223_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'this':this, 'compare':PyJs_compare_4223_, 'b':b, 'arguments':arguments}, var)
            var.registers(['a', 'b', 'i', 'len', 'y', 'x'])
            if (var.get('Buffer').callprop('isBuffer', var.get('a')).neg() or var.get('Buffer').callprop('isBuffer', var.get('b')).neg()):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Arguments must be Buffers')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('a'),var.get('b')):
                return Js(0.0)
            var.put('x', var.get('a').get('length'))
            var.put('y', var.get('b').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
            while (var.get('i')<var.get('len')):
                try:
                    if PyJsStrictNeq(var.get('a').get(var.get('i')),var.get('b').get(var.get('i'))):
                        var.put('x', var.get('a').get(var.get('i')))
                        var.put('y', var.get('b').get(var.get('i')))
                        break
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('x')<var.get('y')):
                return (-Js(1.0))
            if (var.get('y')<var.get('x')):
                return Js(1.0)
            return Js(0.0)
        PyJs_compare_4223_._set_name('compare')
        var.get('Buffer').put('compare', PyJs_compare_4223_)
        @Js
        def PyJs_isEncoding_4224_(encoding, this, arguments, var=var):
            var = Scope({'this':this, 'isEncoding':PyJs_isEncoding_4224_, 'arguments':arguments, 'encoding':encoding}, var)
            var.registers(['encoding'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('raw')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                    SWITCHED = True
                    return var.get('true')
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJs_isEncoding_4224_._set_name('isEncoding')
        var.get('Buffer').put('isEncoding', PyJs_isEncoding_4224_)
        @Js
        def PyJs_concat_4225_(list, length, this, arguments, var=var):
            var = Scope({'this':this, 'length':length, 'list':list, 'arguments':arguments, 'concat':PyJs_concat_4225_}, var)
            var.registers(['i', 'list', 'pos', 'item', 'length', 'buf'])
            if var.get('isArray')(var.get('list')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('list argument must be an Array of Buffers.')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('list').get('length'),Js(0.0)):
                return var.get('Buffer').create(Js(0.0))
            pass
            if PyJsStrictEq(var.get('length'),var.get('undefined')):
                var.put('length', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('list').get('length')):
                    try:
                        var.put('length', var.get('list').get(var.get('i')).get('length'), '+')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('buf', var.get('Buffer').create(var.get('length')))
            var.put('pos', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('list').get('length')):
                try:
                    var.put('item', var.get('list').get(var.get('i')))
                    var.get('item').callprop('copy', var.get('buf'), var.get('pos'))
                    var.put('pos', var.get('item').get('length'), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('buf')
        PyJs_concat_4225_._set_name('concat')
        var.get('Buffer').put('concat', PyJs_concat_4225_)
        pass
        var.get('Buffer').put('byteLength', var.get('byteLength'))
        pass
        var.get('Buffer').get('prototype').put('_isBuffer', var.get('true'))
        @Js
        def PyJs_toString_4226_(this, arguments, var=var):
            var = Scope({'this':this, 'toString':PyJs_toString_4226_, 'arguments':arguments}, var)
            var.registers(['length'])
            var.put('length', (var.get("this").get('length')|Js(0.0)))
            if PyJsStrictEq(var.get('length'),Js(0.0)):
                return Js('')
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                return var.get('utf8Slice')(var.get("this"), Js(0.0), var.get('length'))
            return var.get('slowToString').callprop('apply', var.get("this"), var.get('arguments'))
        PyJs_toString_4226_._set_name('toString')
        var.get('Buffer').get('prototype').put('toString', PyJs_toString_4226_)
        @Js
        def PyJs_equals_4227_(b, this, arguments, var=var):
            var = Scope({'this':this, 'b':b, 'arguments':arguments, 'equals':PyJs_equals_4227_}, var)
            var.registers(['b'])
            if var.get('Buffer').callprop('isBuffer', var.get('b')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a Buffer')))
                raise PyJsTempException
            if PyJsStrictEq(var.get("this"),var.get('b')):
                return var.get('true')
            return PyJsStrictEq(var.get('Buffer').callprop('compare', var.get("this"), var.get('b')),Js(0.0))
        PyJs_equals_4227_._set_name('equals')
        var.get('Buffer').get('prototype').put('equals', PyJs_equals_4227_)
        @Js
        def PyJs_inspect_4228_(this, arguments, var=var):
            var = Scope({'this':this, 'inspect':PyJs_inspect_4228_, 'arguments':arguments}, var)
            var.registers(['max', 'str'])
            var.put('str', Js(''))
            var.put('max', var.get('exports').get('INSPECT_MAX_BYTES'))
            if (var.get("this").get('length')>Js(0.0)):
                var.put('str', var.get("this").callprop('toString', Js('hex'), Js(0.0), var.get('max')).callprop('match', JsRegExp('/.{2}/g')).callprop('join', Js(' ')))
                if (var.get("this").get('length')>var.get('max')):
                    var.put('str', Js(' ... '), '+')
            return ((Js('<Buffer ')+var.get('str'))+Js('>'))
        PyJs_inspect_4228_._set_name('inspect')
        var.get('Buffer').get('prototype').put('inspect', PyJs_inspect_4228_)
        @Js
        def PyJs_compare_4229_(b, this, arguments, var=var):
            var = Scope({'this':this, 'compare':PyJs_compare_4229_, 'b':b, 'arguments':arguments}, var)
            var.registers(['b'])
            if var.get('Buffer').callprop('isBuffer', var.get('b')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a Buffer')))
                raise PyJsTempException
            return var.get('Buffer').callprop('compare', var.get("this"), var.get('b'))
        PyJs_compare_4229_._set_name('compare')
        var.get('Buffer').get('prototype').put('compare', PyJs_compare_4229_)
        @Js
        def PyJs_indexOf_4230_(val, byteOffset, this, arguments, var=var):
            var = Scope({'this':this, 'indexOf':PyJs_indexOf_4230_, 'byteOffset':byteOffset, 'val':val, 'arguments':arguments}, var)
            var.registers(['val', 'arrayIndexOf', 'byteOffset'])
            @Js
            def PyJsHoisted_arrayIndexOf_(arr, val, byteOffset, this, arguments, var=var):
                var = Scope({'this':this, 'arr':arr, 'byteOffset':byteOffset, 'val':val, 'arguments':arguments}, var)
                var.registers(['i', 'foundIndex', 'arr', 'val', 'byteOffset'])
                var.put('foundIndex', (-Js(1.0)))
                #for JS loop
                var.put('i', Js(0.0))
                while ((var.get('byteOffset')+var.get('i'))<var.get('arr').get('length')):
                    try:
                        if PyJsStrictEq(var.get('arr').get((var.get('byteOffset')+var.get('i'))),var.get('val').get((Js(0.0) if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))) else (var.get('i')-var.get('foundIndex'))))):
                            if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))):
                                var.put('foundIndex', var.get('i'))
                            if PyJsStrictEq(((var.get('i')-var.get('foundIndex'))+Js(1.0)),var.get('val').get('length')):
                                return (var.get('byteOffset')+var.get('foundIndex'))
                        else:
                            var.put('foundIndex', (-Js(1.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return (-Js(1.0))
            PyJsHoisted_arrayIndexOf_.__name__ = 'arrayIndexOf'
            var.put('arrayIndexOf', PyJsHoisted_arrayIndexOf_)
            if (var.get('byteOffset')>Js(2147483647)):
                var.put('byteOffset', Js(2147483647))
            else:
                if (var.get('byteOffset')<(-Js(2147483648))):
                    var.put('byteOffset', (-Js(2147483648)))
            var.put('byteOffset', Js(0.0), '>>')
            if PyJsStrictEq(var.get("this").get('length'),Js(0.0)):
                return (-Js(1.0))
            if (var.get('byteOffset')>=var.get("this").get('length')):
                return (-Js(1.0))
            if (var.get('byteOffset')<Js(0.0)):
                var.put('byteOffset', var.get('Math').callprop('max', (var.get("this").get('length')+var.get('byteOffset')), Js(0.0)))
            if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                if PyJsStrictEq(var.get('val').get('length'),Js(0.0)):
                    return (-Js(1.0))
                return var.get('String').get('prototype').get('indexOf').callprop('call', var.get("this"), var.get('val'), var.get('byteOffset'))
            if var.get('Buffer').callprop('isBuffer', var.get('val')):
                return var.get('arrayIndexOf')(var.get("this"), var.get('val'), var.get('byteOffset'))
            if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                if (var.get('Buffer').get('TYPED_ARRAY_SUPPORT') and PyJsStrictEq(var.get('Uint8Array').get('prototype').get('indexOf'),Js('function'))):
                    return var.get('Uint8Array').get('prototype').get('indexOf').callprop('call', var.get("this"), var.get('val'), var.get('byteOffset'))
                return var.get('arrayIndexOf')(var.get("this"), Js([var.get('val')]), var.get('byteOffset'))
            pass
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('val must be string, number or Buffer')))
            raise PyJsTempException
        PyJs_indexOf_4230_._set_name('indexOf')
        var.get('Buffer').get('prototype').put('indexOf', PyJs_indexOf_4230_)
        pass
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_write_4231_(string, offset, length, encoding, this, arguments, var=var):
            var = Scope({'write':PyJs_write_4231_, 'length':length, 'string':string, 'encoding':encoding, 'this':this, 'offset':offset, 'arguments':arguments}, var)
            var.registers(['string', 'encoding', 'length', 'swap', 'offset', 'loweredCase', 'remaining'])
            if PyJsStrictEq(var.get('offset'),var.get('undefined')):
                var.put('encoding', Js('utf8'))
                var.put('length', var.get("this").get('length'))
                var.put('offset', Js(0.0))
            else:
                if (PyJsStrictEq(var.get('length'),var.get('undefined')) and PyJsStrictEq(var.get('offset',throw=False).typeof(),Js('string'))):
                    var.put('encoding', var.get('offset'))
                    var.put('length', var.get("this").get('length'))
                    var.put('offset', Js(0.0))
                else:
                    if var.get('isFinite')(var.get('offset')):
                        var.put('offset', (var.get('offset')|Js(0.0)))
                        if var.get('isFinite')(var.get('length')):
                            var.put('length', (var.get('length')|Js(0.0)))
                            if PyJsStrictEq(var.get('encoding'),var.get('undefined')):
                                var.put('encoding', Js('utf8'))
                        else:
                            var.put('encoding', var.get('length'))
                            var.put('length', var.get('undefined'))
                    else:
                        var.put('swap', var.get('encoding'))
                        var.put('encoding', var.get('offset'))
                        var.put('offset', (var.get('length')|Js(0.0)))
                        var.put('length', var.get('swap'))
            var.put('remaining', (var.get("this").get('length')-var.get('offset')))
            if (PyJsStrictEq(var.get('length'),var.get('undefined')) or (var.get('length')>var.get('remaining'))):
                var.put('length', var.get('remaining'))
            if (((var.get('string').get('length')>Js(0.0)) and ((var.get('length')<Js(0.0)) or (var.get('offset')<Js(0.0)))) or (var.get('offset')>var.get("this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('attempt to write outside buffer bounds')))
                raise PyJsTempException
            if var.get('encoding').neg():
                var.put('encoding', Js('utf8'))
            var.put('loweredCase', Js(False))
            #for JS loop
            
            while 1:
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('hexWrite')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8Write')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        return var.get('asciiWrite')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return var.get('binaryWrite')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64Write')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return var.get('ucs2Write')(var.get("this"), var.get('string'), var.get('offset'), var.get('length'))
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                        var.put('loweredCase', var.get('true'))
                    SWITCHED = True
                    break
            
        PyJs_write_4231_._set_name('write')
        var.get('Buffer').get('prototype').put('write', PyJs_write_4231_)
        @Js
        def PyJs_toJSON_4232_(this, arguments, var=var):
            var = Scope({'this':this, 'toJSON':PyJs_toJSON_4232_, 'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_4233_ = Js({'type':Js('Buffer'),'data':var.get('Array').get('prototype').get('slice').callprop('call', (var.get("this").get('_arr') or var.get("this")), Js(0.0))})
            return PyJs_Object_4233_
        PyJs_toJSON_4232_._set_name('toJSON')
        var.get('Buffer').get('prototype').put('toJSON', PyJs_toJSON_4232_)
        pass
        pass
        var.put('MAX_ARGUMENTS_LENGTH', Js(4096))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_slice_4234_(start, end, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'slice':PyJs_slice_4234_, 'end':end, 'arguments':arguments}, var)
            var.registers(['end', 'i', 'len', 'start', 'newBuf', 'sliceLen'])
            var.put('len', var.get("this").get('length'))
            var.put('start', (~(~var.get('start'))))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else (~(~var.get('end')))))
            if (var.get('start')<Js(0.0)):
                var.put('start', var.get('len'), '+')
                if (var.get('start')<Js(0.0)):
                    var.put('start', Js(0.0))
            else:
                if (var.get('start')>var.get('len')):
                    var.put('start', var.get('len'))
            if (var.get('end')<Js(0.0)):
                var.put('end', var.get('len'), '+')
                if (var.get('end')<Js(0.0)):
                    var.put('end', Js(0.0))
            else:
                if (var.get('end')>var.get('len')):
                    var.put('end', var.get('len'))
            if (var.get('end')<var.get('start')):
                var.put('end', var.get('start'))
            pass
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.put('newBuf', var.get("this").callprop('subarray', var.get('start'), var.get('end')))
                var.get('newBuf').put('__proto__', var.get('Buffer').get('prototype'))
            else:
                var.put('sliceLen', (var.get('end')-var.get('start')))
                var.put('newBuf', var.get('Buffer').create(var.get('sliceLen'), var.get('undefined')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('sliceLen')):
                    try:
                        var.get('newBuf').put(var.get('i'), var.get("this").get((var.get('i')+var.get('start'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('newBuf').get('length'):
                var.get('newBuf').put('parent', (var.get("this").get('parent') or var.get("this")))
            return var.get('newBuf')
        PyJs_slice_4234_._set_name('slice')
        var.get('Buffer').get('prototype').put('slice', PyJs_slice_4234_)
        pass
        @Js
        def PyJs_readUIntLE_4235_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'offset':offset, 'readUIntLE':PyJs_readUIntLE_4235_}, var)
            var.registers(['byteLength', 'noAssert', 'val', 'i', 'offset', 'mul'])
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get("this").get('length'))
            var.put('val', var.get("this").get(var.get('offset')))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get("this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
            return var.get('val')
        PyJs_readUIntLE_4235_._set_name('readUIntLE')
        var.get('Buffer').get('prototype').put('readUIntLE', PyJs_readUIntLE_4235_)
        @Js
        def PyJs_readUIntBE_4236_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'readUIntBE':PyJs_readUIntBE_4236_, 'offset':offset, 'arguments':arguments}, var)
            var.registers(['byteLength', 'mul', 'noAssert', 'val', 'offset'])
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get("this").get('length'))
            var.put('val', var.get("this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1)))))
            var.put('mul', Js(1.0))
            while ((var.get('byteLength')>Js(0.0)) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get("this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1))))*var.get('mul')), '+')
            return var.get('val')
        PyJs_readUIntBE_4236_._set_name('readUIntBE')
        var.get('Buffer').get('prototype').put('readUIntBE', PyJs_readUIntBE_4236_)
        @Js
        def PyJs_readUInt8_4237_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'noAssert':noAssert, 'arguments':arguments, 'readUInt8':PyJs_readUInt8_4237_, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(1.0), var.get("this").get('length'))
            return var.get("this").get(var.get('offset'))
        PyJs_readUInt8_4237_._set_name('readUInt8')
        var.get('Buffer').get('prototype').put('readUInt8', PyJs_readUInt8_4237_)
        @Js
        def PyJs_readUInt16LE_4238_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'noAssert':noAssert, 'readUInt16LE':PyJs_readUInt16LE_4238_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get("this").get('length'))
            return (var.get("this").get(var.get('offset'))|(var.get("this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))
        PyJs_readUInt16LE_4238_._set_name('readUInt16LE')
        var.get('Buffer').get('prototype').put('readUInt16LE', PyJs_readUInt16LE_4238_)
        @Js
        def PyJs_readUInt16BE_4239_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readUInt16BE':PyJs_readUInt16BE_4239_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get("this").get('length'))
            return ((var.get("this").get(var.get('offset'))<<Js(8.0))|var.get("this").get((var.get('offset')+Js(1.0))))
        PyJs_readUInt16BE_4239_._set_name('readUInt16BE')
        var.get('Buffer').get('prototype').put('readUInt16BE', PyJs_readUInt16BE_4239_)
        @Js
        def PyJs_readUInt32LE_4240_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readUInt32LE':PyJs_readUInt32LE_4240_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return (((var.get("this").get(var.get('offset'))|(var.get("this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get("this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))+(var.get("this").get((var.get('offset')+Js(3.0)))*Js(16777216)))
        PyJs_readUInt32LE_4240_._set_name('readUInt32LE')
        var.get('Buffer').get('prototype').put('readUInt32LE', PyJs_readUInt32LE_4240_)
        @Js
        def PyJs_readUInt32BE_4241_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'noAssert':noAssert, 'readUInt32BE':PyJs_readUInt32BE_4241_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return ((var.get("this").get(var.get('offset'))*Js(16777216))+(((var.get("this").get((var.get('offset')+Js(1.0)))<<Js(16.0))|(var.get("this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get("this").get((var.get('offset')+Js(3.0)))))
        PyJs_readUInt32BE_4241_._set_name('readUInt32BE')
        var.get('Buffer').get('prototype').put('readUInt32BE', PyJs_readUInt32BE_4241_)
        @Js
        def PyJs_readIntLE_4242_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'readIntLE':PyJs_readIntLE_4242_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['byteLength', 'noAssert', 'val', 'i', 'offset', 'mul'])
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get("this").get('length'))
            var.put('val', var.get("this").get(var.get('offset')))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get("this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
            var.put('mul', Js(128), '*')
            if (var.get('val')>=var.get('mul')):
                var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
            return var.get('val')
        PyJs_readIntLE_4242_._set_name('readIntLE')
        var.get('Buffer').get('prototype').put('readIntLE', PyJs_readIntLE_4242_)
        @Js
        def PyJs_readIntBE_4243_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'readIntBE':PyJs_readIntBE_4243_, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['byteLength', 'noAssert', 'val', 'i', 'offset', 'mul'])
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get("this").get('length'))
            var.put('i', var.get('byteLength'))
            var.put('mul', Js(1.0))
            var.put('val', var.get("this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1)))))
            while ((var.get('i')>Js(0.0)) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get("this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1))))*var.get('mul')), '+')
            var.put('mul', Js(128), '*')
            if (var.get('val')>=var.get('mul')):
                var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
            return var.get('val')
        PyJs_readIntBE_4243_._set_name('readIntBE')
        var.get('Buffer').get('prototype').put('readIntBE', PyJs_readIntBE_4243_)
        @Js
        def PyJs_readInt8_4244_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'noAssert':noAssert, 'readInt8':PyJs_readInt8_4244_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(1.0), var.get("this").get('length'))
            if (var.get("this").get(var.get('offset'))&Js(128)).neg():
                return var.get("this").get(var.get('offset'))
            return (((Js(255)-var.get("this").get(var.get('offset')))+Js(1.0))*(-Js(1.0)))
        PyJs_readInt8_4244_._set_name('readInt8')
        var.get('Buffer').get('prototype').put('readInt8', PyJs_readInt8_4244_)
        @Js
        def PyJs_readInt16LE_4245_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readInt16LE':PyJs_readInt16LE_4245_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'val', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get("this").get('length'))
            var.put('val', (var.get("this").get(var.get('offset'))|(var.get("this").get((var.get('offset')+Js(1.0)))<<Js(8.0))))
            return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
        PyJs_readInt16LE_4245_._set_name('readInt16LE')
        var.get('Buffer').get('prototype').put('readInt16LE', PyJs_readInt16LE_4245_)
        @Js
        def PyJs_readInt16BE_4246_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readInt16BE':PyJs_readInt16BE_4246_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'val', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get("this").get('length'))
            var.put('val', (var.get("this").get((var.get('offset')+Js(1.0)))|(var.get("this").get(var.get('offset'))<<Js(8.0))))
            return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
        PyJs_readInt16BE_4246_._set_name('readInt16BE')
        var.get('Buffer').get('prototype').put('readInt16BE', PyJs_readInt16BE_4246_)
        @Js
        def PyJs_readInt32LE_4247_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readInt32LE':PyJs_readInt32LE_4247_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return (((var.get("this").get(var.get('offset'))|(var.get("this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get("this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))|(var.get("this").get((var.get('offset')+Js(3.0)))<<Js(24.0)))
        PyJs_readInt32LE_4247_._set_name('readInt32LE')
        var.get('Buffer').get('prototype').put('readInt32LE', PyJs_readInt32LE_4247_)
        @Js
        def PyJs_readInt32BE_4248_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readInt32BE':PyJs_readInt32BE_4248_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return ((((var.get("this").get(var.get('offset'))<<Js(24.0))|(var.get("this").get((var.get('offset')+Js(1.0)))<<Js(16.0)))|(var.get("this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get("this").get((var.get('offset')+Js(3.0))))
        PyJs_readInt32BE_4248_._set_name('readInt32BE')
        var.get('Buffer').get('prototype').put('readInt32BE', PyJs_readInt32BE_4248_)
        @Js
        def PyJs_readFloatLE_4249_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readFloatLE':PyJs_readFloatLE_4249_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return var.get('ieee754').callprop('read', var.get("this"), var.get('offset'), var.get('true'), Js(23.0), Js(4.0))
        PyJs_readFloatLE_4249_._set_name('readFloatLE')
        var.get('Buffer').get('prototype').put('readFloatLE', PyJs_readFloatLE_4249_)
        @Js
        def PyJs_readFloatBE_4250_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readFloatBE':PyJs_readFloatBE_4250_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get("this").get('length'))
            return var.get('ieee754').callprop('read', var.get("this"), var.get('offset'), Js(False), Js(23.0), Js(4.0))
        PyJs_readFloatBE_4250_._set_name('readFloatBE')
        var.get('Buffer').get('prototype').put('readFloatBE', PyJs_readFloatBE_4250_)
        @Js
        def PyJs_readDoubleLE_4251_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'noAssert':noAssert, 'arguments':arguments, 'readDoubleLE':PyJs_readDoubleLE_4251_, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(8.0), var.get("this").get('length'))
            return var.get('ieee754').callprop('read', var.get("this"), var.get('offset'), var.get('true'), Js(52.0), Js(8.0))
        PyJs_readDoubleLE_4251_._set_name('readDoubleLE')
        var.get('Buffer').get('prototype').put('readDoubleLE', PyJs_readDoubleLE_4251_)
        @Js
        def PyJs_readDoubleBE_4252_(offset, noAssert, this, arguments, var=var):
            var = Scope({'this':this, 'readDoubleBE':PyJs_readDoubleBE_4252_, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'offset'])
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(8.0), var.get("this").get('length'))
            return var.get('ieee754').callprop('read', var.get("this"), var.get('offset'), Js(False), Js(52.0), Js(8.0))
        PyJs_readDoubleBE_4252_._set_name('readDoubleBE')
        var.get('Buffer').get('prototype').put('readDoubleBE', PyJs_readDoubleBE_4252_)
        pass
        @Js
        def PyJs_writeUIntLE_4253_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'writeUIntLE':PyJs_writeUIntLE_4253_, 'value':value}, var)
            var.registers(['byteLength', 'noAssert', 'i', 'value', 'offset', 'mul'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), Js(0.0))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.get("this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeUIntLE_4253_._set_name('writeUIntLE')
        var.get('Buffer').get('prototype').put('writeUIntLE', PyJs_writeUIntLE_4253_)
        @Js
        def PyJs_writeUIntBE_4254_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'writeUIntBE':PyJs_writeUIntBE_4254_, 'value':value}, var)
            var.registers(['byteLength', 'noAssert', 'i', 'value', 'offset', 'mul'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            var.put('byteLength', (var.get('byteLength')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), Js(0.0))
            var.put('i', (var.get('byteLength')-Js(1.0)))
            var.put('mul', Js(1.0))
            var.get("this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                var.get("this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeUIntBE_4254_._set_name('writeUIntBE')
        var.get('Buffer').get('prototype').put('writeUIntBE', PyJs_writeUIntBE_4254_)
        @Js
        def PyJs_writeUInt8_4255_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'writeUInt8':PyJs_writeUInt8_4255_, 'value':value, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(1.0), Js(255), Js(0.0))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg():
                var.put('value', var.get('Math').callprop('floor', var.get('value')))
            var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(1.0))
        PyJs_writeUInt8_4255_._set_name('writeUInt8')
        var.get('Buffer').get('prototype').put('writeUInt8', PyJs_writeUInt8_4255_)
        pass
        @Js
        def PyJs_writeUInt16LE_4256_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'writeUInt16LE':PyJs_writeUInt16LE_4256_, 'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            else:
                var.get('objectWriteUInt16')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'))
            return (var.get('offset')+Js(2.0))
        PyJs_writeUInt16LE_4256_._set_name('writeUInt16LE')
        var.get('Buffer').get('prototype').put('writeUInt16LE', PyJs_writeUInt16LE_4256_)
        @Js
        def PyJs_writeUInt16BE_4257_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'writeUInt16BE':PyJs_writeUInt16BE_4257_, 'value':value, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
            else:
                var.get('objectWriteUInt16')(var.get("this"), var.get('value'), var.get('offset'), Js(False))
            return (var.get('offset')+Js(2.0))
        PyJs_writeUInt16BE_4257_._set_name('writeUInt16BE')
        var.get('Buffer').get('prototype').put('writeUInt16BE', PyJs_writeUInt16BE_4257_)
        pass
        @Js
        def PyJs_writeUInt32LE_4258_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'writeUInt32LE':PyJs_writeUInt32LE_4258_, 'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
                var.get("this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
            else:
                var.get('objectWriteUInt32')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'))
            return (var.get('offset')+Js(4.0))
        PyJs_writeUInt32LE_4258_._set_name('writeUInt32LE')
        var.get('Buffer').get('prototype').put('writeUInt32LE', PyJs_writeUInt32LE_4258_)
        @Js
        def PyJs_writeUInt32BE_4259_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'writeUInt32BE':PyJs_writeUInt32BE_4259_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                var.get("this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
            else:
                var.get('objectWriteUInt32')(var.get("this"), var.get('value'), var.get('offset'), Js(False))
            return (var.get('offset')+Js(4.0))
        PyJs_writeUInt32BE_4259_._set_name('writeUInt32BE')
        var.get('Buffer').get('prototype').put('writeUInt32BE', PyJs_writeUInt32BE_4259_)
        @Js
        def PyJs_writeIntLE_4260_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'writeIntLE':PyJs_writeIntLE_4260_, 'value':value}, var)
            var.registers(['byteLength', 'noAssert', 'sub', 'i', 'value', 'limit', 'offset', 'mul'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
            var.put('i', Js(0.0))
            var.put('mul', Js(1.0))
            var.put('sub', (Js(1.0) if (var.get('value')<Js(0.0)) else Js(0.0)))
            var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.get("this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeIntLE_4260_._set_name('writeIntLE')
        var.get('Buffer').get('prototype').put('writeIntLE', PyJs_writeIntLE_4260_)
        @Js
        def PyJs_writeIntBE_4261_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'byteLength':byteLength, 'noAssert':noAssert, 'arguments':arguments, 'offset':offset, 'this':this, 'writeIntBE':PyJs_writeIntBE_4261_, 'value':value}, var)
            var.registers(['byteLength', 'noAssert', 'sub', 'i', 'value', 'limit', 'offset', 'mul'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
            var.put('i', (var.get('byteLength')-Js(1.0)))
            var.put('mul', Js(1.0))
            var.put('sub', (Js(1.0) if (var.get('value')<Js(0.0)) else Js(0.0)))
            var.get("this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                var.get("this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeIntBE_4261_._set_name('writeIntBE')
        var.get('Buffer').get('prototype').put('writeIntBE', PyJs_writeIntBE_4261_)
        @Js
        def PyJs_writeInt8_4262_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'writeInt8':PyJs_writeInt8_4262_, 'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(1.0), Js(127), (-Js(128)))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg():
                var.put('value', var.get('Math').callprop('floor', var.get('value')))
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(255)+var.get('value'))+Js(1.0)))
            var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(1.0))
        PyJs_writeInt8_4262_._set_name('writeInt8')
        var.get('Buffer').get('prototype').put('writeInt8', PyJs_writeInt8_4262_)
        @Js
        def PyJs_writeInt16LE_4263_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'writeInt16LE':PyJs_writeInt16LE_4263_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            else:
                var.get('objectWriteUInt16')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'))
            return (var.get('offset')+Js(2.0))
        PyJs_writeInt16LE_4263_._set_name('writeInt16LE')
        var.get('Buffer').get('prototype').put('writeInt16LE', PyJs_writeInt16LE_4263_)
        @Js
        def PyJs_writeInt16BE_4264_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset, 'writeInt16BE':PyJs_writeInt16BE_4264_}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
            else:
                var.get('objectWriteUInt16')(var.get("this"), var.get('value'), var.get('offset'), Js(False))
            return (var.get('offset')+Js(2.0))
        PyJs_writeInt16BE_4264_._set_name('writeInt16BE')
        var.get('Buffer').get('prototype').put('writeInt16BE', PyJs_writeInt16BE_4264_)
        @Js
        def PyJs_writeInt32LE_4265_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset, 'writeInt32LE':PyJs_writeInt32LE_4265_}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), (var.get('value')&Js(255)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                var.get("this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
            else:
                var.get('objectWriteUInt32')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'))
            return (var.get('offset')+Js(4.0))
        PyJs_writeInt32LE_4265_._set_name('writeInt32LE')
        var.get('Buffer').get('prototype').put('writeInt32LE', PyJs_writeInt32LE_4265_)
        @Js
        def PyJs_writeInt32BE_4266_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'writeInt32BE':PyJs_writeInt32BE_4266_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            var.put('value', (+var.get('value')))
            var.put('offset', (var.get('offset')|Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get("this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(4294967295)+var.get('value'))+Js(1.0)))
            if var.get('Buffer').get('TYPED_ARRAY_SUPPORT'):
                var.get("this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                var.get("this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                var.get("this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                var.get("this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
            else:
                var.get('objectWriteUInt32')(var.get("this"), var.get('value'), var.get('offset'), Js(False))
            return (var.get('offset')+Js(4.0))
        PyJs_writeInt32BE_4266_._set_name('writeInt32BE')
        var.get('Buffer').get('prototype').put('writeInt32BE', PyJs_writeInt32BE_4266_)
        pass
        pass
        @Js
        def PyJs_writeFloatLE_4267_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset, 'writeFloatLE':PyJs_writeFloatLE_4267_}, var)
            var.registers(['noAssert', 'value', 'offset'])
            return var.get('writeFloat')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'), var.get('noAssert'))
        PyJs_writeFloatLE_4267_._set_name('writeFloatLE')
        var.get('Buffer').get('prototype').put('writeFloatLE', PyJs_writeFloatLE_4267_)
        @Js
        def PyJs_writeFloatBE_4268_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'writeFloatBE':PyJs_writeFloatBE_4268_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            return var.get('writeFloat')(var.get("this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
        PyJs_writeFloatBE_4268_._set_name('writeFloatBE')
        var.get('Buffer').get('prototype').put('writeFloatBE', PyJs_writeFloatBE_4268_)
        pass
        @Js
        def PyJs_writeDoubleLE_4269_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'writeDoubleLE':PyJs_writeDoubleLE_4269_, 'arguments':arguments, 'offset':offset}, var)
            var.registers(['noAssert', 'value', 'offset'])
            return var.get('writeDouble')(var.get("this"), var.get('value'), var.get('offset'), var.get('true'), var.get('noAssert'))
        PyJs_writeDoubleLE_4269_._set_name('writeDoubleLE')
        var.get('Buffer').get('prototype').put('writeDoubleLE', PyJs_writeDoubleLE_4269_)
        @Js
        def PyJs_writeDoubleBE_4270_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'noAssert':noAssert, 'this':this, 'value':value, 'arguments':arguments, 'offset':offset, 'writeDoubleBE':PyJs_writeDoubleBE_4270_}, var)
            var.registers(['noAssert', 'value', 'offset'])
            return var.get('writeDouble')(var.get("this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
        PyJs_writeDoubleBE_4270_._set_name('writeDoubleBE')
        var.get('Buffer').get('prototype').put('writeDoubleBE', PyJs_writeDoubleBE_4270_)
        @Js
        def PyJs_copy_4271_(target, targetStart, start, end, this, arguments, var=var):
            var = Scope({'start':start, 'targetStart':targetStart, 'end':end, 'target':target, 'this':this, 'copy':PyJs_copy_4271_, 'arguments':arguments}, var)
            var.registers(['targetStart', 'end', 'target', 'i', 'len', 'start'])
            if var.get('start').neg():
                var.put('start', Js(0.0))
            if (var.get('end').neg() and PyJsStrictNeq(var.get('end'),Js(0.0))):
                var.put('end', var.get("this").get('length'))
            if (var.get('targetStart')>=var.get('target').get('length')):
                var.put('targetStart', var.get('target').get('length'))
            if var.get('targetStart').neg():
                var.put('targetStart', Js(0.0))
            if ((var.get('end')>Js(0.0)) and (var.get('end')<var.get('start'))):
                var.put('end', var.get('start'))
            if PyJsStrictEq(var.get('end'),var.get('start')):
                return Js(0.0)
            if (PyJsStrictEq(var.get('target').get('length'),Js(0.0)) or PyJsStrictEq(var.get("this").get('length'),Js(0.0))):
                return Js(0.0)
            if (var.get('targetStart')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('targetStart out of bounds')))
                raise PyJsTempException
            if ((var.get('start')<Js(0.0)) or (var.get('start')>=var.get("this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('sourceStart out of bounds')))
                raise PyJsTempException
            if (var.get('end')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('sourceEnd out of bounds')))
                raise PyJsTempException
            if (var.get('end')>var.get("this").get('length')):
                var.put('end', var.get("this").get('length'))
            if ((var.get('target').get('length')-var.get('targetStart'))<(var.get('end')-var.get('start'))):
                var.put('end', ((var.get('target').get('length')-var.get('targetStart'))+var.get('start')))
            var.put('len', (var.get('end')-var.get('start')))
            pass
            if ((PyJsStrictEq(var.get("this"),var.get('target')) and (var.get('start')<var.get('targetStart'))) and (var.get('targetStart')<var.get('end'))):
                #for JS loop
                var.put('i', (var.get('len')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.get('target').put((var.get('i')+var.get('targetStart')), var.get("this").get((var.get('i')+var.get('start'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            else:
                if ((var.get('len')<Js(1000.0)) or var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg()):
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('target').put((var.get('i')+var.get('targetStart')), var.get("this").get((var.get('i')+var.get('start'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                else:
                    var.get('Uint8Array').get('prototype').get('set').callprop('call', var.get('target'), var.get("this").callprop('subarray', var.get('start'), (var.get('start')+var.get('len'))), var.get('targetStart'))
            return var.get('len')
        PyJs_copy_4271_._set_name('copy')
        var.get('Buffer').get('prototype').put('copy', PyJs_copy_4271_)
        @Js
        def PyJs_fill_4272_(value, start, end, this, arguments, var=var):
            var = Scope({'end':end, 'this':this, 'value':value, 'start':start, 'arguments':arguments, 'fill':PyJs_fill_4272_}, var)
            var.registers(['end', 'i', 'bytes', 'value', 'start', 'len'])
            if var.get('value').neg():
                var.put('value', Js(0.0))
            if var.get('start').neg():
                var.put('start', Js(0.0))
            if var.get('end').neg():
                var.put('end', var.get("this").get('length'))
            if (var.get('end')<var.get('start')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('end < start')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('end'),var.get('start')):
                return var.get('undefined')
            if PyJsStrictEq(var.get("this").get('length'),Js(0.0)):
                return var.get('undefined')
            if ((var.get('start')<Js(0.0)) or (var.get('start')>=var.get("this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('start out of bounds')))
                raise PyJsTempException
            if ((var.get('end')<Js(0.0)) or (var.get('end')>var.get("this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('end out of bounds')))
                raise PyJsTempException
            pass
            if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('number')):
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('end')):
                    try:
                        var.get("this").put(var.get('i'), var.get('value'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                var.put('bytes', var.get('utf8ToBytes')(var.get('value').callprop('toString')))
                var.put('len', var.get('bytes').get('length'))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('end')):
                    try:
                        var.get("this").put(var.get('i'), var.get('bytes').get((var.get('i')%var.get('len'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get("this")
        PyJs_fill_4272_._set_name('fill')
        var.get('Buffer').get('prototype').put('fill', PyJs_fill_4272_)
        var.put('INVALID_BASE64_RE', JsRegExp('/[^+\\/0-9A-Za-z-_]/g'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_4217_._set_name('anonymous')
    PyJs_anonymous_4217_.callprop('call', var.get("this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_4216_))))
PyJs_anonymous_4215_._set_name('anonymous')
PyJs_Object_4273_ = Js({'base64-js':Js(526.0),'ieee754':Js(527.0),'isarray':Js(528.0)})
@Js
def PyJs_anonymous_4274_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['tripletToBase64', 'Arr', 'fromByteArray', 'require', 'exports', 'encodeChunk', 'init', 'toByteArray', 'lookup', 'module', 'revLookup'])
    @Js
    def PyJsHoisted_tripletToBase64_(num, this, arguments, var=var):
        var = Scope({'this':this, 'num':num, 'arguments':arguments}, var)
        var.registers(['num'])
        return (((var.get('lookup').get(((var.get('num')>>Js(18.0))&Js(63)))+var.get('lookup').get(((var.get('num')>>Js(12.0))&Js(63))))+var.get('lookup').get(((var.get('num')>>Js(6.0))&Js(63))))+var.get('lookup').get((var.get('num')&Js(63))))
    PyJsHoisted_tripletToBase64_.__name__ = 'tripletToBase64'
    var.put('tripletToBase64', PyJsHoisted_tripletToBase64_)
    @Js
    def PyJsHoisted_init_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'code', 'len'])
        var.put('code', Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('code').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('lookup').put(var.get('i'), var.get('code').get(var.get('i')))
                var.get('revLookup').put(var.get('code').callprop('charCodeAt', var.get('i')), var.get('i'))
            finally:
                    var.put('i',Js(var.get('i').to_number())+Js(1))
        var.get('revLookup').put(Js('-').callprop('charCodeAt', Js(0.0)), Js(62.0))
        var.get('revLookup').put(Js('_').callprop('charCodeAt', Js(0.0)), Js(63.0))
    PyJsHoisted_init_.__name__ = 'init'
    var.put('init', PyJsHoisted_init_)
    @Js
    def PyJsHoisted_toByteArray_(b64, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'b64':b64}, var)
        var.registers(['tmp', 'arr', 'b64', 'i', 'j', 'l', 'len', 'L', 'placeHolders'])
        pass
        var.put('len', var.get('b64').get('length'))
        if ((var.get('len')%Js(4.0))>Js(0.0)):
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid string. Length must be a multiple of 4')))
            raise PyJsTempException
        var.put('placeHolders', (Js(2.0) if PyJsStrictEq(var.get('b64').get((var.get('len')-Js(2.0))),Js('=')) else (Js(1.0) if PyJsStrictEq(var.get('b64').get((var.get('len')-Js(1.0))),Js('=')) else Js(0.0))))
        var.put('arr', var.get('Arr').create((((var.get('len')*Js(3.0))/Js(4.0))-var.get('placeHolders'))))
        var.put('l', ((var.get('len')-Js(4.0)) if (var.get('placeHolders')>Js(0.0)) else var.get('len')))
        var.put('L', Js(0.0))
        #for JS loop
        PyJsComma(var.put('i', Js(0.0)),var.put('j', Js(0.0)))
        while (var.get('i')<var.get('l')):
            try:
                def PyJs_LONG_4275_(var=var):
                    return var.put('tmp', ((((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(18.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(12.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))<<Js(6.0)))|var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(3.0))))))
                PyJs_LONG_4275_()
                var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(16.0))&Js(255)))
                var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            finally:
                    PyJsComma(var.put('i', Js(4.0), '+'),var.put('j', Js(3.0), '+'))
        if PyJsStrictEq(var.get('placeHolders'),Js(2.0)):
            var.put('tmp', ((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(2.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))>>Js(4.0))))
            var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
        else:
            if PyJsStrictEq(var.get('placeHolders'),Js(1.0)):
                var.put('tmp', (((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(10.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(4.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))>>Js(2.0))))
                var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                var.get('arr').put((var.put('L',Js(var.get('L').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
        return var.get('arr')
    PyJsHoisted_toByteArray_.__name__ = 'toByteArray'
    var.put('toByteArray', PyJsHoisted_toByteArray_)
    @Js
    def PyJsHoisted_fromByteArray_(uint8, this, arguments, var=var):
        var = Scope({'this':this, 'uint8':uint8, 'arguments':arguments}, var)
        var.registers(['tmp', 'i', 'uint8', 'len', 'len2', 'parts', 'extraBytes', 'output', 'maxChunkLength'])
        pass
        var.put('len', var.get('uint8').get('length'))
        var.put('extraBytes', (var.get('len')%Js(3.0)))
        var.put('output', Js(''))
        var.put('parts', Js([]))
        var.put('maxChunkLength', Js(16383.0))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len2', (var.get('len')-var.get('extraBytes')))
        while (var.get('i')<var.get('len2')):
            try:
                var.get('parts').callprop('push', var.get('encodeChunk')(var.get('uint8'), var.get('i'), (var.get('len2') if ((var.get('i')+var.get('maxChunkLength'))>var.get('len2')) else (var.get('i')+var.get('maxChunkLength')))))
            finally:
                    var.put('i', var.get('maxChunkLength'), '+')
        if PyJsStrictEq(var.get('extraBytes'),Js(1.0)):
            var.put('tmp', var.get('uint8').get((var.get('len')-Js(1.0))))
            var.put('output', var.get('lookup').get((var.get('tmp')>>Js(2.0))), '+')
            var.put('output', var.get('lookup').get(((var.get('tmp')<<Js(4.0))&Js(63))), '+')
            var.put('output', Js('=='), '+')
        else:
            if PyJsStrictEq(var.get('extraBytes'),Js(2.0)):
                var.put('tmp', ((var.get('uint8').get((var.get('len')-Js(2.0)))<<Js(8.0))+var.get('uint8').get((var.get('len')-Js(1.0)))))
                var.put('output', var.get('lookup').get((var.get('tmp')>>Js(10.0))), '+')
                var.put('output', var.get('lookup').get(((var.get('tmp')>>Js(4.0))&Js(63))), '+')
                var.put('output', var.get('lookup').get(((var.get('tmp')<<Js(2.0))&Js(63))), '+')
                var.put('output', Js('='), '+')
        var.get('parts').callprop('push', var.get('output'))
        return var.get('parts').callprop('join', Js(''))
    PyJsHoisted_fromByteArray_.__name__ = 'fromByteArray'
    var.put('fromByteArray', PyJsHoisted_fromByteArray_)
    @Js
    def PyJsHoisted_encodeChunk_(uint8, start, end, this, arguments, var=var):
        var = Scope({'this':this, 'start':start, 'end':end, 'uint8':uint8, 'arguments':arguments}, var)
        var.registers(['tmp', 'end', 'i', 'uint8', 'start', 'output'])
        pass
        var.put('output', Js([]))
        #for JS loop
        var.put('i', var.get('start'))
        while (var.get('i')<var.get('end')):
            try:
                var.put('tmp', (((var.get('uint8').get(var.get('i'))<<Js(16.0))+(var.get('uint8').get((var.get('i')+Js(1.0)))<<Js(8.0)))+var.get('uint8').get((var.get('i')+Js(2.0)))))
                var.get('output').callprop('push', var.get('tripletToBase64')(var.get('tmp')))
            finally:
                    var.put('i', Js(3.0), '+')
        return var.get('output').callprop('join', Js(''))
    PyJsHoisted_encodeChunk_.__name__ = 'encodeChunk'
    var.put('encodeChunk', PyJsHoisted_encodeChunk_)
    Js('use strict')
    var.get('exports').put('toByteArray', var.get('toByteArray'))
    var.get('exports').put('fromByteArray', var.get('fromByteArray'))
    var.put('lookup', Js([]))
    var.put('revLookup', Js([]))
    var.put('Arr', (var.get('Uint8Array') if PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Array')))
    pass
    var.get('init')()
    pass
    pass
    pass
    pass
PyJs_anonymous_4274_._set_name('anonymous')
PyJs_Object_4276_ = Js({})
@Js
def PyJs_anonymous_4277_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_4278_(buffer, offset, isLE, mLen, nBytes, this, arguments, var=var):
        var = Scope({'this':this, 'nBytes':nBytes, 'mLen':mLen, 'offset':offset, 'buffer':buffer, 'isLE':isLE, 'arguments':arguments}, var)
        var.registers(['nBits', 'e', 'd', 'mLen', 'i', 'eMax', 'offset', 'm', 'eLen', 'buffer', 's', 'nBytes', 'eBias', 'isLE'])
        pass
        var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
        var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
        var.put('eBias', (var.get('eMax')>>Js(1.0)))
        var.put('nBits', (-Js(7.0)))
        var.put('i', ((var.get('nBytes')-Js(1.0)) if var.get('isLE') else Js(0.0)))
        var.put('d', ((-Js(1.0)) if var.get('isLE') else Js(1.0)))
        var.put('s', var.get('buffer').get((var.get('offset')+var.get('i'))))
        var.put('i', var.get('d'), '+')
        var.put('e', (var.get('s')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
        var.put('s', (-var.get('nBits')), '>>')
        var.put('nBits', var.get('eLen'), '+')
        #for JS loop
        
        while (var.get('nBits')>Js(0.0)):
            try:
                pass
            finally:
                    PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
        var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
        var.put('e', (-var.get('nBits')), '>>')
        var.put('nBits', var.get('mLen'), '+')
        #for JS loop
        
        while (var.get('nBits')>Js(0.0)):
            try:
                pass
            finally:
                    PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
        if PyJsStrictEq(var.get('e'),Js(0.0)):
            var.put('e', (Js(1.0)-var.get('eBias')))
        else:
            if PyJsStrictEq(var.get('e'),var.get('eMax')):
                return (var.get('NaN') if var.get('m') else (((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('Infinity')))
            else:
                var.put('m', (var.get('m')+var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                var.put('e', (var.get('e')-var.get('eBias')))
        return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('Math').callprop('pow', Js(2.0), (var.get('e')-var.get('mLen'))))
    PyJs_anonymous_4278_._set_name('anonymous')
    var.get('exports').put('read', PyJs_anonymous_4278_)
    @Js
    def PyJs_anonymous_4279_(buffer, value, offset, isLE, mLen, nBytes, this, arguments, var=var):
        var = Scope({'mLen':mLen, 'buffer':buffer, 'value':value, 'this':this, 'nBytes':nBytes, 'offset':offset, 'isLE':isLE, 'arguments':arguments}, var)
        var.registers(['rt', 'c', 'e', 'd', 'mLen', 'i', 'eMax', 'offset', 'm', 'eLen', 'buffer', 's', 'value', 'eBias', 'isLE', 'nBytes'])
        pass
        var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
        var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
        var.put('eBias', (var.get('eMax')>>Js(1.0)))
        var.put('rt', ((var.get('Math').callprop('pow', Js(2.0), (-Js(24.0)))-var.get('Math').callprop('pow', Js(2.0), (-Js(77.0)))) if PyJsStrictEq(var.get('mLen'),Js(23.0)) else Js(0.0)))
        var.put('i', (Js(0.0) if var.get('isLE') else (var.get('nBytes')-Js(1.0))))
        var.put('d', (Js(1.0) if var.get('isLE') else (-Js(1.0))))
        var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
        var.put('value', var.get('Math').callprop('abs', var.get('value')))
        if (var.get('isNaN')(var.get('value')) or PyJsStrictEq(var.get('value'),var.get('Infinity'))):
            var.put('m', (Js(1.0) if var.get('isNaN')(var.get('value')) else Js(0.0)))
            var.put('e', var.get('eMax'))
        else:
            var.put('e', var.get('Math').callprop('floor', (var.get('Math').callprop('log', var.get('value'))/var.get('Math').get('LN2'))))
            if ((var.get('value')*var.put('c', var.get('Math').callprop('pow', Js(2.0), (-var.get('e')))))<Js(1.0)):
                (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                var.put('c', Js(2.0), '*')
            if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                var.put('value', (var.get('rt')/var.get('c')), '+')
            else:
                var.put('value', (var.get('rt')*var.get('Math').callprop('pow', Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
            if ((var.get('value')*var.get('c'))>=Js(2.0)):
                (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                var.put('c', Js(2.0), '/')
            if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                var.put('m', Js(0.0))
                var.put('e', var.get('eMax'))
            else:
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')+var.get('eBias')))
                else:
                    var.put('m', ((var.get('value')*var.get('Math').callprop('pow', Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                    var.put('e', Js(0.0))
        #for JS loop
        
        while (var.get('mLen')>=Js(8.0)):
            try:
                pass
            finally:
                    PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('m')&Js(255))),var.put('i', var.get('d'), '+')),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
        var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
        var.put('eLen', var.get('mLen'), '+')
        #for JS loop
        
        while (var.get('eLen')>Js(0.0)):
            try:
                pass
            finally:
                    PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('e')&Js(255))),var.put('i', var.get('d'), '+')),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
        var.get('buffer').put(((var.get('offset')+var.get('i'))-var.get('d')), (var.get('s')*Js(128.0)), '|')
    PyJs_anonymous_4279_._set_name('anonymous')
    var.get('exports').put('write', PyJs_anonymous_4279_)
PyJs_anonymous_4277_._set_name('anonymous')
PyJs_Object_4280_ = Js({})
@Js
def PyJs_anonymous_4281_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'toString', 'exports', 'module'])
    PyJs_Object_4282_ = Js({})
    var.put('toString', PyJs_Object_4282_.get('toString'))
    @Js
    def PyJs_anonymous_4283_(arr, this, arguments, var=var):
        var = Scope({'this':this, 'arr':arr, 'arguments':arguments}, var)
        var.registers(['arr'])
        return (var.get('toString').callprop('call', var.get('arr'))==Js('[object Array]'))
    PyJs_anonymous_4283_._set_name('anonymous')
    var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_anonymous_4283_))
PyJs_anonymous_4281_._set_name('anonymous')
PyJs_Object_4284_ = Js({})
@Js
def PyJs_anonymous_4285_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    if PyJsStrictEq(var.get('Object').get('create').typeof(),Js('function')):
        @Js
        def PyJs_inherits_4286_(ctor, superCtor, this, arguments, var=var):
            var = Scope({'this':this, 'inherits':PyJs_inherits_4286_, 'superCtor':superCtor, 'arguments':arguments, 'ctor':ctor}, var)
            var.registers(['superCtor', 'ctor'])
            var.get('ctor').put('super_', var.get('superCtor'))
            PyJs_Object_4288_ = Js({'value':var.get('ctor'),'enumerable':Js(False),'writable':var.get('true'),'configurable':var.get('true')})
            PyJs_Object_4287_ = Js({'constructor':PyJs_Object_4288_})
            var.get('ctor').put('prototype', var.get('Object').callprop('create', var.get('superCtor').get('prototype'), PyJs_Object_4287_))
        PyJs_inherits_4286_._set_name('inherits')
        var.get('module').put('exports', PyJs_inherits_4286_)
    else:
        @Js
        def PyJs_inherits_4289_(ctor, superCtor, this, arguments, var=var):
            var = Scope({'this':this, 'inherits':PyJs_inherits_4289_, 'superCtor':superCtor, 'arguments':arguments, 'ctor':ctor}, var)
            var.registers(['TempCtor', 'superCtor', 'ctor'])
            var.get('ctor').put('super_', var.get('superCtor'))
            @Js
            def PyJs_anonymous_4290_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_4290_._set_name('anonymous')
            var.put('TempCtor', PyJs_anonymous_4290_)
            var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
            var.get('ctor').put('prototype', var.get('TempCtor').create())
            var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
        PyJs_inherits_4289_._set_name('inherits')
        var.get('module').put('exports', PyJs_inherits_4289_)
PyJs_anonymous_4285_._set_name('anonymous')
PyJs_Object_4291_ = Js({})
@Js
def PyJs_anonymous_4292_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_anonymous_4293_(process, this, arguments, var=var):
        var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
        var.registers(['splitPath', 'substr', 'process', 'normalizeArray', 'filter', 'splitPathRe'])
        @Js
        def PyJsHoisted_filter_(xs, f, this, arguments, var=var):
            var = Scope({'this':this, 'xs':xs, 'arguments':arguments, 'f':f}, var)
            var.registers(['i', 'res', 'f', 'xs'])
            if var.get('xs').get('filter'):
                return var.get('xs').callprop('filter', var.get('f'))
            var.put('res', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('xs').get('length')):
                try:
                    if var.get('f')(var.get('xs').get(var.get('i')), var.get('i'), var.get('xs')):
                        var.get('res').callprop('push', var.get('xs').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_filter_.__name__ = 'filter'
        var.put('filter', PyJsHoisted_filter_)
        @Js
        def PyJsHoisted_normalizeArray_(parts, allowAboveRoot, this, arguments, var=var):
            var = Scope({'allowAboveRoot':allowAboveRoot, 'this':this, 'parts':parts, 'arguments':arguments}, var)
            var.registers(['i', 'allowAboveRoot', 'parts', 'last', 'up'])
            var.put('up', Js(0.0))
            #for JS loop
            var.put('i', (var.get('parts').get('length')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.put('last', var.get('parts').get(var.get('i')))
                    if PyJsStrictEq(var.get('last'),Js('.')):
                        var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                    else:
                        if PyJsStrictEq(var.get('last'),Js('..')):
                            var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                            (var.put('up',Js(var.get('up').to_number())+Js(1))-Js(1))
                        else:
                            if var.get('up'):
                                var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                                (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            if var.get('allowAboveRoot'):
                #for JS loop
                
                while (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1)):
                    try:
                        var.get('parts').callprop('unshift', Js('..'))
                    finally:
                            var.get('up')
            return var.get('parts')
        PyJsHoisted_normalizeArray_.__name__ = 'normalizeArray'
        var.put('normalizeArray', PyJsHoisted_normalizeArray_)
        pass
        var.put('splitPathRe', JsRegExp('/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/'))
        @Js
        def PyJs_anonymous_4294_(filename, this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'filename':filename}, var)
            var.registers(['filename'])
            return var.get('splitPathRe').callprop('exec', var.get('filename')).callprop('slice', Js(1.0))
        PyJs_anonymous_4294_._set_name('anonymous')
        var.put('splitPath', PyJs_anonymous_4294_)
        @Js
        def PyJs_anonymous_4295_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'resolvedPath', 'path', 'resolvedAbsolute'])
            var.put('resolvedPath', Js(''))
            var.put('resolvedAbsolute', Js(False))
            #for JS loop
            var.put('i', (var.get('arguments').get('length')-Js(1.0)))
            while ((var.get('i')>=(-Js(1.0))) and var.get('resolvedAbsolute').neg()):
                try:
                    var.put('path', (var.get('arguments').get(var.get('i')) if (var.get('i')>=Js(0.0)) else var.get('process').callprop('cwd')))
                    if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Arguments to path.resolve must be strings')))
                        raise PyJsTempException
                    else:
                        if var.get('path').neg():
                            continue
                    var.put('resolvedPath', ((var.get('path')+Js('/'))+var.get('resolvedPath')))
                    var.put('resolvedAbsolute', PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            @Js
            def PyJs_anonymous_4296_(p, this, arguments, var=var):
                var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
                var.registers(['p'])
                return var.get('p').neg().neg()
            PyJs_anonymous_4296_._set_name('anonymous')
            var.put('resolvedPath', var.get('normalizeArray')(var.get('filter')(var.get('resolvedPath').callprop('split', Js('/')), PyJs_anonymous_4296_), var.get('resolvedAbsolute').neg()).callprop('join', Js('/')))
            return (((Js('/') if var.get('resolvedAbsolute') else Js(''))+var.get('resolvedPath')) or Js('.'))
        PyJs_anonymous_4295_._set_name('anonymous')
        var.get('exports').put('resolve', PyJs_anonymous_4295_)
        @Js
        def PyJs_anonymous_4297_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path', 'trailingSlash', 'isAbsolute'])
            var.put('isAbsolute', var.get('exports').callprop('isAbsolute', var.get('path')))
            var.put('trailingSlash', PyJsStrictEq(var.get('substr')(var.get('path'), (-Js(1.0))),Js('/')))
            @Js
            def PyJs_anonymous_4298_(p, this, arguments, var=var):
                var = Scope({'this':this, 'p':p, 'arguments':arguments}, var)
                var.registers(['p'])
                return var.get('p').neg().neg()
            PyJs_anonymous_4298_._set_name('anonymous')
            var.put('path', var.get('normalizeArray')(var.get('filter')(var.get('path').callprop('split', Js('/')), PyJs_anonymous_4298_), var.get('isAbsolute').neg()).callprop('join', Js('/')))
            if (var.get('path').neg() and var.get('isAbsolute').neg()):
                var.put('path', Js('.'))
            if (var.get('path') and var.get('trailingSlash')):
                var.put('path', Js('/'), '+')
            return ((Js('/') if var.get('isAbsolute') else Js(''))+var.get('path'))
        PyJs_anonymous_4297_._set_name('anonymous')
        var.get('exports').put('normalize', PyJs_anonymous_4297_)
        @Js
        def PyJs_anonymous_4299_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path'])
            return PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/'))
        PyJs_anonymous_4299_._set_name('anonymous')
        var.get('exports').put('isAbsolute', PyJs_anonymous_4299_)
        @Js
        def PyJs_anonymous_4300_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['paths'])
            var.put('paths', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments'), Js(0.0)))
            @Js
            def PyJs_anonymous_4301_(p, index, this, arguments, var=var):
                var = Scope({'this':this, 'p':p, 'arguments':arguments, 'index':index}, var)
                var.registers(['p', 'index'])
                if PyJsStrictNeq(var.get('p',throw=False).typeof(),Js('string')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Arguments to path.join must be strings')))
                    raise PyJsTempException
                return var.get('p')
            PyJs_anonymous_4301_._set_name('anonymous')
            return var.get('exports').callprop('normalize', var.get('filter')(var.get('paths'), PyJs_anonymous_4301_).callprop('join', Js('/')))
        PyJs_anonymous_4300_._set_name('anonymous')
        var.get('exports').put('join', PyJs_anonymous_4300_)
        @Js
        def PyJs_anonymous_4302_(PyJsArg_66726f6d_, to, this, arguments, var=var):
            var = Scope({'this':this, 'to':to, 'from':PyJsArg_66726f6d_, 'arguments':arguments}, var)
            var.registers(['trim', 'outputParts', 'i', 'to', 'length', 'toParts', 'from', 'fromParts', 'samePartsLength'])
            @Js
            def PyJsHoisted_trim_(arr, this, arguments, var=var):
                var = Scope({'this':this, 'arr':arr, 'arguments':arguments}, var)
                var.registers(['start', 'arr', 'end'])
                var.put('start', Js(0.0))
                #for JS loop
                
                while (var.get('start')<var.get('arr').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('arr').get(var.get('start')),Js('')):
                            break
                    finally:
                            (var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1))
                var.put('end', (var.get('arr').get('length')-Js(1.0)))
                #for JS loop
                
                while (var.get('end')>=Js(0.0)):
                    try:
                        if PyJsStrictNeq(var.get('arr').get(var.get('end')),Js('')):
                            break
                    finally:
                            (var.put('end',Js(var.get('end').to_number())-Js(1))+Js(1))
                if (var.get('start')>var.get('end')):
                    return Js([])
                return var.get('arr').callprop('slice', var.get('start'), ((var.get('end')-var.get('start'))+Js(1.0)))
            PyJsHoisted_trim_.__name__ = 'trim'
            var.put('trim', PyJsHoisted_trim_)
            var.put('from', var.get('exports').callprop('resolve', var.get('from')).callprop('substr', Js(1.0)))
            var.put('to', var.get('exports').callprop('resolve', var.get('to')).callprop('substr', Js(1.0)))
            pass
            var.put('fromParts', var.get('trim')(var.get('from').callprop('split', Js('/'))))
            var.put('toParts', var.get('trim')(var.get('to').callprop('split', Js('/'))))
            var.put('length', var.get('Math').callprop('min', var.get('fromParts').get('length'), var.get('toParts').get('length')))
            var.put('samePartsLength', var.get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    if PyJsStrictNeq(var.get('fromParts').get(var.get('i')),var.get('toParts').get(var.get('i'))):
                        var.put('samePartsLength', var.get('i'))
                        break
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('outputParts', Js([]))
            #for JS loop
            var.put('i', var.get('samePartsLength'))
            while (var.get('i')<var.get('fromParts').get('length')):
                try:
                    var.get('outputParts').callprop('push', Js('..'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('outputParts', var.get('outputParts').callprop('concat', var.get('toParts').callprop('slice', var.get('samePartsLength'))))
            return var.get('outputParts').callprop('join', Js('/'))
        PyJs_anonymous_4302_._set_name('anonymous')
        var.get('exports').put('relative', PyJs_anonymous_4302_)
        var.get('exports').put('sep', Js('/'))
        var.get('exports').put('delimiter', Js(':'))
        @Js
        def PyJs_anonymous_4303_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path', 'root', 'result', 'dir'])
            var.put('result', var.get('splitPath')(var.get('path')))
            var.put('root', var.get('result').get('0'))
            var.put('dir', var.get('result').get('1'))
            if (var.get('root').neg() and var.get('dir').neg()):
                return Js('.')
            if var.get('dir'):
                var.put('dir', var.get('dir').callprop('substr', Js(0.0), (var.get('dir').get('length')-Js(1.0))))
            return (var.get('root')+var.get('dir'))
        PyJs_anonymous_4303_._set_name('anonymous')
        var.get('exports').put('dirname', PyJs_anonymous_4303_)
        @Js
        def PyJs_anonymous_4304_(path, ext, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'ext':ext, 'arguments':arguments}, var)
            var.registers(['path', 'ext', 'f'])
            var.put('f', var.get('splitPath')(var.get('path')).get('2'))
            if (var.get('ext') and PyJsStrictEq(var.get('f').callprop('substr', ((-Js(1.0))*var.get('ext').get('length'))),var.get('ext'))):
                var.put('f', var.get('f').callprop('substr', Js(0.0), (var.get('f').get('length')-var.get('ext').get('length'))))
            return var.get('f')
        PyJs_anonymous_4304_._set_name('anonymous')
        var.get('exports').put('basename', PyJs_anonymous_4304_)
        @Js
        def PyJs_anonymous_4305_(path, this, arguments, var=var):
            var = Scope({'this':this, 'path':path, 'arguments':arguments}, var)
            var.registers(['path'])
            return var.get('splitPath')(var.get('path')).get('3')
        PyJs_anonymous_4305_._set_name('anonymous')
        var.get('exports').put('extname', PyJs_anonymous_4305_)
        pass
        @Js
        def PyJs_anonymous_4306_(str, start, len, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'len':len, 'str':str, 'arguments':arguments}, var)
            var.registers(['start', 'len', 'str'])
            return var.get('str').callprop('substr', var.get('start'), var.get('len'))
        PyJs_anonymous_4306_._set_name('anonymous')
        @Js
        def PyJs_anonymous_4307_(str, start, len, this, arguments, var=var):
            var = Scope({'this':this, 'start':start, 'len':len, 'str':str, 'arguments':arguments}, var)
            var.registers(['start', 'len', 'str'])
            if (var.get('start')<Js(0.0)):
                var.put('start', (var.get('str').get('length')+var.get('start')))
            return var.get('str').callprop('substr', var.get('start'), var.get('len'))
        PyJs_anonymous_4307_._set_name('anonymous')
        var.put('substr', (PyJs_anonymous_4306_ if PyJsStrictEq(Js('ab').callprop('substr', (-Js(1.0))),Js('b')) else PyJs_anonymous_4307_))
    PyJs_anonymous_4293_._set_name('anonymous')
    PyJs_anonymous_4293_.callprop('call', var.get("this"), var.get('require')(Js('_process')))
PyJs_anonymous_4292_._set_name('anonymous')
PyJs_Object_4308_ = Js({'_process':Js(531.0)})
@Js
def PyJs_anonymous_4309_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['exports', 'cleanUpNextTick', 'currentQueue', 'process', 'require', 'module', 'drainQueue', 'queue', 'Item', 'draining', 'noop', 'queueIndex'])
    @Js
    def PyJsHoisted_Item_(fun, array, this, arguments, var=var):
        var = Scope({'fun':fun, 'this':this, 'array':array, 'arguments':arguments}, var)
        var.registers(['fun', 'array'])
        var.get("this").put('fun', var.get('fun'))
        var.get("this").put('array', var.get('array'))
    PyJsHoisted_Item_.__name__ = 'Item'
    var.put('Item', PyJsHoisted_Item_)
    @Js
    def PyJsHoisted_cleanUpNextTick_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.put('draining', Js(False))
        if var.get('currentQueue').get('length'):
            var.put('queue', var.get('currentQueue').callprop('concat', var.get('queue')))
        else:
            var.put('queueIndex', (-Js(1.0)))
        if var.get('queue').get('length'):
            var.get('drainQueue')()
    PyJsHoisted_cleanUpNextTick_.__name__ = 'cleanUpNextTick'
    var.put('cleanUpNextTick', PyJsHoisted_cleanUpNextTick_)
    @Js
    def PyJsHoisted_noop_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        pass
    PyJsHoisted_noop_.__name__ = 'noop'
    var.put('noop', PyJsHoisted_noop_)
    @Js
    def PyJsHoisted_drainQueue_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['len', 'timeout'])
        if var.get('draining'):
            return var.get('undefined')
        var.put('timeout', var.get('setTimeout')(var.get('cleanUpNextTick')))
        var.put('draining', var.get('true'))
        var.put('len', var.get('queue').get('length'))
        while var.get('len'):
            var.put('currentQueue', var.get('queue'))
            var.put('queue', Js([]))
            while (var.put('queueIndex',Js(var.get('queueIndex').to_number())+Js(1))<var.get('len')):
                if var.get('currentQueue'):
                    var.get('currentQueue').get(var.get('queueIndex')).callprop('run')
            var.put('queueIndex', (-Js(1.0)))
            var.put('len', var.get('queue').get('length'))
        var.put('currentQueue', var.get("null"))
        var.put('draining', Js(False))
        var.get('clearTimeout')(var.get('timeout'))
    PyJsHoisted_drainQueue_.__name__ = 'drainQueue'
    var.put('drainQueue', PyJsHoisted_drainQueue_)
    PyJs_Object_4310_ = Js({})
    var.put('process', var.get('module').put('exports', PyJs_Object_4310_))
    var.put('queue', Js([]))
    var.put('draining', Js(False))
    pass
    var.put('queueIndex', (-Js(1.0)))
    pass
    pass
    @Js
    def PyJs_anonymous_4311_(fun, this, arguments, var=var):
        var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
        var.registers(['i', 'fun', 'args'])
        var.put('args', var.get('Array').create((var.get('arguments').get('length')-Js(1.0))))
        if (var.get('arguments').get('length')>Js(1.0)):
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.get('args').put((var.get('i')-Js(1.0)), var.get('arguments').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        var.get('queue').callprop('push', var.get('Item').create(var.get('fun'), var.get('args')))
        if (PyJsStrictEq(var.get('queue').get('length'),Js(1.0)) and var.get('draining').neg()):
            var.get('setTimeout')(var.get('drainQueue'), Js(0.0))
    PyJs_anonymous_4311_._set_name('anonymous')
    var.get('process').put('nextTick', PyJs_anonymous_4311_)
    pass
    @Js
    def PyJs_anonymous_4312_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        var.get("this").get('fun').callprop('apply', var.get("null"), var.get("this").get('array'))
    PyJs_anonymous_4312_._set_name('anonymous')
    var.get('Item').get('prototype').put('run', PyJs_anonymous_4312_)
    var.get('process').put('title', Js('browser'))
    var.get('process').put('browser', var.get('true'))
    PyJs_Object_4313_ = Js({})
    var.get('process').put('env', PyJs_Object_4313_)
    var.get('process').put('argv', Js([]))
    var.get('process').put('version', Js(''))
    PyJs_Object_4314_ = Js({})
    var.get('process').put('versions', PyJs_Object_4314_)
    pass
    var.get('process').put('on', var.get('noop'))
    var.get('process').put('addListener', var.get('noop'))
    var.get('process').put('once', var.get('noop'))
    var.get('process').put('off', var.get('noop'))
    var.get('process').put('removeListener', var.get('noop'))
    var.get('process').put('removeAllListeners', var.get('noop'))
    var.get('process').put('emit', var.get('noop'))
    @Js
    def PyJs_anonymous_4315_(name, this, arguments, var=var):
        var = Scope({'this':this, 'name':name, 'arguments':arguments}, var)
        var.registers(['name'])
        PyJsTempException = JsToPyException(var.get('Error').create(Js('process.binding is not supported')))
        raise PyJsTempException
    PyJs_anonymous_4315_._set_name('anonymous')
    var.get('process').put('binding', PyJs_anonymous_4315_)
    @Js
    def PyJs_anonymous_4316_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js('/')
    PyJs_anonymous_4316_._set_name('anonymous')
    var.get('process').put('cwd', PyJs_anonymous_4316_)
    @Js
    def PyJs_anonymous_4317_(dir, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'dir':dir}, var)
        var.registers(['dir'])
        PyJsTempException = JsToPyException(var.get('Error').create(Js('process.chdir is not supported')))
        raise PyJsTempException
    PyJs_anonymous_4317_._set_name('anonymous')
    var.get('process').put('chdir', PyJs_anonymous_4317_)
    @Js
    def PyJs_anonymous_4318_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js(0.0)
    PyJs_anonymous_4318_._set_name('anonymous')
    var.get('process').put('umask', PyJs_anonymous_4318_)
PyJs_anonymous_4309_._set_name('anonymous')
PyJs_Object_4319_ = Js({})
@Js
def PyJs_anonymous_4320_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['module', 'require', 'exports', 'WriteStream', 'ReadStream'])
    @Js
    def PyJsHoisted_WriteStream_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJsTempException = JsToPyException(var.get('Error').create(Js('tty.ReadStream is not implemented')))
        raise PyJsTempException
    PyJsHoisted_WriteStream_.__name__ = 'WriteStream'
    var.put('WriteStream', PyJsHoisted_WriteStream_)
    @Js
    def PyJsHoisted_ReadStream_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        PyJsTempException = JsToPyException(var.get('Error').create(Js('tty.ReadStream is not implemented')))
        raise PyJsTempException
    PyJsHoisted_ReadStream_.__name__ = 'ReadStream'
    var.put('ReadStream', PyJsHoisted_ReadStream_)
    @Js
    def PyJs_anonymous_4321_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers([])
        return Js(False)
    PyJs_anonymous_4321_._set_name('anonymous')
    var.get('exports').put('isatty', PyJs_anonymous_4321_)
    pass
    var.get('exports').put('ReadStream', var.get('ReadStream'))
    pass
    var.get('exports').put('WriteStream', var.get('WriteStream'))
PyJs_anonymous_4320_._set_name('anonymous')
PyJs_Object_4322_ = Js({})
@Js
def PyJs_anonymous_4323_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    @Js
    def PyJs_isBuffer_4324_(arg, this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_4324_, 'arg':arg}, var)
        var.registers(['arg'])
        return ((((var.get('arg') and PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('object'))) and PyJsStrictEq(var.get('arg').get('copy').typeof(),Js('function'))) and PyJsStrictEq(var.get('arg').get('fill').typeof(),Js('function'))) and PyJsStrictEq(var.get('arg').get('readUInt8').typeof(),Js('function')))
    PyJs_isBuffer_4324_._set_name('isBuffer')
    var.get('module').put('exports', PyJs_isBuffer_4324_)
PyJs_anonymous_4323_._set_name('anonymous')
PyJs_Object_4325_ = Js({})
@Js
def PyJs_anonymous_4326_(require, module, exports, this, arguments, var=var):
    var = Scope({'this':this, 'require':require, 'exports':exports, 'module':module, 'arguments':arguments}, var)
    var.registers(['require', 'exports', 'module'])
    def PyJs_LONG_4350_(var=var):
        PyJs_Object_4327_ = Js({})
        @Js
        def PyJs_anonymous_4328_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'global':PyJsArg_676c6f62616c_, 'arguments':arguments}, var)
            var.registers(['isArray', 'months', 'process', 'global', 'arrayToHash', 'isFunction', 'isBoolean', 'objectToString', 'debugEnviron', 'isError', 'formatProperty', 'formatError', 'formatArray', 'pad', 'stylizeWithColor', 'isRegExp', 'stylizeNoColor', 'debugs', 'timestamp', 'inspect', 'formatPrimitive', 'hasOwnProperty', 'isNumber', 'isObject', 'reduceToSingleString', 'isNullOrUndefined', 'isDate', 'isString', 'isPrimitive', 'formatValue', 'formatRegExp', 'isNull', 'isUndefined', 'isSymbol'])
            @Js
            def PyJsHoisted_isArray_(ar, this, arguments, var=var):
                var = Scope({'this':this, 'ar':ar, 'arguments':arguments}, var)
                var.registers(['ar'])
                return var.get('Array').callprop('isArray', var.get('ar'))
            PyJsHoisted_isArray_.__name__ = 'isArray'
            var.put('isArray', PyJsHoisted_isArray_)
            @Js
            def PyJsHoisted_arrayToHash_(array, this, arguments, var=var):
                var = Scope({'this':this, 'array':array, 'arguments':arguments}, var)
                var.registers(['array', 'hash'])
                PyJs_Object_4340_ = Js({})
                var.put('hash', PyJs_Object_4340_)
                @Js
                def PyJs_anonymous_4341_(val, idx, this, arguments, var=var):
                    var = Scope({'this':this, 'idx':idx, 'val':val, 'arguments':arguments}, var)
                    var.registers(['idx', 'val'])
                    var.get('hash').put(var.get('val'), var.get('true'))
                PyJs_anonymous_4341_._set_name('anonymous')
                var.get('array').callprop('forEach', PyJs_anonymous_4341_)
                return var.get('hash')
            PyJsHoisted_arrayToHash_.__name__ = 'arrayToHash'
            var.put('arrayToHash', PyJsHoisted_arrayToHash_)
            @Js
            def PyJsHoisted_isFunction_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('function'))
            PyJsHoisted_isFunction_.__name__ = 'isFunction'
            var.put('isFunction', PyJsHoisted_isFunction_)
            @Js
            def PyJsHoisted_isBoolean_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))
            PyJsHoisted_isBoolean_.__name__ = 'isBoolean'
            var.put('isBoolean', PyJsHoisted_isBoolean_)
            @Js
            def PyJsHoisted_objectToString_(o, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'o':o}, var)
                var.registers(['o'])
                return var.get('Object').get('prototype').get('toString').callprop('call', var.get('o'))
            PyJsHoisted_objectToString_.__name__ = 'objectToString'
            var.put('objectToString', PyJsHoisted_objectToString_)
            @Js
            def PyJsHoisted_isObject_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return (PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('object')) and PyJsStrictNeq(var.get('arg'),var.get("null")))
            PyJsHoisted_isObject_.__name__ = 'isObject'
            var.put('isObject', PyJsHoisted_isObject_)
            @Js
            def PyJsHoisted_formatProperty_(ctx, value, recurseTimes, visibleKeys, key, array, this, arguments, var=var):
                var = Scope({'recurseTimes':recurseTimes, 'this':this, 'ctx':ctx, 'value':value, 'visibleKeys':visibleKeys, 'arguments':arguments, 'key':key, 'array':array}, var)
                var.registers(['key', 'name', 'recurseTimes', 'ctx', 'value', 'visibleKeys', 'str', 'array', 'desc'])
                pass
                PyJs_Object_4344_ = Js({'value':var.get('value').get(var.get('key'))})
                var.put('desc', (var.get('Object').callprop('getOwnPropertyDescriptor', var.get('value'), var.get('key')) or PyJs_Object_4344_))
                if var.get('desc').get('get'):
                    if var.get('desc').get('set'):
                        var.put('str', var.get('ctx').callprop('stylize', Js('[Getter/Setter]'), Js('special')))
                    else:
                        var.put('str', var.get('ctx').callprop('stylize', Js('[Getter]'), Js('special')))
                else:
                    if var.get('desc').get('set'):
                        var.put('str', var.get('ctx').callprop('stylize', Js('[Setter]'), Js('special')))
                if var.get('hasOwnProperty')(var.get('visibleKeys'), var.get('key')).neg():
                    var.put('name', ((Js('[')+var.get('key'))+Js(']')))
                if var.get('str').neg():
                    if (var.get('ctx').get('seen').callprop('indexOf', var.get('desc').get('value'))<Js(0.0)):
                        if var.get('isNull')(var.get('recurseTimes')):
                            var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), var.get("null")))
                        else:
                            var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), (var.get('recurseTimes')-Js(1.0))))
                        if (var.get('str').callprop('indexOf', Js('\n'))>(-Js(1.0))):
                            if var.get('array'):
                                @Js
                                def PyJs_anonymous_4345_(line, this, arguments, var=var):
                                    var = Scope({'this':this, 'line':line, 'arguments':arguments}, var)
                                    var.registers(['line'])
                                    return (Js('  ')+var.get('line'))
                                PyJs_anonymous_4345_._set_name('anonymous')
                                var.put('str', var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_4345_).callprop('join', Js('\n')).callprop('substr', Js(2.0)))
                            else:
                                @Js
                                def PyJs_anonymous_4346_(line, this, arguments, var=var):
                                    var = Scope({'this':this, 'line':line, 'arguments':arguments}, var)
                                    var.registers(['line'])
                                    return (Js('   ')+var.get('line'))
                                PyJs_anonymous_4346_._set_name('anonymous')
                                var.put('str', (Js('\n')+var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_4346_).callprop('join', Js('\n'))))
                    else:
                        var.put('str', var.get('ctx').callprop('stylize', Js('[Circular]'), Js('special')))
                if var.get('isUndefined')(var.get('name')):
                    if (var.get('array') and var.get('key').callprop('match', JsRegExp('/^\\d+$/'))):
                        return var.get('str')
                    var.put('name', var.get('JSON').callprop('stringify', (Js('')+var.get('key'))))
                    if var.get('name').callprop('match', JsRegExp('/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/')):
                        var.put('name', var.get('name').callprop('substr', Js(1.0), (var.get('name').get('length')-Js(2.0))))
                        var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('name')))
                    else:
                        var.put('name', var.get('name').callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')).callprop('replace', JsRegExp('/(^"|"$)/g'), Js("'")))
                        var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('string')))
                return ((var.get('name')+Js(': '))+var.get('str'))
            PyJsHoisted_formatProperty_.__name__ = 'formatProperty'
            var.put('formatProperty', PyJsHoisted_formatProperty_)
            @Js
            def PyJsHoisted_formatError_(value, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':value}, var)
                var.registers(['value'])
                return ((Js('[')+var.get('Error').get('prototype').get('toString').callprop('call', var.get('value')))+Js(']'))
            PyJsHoisted_formatError_.__name__ = 'formatError'
            var.put('formatError', PyJsHoisted_formatError_)
            @Js
            def PyJsHoisted_formatArray_(ctx, value, recurseTimes, visibleKeys, keys, this, arguments, var=var):
                var = Scope({'this':this, 'visibleKeys':visibleKeys, 'arguments':arguments, 'recurseTimes':recurseTimes, 'keys':keys, 'ctx':ctx, 'value':value}, var)
                var.registers(['keys', 'recurseTimes', 'i', 'ctx', 'l', 'value', 'visibleKeys', 'output'])
                var.put('output', Js([]))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('l', var.get('value').get('length'))
                while (var.get('i')<var.get('l')):
                    try:
                        if var.get('hasOwnProperty')(var.get('value'), var.get('String')(var.get('i'))):
                            var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('String')(var.get('i')), var.get('true')))
                        else:
                            var.get('output').callprop('push', Js(''))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                @Js
                def PyJs_anonymous_4343_(key, this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
                    var.registers(['key'])
                    if var.get('key').callprop('match', JsRegExp('/^\\d+$/')).neg():
                        var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), var.get('true')))
                PyJs_anonymous_4343_._set_name('anonymous')
                var.get('keys').callprop('forEach', PyJs_anonymous_4343_)
                return var.get('output')
            PyJsHoisted_formatArray_.__name__ = 'formatArray'
            var.put('formatArray', PyJsHoisted_formatArray_)
            @Js
            def PyJsHoisted_pad_(n, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'n':n}, var)
                var.registers(['n'])
                return ((Js('0')+var.get('n').callprop('toString', Js(10.0))) if (var.get('n')<Js(10.0)) else var.get('n').callprop('toString', Js(10.0)))
            PyJsHoisted_pad_.__name__ = 'pad'
            var.put('pad', PyJsHoisted_pad_)
            @Js
            def PyJsHoisted_stylizeWithColor_(str, styleType, this, arguments, var=var):
                var = Scope({'this':this, 'styleType':styleType, 'str':str, 'arguments':arguments}, var)
                var.registers(['style', 'styleType', 'str'])
                var.put('style', var.get('inspect').get('styles').get(var.get('styleType')))
                if var.get('style'):
                    return ((((((Js('\x1b[')+var.get('inspect').get('colors').get(var.get('style')).get('0'))+Js('m'))+var.get('str'))+Js('\x1b['))+var.get('inspect').get('colors').get(var.get('style')).get('1'))+Js('m'))
                else:
                    return var.get('str')
            PyJsHoisted_stylizeWithColor_.__name__ = 'stylizeWithColor'
            var.put('stylizeWithColor', PyJsHoisted_stylizeWithColor_)
            @Js
            def PyJsHoisted_isRegExp_(re, this, arguments, var=var):
                var = Scope({'this':this, 're':re, 'arguments':arguments}, var)
                var.registers(['re'])
                return (var.get('isObject')(var.get('re')) and PyJsStrictEq(var.get('objectToString')(var.get('re')),Js('[object RegExp]')))
            PyJsHoisted_isRegExp_.__name__ = 'isRegExp'
            var.put('isRegExp', PyJsHoisted_isRegExp_)
            @Js
            def PyJsHoisted_stylizeNoColor_(str, styleType, this, arguments, var=var):
                var = Scope({'this':this, 'styleType':styleType, 'str':str, 'arguments':arguments}, var)
                var.registers(['styleType', 'str'])
                return var.get('str')
            PyJsHoisted_stylizeNoColor_.__name__ = 'stylizeNoColor'
            var.put('stylizeNoColor', PyJsHoisted_stylizeNoColor_)
            @Js
            def PyJsHoisted_timestamp_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['d', 'time'])
                var.put('d', var.get('Date').create())
                var.put('time', Js([var.get('pad')(var.get('d').callprop('getHours')), var.get('pad')(var.get('d').callprop('getMinutes')), var.get('pad')(var.get('d').callprop('getSeconds'))]).callprop('join', Js(':')))
                return Js([var.get('d').callprop('getDate'), var.get('months').get(var.get('d').callprop('getMonth')), var.get('time')]).callprop('join', Js(' '))
            PyJsHoisted_timestamp_.__name__ = 'timestamp'
            var.put('timestamp', PyJsHoisted_timestamp_)
            @Js
            def PyJsHoisted_inspect_(obj, opts, this, arguments, var=var):
                var = Scope({'this':this, 'obj':obj, 'arguments':arguments, 'opts':opts}, var)
                var.registers(['obj', 'ctx', 'opts'])
                PyJs_Object_4337_ = Js({'seen':Js([]),'stylize':var.get('stylizeNoColor')})
                var.put('ctx', PyJs_Object_4337_)
                if (var.get('arguments').get('length')>=Js(3.0)):
                    var.get('ctx').put('depth', var.get('arguments').get('2'))
                if (var.get('arguments').get('length')>=Js(4.0)):
                    var.get('ctx').put('colors', var.get('arguments').get('3'))
                if var.get('isBoolean')(var.get('opts')):
                    var.get('ctx').put('showHidden', var.get('opts'))
                else:
                    if var.get('opts'):
                        var.get('exports').callprop('_extend', var.get('ctx'), var.get('opts'))
                if var.get('isUndefined')(var.get('ctx').get('showHidden')):
                    var.get('ctx').put('showHidden', Js(False))
                if var.get('isUndefined')(var.get('ctx').get('depth')):
                    var.get('ctx').put('depth', Js(2.0))
                if var.get('isUndefined')(var.get('ctx').get('colors')):
                    var.get('ctx').put('colors', Js(False))
                if var.get('isUndefined')(var.get('ctx').get('customInspect')):
                    var.get('ctx').put('customInspect', var.get('true'))
                if var.get('ctx').get('colors'):
                    var.get('ctx').put('stylize', var.get('stylizeWithColor'))
                return var.get('formatValue')(var.get('ctx'), var.get('obj'), var.get('ctx').get('depth'))
            PyJsHoisted_inspect_.__name__ = 'inspect'
            var.put('inspect', PyJsHoisted_inspect_)
            @Js
            def PyJsHoisted_formatPrimitive_(ctx, value, this, arguments, var=var):
                var = Scope({'this':this, 'ctx':ctx, 'arguments':arguments, 'value':value}, var)
                var.registers(['simple', 'ctx', 'value'])
                if var.get('isUndefined')(var.get('value')):
                    return var.get('ctx').callprop('stylize', Js('undefined'), Js('undefined'))
                if var.get('isString')(var.get('value')):
                    var.put('simple', ((Js("'")+var.get('JSON').callprop('stringify', var.get('value')).callprop('replace', JsRegExp('/^"|"$/g'), Js('')).callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')))+Js("'")))
                    return var.get('ctx').callprop('stylize', var.get('simple'), Js('string'))
                if var.get('isNumber')(var.get('value')):
                    return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('number'))
                if var.get('isBoolean')(var.get('value')):
                    return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('boolean'))
                if var.get('isNull')(var.get('value')):
                    return var.get('ctx').callprop('stylize', Js('null'), Js('null'))
            PyJsHoisted_formatPrimitive_.__name__ = 'formatPrimitive'
            var.put('formatPrimitive', PyJsHoisted_formatPrimitive_)
            @Js
            def PyJsHoisted_hasOwnProperty_(obj, prop, this, arguments, var=var):
                var = Scope({'this':this, 'obj':obj, 'arguments':arguments, 'prop':prop}, var)
                var.registers(['obj', 'prop'])
                return var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('prop'))
            PyJsHoisted_hasOwnProperty_.__name__ = 'hasOwnProperty'
            var.put('hasOwnProperty', PyJsHoisted_hasOwnProperty_)
            @Js
            def PyJsHoisted_isNumber_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))
            PyJsHoisted_isNumber_.__name__ = 'isNumber'
            var.put('isNumber', PyJsHoisted_isNumber_)
            @Js
            def PyJsHoisted_isError_(e, this, arguments, var=var):
                var = Scope({'this':this, 'e':e, 'arguments':arguments}, var)
                var.registers(['e'])
                return (var.get('isObject')(var.get('e')) and (PyJsStrictEq(var.get('objectToString')(var.get('e')),Js('[object Error]')) or var.get('e').instanceof(var.get('Error'))))
            PyJsHoisted_isError_.__name__ = 'isError'
            var.put('isError', PyJsHoisted_isError_)
            @Js
            def PyJsHoisted_reduceToSingleString_(output, base, braces, this, arguments, var=var):
                var = Scope({'this':this, 'output':output, 'base':base, 'arguments':arguments, 'braces':braces}, var)
                var.registers(['output', 'length', 'base', 'numLinesEst', 'braces'])
                var.put('numLinesEst', Js(0.0))
                @Js
                def PyJs_anonymous_4347_(prev, cur, this, arguments, var=var):
                    var = Scope({'this':this, 'prev':prev, 'cur':cur, 'arguments':arguments}, var)
                    var.registers(['prev', 'cur'])
                    (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                    if (var.get('cur').callprop('indexOf', Js('\n'))>=Js(0.0)):
                        (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                    return ((var.get('prev')+var.get('cur').callprop('replace', JsRegExp('/\\u001b\\[\\d\\d?m/g'), Js('')).get('length'))+Js(1.0))
                PyJs_anonymous_4347_._set_name('anonymous')
                var.put('length', var.get('output').callprop('reduce', PyJs_anonymous_4347_, Js(0.0)))
                if (var.get('length')>Js(60.0)):
                    return (((((var.get('braces').get('0')+(Js('') if PyJsStrictEq(var.get('base'),Js('')) else (var.get('base')+Js('\n '))))+Js(' '))+var.get('output').callprop('join', Js(',\n  ')))+Js(' '))+var.get('braces').get('1'))
                return (((((var.get('braces').get('0')+var.get('base'))+Js(' '))+var.get('output').callprop('join', Js(', ')))+Js(' '))+var.get('braces').get('1'))
            PyJsHoisted_reduceToSingleString_.__name__ = 'reduceToSingleString'
            var.put('reduceToSingleString', PyJsHoisted_reduceToSingleString_)
            @Js
            def PyJsHoisted_isNullOrUndefined_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return (var.get('arg')==var.get("null"))
            PyJsHoisted_isNullOrUndefined_.__name__ = 'isNullOrUndefined'
            var.put('isNullOrUndefined', PyJsHoisted_isNullOrUndefined_)
            @Js
            def PyJsHoisted_isDate_(d, this, arguments, var=var):
                var = Scope({'this':this, 'd':d, 'arguments':arguments}, var)
                var.registers(['d'])
                return (var.get('isObject')(var.get('d')) and PyJsStrictEq(var.get('objectToString')(var.get('d')),Js('[object Date]')))
            PyJsHoisted_isDate_.__name__ = 'isDate'
            var.put('isDate', PyJsHoisted_isDate_)
            @Js
            def PyJsHoisted_isString_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))
            PyJsHoisted_isString_.__name__ = 'isString'
            var.put('isString', PyJsHoisted_isString_)
            @Js
            def PyJsHoisted_isPrimitive_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return (((((PyJsStrictEq(var.get('arg'),var.get("null")) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('symbol'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')))
            PyJsHoisted_isPrimitive_.__name__ = 'isPrimitive'
            var.put('isPrimitive', PyJsHoisted_isPrimitive_)
            @Js
            def PyJsHoisted_formatValue_(ctx, value, recurseTimes, this, arguments, var=var):
                var = Scope({'this':this, 'ctx':ctx, 'arguments':arguments, 'value':value, 'recurseTimes':recurseTimes}, var)
                var.registers(['primitive', 'name', 'recurseTimes', 'keys', 'ctx', 'ret', 'n', 'visibleKeys', 'base', 'value', 'output', 'array', 'braces'])
                if ((((var.get('ctx').get('customInspect') and var.get('value')) and var.get('isFunction')(var.get('value').get('inspect'))) and PyJsStrictNeq(var.get('value').get('inspect'),var.get('exports').get('inspect'))) and (var.get('value').get('constructor') and PyJsStrictEq(var.get('value').get('constructor').get('prototype'),var.get('value'))).neg()):
                    var.put('ret', var.get('value').callprop('inspect', var.get('recurseTimes'), var.get('ctx')))
                    if var.get('isString')(var.get('ret')).neg():
                        var.put('ret', var.get('formatValue')(var.get('ctx'), var.get('ret'), var.get('recurseTimes')))
                    return var.get('ret')
                var.put('primitive', var.get('formatPrimitive')(var.get('ctx'), var.get('value')))
                if var.get('primitive'):
                    return var.get('primitive')
                var.put('keys', var.get('Object').callprop('keys', var.get('value')))
                var.put('visibleKeys', var.get('arrayToHash')(var.get('keys')))
                if var.get('ctx').get('showHidden'):
                    var.put('keys', var.get('Object').callprop('getOwnPropertyNames', var.get('value')))
                if (var.get('isError')(var.get('value')) and ((var.get('keys').callprop('indexOf', Js('message'))>=Js(0.0)) or (var.get('keys').callprop('indexOf', Js('description'))>=Js(0.0)))):
                    return var.get('formatError')(var.get('value'))
                if PyJsStrictEq(var.get('keys').get('length'),Js(0.0)):
                    if var.get('isFunction')(var.get('value')):
                        var.put('name', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                        return var.get('ctx').callprop('stylize', ((Js('[Function')+var.get('name'))+Js(']')), Js('special'))
                    if var.get('isRegExp')(var.get('value')):
                        return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                    if var.get('isDate')(var.get('value')):
                        return var.get('ctx').callprop('stylize', var.get('Date').get('prototype').get('toString').callprop('call', var.get('value')), Js('date'))
                    if var.get('isError')(var.get('value')):
                        return var.get('formatError')(var.get('value'))
                var.put('base', Js(''))
                var.put('array', Js(False))
                var.put('braces', Js([Js('{'), Js('}')]))
                if var.get('isArray')(var.get('value')):
                    var.put('array', var.get('true'))
                    var.put('braces', Js([Js('['), Js(']')]))
                if var.get('isFunction')(var.get('value')):
                    var.put('n', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                    var.put('base', ((Js(' [Function')+var.get('n'))+Js(']')))
                if var.get('isRegExp')(var.get('value')):
                    var.put('base', (Js(' ')+var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value'))))
                if var.get('isDate')(var.get('value')):
                    var.put('base', (Js(' ')+var.get('Date').get('prototype').get('toUTCString').callprop('call', var.get('value'))))
                if var.get('isError')(var.get('value')):
                    var.put('base', (Js(' ')+var.get('formatError')(var.get('value'))))
                if (PyJsStrictEq(var.get('keys').get('length'),Js(0.0)) and (var.get('array').neg() or (var.get('value').get('length')==Js(0.0)))):
                    return ((var.get('braces').get('0')+var.get('base'))+var.get('braces').get('1'))
                if (var.get('recurseTimes')<Js(0.0)):
                    if var.get('isRegExp')(var.get('value')):
                        return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                    else:
                        return var.get('ctx').callprop('stylize', Js('[Object]'), Js('special'))
                var.get('ctx').get('seen').callprop('push', var.get('value'))
                pass
                if var.get('array'):
                    var.put('output', var.get('formatArray')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('keys')))
                else:
                    @Js
                    def PyJs_anonymous_4342_(key, this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'key':key}, var)
                        var.registers(['key'])
                        return var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), var.get('array'))
                    PyJs_anonymous_4342_._set_name('anonymous')
                    var.put('output', var.get('keys').callprop('map', PyJs_anonymous_4342_))
                var.get('ctx').get('seen').callprop('pop')
                return var.get('reduceToSingleString')(var.get('output'), var.get('base'), var.get('braces'))
            PyJsHoisted_formatValue_.__name__ = 'formatValue'
            var.put('formatValue', PyJsHoisted_formatValue_)
            @Js
            def PyJsHoisted_isNull_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg'),var.get("null"))
            PyJsHoisted_isNull_.__name__ = 'isNull'
            var.put('isNull', PyJsHoisted_isNull_)
            @Js
            def PyJsHoisted_isUndefined_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg'),PyJsComma(Js(0.0), Js(None)))
            PyJsHoisted_isUndefined_.__name__ = 'isUndefined'
            var.put('isUndefined', PyJsHoisted_isUndefined_)
            @Js
            def PyJsHoisted_isSymbol_(arg, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'arg':arg}, var)
                var.registers(['arg'])
                return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('symbol'))
            PyJsHoisted_isSymbol_.__name__ = 'isSymbol'
            var.put('isSymbol', PyJsHoisted_isSymbol_)
            var.put('formatRegExp', JsRegExp('/%[sdj%]/g'))
            @Js
            def PyJs_anonymous_4329_(f, this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'f':f}, var)
                var.registers(['f', 'i', 'args', 'len', 'objects', 'str', 'x'])
                if var.get('isString')(var.get('f')).neg():
                    var.put('objects', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('arguments').get('length')):
                        try:
                            var.get('objects').callprop('push', var.get('inspect')(var.get('arguments').get(var.get('i'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('objects').callprop('join', Js(' '))
                var.put('i', Js(1.0))
                var.put('args', var.get('arguments'))
                var.put('len', var.get('args').get('length'))
                @Js
                def PyJs_anonymous_4330_(x, this, arguments, var=var):
                    var = Scope({'this':this, 'x':x, 'arguments':arguments}, var)
                    var.registers(['x'])
                    if PyJsStrictEq(var.get('x'),Js('%%')):
                        return Js('%')
                    if (var.get('i')>=var.get('len')):
                        return var.get('x')
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('x'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('%s')):
                            SWITCHED = True
                            return var.get('String')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('%d')):
                            SWITCHED = True
                            return var.get('Number')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('%j')):
                            SWITCHED = True
                            try:
                                return var.get('JSON').callprop('stringify', var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_5f_51919926 = var.own.get('_')
                                var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                                try:
                                    return Js('[Circular]')
                                finally:
                                    if PyJsHolder_5f_51919926 is not None:
                                        var.own['_'] = PyJsHolder_5f_51919926
                                    else:
                                        del var.own['_']
                                    del PyJsHolder_5f_51919926
                        if True:
                            SWITCHED = True
                            return var.get('x')
                        SWITCHED = True
                        break
                PyJs_anonymous_4330_._set_name('anonymous')
                var.put('str', var.get('String')(var.get('f')).callprop('replace', var.get('formatRegExp'), PyJs_anonymous_4330_))
                #for JS loop
                var.put('x', var.get('args').get(var.get('i')))
                while (var.get('i')<var.get('len')):
                    try:
                        if (var.get('isNull')(var.get('x')) or var.get('isObject')(var.get('x')).neg()):
                            var.put('str', (Js(' ')+var.get('x')), '+')
                        else:
                            var.put('str', (Js(' ')+var.get('inspect')(var.get('x'))), '+')
                    finally:
                            var.put('x', var.get('args').get(var.put('i',Js(var.get('i').to_number())+Js(1))))
                return var.get('str')
            PyJs_anonymous_4329_._set_name('anonymous')
            var.get('exports').put('format', PyJs_anonymous_4329_)
            @Js
            def PyJs_anonymous_4331_(fn, msg, this, arguments, var=var):
                var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'fn':fn}, var)
                var.registers(['msg', 'warned', 'fn', 'deprecated'])
                @Js
                def PyJsHoisted_deprecated_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get('warned').neg():
                        if var.get('process').get('throwDeprecation'):
                            PyJsTempException = JsToPyException(var.get('Error').create(var.get('msg')))
                            raise PyJsTempException
                        else:
                            if var.get('process').get('traceDeprecation'):
                                var.get('console').callprop('trace', var.get('msg'))
                            else:
                                var.get('console').callprop('error', var.get('msg'))
                        var.put('warned', var.get('true'))
                    return var.get('fn').callprop('apply', var.get("this"), var.get('arguments'))
                PyJsHoisted_deprecated_.__name__ = 'deprecated'
                var.put('deprecated', PyJsHoisted_deprecated_)
                if var.get('isUndefined')(var.get('global').get('process')):
                    @Js
                    def PyJs_anonymous_4332_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('exports').callprop('deprecate', var.get('fn'), var.get('msg')).callprop('apply', var.get("this"), var.get('arguments'))
                    PyJs_anonymous_4332_._set_name('anonymous')
                    return PyJs_anonymous_4332_
                if PyJsStrictEq(var.get('process').get('noDeprecation'),var.get('true')):
                    return var.get('fn')
                var.put('warned', Js(False))
                pass
                return var.get('deprecated')
            PyJs_anonymous_4331_._set_name('anonymous')
            var.get('exports').put('deprecate', PyJs_anonymous_4331_)
            PyJs_Object_4333_ = Js({})
            var.put('debugs', PyJs_Object_4333_)
            pass
            @Js
            def PyJs_anonymous_4334_(set, this, arguments, var=var):
                var = Scope({'this':this, 'set':set, 'arguments':arguments}, var)
                var.registers(['set', 'pid'])
                if var.get('isUndefined')(var.get('debugEnviron')):
                    var.put('debugEnviron', (var.get('process').get('env').get('NODE_DEBUG') or Js('')))
                var.put('set', var.get('set').callprop('toUpperCase'))
                if var.get('debugs').get(var.get('set')).neg():
                    if var.get('RegExp').create(((Js('\\b')+var.get('set'))+Js('\\b')), Js('i')).callprop('test', var.get('debugEnviron')):
                        var.put('pid', var.get('process').get('pid'))
                        @Js
                        def PyJs_anonymous_4335_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['msg'])
                            var.put('msg', var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
                            var.get('console').callprop('error', Js('%s %d: %s'), var.get('set'), var.get('pid'), var.get('msg'))
                        PyJs_anonymous_4335_._set_name('anonymous')
                        var.get('debugs').put(var.get('set'), PyJs_anonymous_4335_)
                    else:
                        @Js
                        def PyJs_anonymous_4336_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            pass
                        PyJs_anonymous_4336_._set_name('anonymous')
                        var.get('debugs').put(var.get('set'), PyJs_anonymous_4336_)
                return var.get('debugs').get(var.get('set'))
            PyJs_anonymous_4334_._set_name('anonymous')
            var.get('exports').put('debuglog', PyJs_anonymous_4334_)
            pass
            var.get('exports').put('inspect', var.get('inspect'))
            PyJs_Object_4338_ = Js({'bold':Js([Js(1.0), Js(22.0)]),'italic':Js([Js(3.0), Js(23.0)]),'underline':Js([Js(4.0), Js(24.0)]),'inverse':Js([Js(7.0), Js(27.0)]),'white':Js([Js(37.0), Js(39.0)]),'grey':Js([Js(90.0), Js(39.0)]),'black':Js([Js(30.0), Js(39.0)]),'blue':Js([Js(34.0), Js(39.0)]),'cyan':Js([Js(36.0), Js(39.0)]),'green':Js([Js(32.0), Js(39.0)]),'magenta':Js([Js(35.0), Js(39.0)]),'red':Js([Js(31.0), Js(39.0)]),'yellow':Js([Js(33.0), Js(39.0)])})
            var.get('inspect').put('colors', PyJs_Object_4338_)
            PyJs_Object_4339_ = Js({'special':Js('cyan'),'number':Js('yellow'),'boolean':Js('yellow'),'undefined':Js('grey'),'null':Js('bold'),'string':Js('green'),'date':Js('magenta'),'regexp':Js('red')})
            var.get('inspect').put('styles', PyJs_Object_4339_)
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.get('exports').put('isArray', var.get('isArray'))
            pass
            var.get('exports').put('isBoolean', var.get('isBoolean'))
            pass
            var.get('exports').put('isNull', var.get('isNull'))
            pass
            var.get('exports').put('isNullOrUndefined', var.get('isNullOrUndefined'))
            pass
            var.get('exports').put('isNumber', var.get('isNumber'))
            pass
            var.get('exports').put('isString', var.get('isString'))
            pass
            var.get('exports').put('isSymbol', var.get('isSymbol'))
            pass
            var.get('exports').put('isUndefined', var.get('isUndefined'))
            pass
            var.get('exports').put('isRegExp', var.get('isRegExp'))
            pass
            var.get('exports').put('isObject', var.get('isObject'))
            pass
            var.get('exports').put('isDate', var.get('isDate'))
            pass
            var.get('exports').put('isError', var.get('isError'))
            pass
            var.get('exports').put('isFunction', var.get('isFunction'))
            pass
            var.get('exports').put('isPrimitive', var.get('isPrimitive'))
            var.get('exports').put('isBuffer', var.get('require')(Js('./support/isBuffer')))
            pass
            pass
            var.put('months', Js([Js('Jan'), Js('Feb'), Js('Mar'), Js('Apr'), Js('May'), Js('Jun'), Js('Jul'), Js('Aug'), Js('Sep'), Js('Oct'), Js('Nov'), Js('Dec')]))
            pass
            @Js
            def PyJs_anonymous_4348_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('console').callprop('log', Js('%s - %s'), var.get('timestamp')(), var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
            PyJs_anonymous_4348_._set_name('anonymous')
            var.get('exports').put('log', PyJs_anonymous_4348_)
            var.get('exports').put('inherits', var.get('require')(Js('inherits')))
            @Js
            def PyJs_anonymous_4349_(origin, add, this, arguments, var=var):
                var = Scope({'origin':origin, 'this':this, 'add':add, 'arguments':arguments}, var)
                var.registers(['keys', 'i', 'add', 'origin'])
                if (var.get('add').neg() or var.get('isObject')(var.get('add')).neg()):
                    return var.get('origin')
                var.put('keys', var.get('Object').callprop('keys', var.get('add')))
                var.put('i', var.get('keys').get('length'))
                while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                    var.get('origin').put(var.get('keys').get(var.get('i')), var.get('add').get(var.get('keys').get(var.get('i'))))
                return var.get('origin')
            PyJs_anonymous_4349_._set_name('anonymous')
            var.get('exports').put('_extend', PyJs_anonymous_4349_)
            pass
        PyJs_anonymous_4328_._set_name('anonymous')
        return PyJs_anonymous_4328_.callprop('call', var.get("this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else PyJs_Object_4327_))))
    PyJs_LONG_4350_()
PyJs_anonymous_4326_._set_name('anonymous')
PyJs_Object_4351_ = Js({'./support/isBuffer':Js(533.0),'_process':Js(531.0),'inherits':Js(529.0)})
PyJs_Object_0_ = Js({'1':Js([PyJs_anonymous_1_, PyJs_Object_2_]),'2':Js([PyJs_anonymous_3_, PyJs_Object_5_]),'3':Js([PyJs_anonymous_6_, PyJs_Object_16_]),'4':Js([PyJs_anonymous_17_, PyJs_Object_26_]),'5':Js([PyJs_anonymous_27_, PyJs_Object_28_]),'6':Js([PyJs_anonymous_29_, PyJs_Object_46_]),'7':Js([PyJs_anonymous_47_, PyJs_Object_51_]),'8':Js([PyJs_anonymous_52_, PyJs_Object_55_]),'9':Js([PyJs_anonymous_56_, PyJs_Object_61_]),'10':Js([PyJs_anonymous_62_, PyJs_Object_68_]),'11':Js([PyJs_anonymous_69_, PyJs_Object_79_]),'12':Js([PyJs_anonymous_80_, PyJs_Object_142_]),'13':Js([PyJs_anonymous_143_, PyJs_Object_153_]),'14':Js([PyJs_anonymous_154_, PyJs_Object_171_]),'15':Js([PyJs_anonymous_172_, PyJs_Object_192_]),'16':Js([PyJs_anonymous_193_, PyJs_Object_234_]),'17':Js([PyJs_anonymous_235_, PyJs_Object_239_]),'18':Js([PyJs_anonymous_240_, PyJs_Object_264_]),'19':Js([PyJs_anonymous_265_, PyJs_Object_268_]),'20':Js([PyJs_anonymous_269_, PyJs_Object_286_]),'21':Js([PyJs_anonymous_287_, PyJs_Object_294_]),'22':Js([PyJs_anonymous_295_, PyJs_Object_311_]),'23':Js([PyJs_anonymous_312_, PyJs_Object_326_]),'24':Js([PyJs_anonymous_327_, PyJs_Object_335_]),'25':Js([PyJs_anonymous_336_, PyJs_Object_348_]),'26':Js([PyJs_anonymous_349_, PyJs_Object_356_]),'27':Js([PyJs_anonymous_357_, PyJs_Object_399_]),'28':Js([PyJs_anonymous_400_, PyJs_Object_421_]),'29':Js([PyJs_anonymous_422_, PyJs_Object_444_]),'30':Js([PyJs_anonymous_445_, PyJs_Object_450_]),'31':Js([PyJs_anonymous_451_, PyJs_Object_452_]),'32':Js([PyJs_anonymous_453_, PyJs_Object_459_]),'33':Js([PyJs_anonymous_460_, PyJs_Object_470_]),'34':Js([PyJs_anonymous_471_, PyJs_Object_474_]),'35':Js([PyJs_anonymous_475_, PyJs_Object_479_]),'36':Js([PyJs_anonymous_480_, PyJs_Object_482_]),'37':Js([PyJs_anonymous_483_, PyJs_Object_493_]),'38':Js([PyJs_anonymous_494_, PyJs_Object_495_]),'39':Js([PyJs_anonymous_496_, PyJs_Object_501_]),'40':Js([PyJs_anonymous_502_, PyJs_Object_516_]),'41':Js([PyJs_anonymous_517_, PyJs_Object_522_]),'42':Js([PyJs_anonymous_523_, PyJs_Object_544_]),'43':Js([PyJs_anonymous_545_, PyJs_Object_575_]),'44':Js([PyJs_anonymous_576_, PyJs_Object_635_]),'45':Js([PyJs_anonymous_636_, PyJs_Object_646_]),'46':Js([PyJs_anonymous_647_, PyJs_Object_657_]),'47':Js([PyJs_anonymous_658_, PyJs_Object_669_]),'48':Js([PyJs_anonymous_670_, PyJs_Object_679_]),'49':Js([PyJs_anonymous_680_, PyJs_Object_689_]),'50':Js([PyJs_anonymous_690_, PyJs_Object_693_]),'51':Js([PyJs_anonymous_694_, PyJs_Object_704_]),'52':Js([PyJs_anonymous_705_, PyJs_Object_709_]),'53':Js([PyJs_anonymous_710_, PyJs_Object_713_]),'54':Js([PyJs_anonymous_714_, PyJs_Object_738_]),'55':Js([PyJs_anonymous_739_, PyJs_Object_758_]),'56':Js([PyJs_anonymous_759_, PyJs_Object_763_]),'57':Js([PyJs_anonymous_764_, PyJs_Object_770_]),'58':Js([PyJs_anonymous_771_, PyJs_Object_777_]),'59':Js([PyJs_anonymous_778_, PyJs_Object_784_]),'60':Js([PyJs_anonymous_785_, PyJs_Object_793_]),'61':Js([PyJs_anonymous_794_, PyJs_Object_840_]),'62':Js([PyJs_anonymous_841_, PyJs_Object_848_]),'63':Js([PyJs_anonymous_849_, PyJs_Object_857_]),'64':Js([PyJs_anonymous_858_, PyJs_Object_864_]),'65':Js([PyJs_anonymous_865_, PyJs_Object_907_]),'66':Js([PyJs_anonymous_908_, PyJs_Object_919_]),'67':Js([PyJs_anonymous_920_, PyJs_Object_951_]),'68':Js([PyJs_anonymous_952_, PyJs_Object_960_]),'69':Js([PyJs_anonymous_961_, PyJs_Object_973_]),'70':Js([PyJs_anonymous_974_, PyJs_Object_982_]),'71':Js([PyJs_anonymous_983_, PyJs_Object_989_]),'72':Js([PyJs_anonymous_990_, PyJs_Object_1008_]),'73':Js([PyJs_anonymous_1009_, PyJs_Object_1029_]),'74':Js([PyJs_anonymous_1030_, PyJs_Object_1048_]),'75':Js([PyJs_anonymous_1049_, PyJs_Object_1065_]),'76':Js([PyJs_anonymous_1066_, PyJs_Object_1078_]),'77':Js([PyJs_anonymous_1079_, PyJs_Object_1089_]),'78':Js([PyJs_anonymous_1090_, PyJs_Object_1094_]),'79':Js([PyJs_anonymous_1095_, PyJs_Object_1102_]),'80':Js([PyJs_anonymous_1103_, PyJs_Object_1128_]),'81':Js([PyJs_anonymous_1129_, PyJs_Object_1136_]),'82':Js([PyJs_anonymous_1137_, PyJs_Object_1147_]),'83':Js([PyJs_anonymous_1148_, PyJs_Object_1154_]),'84':Js([PyJs_anonymous_1155_, PyJs_Object_1164_]),'85':Js([PyJs_anonymous_1165_, PyJs_Object_1173_]),'86':Js([PyJs_anonymous_1174_, PyJs_Object_1181_]),'87':Js([PyJs_anonymous_1182_, PyJs_Object_1251_]),'88':Js([PyJs_anonymous_1252_, PyJs_Object_1268_]),'89':Js([PyJs_anonymous_1269_, PyJs_Object_1271_]),'90':Js([PyJs_anonymous_1272_, PyJs_Object_1279_]),'91':Js([PyJs_anonymous_1280_, PyJs_Object_1286_]),'92':Js([PyJs_anonymous_1287_, PyJs_Object_1290_]),'93':Js([PyJs_anonymous_1291_, PyJs_Object_1310_]),'94':Js([PyJs_anonymous_1311_, PyJs_Object_1318_]),'95':Js([PyJs_anonymous_1319_, PyJs_Object_1330_]),'96':Js([PyJs_anonymous_1331_, PyJs_Object_1333_]),'97':Js([PyJs_anonymous_1334_, PyJs_Object_1336_]),'98':Js([PyJs_anonymous_1337_, PyJs_Object_1339_]),'99':Js([PyJs_anonymous_1340_, PyJs_Object_1342_]),'100':Js([PyJs_anonymous_1343_, PyJs_Object_1345_]),'101':Js([PyJs_anonymous_1346_, PyJs_Object_1348_]),'102':Js([PyJs_anonymous_1349_, PyJs_Object_1351_]),'103':Js([PyJs_anonymous_1352_, PyJs_Object_1354_]),'104':Js([PyJs_anonymous_1355_, PyJs_Object_1357_]),'105':Js([PyJs_anonymous_1358_, PyJs_Object_1360_]),'106':Js([PyJs_anonymous_1361_, PyJs_Object_1363_]),'107':Js([PyJs_anonymous_1364_, PyJs_Object_1366_]),'108':Js([PyJs_anonymous_1367_, PyJs_Object_1369_]),'109':Js([PyJs_anonymous_1370_, PyJs_Object_1372_]),'110':Js([PyJs_anonymous_1373_, PyJs_Object_1375_]),'111':Js([PyJs_anonymous_1376_, PyJs_Object_1381_]),'112':Js([PyJs_anonymous_1382_, PyJs_Object_1385_]),'113':Js([PyJs_anonymous_1386_, PyJs_Object_1389_]),'114':Js([PyJs_anonymous_1390_, PyJs_Object_1397_]),'115':Js([PyJs_anonymous_1398_, PyJs_Object_1399_]),'116':Js([PyJs_anonymous_1400_, PyJs_Object_1403_]),'117':Js([PyJs_anonymous_1404_, PyJs_Object_1405_]),'118':Js([PyJs_anonymous_1406_, PyJs_Object_1407_]),'119':Js([PyJs_anonymous_1408_, PyJs_Object_1409_]),'120':Js([PyJs_anonymous_1410_, PyJs_Object_1412_]),'121':Js([PyJs_anonymous_1413_, PyJs_Object_1414_]),'122':Js([PyJs_anonymous_1415_, PyJs_Object_1416_]),'123':Js([PyJs_anonymous_1417_, PyJs_Object_1418_]),'124':Js([PyJs_anonymous_1419_, PyJs_Object_1420_]),'125':Js([PyJs_anonymous_1421_, PyJs_Object_1422_]),'126':Js([PyJs_anonymous_1423_, PyJs_Object_1424_]),'127':Js([PyJs_anonymous_1425_, PyJs_Object_1426_]),'128':Js([PyJs_anonymous_1427_, PyJs_Object_1428_]),'129':Js([PyJs_anonymous_1429_, PyJs_Object_1431_]),'130':Js([PyJs_anonymous_1432_, PyJs_Object_1434_]),'131':Js([PyJs_anonymous_1435_, PyJs_Object_1437_]),'132':Js([PyJs_anonymous_1438_, PyJs_Object_1440_]),'133':Js([PyJs_anonymous_1441_, PyJs_Object_1443_]),'134':Js([PyJs_anonymous_1444_, PyJs_Object_1447_]),'135':Js([PyJs_anonymous_1448_, PyJs_Object_1451_]),'136':Js([PyJs_anonymous_1452_, PyJs_Object_1454_]),'137':Js([PyJs_anonymous_1455_, PyJs_Object_1457_]),'138':Js([PyJs_anonymous_1458_, PyJs_Object_1463_]),'139':Js([PyJs_anonymous_1464_, PyJs_Object_1467_]),'140':Js([PyJs_anonymous_1468_, PyJs_Object_1485_]),'141':Js([PyJs_anonymous_1486_, PyJs_Object_1489_]),'142':Js([PyJs_anonymous_1490_, PyJs_Object_1508_]),'143':Js([PyJs_anonymous_1509_, PyJs_Object_1518_]),'144':Js([PyJs_anonymous_1519_, PyJs_Object_1521_]),'145':Js([PyJs_anonymous_1522_, PyJs_Object_1528_]),'146':Js([PyJs_anonymous_1529_, PyJs_Object_1531_]),'147':Js([PyJs_anonymous_1532_, PyJs_Object_1537_]),'148':Js([PyJs_anonymous_1538_, PyJs_Object_1541_]),'149':Js([PyJs_anonymous_1542_, PyJs_Object_1543_]),'150':Js([PyJs_anonymous_1544_, PyJs_Object_1546_]),'151':Js([PyJs_anonymous_1547_, PyJs_Object_1555_]),'152':Js([PyJs_anonymous_1556_, PyJs_Object_1558_]),'153':Js([PyJs_anonymous_1559_, PyJs_Object_1564_]),'154':Js([PyJs_anonymous_1565_, PyJs_Object_1566_]),'155':Js([PyJs_anonymous_1567_, PyJs_Object_1570_]),'156':Js([PyJs_anonymous_1571_, PyJs_Object_1574_]),'157':Js([PyJs_anonymous_1575_, PyJs_Object_1576_]),'158':Js([PyJs_anonymous_1577_, PyJs_Object_1581_]),'159':Js([PyJs_anonymous_1582_, PyJs_Object_1584_]),'160':Js([PyJs_anonymous_1585_, PyJs_Object_1587_]),'161':Js([PyJs_anonymous_1588_, PyJs_Object_1590_]),'162':Js([PyJs_anonymous_1591_, PyJs_Object_1593_]),'163':Js([PyJs_anonymous_1594_, PyJs_Object_1596_]),'164':Js([PyJs_anonymous_1597_, PyJs_Object_1602_]),'165':Js([PyJs_anonymous_1603_, PyJs_Object_1612_]),'166':Js([PyJs_anonymous_1613_, PyJs_Object_1616_]),'167':Js([PyJs_anonymous_1617_, PyJs_Object_1619_]),'168':Js([PyJs_anonymous_1620_, PyJs_Object_1622_]),'169':Js([PyJs_anonymous_1623_, PyJs_Object_1624_]),'170':Js([PyJs_anonymous_1625_, PyJs_Object_1637_]),'171':Js([PyJs_anonymous_1638_, PyJs_Object_1646_]),'172':Js([PyJs_anonymous_1647_, PyJs_Object_1651_]),'173':Js([PyJs_anonymous_1652_, PyJs_Object_1654_]),'174':Js([PyJs_anonymous_1655_, PyJs_Object_1657_]),'175':Js([PyJs_anonymous_1658_, PyJs_Object_1660_]),'176':Js([PyJs_anonymous_1661_, PyJs_Object_1665_]),'177':Js([PyJs_anonymous_1666_, PyJs_Object_1668_]),'178':Js([PyJs_anonymous_1669_, PyJs_Object_1670_]),'179':Js([PyJs_anonymous_1671_, PyJs_Object_1673_]),'180':Js([PyJs_anonymous_1674_, PyJs_Object_1676_]),'181':Js([PyJs_anonymous_1677_, PyJs_Object_1679_]),'182':Js([PyJs_anonymous_1680_, PyJs_Object_1682_]),'183':Js([PyJs_anonymous_1683_, PyJs_Object_1688_]),'184':Js([PyJs_anonymous_1689_, PyJs_Object_1692_]),'185':Js([PyJs_anonymous_1693_, PyJs_Object_1695_]),'186':Js([PyJs_anonymous_1696_, PyJs_Object_1697_]),'187':Js([PyJs_anonymous_1698_, PyJs_Object_1705_]),'188':Js([PyJs_anonymous_1706_, PyJs_Object_1710_]),'189':Js([PyJs_anonymous_1711_, PyJs_Object_1714_]),'190':Js([PyJs_anonymous_1715_, PyJs_Object_1717_]),'191':Js([PyJs_anonymous_1718_, PyJs_Object_1722_]),'192':Js([PyJs_anonymous_1723_, PyJs_Object_1727_]),'193':Js([PyJs_anonymous_1728_, PyJs_Object_1730_]),'194':Js([PyJs_anonymous_1731_, PyJs_Object_1733_]),'195':Js([PyJs_anonymous_1734_, PyJs_Object_1736_]),'196':Js([PyJs_anonymous_1737_, PyJs_Object_1739_]),'197':Js([PyJs_anonymous_1740_, PyJs_Object_1742_]),'198':Js([PyJs_anonymous_1743_, PyJs_Object_1745_]),'199':Js([PyJs_anonymous_1746_, PyJs_Object_1748_]),'200':Js([PyJs_anonymous_1749_, PyJs_Object_1754_]),'201':Js([PyJs_anonymous_1755_, PyJs_Object_1756_]),'202':Js([PyJs_anonymous_1757_, PyJs_Object_1759_]),'203':Js([PyJs_anonymous_1760_, PyJs_Object_1762_]),'204':Js([PyJs_anonymous_1763_, PyJs_Object_1765_]),'205':Js([PyJs_anonymous_1766_, PyJs_Object_1769_]),'206':Js([PyJs_anonymous_1770_, PyJs_Object_1776_]),'207':Js([PyJs_anonymous_1777_, PyJs_Object_1779_]),'208':Js([PyJs_anonymous_1780_, PyJs_Object_1782_]),'209':Js([PyJs_anonymous_1783_, PyJs_Object_1785_]),'210':Js([PyJs_anonymous_1786_, PyJs_Object_1789_]),'211':Js([PyJs_anonymous_1790_, PyJs_Object_1792_]),'212':Js([PyJs_anonymous_1793_, PyJs_Object_1794_]),'213':Js([PyJs_anonymous_1795_, PyJs_Object_1800_]),'214':Js([PyJs_anonymous_1801_, PyJs_Object_1838_]),'215':Js([PyJs_anonymous_1839_, PyJs_Object_1848_]),'216':Js([PyJs_anonymous_1849_, PyJs_Object_1854_]),'217':Js([PyJs_anonymous_1855_, PyJs_Object_1857_]),'218':Js([PyJs_anonymous_1858_, PyJs_Object_1859_]),'219':Js([PyJs_anonymous_1860_, PyJs_Object_1861_]),'220':Js([PyJs_anonymous_1862_, PyJs_Object_1863_]),'221':Js([PyJs_anonymous_1864_, PyJs_Object_1877_]),'222':Js([PyJs_anonymous_1878_, PyJs_Object_1880_]),'223':Js([PyJs_anonymous_1881_, PyJs_Object_1894_]),'224':Js([PyJs_anonymous_1895_, PyJs_Object_1898_]),'225':Js([PyJs_anonymous_1899_, PyJs_Object_1918_]),'226':Js([PyJs_anonymous_1919_, PyJs_Object_1926_]),'227':Js([PyJs_anonymous_1927_, PyJs_Object_1929_]),'228':Js([PyJs_anonymous_1930_, PyJs_Object_1936_]),'229':Js([PyJs_anonymous_1937_, PyJs_Object_1939_]),'230':Js([PyJs_anonymous_1940_, PyJs_Object_1949_]),'231':Js([PyJs_anonymous_1950_, PyJs_Object_1958_]),'232':Js([PyJs_anonymous_1959_, PyJs_Object_1980_]),'233':Js([PyJs_anonymous_1981_, PyJs_Object_1985_]),'234':Js([PyJs_anonymous_1986_, PyJs_Object_1999_]),'235':Js([PyJs_anonymous_2000_, PyJs_Object_2005_]),'236':Js([PyJs_anonymous_2006_, PyJs_Object_2016_]),'237':Js([PyJs_anonymous_2017_, PyJs_Object_2031_]),'238':Js([PyJs_anonymous_2032_, PyJs_Object_2039_]),'239':Js([PyJs_anonymous_2040_, PyJs_Object_2071_]),'240':Js([PyJs_anonymous_2072_, PyJs_Object_2079_]),'241':Js([PyJs_anonymous_2080_, PyJs_Object_2082_]),'242':Js([PyJs_anonymous_2083_, PyJs_Object_2092_]),'243':Js([PyJs_anonymous_2093_, PyJs_Object_2102_]),'244':Js([PyJs_anonymous_2103_, PyJs_Object_2178_]),'245':Js([PyJs_anonymous_2179_, PyJs_Object_2193_]),'246':Js([PyJs_anonymous_2194_, PyJs_Object_2206_]),'247':Js([PyJs_anonymous_2207_, PyJs_Object_2212_]),'248':Js([PyJs_anonymous_2213_, PyJs_Object_2219_]),'249':Js([PyJs_anonymous_2220_, PyJs_Object_2423_]),'250':Js([PyJs_anonymous_2424_, PyJs_Object_2528_]),'251':Js([PyJs_anonymous_2529_, PyJs_Object_2559_]),'252':Js([PyJs_anonymous_2560_, PyJs_Object_2648_]),'253':Js([PyJs_anonymous_2649_, PyJs_Object_2662_]),'254':Js([PyJs_anonymous_2663_, PyJs_Object_2664_]),'255':Js([PyJs_anonymous_2665_, PyJs_Object_2705_]),'256':Js([PyJs_anonymous_2706_, PyJs_Object_2712_]),'257':Js([PyJs_anonymous_2713_, PyJs_Object_2717_]),'258':Js([PyJs_anonymous_2718_, PyJs_Object_2826_]),'259':Js([PyJs_anonymous_2827_, PyJs_Object_2829_]),'260':Js([PyJs_anonymous_2830_, PyJs_Object_2834_]),'261':Js([PyJs_anonymous_2835_, PyJs_Object_2841_]),'262':Js([PyJs_anonymous_2842_, PyJs_Object_3223_]),'263':Js([PyJs_anonymous_3224_, PyJs_Object_3226_]),'264':Js([PyJs_anonymous_3227_, PyJs_Object_3230_]),'265':Js([PyJs_anonymous_3231_, PyJs_Object_3244_]),'266':Js([PyJs_anonymous_3245_, PyJs_Object_3248_]),'267':Js([PyJs_anonymous_3249_, PyJs_Object_3277_]),'268':Js([PyJs_anonymous_3278_, PyJs_Object_3282_]),'269':Js([PyJs_anonymous_3283_, PyJs_Object_3286_]),'270':Js([PyJs_anonymous_3287_, PyJs_Object_3295_]),'271':Js([PyJs_anonymous_3296_, PyJs_Object_3301_]),'272':Js([PyJs_anonymous_3302_, PyJs_Object_3304_]),'273':Js([PyJs_anonymous_3305_, PyJs_Object_3308_]),'274':Js([PyJs_anonymous_3309_, PyJs_Object_3314_]),'275':Js([PyJs_anonymous_3315_, PyJs_Object_3318_]),'276':Js([PyJs_anonymous_3319_, PyJs_Object_3321_]),'277':Js([PyJs_anonymous_3322_, PyJs_Object_3355_]),'278':Js([PyJs_anonymous_3356_, PyJs_Object_3357_]),'279':Js([PyJs_anonymous_3358_, PyJs_Object_3359_]),'280':Js([PyJs_anonymous_3360_, PyJs_Object_3364_]),'281':Js([PyJs_anonymous_3365_, PyJs_Object_3367_]),'282':Js([PyJs_anonymous_3368_, PyJs_Object_3372_]),'283':Js([PyJs_anonymous_3373_, PyJs_Object_3395_]),'284':Js([PyJs_anonymous_3396_, PyJs_Object_3424_]),'285':Js([PyJs_anonymous_3425_, PyJs_Object_3426_]),'286':Js([PyJs_anonymous_3427_, PyJs_Object_3428_]),'287':Js([PyJs_anonymous_3429_, PyJs_Object_3430_]),'288':Js([PyJs_anonymous_3431_, PyJs_Object_3432_]),'289':Js([PyJs_anonymous_3433_, PyJs_Object_3434_]),'290':Js([PyJs_anonymous_3435_, PyJs_Object_3436_]),'291':Js([PyJs_anonymous_3437_, PyJs_Object_3438_]),'292':Js([PyJs_anonymous_3439_, PyJs_Object_3440_]),'293':Js([PyJs_anonymous_3441_, PyJs_Object_3442_]),'294':Js([PyJs_anonymous_3443_, PyJs_Object_3444_]),'295':Js([PyJs_anonymous_3445_, PyJs_Object_3446_]),'296':Js([PyJs_anonymous_3447_, PyJs_Object_3448_]),'297':Js([PyJs_anonymous_3449_, PyJs_Object_3450_]),'298':Js([PyJs_anonymous_3451_, PyJs_Object_3452_]),'299':Js([PyJs_anonymous_3453_, PyJs_Object_3454_]),'300':Js([PyJs_anonymous_3455_, PyJs_Object_3456_]),'301':Js([PyJs_anonymous_3457_, PyJs_Object_3458_]),'302':Js([PyJs_anonymous_3459_, PyJs_Object_3460_]),'303':Js([PyJs_anonymous_3461_, PyJs_Object_3462_]),'304':Js([PyJs_anonymous_3463_, PyJs_Object_3464_]),'305':Js([PyJs_anonymous_3465_, PyJs_Object_3466_]),'306':Js([PyJs_anonymous_3467_, PyJs_Object_3468_]),'307':Js([PyJs_anonymous_3469_, PyJs_Object_3470_]),'308':Js([PyJs_anonymous_3471_, PyJs_Object_3472_]),'309':Js([PyJs_anonymous_3473_, PyJs_Object_3474_]),'310':Js([PyJs_anonymous_3475_, PyJs_Object_3476_]),'311':Js([PyJs_anonymous_3477_, PyJs_Object_3478_]),'312':Js([PyJs_anonymous_3479_, PyJs_Object_3480_]),'313':Js([PyJs_anonymous_3481_, PyJs_Object_3482_]),'314':Js([PyJs_anonymous_3483_, PyJs_Object_3491_]),'315':Js([PyJs_anonymous_3492_, PyJs_Object_3494_]),'316':Js([PyJs_anonymous_3495_, PyJs_Object_3496_]),'317':Js([PyJs_anonymous_3497_, PyJs_Object_3498_]),'318':Js([PyJs_anonymous_3499_, PyJs_Object_3500_]),'319':Js([PyJs_anonymous_3501_, PyJs_Object_3502_]),'320':Js([PyJs_anonymous_3503_, PyJs_Object_3504_]),'321':Js([PyJs_anonymous_3505_, PyJs_Object_3506_]),'322':Js([PyJs_anonymous_3507_, PyJs_Object_3508_]),'323':Js([PyJs_anonymous_3509_, PyJs_Object_3510_]),'324':Js([PyJs_anonymous_3511_, PyJs_Object_3512_]),'325':Js([PyJs_anonymous_3513_, PyJs_Object_3514_]),'326':Js([PyJs_anonymous_3515_, PyJs_Object_3516_]),'327':Js([PyJs_anonymous_3517_, PyJs_Object_3518_]),'328':Js([PyJs_anonymous_3519_, PyJs_Object_3520_]),'329':Js([PyJs_anonymous_3521_, PyJs_Object_3522_]),'330':Js([PyJs_anonymous_3523_, PyJs_Object_3524_]),'331':Js([PyJs_anonymous_3525_, PyJs_Object_3526_]),'332':Js([PyJs_anonymous_3527_, PyJs_Object_3528_]),'333':Js([PyJs_anonymous_3529_, PyJs_Object_3532_]),'334':Js([PyJs_anonymous_3533_, PyJs_Object_3535_]),'335':Js([PyJs_anonymous_3536_, PyJs_Object_3538_]),'336':Js([PyJs_anonymous_3539_, PyJs_Object_3541_]),'337':Js([PyJs_anonymous_3542_, PyJs_Object_3544_]),'338':Js([PyJs_anonymous_3545_, PyJs_Object_3546_]),'339':Js([PyJs_anonymous_3547_, PyJs_Object_3552_]),'340':Js([PyJs_anonymous_3553_, PyJs_Object_3555_]),'341':Js([PyJs_anonymous_3556_, PyJs_Object_3558_]),'342':Js([PyJs_anonymous_3559_, PyJs_Object_3560_]),'343':Js([PyJs_anonymous_3561_, PyJs_Object_3562_]),'344':Js([PyJs_anonymous_3563_, PyJs_Object_3564_]),'345':Js([PyJs_anonymous_3565_, PyJs_Object_3566_]),'346':Js([PyJs_anonymous_3567_, PyJs_Object_3568_]),'347':Js([PyJs_anonymous_3569_, PyJs_Object_3570_]),'348':Js([PyJs_anonymous_3571_, PyJs_Object_3573_]),'349':Js([PyJs_anonymous_3574_, PyJs_Object_3575_]),'350':Js([PyJs_anonymous_3576_, PyJs_Object_3578_]),'351':Js([PyJs_anonymous_3579_, PyJs_Object_3580_]),'352':Js([PyJs_anonymous_3581_, PyJs_Object_3582_]),'353':Js([PyJs_anonymous_3583_, PyJs_Object_3584_]),'354':Js([PyJs_anonymous_3585_, PyJs_Object_3586_]),'355':Js([PyJs_anonymous_3587_, PyJs_Object_3588_]),'356':Js([PyJs_anonymous_3589_, PyJs_Object_3590_]),'357':Js([PyJs_anonymous_3591_, PyJs_Object_3592_]),'358':Js([PyJs_anonymous_3593_, PyJs_Object_3594_]),'359':Js([PyJs_anonymous_3595_, PyJs_Object_3596_]),'360':Js([PyJs_anonymous_3597_, PyJs_Object_3598_]),'361':Js([PyJs_anonymous_3599_, PyJs_Object_3600_]),'362':Js([PyJs_anonymous_3601_, PyJs_Object_3603_]),'363':Js([PyJs_anonymous_3604_, PyJs_Object_3605_]),'364':Js([PyJs_anonymous_3606_, PyJs_Object_3609_]),'365':Js([PyJs_anonymous_3610_, PyJs_Object_3611_]),'366':Js([PyJs_anonymous_3612_, PyJs_Object_3613_]),'367':Js([PyJs_anonymous_3614_, PyJs_Object_3616_]),'368':Js([PyJs_anonymous_3617_, PyJs_Object_3618_]),'369':Js([PyJs_anonymous_3619_, PyJs_Object_3620_]),'370':Js([PyJs_anonymous_3621_, PyJs_Object_3623_]),'371':Js([PyJs_anonymous_3624_, PyJs_Object_3626_]),'372':Js([PyJs_anonymous_3627_, PyJs_Object_3629_]),'373':Js([PyJs_anonymous_3630_, PyJs_Object_3633_]),'374':Js([PyJs_anonymous_3634_, PyJs_Object_3636_]),'375':Js([PyJs_anonymous_3637_, PyJs_Object_3639_]),'376':Js([PyJs_anonymous_3640_, PyJs_Object_3641_]),'377':Js([PyJs_anonymous_3642_, PyJs_Object_3644_]),'378':Js([PyJs_anonymous_3645_, PyJs_Object_3646_]),'379':Js([PyJs_anonymous_3647_, PyJs_Object_3648_]),'380':Js([PyJs_anonymous_3649_, PyJs_Object_3650_]),'381':Js([PyJs_anonymous_3651_, PyJs_Object_3652_]),'382':Js([PyJs_anonymous_3653_, PyJs_Object_3654_]),'383':Js([PyJs_anonymous_3655_, PyJs_Object_3656_]),'384':Js([PyJs_anonymous_3657_, PyJs_Object_3658_]),'385':Js([PyJs_anonymous_3659_, PyJs_Object_3662_]),'386':Js([PyJs_anonymous_3663_, PyJs_Object_3664_]),'387':Js([PyJs_anonymous_3665_, PyJs_Object_3666_]),'388':Js([PyJs_anonymous_3667_, PyJs_Object_3669_]),'389':Js([PyJs_anonymous_3670_, PyJs_Object_3671_]),'390':Js([PyJs_anonymous_3672_, PyJs_Object_3673_]),'391':Js([PyJs_anonymous_3674_, PyJs_Object_3675_]),'392':Js([PyJs_anonymous_3676_, PyJs_Object_3677_]),'393':Js([PyJs_anonymous_3678_, PyJs_Object_3679_]),'394':Js([PyJs_anonymous_3680_, PyJs_Object_3681_]),'395':Js([PyJs_anonymous_3682_, PyJs_Object_3683_]),'396':Js([PyJs_anonymous_3684_, PyJs_Object_3685_]),'397':Js([PyJs_anonymous_3686_, PyJs_Object_3688_]),'398':Js([PyJs_anonymous_3689_, PyJs_Object_3690_]),'399':Js([PyJs_anonymous_3691_, PyJs_Object_3692_]),'400':Js([PyJs_anonymous_3693_, PyJs_Object_3694_]),'401':Js([PyJs_anonymous_3695_, PyJs_Object_3696_]),'402':Js([PyJs_anonymous_3697_, PyJs_Object_3698_]),'403':Js([PyJs_anonymous_3699_, PyJs_Object_3700_]),'404':Js([PyJs_anonymous_3701_, PyJs_Object_3702_]),'405':Js([PyJs_anonymous_3703_, PyJs_Object_3705_]),'406':Js([PyJs_anonymous_3706_, PyJs_Object_3707_]),'407':Js([PyJs_anonymous_3708_, PyJs_Object_3709_]),'408':Js([PyJs_anonymous_3710_, PyJs_Object_3711_]),'409':Js([PyJs_anonymous_3712_, PyJs_Object_3713_]),'410':Js([PyJs_anonymous_3714_, PyJs_Object_3715_]),'411':Js([PyJs_anonymous_3716_, PyJs_Object_3717_]),'412':Js([PyJs_anonymous_3718_, PyJs_Object_3719_]),'413':Js([PyJs_anonymous_3720_, PyJs_Object_3721_]),'414':Js([PyJs_anonymous_3722_, PyJs_Object_3724_]),'415':Js([PyJs_anonymous_3725_, PyJs_Object_3726_]),'416':Js([PyJs_anonymous_3727_, PyJs_Object_3728_]),'417':Js([PyJs_anonymous_3729_, PyJs_Object_3730_]),'418':Js([PyJs_anonymous_3731_, PyJs_Object_3732_]),'419':Js([PyJs_anonymous_3733_, PyJs_Object_3735_]),'420':Js([PyJs_anonymous_3736_, PyJs_Object_3738_]),'421':Js([PyJs_anonymous_3739_, PyJs_Object_3740_]),'422':Js([PyJs_anonymous_3741_, PyJs_Object_3744_]),'423':Js([PyJs_anonymous_3745_, PyJs_Object_3746_]),'424':Js([PyJs_anonymous_3747_, PyJs_Object_3748_]),'425':Js([PyJs_anonymous_3749_, PyJs_Object_3751_]),'426':Js([PyJs_anonymous_3752_, PyJs_Object_3753_]),'427':Js([PyJs_anonymous_3754_, PyJs_Object_3755_]),'428':Js([PyJs_anonymous_3756_, PyJs_Object_3757_]),'429':Js([PyJs_anonymous_3758_, PyJs_Object_3759_]),'430':Js([PyJs_anonymous_3760_, PyJs_Object_3761_]),'431':Js([PyJs_anonymous_3762_, PyJs_Object_3763_]),'432':Js([PyJs_anonymous_3764_, PyJs_Object_3767_]),'433':Js([PyJs_anonymous_3768_, PyJs_Object_3769_]),'434':Js([PyJs_anonymous_3770_, PyJs_Object_3771_]),'435':Js([PyJs_anonymous_3772_, PyJs_Object_3775_]),'436':Js([PyJs_anonymous_3776_, PyJs_Object_3779_]),'437':Js([PyJs_anonymous_3780_, PyJs_Object_3782_]),'438':Js([PyJs_anonymous_3783_, PyJs_Object_3784_]),'439':Js([PyJs_anonymous_3785_, PyJs_Object_3786_]),'440':Js([PyJs_anonymous_3787_, PyJs_Object_3788_]),'441':Js([PyJs_anonymous_3789_, PyJs_Object_3790_]),'442':Js([PyJs_anonymous_3791_, PyJs_Object_3793_]),'443':Js([PyJs_anonymous_3794_, PyJs_Object_3795_]),'444':Js([PyJs_anonymous_3796_, PyJs_Object_3797_]),'445':Js([PyJs_anonymous_3798_, PyJs_Object_3799_]),'446':Js([PyJs_anonymous_3800_, PyJs_Object_3801_]),'447':Js([PyJs_anonymous_3802_, PyJs_Object_3803_]),'448':Js([PyJs_anonymous_3804_, PyJs_Object_3805_]),'449':Js([PyJs_anonymous_3806_, PyJs_Object_3807_]),'450':Js([PyJs_anonymous_3808_, PyJs_Object_3809_]),'451':Js([PyJs_anonymous_3810_, PyJs_Object_3811_]),'452':Js([PyJs_anonymous_3812_, PyJs_Object_3813_]),'453':Js([PyJs_anonymous_3814_, PyJs_Object_3815_]),'454':Js([PyJs_anonymous_3816_, PyJs_Object_3817_]),'455':Js([PyJs_anonymous_3818_, PyJs_Object_3819_]),'456':Js([PyJs_anonymous_3820_, PyJs_Object_3821_]),'457':Js([PyJs_anonymous_3822_, PyJs_Object_3823_]),'458':Js([PyJs_anonymous_3824_, PyJs_Object_3825_]),'459':Js([PyJs_anonymous_3826_, PyJs_Object_3827_]),'460':Js([PyJs_anonymous_3828_, PyJs_Object_3829_]),'461':Js([PyJs_anonymous_3830_, PyJs_Object_3831_]),'462':Js([PyJs_anonymous_3832_, PyJs_Object_3834_]),'463':Js([PyJs_anonymous_3835_, PyJs_Object_3836_]),'464':Js([PyJs_anonymous_3837_, PyJs_Object_3838_]),'465':Js([PyJs_anonymous_3839_, PyJs_Object_3840_]),'466':Js([PyJs_anonymous_3841_, PyJs_Object_3842_]),'467':Js([PyJs_anonymous_3843_, PyJs_Object_3844_]),'468':Js([PyJs_anonymous_3845_, PyJs_Object_3846_]),'469':Js([PyJs_anonymous_3847_, PyJs_Object_3848_]),'470':Js([PyJs_anonymous_3849_, PyJs_Object_3850_]),'471':Js([PyJs_anonymous_3851_, PyJs_Object_3852_]),'472':Js([PyJs_anonymous_3853_, PyJs_Object_3854_]),'473':Js([PyJs_anonymous_3855_, PyJs_Object_3860_]),'474':Js([PyJs_anonymous_3861_, PyJs_Object_3862_]),'475':Js([PyJs_anonymous_3863_, PyJs_Object_3864_]),'476':Js([PyJs_anonymous_3865_, PyJs_Object_3866_]),'477':Js([PyJs_anonymous_3867_, PyJs_Object_3869_]),'478':Js([PyJs_anonymous_3870_, PyJs_Object_3872_]),'479':Js([PyJs_anonymous_3873_, PyJs_Object_3874_]),'480':Js([PyJs_anonymous_3875_, PyJs_Object_3876_]),'481':Js([PyJs_anonymous_3877_, PyJs_Object_3878_]),'482':Js([PyJs_anonymous_3879_, PyJs_Object_3880_]),'483':Js([PyJs_anonymous_3881_, PyJs_Object_3882_]),'484':Js([PyJs_anonymous_3883_, PyJs_Object_3885_]),'485':Js([PyJs_anonymous_3886_, PyJs_Object_3888_]),'486':Js([PyJs_anonymous_3889_, PyJs_Object_3890_]),'487':Js([PyJs_anonymous_3891_, PyJs_Object_3892_]),'488':Js([PyJs_anonymous_3893_, PyJs_Object_3894_]),'489':Js([PyJs_anonymous_3895_, PyJs_Object_3896_]),'490':Js([PyJs_anonymous_3897_, PyJs_Object_3898_]),'491':Js([PyJs_anonymous_3899_, PyJs_Object_3900_]),'492':Js([PyJs_anonymous_3901_, PyJs_Object_3902_]),'493':Js([PyJs_anonymous_3903_, PyJs_Object_3904_]),'494':Js([PyJs_anonymous_3905_, PyJs_Object_3906_]),'495':Js([PyJs_anonymous_3907_, PyJs_Object_3908_]),'496':Js([PyJs_anonymous_3909_, PyJs_Object_3910_]),'497':Js([PyJs_anonymous_3911_, PyJs_Object_3914_]),'498':Js([PyJs_anonymous_3915_, PyJs_Object_3917_]),'499':Js([PyJs_anonymous_3918_, PyJs_Object_3920_]),'500':Js([PyJs_anonymous_3921_, PyJs_Object_3927_]),'501':Js([PyJs_anonymous_3928_, PyJs_Object_3983_]),'502':Js([PyJs_anonymous_3984_, PyJs_Object_3991_]),'503':Js([PyJs_anonymous_3992_, PyJs_Object_3994_]),'504':Js([PyJs_anonymous_3995_, PyJs_Object_4001_]),'505':Js([PyJs_anonymous_4002_, PyJs_Object_4010_]),'506':Js([PyJs_anonymous_4011_, PyJs_Object_4027_]),'507':Js([PyJs_anonymous_4028_, PyJs_Object_4030_]),'508':Js([PyJs_anonymous_4031_, PyJs_Object_4033_]),'509':Js([PyJs_anonymous_4034_, PyJs_Object_4042_]),'510':Js([PyJs_anonymous_4043_, PyJs_Object_4046_]),'511':Js([PyJs_anonymous_4047_, PyJs_Object_4050_]),'512':Js([PyJs_anonymous_4051_, PyJs_Object_4053_]),'513':Js([PyJs_anonymous_4054_, PyJs_Object_4059_]),'514':Js([PyJs_anonymous_4060_, PyJs_Object_4062_]),'515':Js([PyJs_anonymous_4063_, PyJs_Object_4119_]),'516':Js([PyJs_anonymous_4120_, PyJs_Object_4145_]),'517':Js([PyJs_anonymous_4146_, PyJs_Object_4176_]),'518':Js([PyJs_anonymous_4177_, PyJs_Object_4183_]),'519':Js([PyJs_anonymous_4184_, PyJs_Object_4185_]),'520':Js([PyJs_anonymous_4186_, PyJs_Object_4188_]),'521':Js([PyJs_anonymous_4189_, PyJs_Object_4193_]),'522':Js([PyJs_anonymous_4194_, PyJs_Object_4196_]),'523':Js([PyJs_anonymous_4197_, PyJs_Object_4198_]),'524':Js([PyJs_anonymous_4199_, PyJs_Object_4214_]),'525':Js([PyJs_anonymous_4215_, PyJs_Object_4273_]),'526':Js([PyJs_anonymous_4274_, PyJs_Object_4276_]),'527':Js([PyJs_anonymous_4277_, PyJs_Object_4280_]),'528':Js([PyJs_anonymous_4281_, PyJs_Object_4284_]),'529':Js([PyJs_anonymous_4285_, PyJs_Object_4291_]),'530':Js([PyJs_anonymous_4292_, PyJs_Object_4308_]),'531':Js([PyJs_anonymous_4309_, PyJs_Object_4319_]),'532':Js([PyJs_anonymous_4320_, PyJs_Object_4322_]),'533':Js([PyJs_anonymous_4323_, PyJs_Object_4325_]),'534':Js([PyJs_anonymous_4326_, PyJs_Object_4351_])})
PyJs_Object_4352_ = Js({})
@Js
def PyJs_e_4353_(t, n, r, this, arguments, var=var):
    var = Scope({'e':PyJs_e_4353_, 'this':this, 'n':n, 'r':r, 'arguments':arguments, 't':t}, var)
    var.registers(['i', 'o', 'n', 's', 'r', 't'])
    @Js
    def PyJsHoisted_s_(o, u, this, arguments, var=var):
        var = Scope({'this':this, 'u':u, 'arguments':arguments, 'o':o}, var)
        var.registers(['a', 'u', 'l', 'o', 'f'])
        if var.get('n').get(var.get('o')).neg():
            if var.get('t').get(var.get('o')).neg():
                var.put('a', ((var.get('require',throw=False).typeof()==Js('function')) and var.get('require')))
                if (var.get('u').neg() and var.get('a')):
                    return var.get('a')(var.get('o'), Js(0.0).neg())
                if var.get('i'):
                    return var.get('i')(var.get('o'), Js(0.0).neg())
                var.put('f', var.get('Error').create(((Js("Cannot find module '")+var.get('o'))+Js("'"))))
                PyJsTempException = JsToPyException(PyJsComma(var.get('f').put('code', Js('MODULE_NOT_FOUND')),var.get('f')))
                raise PyJsTempException
            PyJs_Object_4355_ = Js({})
            PyJs_Object_4354_ = Js({'exports':PyJs_Object_4355_})
            var.put('l', var.get('n').put(var.get('o'), PyJs_Object_4354_))
            @Js
            def PyJs_anonymous_4356_(e, this, arguments, var=var):
                var = Scope({'this':this, 'e':e, 'arguments':arguments}, var)
                var.registers(['e', 'n'])
                var.put('n', var.get('t').get(var.get('o')).get('1').get(var.get('e')))
                return var.get('s')((var.get('n') if var.get('n') else var.get('e')))
            PyJs_anonymous_4356_._set_name('anonymous')
            var.get('t').get(var.get('o')).get('0').callprop('call', var.get('l').get('exports'), PyJs_anonymous_4356_, var.get('l'), var.get('l').get('exports'), var.get('e'), var.get('t'), var.get('n'), var.get('r'))
        return var.get('n').get(var.get('o')).get('exports')
    PyJsHoisted_s_.__name__ = 's'
    var.put('s', PyJsHoisted_s_)
    pass
    var.put('i', ((var.get('require',throw=False).typeof()==Js('function')) and var.get('require')))
    #for JS loop
    var.put('o', Js(0.0))
    while (var.get('o')<var.get('r').get('length')):
        try:
            var.get('s')(var.get('r').get(var.get('o')))
        finally:
                (var.put('o',Js(var.get('o').to_number())+Js(1))-Js(1))
    return var.get('s')
PyJs_e_4353_._set_name('e')
PyJs_e_4353_(PyJs_Object_0_, PyJs_Object_4352_, Js([Js(1.0)]))
pass


# Add lib to the module scope
babel = var.to_python()